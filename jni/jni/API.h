#pragma once
#include "APIHelper.h"
namespace android { 
struct Manifest_permission;
struct R_attr;
struct R_id;
}

namespace android { namespace accounts { 
struct Account;
}}

namespace android { namespace animation { 
struct Animator;
struct Animator_AnimatorListener;
struct Animator_AnimatorPauseListener;
struct Keyframe;
struct LayoutTransition;
struct LayoutTransition_TransitionListener;
struct PropertyValuesHolder;
struct StateListAnimator;
struct TimeInterpolator;
struct TypeConverter;
struct TypeEvaluator;
struct ValueAnimator;
struct ValueAnimator_AnimatorUpdateListener;
}}

namespace android { namespace app { 
struct ActionBar;
struct ActionBar_LayoutParams;
struct ActionBar_OnMenuVisibilityListener;
struct ActionBar_OnNavigationListener;
struct ActionBar_Tab;
struct ActionBar_TabListener;
struct Activity;
struct ActivityManager_TaskDescription;
struct AlertDialog;
struct AlertDialog_Builder;
struct Application;
struct Application_ActivityLifecycleCallbacks;
struct Application_OnProvideAssistDataListener;
struct Dialog;
struct Fragment;
struct Fragment_SavedState;
struct FragmentManager;
struct FragmentManager_BackStackEntry;
struct FragmentManager_FragmentLifecycleCallbacks;
struct FragmentManager_OnBackStackChangedListener;
struct FragmentTransaction;
struct LoaderManager;
struct LoaderManager_LoaderCallbacks;
struct PendingIntent;
struct PendingIntent_OnFinished;
struct PictureInPictureParams;
struct PictureInPictureUiState;
struct SharedElementCallback;
struct SharedElementCallback_OnSharedElementsReadyListener;
struct TaskStackBuilder;
struct VoiceInteractor;
struct VoiceInteractor_Request;
}}

namespace android { namespace app { namespace assist { 
struct AssistContent;
}}}

namespace android { namespace content { 
struct AttributionSource;
struct BroadcastReceiver;
struct BroadcastReceiver_PendingResult;
struct ClipData;
struct ClipData_Item;
struct ClipDescription;
struct ComponentCallbacks;
struct ComponentCallbacks2;
struct ComponentName;
struct ContentProvider;
struct ContentProvider_CallingIdentity;
struct ContentProvider_PipeDataWriter;
struct ContentProviderClient;
struct ContentProviderResult;
struct ContentResolver;
struct ContentResolver_MimeTypeInfo;
struct ContentValues;
struct Context;
struct ContextParams;
struct ContextWrapper;
struct DialogInterface;
struct DialogInterface_OnCancelListener;
struct DialogInterface_OnClickListener;
struct DialogInterface_OnDismissListener;
struct DialogInterface_OnKeyListener;
struct DialogInterface_OnMultiChoiceClickListener;
struct DialogInterface_OnShowListener;
struct Intent;
struct IntentFilter;
struct IntentFilter_AuthorityEntry;
struct IntentSender;
struct IntentSender_OnFinished;
struct Loader;
struct Loader_OnLoadCanceledListener;
struct Loader_OnLoadCompleteListener;
struct LocusId;
struct ServiceConnection;
struct SharedPreferences;
struct SharedPreferences_Editor;
struct SharedPreferences_OnSharedPreferenceChangeListener;
struct SyncAdapterType;
struct SyncInfo;
struct SyncRequest;
struct SyncStatusObserver;
}}

namespace android { namespace content { namespace pm { 
struct ActivityInfo;
struct ActivityInfo_WindowLayout;
struct ApplicationInfo;
struct Attribution;
struct ChangedPackages;
struct ComponentInfo;
struct ConfigurationInfo;
struct FeatureGroupInfo;
struct FeatureInfo;
struct InstallSourceInfo;
struct InstrumentationInfo;
struct ModuleInfo;
struct PackageInfo;
struct PackageInstaller;
struct PackageInstaller_Session;
struct PackageInstaller_SessionCallback;
struct PackageInstaller_SessionInfo;
struct PackageInstaller_SessionParams;
struct PackageItemInfo;
struct PackageManager;
struct PackageManager_OnChecksumsReadyListener;
struct PackageManager_Property;
struct PathPermission;
struct PermissionGroupInfo;
struct PermissionInfo;
struct ProviderInfo;
struct ResolveInfo;
struct ServiceInfo;
struct Signature;
struct SigningInfo;
struct VersionedPackage;
}}}

namespace android { namespace content { namespace res { 
struct AssetFileDescriptor;
struct AssetManager;
struct ColorStateList;
struct Configuration;
struct Resources;
struct Resources_Theme;
struct TypedArray;
struct XmlResourceParser;
}}}

namespace android { namespace content { namespace res { namespace loader { 
struct AssetsProvider;
struct ResourcesLoader;
struct ResourcesProvider;
}}}}

namespace android { namespace database { 
struct CharArrayBuffer;
struct ContentObserver;
struct Cursor;
struct DataSetObserver;
struct DatabaseErrorHandler;
}}

namespace android { namespace database { namespace sqlite { 
struct SQLiteClosable;
struct SQLiteCursorDriver;
struct SQLiteDatabase;
struct SQLiteDatabase_CursorFactory;
struct SQLiteDatabase_OpenParams;
struct SQLiteProgram;
struct SQLiteQuery;
struct SQLiteStatement;
struct SQLiteTransactionListener;
}}}

namespace android { namespace graphics { 
struct Bitmap;
struct Bitmap_CompressFormat;
struct Bitmap_Config;
struct BitmapFactory;
struct BitmapFactory_Options;
struct BlendMode;
struct Canvas;
struct Canvas_EdgeType;
struct Canvas_VertexMode;
struct Color;
struct ColorFilter;
struct ColorSpace;
struct ColorSpace_Adaptation;
struct ColorSpace_Connector;
struct ColorSpace_Model;
struct ColorSpace_Named;
struct ColorSpace_RenderIntent;
struct ColorSpace_Rgb_TransferParameters;
struct DrawFilter;
struct Insets;
struct MaskFilter;
struct Matrix;
struct Matrix_ScaleToFit;
struct Movie;
struct NinePatch;
struct Outline;
struct Paint;
struct Paint_Align;
struct Paint_Cap;
struct Paint_FontMetrics;
struct Paint_FontMetricsInt;
struct Paint_Join;
struct Paint_Style;
struct Path;
struct Path_Direction;
struct Path_FillType;
struct Path_Op;
struct PathEffect;
struct Picture;
struct Point;
struct PorterDuff_Mode;
struct RecordingCanvas;
struct Rect;
struct RectF;
struct Region;
struct Region_Op;
struct RenderEffect;
struct RenderNode;
struct Shader;
struct Shader_TileMode;
struct SurfaceTexture;
struct SurfaceTexture_OnFrameAvailableListener;
struct Typeface;
struct Xfermode;
}}

namespace android { namespace graphics { namespace drawable { 
struct Drawable;
struct Drawable_Callback;
struct Drawable_ConstantState;
struct GradientDrawable;
struct GradientDrawable_Orientation;
struct Icon;
struct Icon_OnDrawableLoadedListener;
}}}

namespace android { namespace graphics { namespace fonts { 
struct Font;
struct FontStyle;
struct FontVariationAxis;
}}}

namespace android { namespace graphics { namespace text { 
struct MeasuredText;
}}}

namespace android { namespace hardware { 
struct BatteryState;
struct HardwareBuffer;
struct Sensor;
struct SensorDirectChannel;
struct SensorEvent;
struct SensorEventListener;
struct SensorListener;
struct SensorManager;
struct SensorManager_DynamicSensorCallback;
struct TriggerEvent;
struct TriggerEventListener;
}}

namespace android { namespace hardware { namespace display { 
struct DeviceProductInfo;
}}}

namespace android { namespace hardware { namespace lights { 
struct Light;
struct LightState;
struct LightsManager;
struct LightsManager_LightsSession;
struct LightsRequest;
}}}

namespace android { namespace icu { namespace util { 
struct ULocale;
struct ULocale_AvailableType;
struct ULocale_Category;
}}}

namespace android { namespace media { 
struct AudioAttributes;
struct MediaDescription;
struct MediaMetadata;
struct Rating;
}}

namespace android { namespace media { namespace session { 
struct MediaController;
struct MediaController_Callback;
struct MediaController_PlaybackInfo;
struct MediaController_TransportControls;
struct MediaSession_Token;
struct PlaybackState;
struct PlaybackState_CustomAction;
}}}

namespace android { namespace net { 
struct Uri;
struct Uri_Builder;
}}

namespace android { namespace os { 
struct BaseBundle;
struct Build;
struct Build_VERSION;
struct Bundle;
struct CancellationSignal;
struct CancellationSignal_OnCancelListener;
struct CombinedVibration;
struct CombinedVibration_ParallelCombination;
struct Environment;
struct Handler;
struct Handler_Callback;
struct IBinder;
struct IBinder_DeathRecipient;
struct IInterface;
struct LocaleList;
struct Looper;
struct MemoryFile;
struct Message;
struct MessageQueue;
struct MessageQueue_IdleHandler;
struct MessageQueue_OnFileDescriptorEventListener;
struct Messenger;
struct Parcel;
struct ParcelFileDescriptor;
struct ParcelFileDescriptor_OnCloseListener;
struct Parcelable;
struct Parcelable_ClassLoaderCreator;
struct Parcelable_Creator;
struct PatternMatcher;
struct PersistableBundle;
struct ResultReceiver;
struct UserHandle;
struct VibrationAttributes;
struct VibrationEffect;
struct VibrationEffect_Composition;
struct Vibrator;
struct VibratorManager;
}}

namespace android { namespace text { 
struct Editable;
struct Editable_Factory;
struct GetChars;
struct InputFilter;
struct InputType;
struct Layout;
struct Layout_Alignment;
struct Layout_Directions;
struct NoCopySpan;
struct ParcelableSpan;
struct PrecomputedText_Params;
struct Spannable;
struct Spannable_Factory;
struct Spanned;
struct TextDirectionHeuristic;
struct TextPaint;
struct TextUtils_TruncateAt;
struct TextWatcher;
}}

namespace android { namespace text { namespace method { 
struct KeyListener;
struct MovementMethod;
struct TransformationMethod;
}}}

namespace android { namespace text { namespace style { 
struct CharacterStyle;
struct ClickableSpan;
struct URLSpan;
struct UpdateAppearance;
}}}

namespace android { namespace transition { 
struct PathMotion;
struct Scene;
struct Transition;
struct Transition_EpicenterCallback;
struct Transition_TransitionListener;
struct TransitionManager;
struct TransitionPropagation;
struct TransitionValues;
}}

namespace android { namespace util { 
struct ArrayMap;
struct AttributeSet;
struct Base64;
struct DisplayMetrics;
struct LongSparseArray;
struct Printer;
struct Property;
struct Size;
struct SizeF;
struct SparseArray;
struct SparseBooleanArray;
struct TypedValue;
}}

namespace android { namespace view { 
struct ActionMode;
struct ActionMode_Callback;
struct ActionProvider;
struct ActionProvider_VisibilityListener;
struct AttachedSurfaceControl;
struct ContentInfo;
struct ContextMenu;
struct ContextMenu_ContextMenuInfo;
struct ContextThemeWrapper;
struct Display;
struct Display_HdrCapabilities;
struct Display_Mode;
struct DisplayCutout;
struct DragAndDropPermissions;
struct DragEvent;
struct FrameMetrics;
struct Gravity;
struct InputDevice;
struct InputDevice_MotionRange;
struct InputEvent;
struct InputQueue;
struct InputQueue_Callback;
struct KeyCharacterMap;
struct KeyCharacterMap_KeyData;
struct KeyEvent;
struct KeyEvent_Callback;
struct KeyEvent_DispatcherState;
struct LayoutInflater;
struct LayoutInflater_Factory;
struct LayoutInflater_Factory2;
struct LayoutInflater_Filter;
struct Menu;
struct MenuInflater;
struct MenuItem;
struct MenuItem_OnActionExpandListener;
struct MenuItem_OnMenuItemClickListener;
struct MotionEvent;
struct MotionEvent_PointerCoords;
struct MotionEvent_PointerProperties;
struct OnReceiveContentListener;
struct PointerIcon;
struct RoundedCorner;
struct ScrollCaptureCallback;
struct ScrollCaptureSession;
struct SearchEvent;
struct SubMenu;
struct Surface;
struct SurfaceControl;
struct SurfaceControl_Transaction;
struct SurfaceHolder;
struct SurfaceHolder_Callback;
struct SurfaceHolder_Callback2;
struct TouchDelegate;
struct View;
struct View_AccessibilityDelegate;
struct View_DragShadowBuilder;
struct View_OnApplyWindowInsetsListener;
struct View_OnAttachStateChangeListener;
struct View_OnCapturedPointerListener;
struct View_OnClickListener;
struct View_OnContextClickListener;
struct View_OnCreateContextMenuListener;
struct View_OnDragListener;
struct View_OnFocusChangeListener;
struct View_OnGenericMotionListener;
struct View_OnHoverListener;
struct View_OnKeyListener;
struct View_OnLayoutChangeListener;
struct View_OnLongClickListener;
struct View_OnScrollChangeListener;
struct View_OnSystemUiVisibilityChangeListener;
struct View_OnTouchListener;
struct View_OnUnhandledKeyEventListener;
struct ViewGroup;
struct ViewGroup_LayoutParams;
struct ViewGroup_MarginLayoutParams;
struct ViewGroup_OnHierarchyChangeListener;
struct ViewGroupOverlay;
struct ViewManager;
struct ViewOutlineProvider;
struct ViewOverlay;
struct ViewParent;
struct ViewPropertyAnimator;
struct ViewStructure;
struct ViewStructure_HtmlInfo;
struct ViewStructure_HtmlInfo_Builder;
struct ViewTreeObserver;
struct ViewTreeObserver_OnDrawListener;
struct ViewTreeObserver_OnGlobalFocusChangeListener;
struct ViewTreeObserver_OnGlobalLayoutListener;
struct ViewTreeObserver_OnPreDrawListener;
struct ViewTreeObserver_OnScrollChangedListener;
struct ViewTreeObserver_OnTouchModeChangeListener;
struct ViewTreeObserver_OnWindowAttachListener;
struct ViewTreeObserver_OnWindowFocusChangeListener;
struct Window;
struct Window_Callback;
struct Window_OnFrameMetricsAvailableListener;
struct Window_OnRestrictedCaptionAreaChangedListener;
struct WindowId;
struct WindowId_FocusObserver;
struct WindowInsets;
struct WindowInsetsAnimation;
struct WindowInsetsAnimation_Bounds;
struct WindowInsetsAnimation_Callback;
struct WindowInsetsAnimationControlListener;
struct WindowInsetsAnimationController;
struct WindowInsetsController;
struct WindowInsetsController_OnControllableInsetsChangedListener;
struct WindowManager;
struct WindowManager_LayoutParams;
struct WindowMetrics;
}}

namespace android { namespace view { namespace accessibility { 
struct AccessibilityEvent;
struct AccessibilityEventSource;
struct AccessibilityNodeInfo;
struct AccessibilityNodeInfo_AccessibilityAction;
struct AccessibilityNodeInfo_CollectionInfo;
struct AccessibilityNodeInfo_CollectionItemInfo;
struct AccessibilityNodeInfo_ExtraRenderingInfo;
struct AccessibilityNodeInfo_RangeInfo;
struct AccessibilityNodeInfo_TouchDelegateInfo;
struct AccessibilityNodeProvider;
struct AccessibilityRecord;
struct AccessibilityWindowInfo;
}}}

namespace android { namespace view { namespace animation { 
struct Animation;
struct Animation_AnimationListener;
struct Interpolator;
struct LayoutAnimationController;
struct LayoutAnimationController_AnimationParameters;
struct Transformation;
}}}

namespace android { namespace view { namespace autofill { 
struct AutofillId;
struct AutofillValue;
}}}

namespace android { namespace view { namespace contentcapture { 
struct ContentCaptureContext;
struct ContentCaptureSession;
struct ContentCaptureSessionId;
}}}

namespace android { namespace view { namespace displayhash { 
struct DisplayHash;
struct DisplayHashResultCallback;
}}}

namespace android { namespace view { namespace inputmethod { 
struct CompletionInfo;
struct CorrectionInfo;
struct EditorInfo;
struct ExtractedText;
struct ExtractedTextRequest;
struct InputConnection;
struct InputContentInfo;
struct SurroundingText;
}}}

namespace android { namespace view { namespace textclassifier { 
struct ConversationActions;
struct ConversationActions_Request;
struct SelectionEvent;
struct TextClassification;
struct TextClassification_Request;
struct TextClassificationContext;
struct TextClassificationSessionId;
struct TextClassifier;
struct TextClassifier_EntityConfig;
struct TextClassifierEvent;
struct TextLanguage;
struct TextLanguage_Request;
struct TextLinks;
struct TextLinks_Request;
struct TextSelection;
struct TextSelection_Request;
}}}

namespace android { namespace view { namespace translation { 
struct TranslationCapability;
struct TranslationResponseValue;
struct TranslationSpec;
struct ViewTranslationCallback;
struct ViewTranslationResponse;
}}}

namespace android { namespace widget { 
struct AbsListView;
struct AbsListView_LayoutParams;
struct AbsListView_MultiChoiceModeListener;
struct AbsListView_OnScrollListener;
struct AbsListView_RecyclerListener;
struct AbsSeekBar;
struct Adapter;
struct AdapterView;
struct AdapterView_OnItemClickListener;
struct AdapterView_OnItemLongClickListener;
struct AdapterView_OnItemSelectedListener;
struct Button;
struct CheckBox;
struct Checkable;
struct CompoundButton;
struct CompoundButton_OnCheckedChangeListener;
struct EditText;
struct Filter_FilterListener;
struct FrameLayout;
struct FrameLayout_LayoutParams;
struct ImageView;
struct ImageView_ScaleType;
struct LinearLayout;
struct LinearLayout_LayoutParams;
struct ListAdapter;
struct ListView;
struct ProgressBar;
struct RelativeLayout;
struct RelativeLayout_LayoutParams;
struct ScrollView;
struct Scroller;
struct SeekBar;
struct SeekBar_OnSeekBarChangeListener;
struct SpinnerAdapter;
struct Switch;
struct TextView;
struct TextView_BufferType;
struct TextView_OnEditorActionListener;
struct Toast;
struct Toast_Callback;
struct Toolbar;
struct Toolbar_LayoutParams;
struct Toolbar_OnMenuItemClickListener;
}}

namespace android { namespace window { 
struct SplashScreen;
struct SplashScreen_OnExitAnimationListener;
struct SplashScreenView;
}}

namespace java { namespace io { 
struct Closeable;
struct Console;
struct File;
struct FileDescriptor;
struct FileFilter;
struct FileInputStream;
struct FileNotFoundException;
struct FileOutputStream;
struct FilenameFilter;
struct FilterOutputStream;
struct Flushable;
struct IOException;
struct InputStream;
struct OutputStream;
struct PrintStream;
struct PrintWriter;
struct Reader;
struct Serializable;
struct Writer;
}}

namespace java { namespace lang { 
struct AbstractStringBuilder;
struct Appendable;
struct AutoCloseable;
struct Boolean;
struct Byte;
struct CharSequence;
struct Character;
struct Class;
struct ClassCastException;
struct ClassLoader;
struct Cloneable;
struct Comparable;
struct Double;
struct Enum;
struct Error;
struct Exception;
struct Float;
struct IncompatibleClassChangeError;
struct Integer;
struct Iterable;
struct LinkageError;
struct Long;
struct Module;
struct ModuleLayer;
struct ModuleLayer_Controller;
struct NamedPackage;
struct NoSuchMethodError;
struct Number;
struct Object;
struct Package;
struct Readable;
struct Runnable;
struct RuntimeException;
struct SecurityException;
struct SecurityManager;
struct Short;
struct StackTraceElement;
struct String;
struct StringBuffer;
struct StringBuilder;
struct System;
struct System_Logger;
struct System_Logger_Level;
struct Thread;
struct Thread_State;
struct Thread_UncaughtExceptionHandler;
struct ThreadGroup;
struct Throwable;
struct UnsatisfiedLinkError;
}}

namespace java { namespace lang { namespace annotation { 
struct Annotation;
}}}

namespace java { namespace lang { namespace module { 
struct Configuration;
struct ModuleDescriptor;
struct ModuleDescriptor_Builder;
struct ModuleDescriptor_Exports;
struct ModuleDescriptor_Opens;
struct ModuleDescriptor_Provides;
struct ModuleDescriptor_Requires;
struct ModuleDescriptor_Version;
struct ModuleFinder;
}}}

namespace java { namespace lang { namespace reflect { 
struct AccessibleObject;
struct AnnotatedElement;
struct AnnotatedType;
struct Constructor;
struct Executable;
struct Field;
struct GenericDeclaration;
struct Member;
struct Method;
struct Parameter;
struct Type;
struct TypeVariable;
}}}

namespace java { namespace math { 
struct BigDecimal;
struct BigInteger;
struct MathContext;
struct RoundingMode;
}}

namespace java { namespace net { 
struct Authenticator;
struct Authenticator_RequestorType;
struct ContentHandler;
struct ContentHandlerFactory;
struct DatagramPacket;
struct DatagramSocket;
struct DatagramSocketImpl;
struct DatagramSocketImplFactory;
struct FileNameMap;
struct HttpURLConnection;
struct InetAddress;
struct NetworkInterface;
struct PasswordAuthentication;
struct ProtocolFamily;
struct Proxy;
struct Proxy_Type;
struct ServerSocket;
struct Socket;
struct SocketAddress;
struct SocketImpl;
struct SocketImplFactory;
struct SocketOption;
struct SocketOptions;
struct URI;
struct URL;
struct URLConnection;
struct URLStreamHandler;
struct URLStreamHandlerFactory;
}}

namespace java { namespace nio { 
struct Buffer;
struct ByteBuffer;
struct ByteOrder;
struct CharBuffer;
struct DoubleBuffer;
struct FloatBuffer;
struct IntBuffer;
struct LongBuffer;
struct MappedByteBuffer;
struct ShortBuffer;
}}

namespace java { namespace nio { namespace channels { 
struct AsynchronousByteChannel;
struct AsynchronousChannel;
struct AsynchronousFileChannel;
struct ByteChannel;
struct Channel;
struct Channels;
struct CompletionHandler;
struct DatagramChannel;
struct FileChannel;
struct FileChannel_MapMode;
struct FileLock;
struct GatheringByteChannel;
struct InterruptibleChannel;
struct MembershipKey;
struct MulticastChannel;
struct NetworkChannel;
struct Pipe;
struct Pipe_SinkChannel;
struct Pipe_SourceChannel;
struct ReadableByteChannel;
struct ScatteringByteChannel;
struct SeekableByteChannel;
struct SelectableChannel;
struct SelectionKey;
struct Selector;
struct ServerSocketChannel;
struct SocketChannel;
struct WritableByteChannel;
}}}

namespace java { namespace nio { namespace channels { namespace spi { 
struct AbstractInterruptibleChannel;
struct AbstractSelectableChannel;
struct AbstractSelectionKey;
struct AbstractSelector;
struct SelectorProvider;
}}}}

namespace java { namespace nio { namespace charset { 
struct Charset;
struct CharsetDecoder;
struct CharsetEncoder;
struct CoderResult;
struct CodingErrorAction;
}}}

namespace java { namespace nio { namespace file { 
struct AccessMode;
struct CopyOption;
struct DirectoryStream;
struct DirectoryStream_Filter;
struct FileStore;
struct FileSystem;
struct LinkOption;
struct OpenOption;
struct Path;
struct PathMatcher;
struct WatchEvent_Kind;
struct WatchEvent_Modifier;
struct WatchKey;
struct WatchService;
struct Watchable;
}}}

namespace java { namespace nio { namespace file { namespace attribute { 
struct AttributeView;
struct BasicFileAttributes;
struct FileAttribute;
struct FileAttributeView;
struct FileStoreAttributeView;
struct FileTime;
struct GroupPrincipal;
struct UserPrincipal;
struct UserPrincipalLookupService;
}}}}

namespace java { namespace nio { namespace file { namespace spi { 
struct FileSystemProvider;
}}}}

namespace java { namespace security { 
struct AccessControlContext;
struct CodeSigner;
struct CodeSource;
struct DomainCombiner;
struct Guard;
struct Key;
struct Permission;
struct PermissionCollection;
struct Principal;
struct PrivilegedAction;
struct PrivilegedExceptionAction;
struct ProtectionDomain;
struct Provider;
struct Provider_Service;
struct PublicKey;
struct Timestamp;
}}

namespace java { namespace security { namespace cert { 
struct CertPath;
struct Certificate;
}}}

namespace java { namespace text { 
struct AttributedCharacterIterator;
struct AttributedCharacterIterator_Attribute;
struct CharacterIterator;
struct FieldPosition;
struct Format;
struct Format_Field;
struct ParsePosition;
}}

namespace java { namespace time { 
struct Clock;
struct DayOfWeek;
struct Duration;
struct Instant;
struct LocalDate;
struct LocalDateTime;
struct LocalTime;
struct Month;
struct OffsetDateTime;
struct OffsetTime;
struct Period;
struct ZoneId;
struct ZoneOffset;
struct ZonedDateTime;
}}

namespace java { namespace time { namespace chrono { 
struct AbstractChronology;
struct ChronoLocalDate;
struct ChronoLocalDateTime;
struct ChronoPeriod;
struct ChronoZonedDateTime;
struct Chronology;
struct Era;
struct IsoChronology;
struct IsoEra;
}}}

namespace java { namespace time { namespace format { 
struct DateTimeFormatter;
struct DecimalStyle;
struct FormatStyle;
struct ResolverStyle;
struct TextStyle;
}}}

namespace java { namespace time { namespace temporal { 
struct ChronoField;
struct ChronoUnit;
struct Temporal;
struct TemporalAccessor;
struct TemporalAdjuster;
struct TemporalAmount;
struct TemporalField;
struct TemporalQuery;
struct TemporalUnit;
struct ValueRange;
}}}

namespace java { namespace time { namespace zone { 
struct ZoneOffsetTransition;
struct ZoneRules;
}}}

namespace java { namespace util { 
struct AbstractCollection;
struct AbstractList;
struct AbstractMap;
struct AbstractSet;
struct ArrayList;
struct Collection;
struct Comparator;
struct Date;
struct Dictionary;
struct DoubleSummaryStatistics;
struct Enumeration;
struct HashMap;
struct HashSet;
struct Hashtable;
struct IntSummaryStatistics;
struct Iterator;
struct List;
struct ListIterator;
struct Locale;
struct Locale_Category;
struct Locale_FilteringMode;
struct Locale_IsoCountryCode;
struct LongSummaryStatistics;
struct Map;
struct Map_Entry;
struct NoSuchElementException;
struct Optional;
struct OptionalDouble;
struct OptionalInt;
struct OptionalLong;
struct PrimitiveIterator;
struct PrimitiveIterator_OfDouble;
struct PrimitiveIterator_OfInt;
struct PrimitiveIterator_OfLong;
struct Properties;
struct Random;
struct RandomAccess;
struct ResourceBundle;
struct ResourceBundle_Control;
struct Scanner;
struct Set;
struct SortedMap;
struct Spliterator;
struct Spliterator_OfDouble;
struct Spliterator_OfInt;
struct Spliterator_OfLong;
struct Spliterator_OfPrimitive;
struct UUID;
}}

namespace java { namespace util { namespace concurrent { 
struct Callable;
struct Executor;
struct ExecutorService;
struct Future;
struct TimeUnit;
}}}

namespace java { namespace util { namespace function { 
struct BiConsumer;
struct BiFunction;
struct BinaryOperator;
struct Consumer;
struct DoubleBinaryOperator;
struct DoubleConsumer;
struct DoubleFunction;
struct DoublePredicate;
struct DoubleSupplier;
struct DoubleToIntFunction;
struct DoubleToLongFunction;
struct DoubleUnaryOperator;
struct Function;
struct IntBinaryOperator;
struct IntConsumer;
struct IntFunction;
struct IntPredicate;
struct IntSupplier;
struct IntToDoubleFunction;
struct IntToLongFunction;
struct IntUnaryOperator;
struct LongBinaryOperator;
struct LongConsumer;
struct LongFunction;
struct LongPredicate;
struct LongSupplier;
struct LongToDoubleFunction;
struct LongToIntFunction;
struct LongUnaryOperator;
struct ObjDoubleConsumer;
struct ObjIntConsumer;
struct ObjLongConsumer;
struct Predicate;
struct Supplier;
struct ToDoubleFunction;
struct ToIntFunction;
struct ToLongFunction;
struct UnaryOperator;
}}}

namespace java { namespace util { namespace regex { 
struct MatchResult;
struct Matcher;
struct Pattern;
}}}

namespace java { namespace util { namespace stream { 
struct BaseStream;
struct Collector;
struct Collector_Characteristics;
struct DoubleStream;
struct DoubleStream_Builder;
struct IntStream;
struct IntStream_Builder;
struct LongStream;
struct LongStream_Builder;
struct Stream;
struct Stream_Builder;
}}}

namespace javax { namespace security { namespace auth { 
struct Subject;
}}}

namespace org { namespace xmlpull { namespace v1 { 
struct XmlPullParser;
struct XmlSerializer;
}}}

namespace java { namespace lang { 
struct Object : jni::Object
{
	static jni::Class __CLASS;

	::java::lang::Object Clone() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jvoid Finalize() const;
	::java::lang::Class GetClass() const;
	::jint HashCode() const;
	::jvoid Notify() const;
	::jvoid NotifyAll() const;
	::java::lang::String ToString() const;
	::jvoid Wait() const;
	::jvoid Wait(const ::jlong& arg0) const;
	::jvoid Wait(const ::jlong& arg0, const ::jint& arg1) const;
	static jobject __Constructor();
	Object() : jni::Object(__Constructor()) {}
	explicit Object(jobject o) : jni::Object(o) {}
	Object(const Object& o)  : jni::Object(o) {}

};

}}

namespace android { 
struct R_id : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fAccessibilityActionContextClick();
	static ::jint& fAccessibilityActionHideTooltip();
	static ::jint& fAccessibilityActionImeEnter();
	static ::jint& fAccessibilityActionMoveWindow();
	static ::jint& fAccessibilityActionPageDown();
	static ::jint& fAccessibilityActionPageLeft();
	static ::jint& fAccessibilityActionPageRight();
	static ::jint& fAccessibilityActionPageUp();
	static ::jint& fAccessibilityActionPressAndHold();
	static ::jint& fAccessibilityActionScrollDown();
	static ::jint& fAccessibilityActionScrollLeft();
	static ::jint& fAccessibilityActionScrollRight();
	static ::jint& fAccessibilityActionScrollToPosition();
	static ::jint& fAccessibilityActionScrollUp();
	static ::jint& fAccessibilityActionSetProgress();
	static ::jint& fAccessibilityActionShowOnScreen();
	static ::jint& fAccessibilityActionShowTooltip();
	static ::jint& fAccessibilitySystemActionBack();
	static ::jint& fAccessibilitySystemActionHome();
	static ::jint& fAccessibilitySystemActionLockScreen();
	static ::jint& fAccessibilitySystemActionNotifications();
	static ::jint& fAccessibilitySystemActionPowerDialog();
	static ::jint& fAccessibilitySystemActionQuickSettings();
	static ::jint& fAccessibilitySystemActionRecents();
	static ::jint& fAccessibilitySystemActionTakeScreenshot();
	static ::jint& fAccessibilitySystemActionToggleSplitScreen();
	static ::jint& fAddToDictionary();
	static ::jint& fAutofill();
	static ::jint& fBackground();
	static ::jint& fButton1();
	static ::jint& fButton2();
	static ::jint& fButton3();
	static ::jint& fCandidatesArea();
	static ::jint& fCheckbox();
	static ::jint& fCloseButton();
	static ::jint& fContent();
	static ::jint& fCopy();
	static ::jint& fCopyUrl();
	static ::jint& fCustom();
	static ::jint& fCut();
	static ::jint& fEdit();
	static ::jint& fEmpty();
	static ::jint& fExtractArea();
	static ::jint& fHint();
	static ::jint& fHome();
	static ::jint& fIcon();
	static ::jint& fIcon1();
	static ::jint& fIcon2();
	static ::jint& fIcon_frame();
	static ::jint& fInput();
	static ::jint& fInputArea();
	static ::jint& fInputExtractEditText();
	static ::jint& fKeyboardView();
	static ::jint& fList();
	static ::jint& fList_container();
	static ::jint& fMask();
	static ::jint& fMessage();
	static ::jint& fNavigationBarBackground();
	static ::jint& fPaste();
	static ::jint& fPasteAsPlainText();
	static ::jint& fPrimary();
	static ::jint& fProgress();
	static ::jint& fRedo();
	static ::jint& fReplaceText();
	static ::jint& fSecondaryProgress();
	static ::jint& fSelectAll();
	static ::jint& fSelectTextMode();
	static ::jint& fSelectedIcon();
	static ::jint& fShareText();
	static ::jint& fStartSelectingText();
	static ::jint& fStatusBarBackground();
	static ::jint& fStopSelectingText();
	static ::jint& fSummary();
	static ::jint& fSwitchInputMethod();
	static ::jint& fSwitch_widget();
	static ::jint& fTabcontent();
	static ::jint& fTabhost();
	static ::jint& fTabs();
	static ::jint& fText1();
	static ::jint& fText2();
	static ::jint& fTextAssist();
	static ::jint& fTitle();
	static ::jint& fToggle();
	static ::jint& fUndo();
	static ::jint& fWidget_frame();
	static jobject __Constructor();
	R_id() : ::java::lang::Object(__Constructor()) {}
	explicit R_id(jobject o) : ::java::lang::Object(o) {}
	R_id(const R_id& o)  : ::java::lang::Object(o) {}

};

}

namespace java { namespace lang { 
struct Class : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Serializable();
	operator ::java::lang::reflect::GenericDeclaration();
	operator ::java::lang::reflect::Type();
	operator ::java::lang::reflect::AnnotatedElement();
	::java::lang::Class AsSubclass(const ::java::lang::Class& arg0) const;
	::java::lang::Object Cast(const ::java::lang::Object& arg0) const;
	::jboolean DesiredAssertionStatus() const;
	static ::java::lang::Class ForName(const ::java::lang::Module& arg0, const ::java::lang::String& arg1);
	static ::java::lang::Class ForName(const ::java::lang::String& arg0);
	static ::java::lang::Class ForName(const ::java::lang::String& arg0, const ::jboolean& arg1, const ::java::lang::ClassLoader& arg2);
	jni::Array< ::java::lang::reflect::AnnotatedType > GetAnnotatedInterfaces() const;
	::java::lang::reflect::AnnotatedType GetAnnotatedSuperclass() const;
	::java::lang::annotation::Annotation GetAnnotation(const ::java::lang::Class& arg0) const;
	jni::Array< ::java::lang::annotation::Annotation > GetAnnotations() const;
	jni::Array< ::java::lang::annotation::Annotation > GetAnnotationsByType(const ::java::lang::Class& arg0) const;
	::java::lang::String GetCanonicalName() const;
	::java::lang::ClassLoader GetClassLoader() const;
	jni::Array< ::java::lang::Class > GetClasses() const;
	::java::lang::Class GetComponentType() const;
	::java::lang::reflect::Constructor GetConstructor(const jni::Array< ::java::lang::Class >& arg0) const;
	jni::Array< ::java::lang::reflect::Constructor > GetConstructors() const;
	::java::lang::annotation::Annotation GetDeclaredAnnotation(const ::java::lang::Class& arg0) const;
	jni::Array< ::java::lang::annotation::Annotation > GetDeclaredAnnotations() const;
	jni::Array< ::java::lang::annotation::Annotation > GetDeclaredAnnotationsByType(const ::java::lang::Class& arg0) const;
	jni::Array< ::java::lang::Class > GetDeclaredClasses() const;
	::java::lang::reflect::Constructor GetDeclaredConstructor(const jni::Array< ::java::lang::Class >& arg0) const;
	jni::Array< ::java::lang::reflect::Constructor > GetDeclaredConstructors() const;
	::java::lang::reflect::Field GetDeclaredField(const ::java::lang::String& arg0) const;
	jni::Array< ::java::lang::reflect::Field > GetDeclaredFields() const;
	::java::lang::reflect::Method GetDeclaredMethod(const ::java::lang::String& arg0, const jni::Array< ::java::lang::Class >& arg1) const;
	jni::Array< ::java::lang::reflect::Method > GetDeclaredMethods() const;
	::java::lang::Class GetDeclaringClass() const;
	::java::lang::Class GetEnclosingClass() const;
	::java::lang::reflect::Constructor GetEnclosingConstructor() const;
	::java::lang::reflect::Method GetEnclosingMethod() const;
	jni::Array< ::java::lang::Object > GetEnumConstants() const;
	::java::lang::reflect::Field GetField(const ::java::lang::String& arg0) const;
	jni::Array< ::java::lang::reflect::Field > GetFields() const;
	jni::Array< ::java::lang::reflect::Type > GetGenericInterfaces() const;
	::java::lang::reflect::Type GetGenericSuperclass() const;
	jni::Array< ::java::lang::Class > GetInterfaces() const;
	::java::lang::reflect::Method GetMethod(const ::java::lang::String& arg0, const jni::Array< ::java::lang::Class >& arg1) const;
	jni::Array< ::java::lang::reflect::Method > GetMethods() const;
	::jint GetModifiers() const;
	::java::lang::Module GetModule() const;
	::java::lang::String GetName() const;
	::java::lang::Class GetNestHost() const;
	jni::Array< ::java::lang::Class > GetNestMembers() const;
	::java::lang::Package GetPackage() const;
	::java::lang::String GetPackageName() const;
	::java::security::ProtectionDomain GetProtectionDomain() const;
	::java::net::URL GetResource(const ::java::lang::String& arg0) const;
	::java::io::InputStream GetResourceAsStream(const ::java::lang::String& arg0) const;
	jni::Array< ::java::lang::Object > GetSigners() const;
	::java::lang::String GetSimpleName() const;
	::java::lang::Class GetSuperclass() const;
	::java::lang::String GetTypeName() const;
	jni::Array< ::java::lang::reflect::TypeVariable > GetTypeParameters() const;
	::jboolean IsAnnotation() const;
	::jboolean IsAnnotationPresent(const ::java::lang::Class& arg0) const;
	::jboolean IsAnonymousClass() const;
	::jboolean IsArray() const;
	::jboolean IsAssignableFrom(const ::java::lang::Class& arg0) const;
	::jboolean IsEnum() const;
	::jboolean IsInstance(const ::java::lang::Object& arg0) const;
	::jboolean IsInterface() const;
	::jboolean IsLocalClass() const;
	::jboolean IsMemberClass() const;
	::jboolean IsNestmateOf(const ::java::lang::Class& arg0) const;
	::jboolean IsPrimitive() const;
	::jboolean IsSynthetic() const;
	::java::lang::Object NewInstance() const;
	::java::lang::String ToGenericString() const;
	::java::lang::String ToString() const;
	explicit Class(jobject o) : ::java::lang::Object(o) {}
	Class(const Class& o)  : ::java::lang::Object(o) {}

};

}}

namespace java { namespace io { 
struct Serializable : java::lang::Object
{
	static jni::Class __CLASS;

	explicit Serializable(jobject o) : java::lang::Object(o) {}
	Serializable(const Serializable& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::io::Serializable();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
	};
};

}}

namespace java { namespace lang { namespace reflect { 
struct GenericDeclaration : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::reflect::AnnotatedElement();
	jni::Array< ::java::lang::reflect::TypeVariable > GetTypeParameters() const;
	explicit GenericDeclaration(jobject o) : java::lang::Object(o) {}
	GenericDeclaration(const GenericDeclaration& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::lang::reflect::GenericDeclaration();
		operator ::java::lang::reflect::AnnotatedElement();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual jni::Array< ::java::lang::reflect::TypeVariable > GetTypeParameters() = 0;
	};
};

struct AnnotatedElement : java::lang::Object
{
	static jni::Class __CLASS;

	::java::lang::annotation::Annotation GetAnnotation(const ::java::lang::Class& arg0) const;
	jni::Array< ::java::lang::annotation::Annotation > GetAnnotations() const;
	jni::Array< ::java::lang::annotation::Annotation > GetAnnotationsByType(const ::java::lang::Class& arg0) const;
	::java::lang::annotation::Annotation GetDeclaredAnnotation(const ::java::lang::Class& arg0) const;
	jni::Array< ::java::lang::annotation::Annotation > GetDeclaredAnnotations() const;
	jni::Array< ::java::lang::annotation::Annotation > GetDeclaredAnnotationsByType(const ::java::lang::Class& arg0) const;
	::jboolean IsAnnotationPresent(const ::java::lang::Class& arg0) const;
	explicit AnnotatedElement(jobject o) : java::lang::Object(o) {}
	AnnotatedElement(const AnnotatedElement& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::lang::reflect::AnnotatedElement();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::lang::annotation::Annotation GetAnnotation(const ::java::lang::Class& arg0) = 0;
		virtual jni::Array< ::java::lang::annotation::Annotation > GetAnnotations() = 0;
		virtual jni::Array< ::java::lang::annotation::Annotation > GetAnnotationsByType(const ::java::lang::Class& arg0) = 0;
		virtual ::java::lang::annotation::Annotation GetDeclaredAnnotation(const ::java::lang::Class& arg0) = 0;
		virtual jni::Array< ::java::lang::annotation::Annotation > GetDeclaredAnnotations() = 0;
		virtual jni::Array< ::java::lang::annotation::Annotation > GetDeclaredAnnotationsByType(const ::java::lang::Class& arg0) = 0;
		virtual ::jboolean IsAnnotationPresent(const ::java::lang::Class& arg0) = 0;
	};
};

}}}

namespace java { namespace lang { namespace annotation { 
struct Annotation : java::lang::Object
{
	static jni::Class __CLASS;

	::java::lang::Class AnnotationType() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint HashCode() const;
	::java::lang::String ToString() const;
	explicit Annotation(jobject o) : java::lang::Object(o) {}
	Annotation(const Annotation& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::lang::annotation::Annotation();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::lang::Class AnnotationType() = 0;
		virtual ::jboolean Equals(const ::java::lang::Object& arg0) = 0;
		virtual ::jint HashCode() = 0;
		virtual ::java::lang::String ToString() = 0;
	};
};

}}}

namespace java { namespace lang { 
struct String : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Serializable();
	operator ::java::lang::Comparable();
	operator ::java::lang::CharSequence();
	static ::java::util::Comparator& fCASE_INSENSITIVE_ORDER();
	::jchar CharAt(const ::jint& arg0) const;
	::java::util::stream::IntStream Chars() const;
	::jint CodePointAt(const ::jint& arg0) const;
	::jint CodePointBefore(const ::jint& arg0) const;
	::jint CodePointCount(const ::jint& arg0, const ::jint& arg1) const;
	::java::util::stream::IntStream CodePoints() const;
	::jint CompareTo(const ::java::lang::String& arg0) const;
	::jint CompareToIgnoreCase(const ::java::lang::String& arg0) const;
	::java::lang::String Concat(const ::java::lang::String& arg0) const;
	::jboolean Contains(const ::java::lang::CharSequence& arg0) const;
	::jboolean ContentEquals(const ::java::lang::CharSequence& arg0) const;
	::jboolean ContentEquals(const ::java::lang::StringBuffer& arg0) const;
	static ::java::lang::String CopyValueOf(const jni::Array< ::jchar >& arg0);
	static ::java::lang::String CopyValueOf(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2);
	::jboolean EndsWith(const ::java::lang::String& arg0) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jboolean EqualsIgnoreCase(const ::java::lang::String& arg0) const;
	static ::java::lang::String Format(const ::java::lang::String& arg0, const jni::Array< ::java::lang::Object >& arg1);
	static ::java::lang::String Format(const ::java::util::Locale& arg0, const ::java::lang::String& arg1, const jni::Array< ::java::lang::Object >& arg2);
	jni::Array< ::jbyte > GetBytes() const;
	::jvoid GetBytes(const ::jint& arg0, const ::jint& arg1, const jni::Array< ::jbyte >& arg2, const ::jint& arg3) const;
	jni::Array< ::jbyte > GetBytes(const ::java::lang::String& arg0) const;
	jni::Array< ::jbyte > GetBytes(const ::java::nio::charset::Charset& arg0) const;
	::jvoid GetChars(const ::jint& arg0, const ::jint& arg1, const jni::Array< ::jchar >& arg2, const ::jint& arg3) const;
	::jint HashCode() const;
	::jint IndexOf(const ::jint& arg0) const;
	::jint IndexOf(const ::jint& arg0, const ::jint& arg1) const;
	::jint IndexOf(const ::java::lang::String& arg0) const;
	::jint IndexOf(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::java::lang::String Intern() const;
	::jboolean IsBlank() const;
	::jboolean IsEmpty() const;
	static ::java::lang::String Join(const ::java::lang::CharSequence& arg0, const ::java::lang::Iterable& arg1);
	static ::java::lang::String Join(const ::java::lang::CharSequence& arg0, const jni::Array< ::java::lang::CharSequence >& arg1);
	::jint LastIndexOf(const ::jint& arg0) const;
	::jint LastIndexOf(const ::jint& arg0, const ::jint& arg1) const;
	::jint LastIndexOf(const ::java::lang::String& arg0) const;
	::jint LastIndexOf(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::jint Length() const;
	::java::util::stream::Stream Lines() const;
	::jboolean Matches(const ::java::lang::String& arg0) const;
	::jint OffsetByCodePoints(const ::jint& arg0, const ::jint& arg1) const;
	::jboolean RegionMatches(const ::jint& arg0, const ::java::lang::String& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jboolean RegionMatches(const ::jboolean& arg0, const ::jint& arg1, const ::java::lang::String& arg2, const ::jint& arg3, const ::jint& arg4) const;
	::java::lang::String Repeat(const ::jint& arg0) const;
	::java::lang::String Replace(const ::jchar& arg0, const ::jchar& arg1) const;
	::java::lang::String Replace(const ::java::lang::CharSequence& arg0, const ::java::lang::CharSequence& arg1) const;
	::java::lang::String ReplaceAll(const ::java::lang::String& arg0, const ::java::lang::String& arg1) const;
	::java::lang::String ReplaceFirst(const ::java::lang::String& arg0, const ::java::lang::String& arg1) const;
	jni::Array< ::java::lang::String > Split(const ::java::lang::String& arg0) const;
	jni::Array< ::java::lang::String > Split(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::jboolean StartsWith(const ::java::lang::String& arg0) const;
	::jboolean StartsWith(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::java::lang::String Strip() const;
	::java::lang::String StripLeading() const;
	::java::lang::String StripTrailing() const;
	::java::lang::CharSequence SubSequence(const ::jint& arg0, const ::jint& arg1) const;
	::java::lang::String Substring(const ::jint& arg0) const;
	::java::lang::String Substring(const ::jint& arg0, const ::jint& arg1) const;
	jni::Array< ::jchar > ToCharArray() const;
	::java::lang::String ToLowerCase() const;
	::java::lang::String ToLowerCase(const ::java::util::Locale& arg0) const;
	::java::lang::String ToString() const;
	::java::lang::String ToUpperCase() const;
	::java::lang::String ToUpperCase(const ::java::util::Locale& arg0) const;
	::java::lang::String Trim() const;
	static ::java::lang::String ValueOf(const ::jchar& arg0);
	static ::java::lang::String ValueOf(const ::jdouble& arg0);
	static ::java::lang::String ValueOf(const ::jfloat& arg0);
	static ::java::lang::String ValueOf(const ::jint& arg0);
	static ::java::lang::String ValueOf(const ::jlong& arg0);
	static ::java::lang::String ValueOf(const ::java::lang::Object& arg0);
	static ::java::lang::String ValueOf(const ::jboolean& arg0);
	static ::java::lang::String ValueOf(const jni::Array< ::jchar >& arg0);
	static ::java::lang::String ValueOf(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2);
	static jobject __Constructor();
	String() : ::java::lang::Object(__Constructor()) { __Initialize(); }
	static jobject __Constructor(const ::java::lang::StringBuffer& arg0);
	String(const ::java::lang::StringBuffer& arg0) : ::java::lang::Object(__Constructor(arg0)) { __Initialize(); }
	static jobject __Constructor(const ::java::lang::StringBuilder& arg0);
	String(const ::java::lang::StringBuilder& arg0) : ::java::lang::Object(__Constructor(arg0)) { __Initialize(); }
	static jobject __Constructor(const jni::Array< ::jbyte >& arg0);
	String(const jni::Array< ::jbyte >& arg0) : ::java::lang::Object(__Constructor(arg0)) { __Initialize(); }
	static jobject __Constructor(const jni::Array< ::jbyte >& arg0, const ::jint& arg1);
	String(const jni::Array< ::jbyte >& arg0, const ::jint& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) { __Initialize(); }
	static jobject __Constructor(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::jint& arg2);
	String(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::jint& arg2) : ::java::lang::Object(__Constructor(arg0, arg1, arg2)) { __Initialize(); }
	static jobject __Constructor(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3);
	String(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3)) { __Initialize(); }
	static jobject __Constructor(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::jint& arg2, const ::java::lang::String& arg3);
	String(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::jint& arg2, const ::java::lang::String& arg3) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3)) { __Initialize(); }
	static jobject __Constructor(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::jint& arg2, const ::java::nio::charset::Charset& arg3);
	String(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::jint& arg2, const ::java::nio::charset::Charset& arg3) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3)) { __Initialize(); }
	static jobject __Constructor(const jni::Array< ::jbyte >& arg0, const ::java::lang::String& arg1);
	String(const jni::Array< ::jbyte >& arg0, const ::java::lang::String& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) { __Initialize(); }
	static jobject __Constructor(const jni::Array< ::jbyte >& arg0, const ::java::nio::charset::Charset& arg1);
	String(const jni::Array< ::jbyte >& arg0, const ::java::nio::charset::Charset& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) { __Initialize(); }
	static jobject __Constructor(const jni::Array< ::jchar >& arg0);
	String(const jni::Array< ::jchar >& arg0) : ::java::lang::Object(__Constructor(arg0)) { __Initialize(); }
	static jobject __Constructor(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2);
	String(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2) : ::java::lang::Object(__Constructor(arg0, arg1, arg2)) { __Initialize(); }
	static jobject __Constructor(const jni::Array< ::jint >& arg0, const ::jint& arg1, const ::jint& arg2);
	String(const jni::Array< ::jint >& arg0, const ::jint& arg1, const ::jint& arg2) : ::java::lang::Object(__Constructor(arg0, arg1, arg2)) { __Initialize(); }
	explicit String(jobject o) : ::java::lang::Object(o) { __Initialize(); }
	String(const String& o)  : ::java::lang::Object(o) { __Initialize(); }
String(const char* str);
~String();

String& operator = (const String& other);
bool EmptyOrNull();

const char* c_str();

operator jstring () const;

private:
	const char* m_Str;
private:
	void __Initialize();

};

struct Comparable : java::lang::Object
{
	static jni::Class __CLASS;

	::jint CompareTo(const ::java::lang::Object& arg0) const;
	explicit Comparable(jobject o) : java::lang::Object(o) {}
	Comparable(const Comparable& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::lang::Comparable();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jint CompareTo(const ::java::lang::Object& arg0) = 0;
	};
};

struct CharSequence : java::lang::Object
{
	static jni::Class __CLASS;

	::jchar CharAt(const ::jint& arg0) const;
	::java::util::stream::IntStream Chars() const;
	::java::util::stream::IntStream CodePoints() const;
	static ::jint Compare(const ::java::lang::CharSequence& arg0, const ::java::lang::CharSequence& arg1);
	::jint Length() const;
	::java::lang::CharSequence SubSequence(const ::jint& arg0, const ::jint& arg1) const;
	::java::lang::String ToString() const;
	explicit CharSequence(jobject o) : java::lang::Object(o) { __Initialize(); }
	CharSequence(const CharSequence& o)  : java::lang::Object(o) { __Initialize(); }
CharSequence(const char* str);
private:
	void __Initialize();

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::lang::CharSequence();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jchar CharAt(const ::jint& arg0) = 0;
		virtual ::java::util::stream::IntStream Chars() = 0;
		virtual ::java::util::stream::IntStream CodePoints() = 0;
		virtual ::jint Length() = 0;
		virtual ::java::lang::CharSequence SubSequence(const ::jint& arg0, const ::jint& arg1) = 0;
		virtual ::java::lang::String ToString() = 0;
	};
};

}}

namespace java { namespace util { namespace stream { 
struct IntStream : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::util::stream::BaseStream();
	::jboolean AllMatch(const ::java::util::function::IntPredicate& arg0) const;
	::jboolean AnyMatch(const ::java::util::function::IntPredicate& arg0) const;
	::java::util::stream::DoubleStream AsDoubleStream() const;
	::java::util::stream::LongStream AsLongStream() const;
	::java::util::OptionalDouble Average() const;
	::java::util::stream::Stream Boxed() const;
	static ::java::util::stream::IntStream_Builder Builder();
	::java::lang::Object Collect(const ::java::util::function::Supplier& arg0, const ::java::util::function::ObjIntConsumer& arg1, const ::java::util::function::BiConsumer& arg2) const;
	static ::java::util::stream::IntStream Concat(const ::java::util::stream::IntStream& arg0, const ::java::util::stream::IntStream& arg1);
	::jlong Count() const;
	::java::util::stream::IntStream Distinct() const;
	::java::util::stream::IntStream DropWhile(const ::java::util::function::IntPredicate& arg0) const;
	static ::java::util::stream::IntStream Empty();
	::java::util::stream::IntStream Filter(const ::java::util::function::IntPredicate& arg0) const;
	::java::util::OptionalInt FindAny() const;
	::java::util::OptionalInt FindFirst() const;
	::java::util::stream::IntStream FlatMap(const ::java::util::function::IntFunction& arg0) const;
	::jvoid ForEach(const ::java::util::function::IntConsumer& arg0) const;
	::jvoid ForEachOrdered(const ::java::util::function::IntConsumer& arg0) const;
	static ::java::util::stream::IntStream Generate(const ::java::util::function::IntSupplier& arg0);
	static ::java::util::stream::IntStream Iterate(const ::jint& arg0, const ::java::util::function::IntPredicate& arg1, const ::java::util::function::IntUnaryOperator& arg2);
	static ::java::util::stream::IntStream Iterate(const ::jint& arg0, const ::java::util::function::IntUnaryOperator& arg1);
	::java::util::PrimitiveIterator_OfInt Iterator() const;
	::java::util::stream::IntStream Limit(const ::jlong& arg0) const;
	::java::util::stream::IntStream Map(const ::java::util::function::IntUnaryOperator& arg0) const;
	::java::util::stream::DoubleStream MapToDouble(const ::java::util::function::IntToDoubleFunction& arg0) const;
	::java::util::stream::LongStream MapToLong(const ::java::util::function::IntToLongFunction& arg0) const;
	::java::util::stream::Stream MapToObj(const ::java::util::function::IntFunction& arg0) const;
	::java::util::OptionalInt Max() const;
	::java::util::OptionalInt Min() const;
	::jboolean NoneMatch(const ::java::util::function::IntPredicate& arg0) const;
	static ::java::util::stream::IntStream Of(const ::jint& arg0);
	static ::java::util::stream::IntStream Of(const jni::Array< ::jint >& arg0);
	::java::util::stream::IntStream Parallel() const;
	::java::util::stream::IntStream Peek(const ::java::util::function::IntConsumer& arg0) const;
	static ::java::util::stream::IntStream Range(const ::jint& arg0, const ::jint& arg1);
	static ::java::util::stream::IntStream RangeClosed(const ::jint& arg0, const ::jint& arg1);
	::jint Reduce(const ::jint& arg0, const ::java::util::function::IntBinaryOperator& arg1) const;
	::java::util::OptionalInt Reduce(const ::java::util::function::IntBinaryOperator& arg0) const;
	::java::util::stream::IntStream Sequential() const;
	::java::util::stream::IntStream Skip(const ::jlong& arg0) const;
	::java::util::stream::IntStream Sorted() const;
	::java::util::Spliterator_OfInt Spliterator() const;
	::jint Sum() const;
	::java::util::IntSummaryStatistics SummaryStatistics() const;
	::java::util::stream::IntStream TakeWhile(const ::java::util::function::IntPredicate& arg0) const;
	jni::Array< ::jint > ToArray() const;
	explicit IntStream(jobject o) : java::lang::Object(o) {}
	IntStream(const IntStream& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::stream::IntStream();
		operator ::java::util::stream::BaseStream();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean AllMatch(const ::java::util::function::IntPredicate& arg0) = 0;
		virtual ::jboolean AnyMatch(const ::java::util::function::IntPredicate& arg0) = 0;
		virtual ::java::util::stream::DoubleStream AsDoubleStream() = 0;
		virtual ::java::util::stream::LongStream AsLongStream() = 0;
		virtual ::java::util::OptionalDouble Average() = 0;
		virtual ::java::util::stream::Stream Boxed() = 0;
		virtual ::java::lang::Object Collect(const ::java::util::function::Supplier& arg0, const ::java::util::function::ObjIntConsumer& arg1, const ::java::util::function::BiConsumer& arg2) = 0;
		virtual ::jlong Count() = 0;
		virtual ::java::util::stream::IntStream Distinct() = 0;
		virtual ::java::util::stream::IntStream DropWhile(const ::java::util::function::IntPredicate& arg0) = 0;
		virtual ::java::util::stream::IntStream Filter(const ::java::util::function::IntPredicate& arg0) = 0;
		virtual ::java::util::OptionalInt FindAny() = 0;
		virtual ::java::util::OptionalInt FindFirst() = 0;
		virtual ::java::util::stream::IntStream FlatMap(const ::java::util::function::IntFunction& arg0) = 0;
		virtual void ForEach(const ::java::util::function::IntConsumer& arg0) = 0;
		virtual void ForEachOrdered(const ::java::util::function::IntConsumer& arg0) = 0;
		virtual ::java::util::PrimitiveIterator_OfInt Iterator() = 0;
		virtual ::java::util::stream::IntStream Limit(const ::jlong& arg0) = 0;
		virtual ::java::util::stream::IntStream Map(const ::java::util::function::IntUnaryOperator& arg0) = 0;
		virtual ::java::util::stream::DoubleStream MapToDouble(const ::java::util::function::IntToDoubleFunction& arg0) = 0;
		virtual ::java::util::stream::LongStream MapToLong(const ::java::util::function::IntToLongFunction& arg0) = 0;
		virtual ::java::util::stream::Stream MapToObj(const ::java::util::function::IntFunction& arg0) = 0;
		virtual ::java::util::OptionalInt Max() = 0;
		virtual ::java::util::OptionalInt Min() = 0;
		virtual ::jboolean NoneMatch(const ::java::util::function::IntPredicate& arg0) = 0;
		virtual ::java::util::stream::IntStream Parallel() = 0;
		virtual ::java::util::stream::IntStream Peek(const ::java::util::function::IntConsumer& arg0) = 0;
		virtual ::jint Reduce(const ::jint& arg0, const ::java::util::function::IntBinaryOperator& arg1) = 0;
		virtual ::java::util::OptionalInt Reduce(const ::java::util::function::IntBinaryOperator& arg0) = 0;
		virtual ::java::util::stream::IntStream Sequential() = 0;
		virtual ::java::util::stream::IntStream Skip(const ::jlong& arg0) = 0;
		virtual ::java::util::stream::IntStream Sorted() = 0;
		virtual ::java::util::Spliterator_OfInt Spliterator() = 0;
		virtual ::jint Sum() = 0;
		virtual ::java::util::IntSummaryStatistics SummaryStatistics() = 0;
		virtual ::java::util::stream::IntStream TakeWhile(const ::java::util::function::IntPredicate& arg0) = 0;
		virtual jni::Array< ::jint > ToArray() = 0;
	};
};

struct BaseStream : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::AutoCloseable();
	::jvoid Close() const;
	::jboolean IsParallel() const;
	::java::util::Iterator Iterator() const;
	::java::util::stream::BaseStream OnClose(const ::java::lang::Runnable& arg0) const;
	::java::util::stream::BaseStream Parallel() const;
	::java::util::stream::BaseStream Sequential() const;
	::java::util::Spliterator Spliterator() const;
	::java::util::stream::BaseStream Unordered() const;
	explicit BaseStream(jobject o) : java::lang::Object(o) {}
	BaseStream(const BaseStream& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::stream::BaseStream();
		operator ::java::lang::AutoCloseable();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void Close() = 0;
		virtual ::jboolean IsParallel() = 0;
		virtual ::java::util::Iterator Iterator() = 0;
		virtual ::java::util::stream::BaseStream OnClose(const ::java::lang::Runnable& arg0) = 0;
		virtual ::java::util::stream::BaseStream Parallel() = 0;
		virtual ::java::util::stream::BaseStream Sequential() = 0;
		virtual ::java::util::Spliterator Spliterator() = 0;
		virtual ::java::util::stream::BaseStream Unordered() = 0;
	};
};

}}}

namespace java { namespace lang { 
struct AutoCloseable : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid Close() const;
	explicit AutoCloseable(jobject o) : java::lang::Object(o) {}
	AutoCloseable(const AutoCloseable& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::lang::AutoCloseable();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void Close() = 0;
	};
};

}}

namespace java { namespace util { 
struct Iterator : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid ForEachRemaining(const ::java::util::function::Consumer& arg0) const;
	::jboolean HasNext() const;
	::java::lang::Object Next() const;
	::jvoid Remove() const;
	explicit Iterator(jobject o) : java::lang::Object(o) {}
	Iterator(const Iterator& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::Iterator();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void ForEachRemaining(const ::java::util::function::Consumer& arg0) = 0;
		virtual ::jboolean HasNext() = 0;
		virtual ::java::lang::Object Next() = 0;
		virtual void Remove() = 0;
	};
};

}}

namespace java { namespace util { namespace function { 
struct Consumer : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid Accept(const ::java::lang::Object& arg0) const;
	::java::util::function::Consumer AndThen(const ::java::util::function::Consumer& arg0) const;
	explicit Consumer(jobject o) : java::lang::Object(o) {}
	Consumer(const Consumer& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::function::Consumer();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void Accept(const ::java::lang::Object& arg0) = 0;
		virtual ::java::util::function::Consumer AndThen(const ::java::util::function::Consumer& arg0) = 0;
	};
};

}}}

namespace java { namespace lang { 
struct Runnable : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid Run() const;
	explicit Runnable(jobject o) : java::lang::Object(o) {}
	Runnable(const Runnable& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::lang::Runnable();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void Run() = 0;
	};
};

}}

namespace java { namespace util { 
struct Spliterator : java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fCONCURRENT();
	static ::jint& fDISTINCT();
	static ::jint& fIMMUTABLE();
	static ::jint& fNONNULL();
	static ::jint& fORDERED();
	static ::jint& fSIZED();
	static ::jint& fSORTED();
	static ::jint& fSUBSIZED();
	::jint Characteristics() const;
	::jlong EstimateSize() const;
	::jvoid ForEachRemaining(const ::java::util::function::Consumer& arg0) const;
	::java::util::Comparator GetComparator() const;
	::jlong GetExactSizeIfKnown() const;
	::jboolean HasCharacteristics(const ::jint& arg0) const;
	::jboolean TryAdvance(const ::java::util::function::Consumer& arg0) const;
	::java::util::Spliterator TrySplit() const;
	explicit Spliterator(jobject o) : java::lang::Object(o) {}
	Spliterator(const Spliterator& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::Spliterator();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jint Characteristics() = 0;
		virtual ::jlong EstimateSize() = 0;
		virtual void ForEachRemaining(const ::java::util::function::Consumer& arg0) = 0;
		virtual ::java::util::Comparator GetComparator() = 0;
		virtual ::jlong GetExactSizeIfKnown() = 0;
		virtual ::jboolean HasCharacteristics(const ::jint& arg0) = 0;
		virtual ::jboolean TryAdvance(const ::java::util::function::Consumer& arg0) = 0;
		virtual ::java::util::Spliterator TrySplit() = 0;
	};
};

struct Comparator : java::lang::Object
{
	static jni::Class __CLASS;

	::jint Compare(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) const;
	static ::java::util::Comparator Comparing(const ::java::util::function::Function& arg0);
	static ::java::util::Comparator Comparing(const ::java::util::function::Function& arg0, const ::java::util::Comparator& arg1);
	static ::java::util::Comparator ComparingDouble(const ::java::util::function::ToDoubleFunction& arg0);
	static ::java::util::Comparator ComparingInt(const ::java::util::function::ToIntFunction& arg0);
	static ::java::util::Comparator ComparingLong(const ::java::util::function::ToLongFunction& arg0);
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	static ::java::util::Comparator NaturalOrder();
	static ::java::util::Comparator NullsFirst(const ::java::util::Comparator& arg0);
	static ::java::util::Comparator NullsLast(const ::java::util::Comparator& arg0);
	static ::java::util::Comparator ReverseOrder();
	::java::util::Comparator Reversed() const;
	::java::util::Comparator ThenComparing(const ::java::util::Comparator& arg0) const;
	::java::util::Comparator ThenComparing(const ::java::util::function::Function& arg0) const;
	::java::util::Comparator ThenComparing(const ::java::util::function::Function& arg0, const ::java::util::Comparator& arg1) const;
	::java::util::Comparator ThenComparingDouble(const ::java::util::function::ToDoubleFunction& arg0) const;
	::java::util::Comparator ThenComparingInt(const ::java::util::function::ToIntFunction& arg0) const;
	::java::util::Comparator ThenComparingLong(const ::java::util::function::ToLongFunction& arg0) const;
	explicit Comparator(jobject o) : java::lang::Object(o) {}
	Comparator(const Comparator& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::Comparator();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jint Compare(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) = 0;
		virtual ::jboolean Equals(const ::java::lang::Object& arg0) = 0;
		virtual ::java::util::Comparator Reversed() = 0;
		virtual ::java::util::Comparator ThenComparing(const ::java::util::Comparator& arg0) = 0;
		virtual ::java::util::Comparator ThenComparing(const ::java::util::function::Function& arg0) = 0;
		virtual ::java::util::Comparator ThenComparing(const ::java::util::function::Function& arg0, const ::java::util::Comparator& arg1) = 0;
		virtual ::java::util::Comparator ThenComparingDouble(const ::java::util::function::ToDoubleFunction& arg0) = 0;
		virtual ::java::util::Comparator ThenComparingInt(const ::java::util::function::ToIntFunction& arg0) = 0;
		virtual ::java::util::Comparator ThenComparingLong(const ::java::util::function::ToLongFunction& arg0) = 0;
	};
};

}}

namespace java { namespace util { namespace function { 
struct Function : java::lang::Object
{
	static jni::Class __CLASS;

	::java::util::function::Function AndThen(const ::java::util::function::Function& arg0) const;
	::java::lang::Object Apply(const ::java::lang::Object& arg0) const;
	::java::util::function::Function Compose(const ::java::util::function::Function& arg0) const;
	static ::java::util::function::Function Identity();
	explicit Function(jobject o) : java::lang::Object(o) {}
	Function(const Function& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::function::Function();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::util::function::Function AndThen(const ::java::util::function::Function& arg0) = 0;
		virtual ::java::lang::Object Apply(const ::java::lang::Object& arg0) = 0;
		virtual ::java::util::function::Function Compose(const ::java::util::function::Function& arg0) = 0;
	};
};

struct ToDoubleFunction : java::lang::Object
{
	static jni::Class __CLASS;

	::jdouble ApplyAsDouble(const ::java::lang::Object& arg0) const;
	explicit ToDoubleFunction(jobject o) : java::lang::Object(o) {}
	ToDoubleFunction(const ToDoubleFunction& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::function::ToDoubleFunction();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jdouble ApplyAsDouble(const ::java::lang::Object& arg0) = 0;
	};
};

struct ToIntFunction : java::lang::Object
{
	static jni::Class __CLASS;

	::jint ApplyAsInt(const ::java::lang::Object& arg0) const;
	explicit ToIntFunction(jobject o) : java::lang::Object(o) {}
	ToIntFunction(const ToIntFunction& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::function::ToIntFunction();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jint ApplyAsInt(const ::java::lang::Object& arg0) = 0;
	};
};

struct ToLongFunction : java::lang::Object
{
	static jni::Class __CLASS;

	::jlong ApplyAsLong(const ::java::lang::Object& arg0) const;
	explicit ToLongFunction(jobject o) : java::lang::Object(o) {}
	ToLongFunction(const ToLongFunction& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::function::ToLongFunction();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jlong ApplyAsLong(const ::java::lang::Object& arg0) = 0;
	};
};

struct IntPredicate : java::lang::Object
{
	static jni::Class __CLASS;

	::java::util::function::IntPredicate And(const ::java::util::function::IntPredicate& arg0) const;
	::java::util::function::IntPredicate Negate() const;
	::java::util::function::IntPredicate Or(const ::java::util::function::IntPredicate& arg0) const;
	::jboolean Test(const ::jint& arg0) const;
	explicit IntPredicate(jobject o) : java::lang::Object(o) {}
	IntPredicate(const IntPredicate& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::function::IntPredicate();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::util::function::IntPredicate And(const ::java::util::function::IntPredicate& arg0) = 0;
		virtual ::java::util::function::IntPredicate Negate() = 0;
		virtual ::java::util::function::IntPredicate Or(const ::java::util::function::IntPredicate& arg0) = 0;
		virtual ::jboolean Test(const ::jint& arg0) = 0;
	};
};

}}}

namespace java { namespace util { namespace stream { 
struct DoubleStream : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::util::stream::BaseStream();
	::jboolean AllMatch(const ::java::util::function::DoublePredicate& arg0) const;
	::jboolean AnyMatch(const ::java::util::function::DoublePredicate& arg0) const;
	::java::util::OptionalDouble Average() const;
	::java::util::stream::Stream Boxed() const;
	static ::java::util::stream::DoubleStream_Builder Builder();
	::java::lang::Object Collect(const ::java::util::function::Supplier& arg0, const ::java::util::function::ObjDoubleConsumer& arg1, const ::java::util::function::BiConsumer& arg2) const;
	static ::java::util::stream::DoubleStream Concat(const ::java::util::stream::DoubleStream& arg0, const ::java::util::stream::DoubleStream& arg1);
	::jlong Count() const;
	::java::util::stream::DoubleStream Distinct() const;
	::java::util::stream::DoubleStream DropWhile(const ::java::util::function::DoublePredicate& arg0) const;
	static ::java::util::stream::DoubleStream Empty();
	::java::util::stream::DoubleStream Filter(const ::java::util::function::DoublePredicate& arg0) const;
	::java::util::OptionalDouble FindAny() const;
	::java::util::OptionalDouble FindFirst() const;
	::java::util::stream::DoubleStream FlatMap(const ::java::util::function::DoubleFunction& arg0) const;
	::jvoid ForEach(const ::java::util::function::DoubleConsumer& arg0) const;
	::jvoid ForEachOrdered(const ::java::util::function::DoubleConsumer& arg0) const;
	static ::java::util::stream::DoubleStream Generate(const ::java::util::function::DoubleSupplier& arg0);
	static ::java::util::stream::DoubleStream Iterate(const ::jdouble& arg0, const ::java::util::function::DoublePredicate& arg1, const ::java::util::function::DoubleUnaryOperator& arg2);
	static ::java::util::stream::DoubleStream Iterate(const ::jdouble& arg0, const ::java::util::function::DoubleUnaryOperator& arg1);
	::java::util::PrimitiveIterator_OfDouble Iterator() const;
	::java::util::stream::DoubleStream Limit(const ::jlong& arg0) const;
	::java::util::stream::DoubleStream Map(const ::java::util::function::DoubleUnaryOperator& arg0) const;
	::java::util::stream::IntStream MapToInt(const ::java::util::function::DoubleToIntFunction& arg0) const;
	::java::util::stream::LongStream MapToLong(const ::java::util::function::DoubleToLongFunction& arg0) const;
	::java::util::stream::Stream MapToObj(const ::java::util::function::DoubleFunction& arg0) const;
	::java::util::OptionalDouble Max() const;
	::java::util::OptionalDouble Min() const;
	::jboolean NoneMatch(const ::java::util::function::DoublePredicate& arg0) const;
	static ::java::util::stream::DoubleStream Of(const ::jdouble& arg0);
	static ::java::util::stream::DoubleStream Of(const jni::Array< ::jdouble >& arg0);
	::java::util::stream::DoubleStream Parallel() const;
	::java::util::stream::DoubleStream Peek(const ::java::util::function::DoubleConsumer& arg0) const;
	::jdouble Reduce(const ::jdouble& arg0, const ::java::util::function::DoubleBinaryOperator& arg1) const;
	::java::util::OptionalDouble Reduce(const ::java::util::function::DoubleBinaryOperator& arg0) const;
	::java::util::stream::DoubleStream Sequential() const;
	::java::util::stream::DoubleStream Skip(const ::jlong& arg0) const;
	::java::util::stream::DoubleStream Sorted() const;
	::java::util::Spliterator_OfDouble Spliterator() const;
	::jdouble Sum() const;
	::java::util::DoubleSummaryStatistics SummaryStatistics() const;
	::java::util::stream::DoubleStream TakeWhile(const ::java::util::function::DoublePredicate& arg0) const;
	jni::Array< ::jdouble > ToArray() const;
	explicit DoubleStream(jobject o) : java::lang::Object(o) {}
	DoubleStream(const DoubleStream& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::stream::DoubleStream();
		operator ::java::util::stream::BaseStream();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean AllMatch(const ::java::util::function::DoublePredicate& arg0) = 0;
		virtual ::jboolean AnyMatch(const ::java::util::function::DoublePredicate& arg0) = 0;
		virtual ::java::util::OptionalDouble Average() = 0;
		virtual ::java::util::stream::Stream Boxed() = 0;
		virtual ::java::lang::Object Collect(const ::java::util::function::Supplier& arg0, const ::java::util::function::ObjDoubleConsumer& arg1, const ::java::util::function::BiConsumer& arg2) = 0;
		virtual ::jlong Count() = 0;
		virtual ::java::util::stream::DoubleStream Distinct() = 0;
		virtual ::java::util::stream::DoubleStream DropWhile(const ::java::util::function::DoublePredicate& arg0) = 0;
		virtual ::java::util::stream::DoubleStream Filter(const ::java::util::function::DoublePredicate& arg0) = 0;
		virtual ::java::util::OptionalDouble FindAny() = 0;
		virtual ::java::util::OptionalDouble FindFirst() = 0;
		virtual ::java::util::stream::DoubleStream FlatMap(const ::java::util::function::DoubleFunction& arg0) = 0;
		virtual void ForEach(const ::java::util::function::DoubleConsumer& arg0) = 0;
		virtual void ForEachOrdered(const ::java::util::function::DoubleConsumer& arg0) = 0;
		virtual ::java::util::PrimitiveIterator_OfDouble Iterator() = 0;
		virtual ::java::util::stream::DoubleStream Limit(const ::jlong& arg0) = 0;
		virtual ::java::util::stream::DoubleStream Map(const ::java::util::function::DoubleUnaryOperator& arg0) = 0;
		virtual ::java::util::stream::IntStream MapToInt(const ::java::util::function::DoubleToIntFunction& arg0) = 0;
		virtual ::java::util::stream::LongStream MapToLong(const ::java::util::function::DoubleToLongFunction& arg0) = 0;
		virtual ::java::util::stream::Stream MapToObj(const ::java::util::function::DoubleFunction& arg0) = 0;
		virtual ::java::util::OptionalDouble Max() = 0;
		virtual ::java::util::OptionalDouble Min() = 0;
		virtual ::jboolean NoneMatch(const ::java::util::function::DoublePredicate& arg0) = 0;
		virtual ::java::util::stream::DoubleStream Parallel() = 0;
		virtual ::java::util::stream::DoubleStream Peek(const ::java::util::function::DoubleConsumer& arg0) = 0;
		virtual ::jdouble Reduce(const ::jdouble& arg0, const ::java::util::function::DoubleBinaryOperator& arg1) = 0;
		virtual ::java::util::OptionalDouble Reduce(const ::java::util::function::DoubleBinaryOperator& arg0) = 0;
		virtual ::java::util::stream::DoubleStream Sequential() = 0;
		virtual ::java::util::stream::DoubleStream Skip(const ::jlong& arg0) = 0;
		virtual ::java::util::stream::DoubleStream Sorted() = 0;
		virtual ::java::util::Spliterator_OfDouble Spliterator() = 0;
		virtual ::jdouble Sum() = 0;
		virtual ::java::util::DoubleSummaryStatistics SummaryStatistics() = 0;
		virtual ::java::util::stream::DoubleStream TakeWhile(const ::java::util::function::DoublePredicate& arg0) = 0;
		virtual jni::Array< ::jdouble > ToArray() = 0;
	};
};

}}}

namespace java { namespace util { namespace function { 
struct DoublePredicate : java::lang::Object
{
	static jni::Class __CLASS;

	::java::util::function::DoublePredicate And(const ::java::util::function::DoublePredicate& arg0) const;
	::java::util::function::DoublePredicate Negate() const;
	::java::util::function::DoublePredicate Or(const ::java::util::function::DoublePredicate& arg0) const;
	::jboolean Test(const ::jdouble& arg0) const;
	explicit DoublePredicate(jobject o) : java::lang::Object(o) {}
	DoublePredicate(const DoublePredicate& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::function::DoublePredicate();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::util::function::DoublePredicate And(const ::java::util::function::DoublePredicate& arg0) = 0;
		virtual ::java::util::function::DoublePredicate Negate() = 0;
		virtual ::java::util::function::DoublePredicate Or(const ::java::util::function::DoublePredicate& arg0) = 0;
		virtual ::jboolean Test(const ::jdouble& arg0) = 0;
	};
};

}}}

namespace java { namespace util { 
struct OptionalDouble : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::java::util::OptionalDouble Empty();
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jdouble GetAsDouble() const;
	::jint HashCode() const;
	::jvoid IfPresent(const ::java::util::function::DoubleConsumer& arg0) const;
	::jvoid IfPresentOrElse(const ::java::util::function::DoubleConsumer& arg0, const ::java::lang::Runnable& arg1) const;
	::jboolean IsEmpty() const;
	::jboolean IsPresent() const;
	static ::java::util::OptionalDouble Of(const ::jdouble& arg0);
	::jdouble OrElse(const ::jdouble& arg0) const;
	::jdouble OrElseGet(const ::java::util::function::DoubleSupplier& arg0) const;
	::jdouble OrElseThrow() const;
	::jdouble OrElseThrow(const ::java::util::function::Supplier& arg0) const;
	::java::util::stream::DoubleStream Stream() const;
	::java::lang::String ToString() const;
	explicit OptionalDouble(jobject o) : ::java::lang::Object(o) {}
	OptionalDouble(const OptionalDouble& o)  : ::java::lang::Object(o) {}

};

}}

namespace java { namespace util { namespace function { 
struct DoubleConsumer : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid Accept(const ::jdouble& arg0) const;
	::java::util::function::DoubleConsumer AndThen(const ::java::util::function::DoubleConsumer& arg0) const;
	explicit DoubleConsumer(jobject o) : java::lang::Object(o) {}
	DoubleConsumer(const DoubleConsumer& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::function::DoubleConsumer();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void Accept(const ::jdouble& arg0) = 0;
		virtual ::java::util::function::DoubleConsumer AndThen(const ::java::util::function::DoubleConsumer& arg0) = 0;
	};
};

struct DoubleSupplier : java::lang::Object
{
	static jni::Class __CLASS;

	::jdouble GetAsDouble() const;
	explicit DoubleSupplier(jobject o) : java::lang::Object(o) {}
	DoubleSupplier(const DoubleSupplier& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::function::DoubleSupplier();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jdouble GetAsDouble() = 0;
	};
};

struct Supplier : java::lang::Object
{
	static jni::Class __CLASS;

	::java::lang::Object Get() const;
	explicit Supplier(jobject o) : java::lang::Object(o) {}
	Supplier(const Supplier& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::function::Supplier();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::lang::Object Get() = 0;
	};
};

}}}

namespace java { namespace util { namespace stream { 
struct Stream : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::util::stream::BaseStream();
	::jboolean AllMatch(const ::java::util::function::Predicate& arg0) const;
	::jboolean AnyMatch(const ::java::util::function::Predicate& arg0) const;
	static ::java::util::stream::Stream_Builder Builder();
	::java::lang::Object Collect(const ::java::util::function::Supplier& arg0, const ::java::util::function::BiConsumer& arg1, const ::java::util::function::BiConsumer& arg2) const;
	::java::lang::Object Collect(const ::java::util::stream::Collector& arg0) const;
	static ::java::util::stream::Stream Concat(const ::java::util::stream::Stream& arg0, const ::java::util::stream::Stream& arg1);
	::jlong Count() const;
	::java::util::stream::Stream Distinct() const;
	::java::util::stream::Stream DropWhile(const ::java::util::function::Predicate& arg0) const;
	static ::java::util::stream::Stream Empty();
	::java::util::stream::Stream Filter(const ::java::util::function::Predicate& arg0) const;
	::java::util::Optional FindAny() const;
	::java::util::Optional FindFirst() const;
	::java::util::stream::Stream FlatMap(const ::java::util::function::Function& arg0) const;
	::java::util::stream::DoubleStream FlatMapToDouble(const ::java::util::function::Function& arg0) const;
	::java::util::stream::IntStream FlatMapToInt(const ::java::util::function::Function& arg0) const;
	::java::util::stream::LongStream FlatMapToLong(const ::java::util::function::Function& arg0) const;
	::jvoid ForEach(const ::java::util::function::Consumer& arg0) const;
	::jvoid ForEachOrdered(const ::java::util::function::Consumer& arg0) const;
	static ::java::util::stream::Stream Generate(const ::java::util::function::Supplier& arg0);
	static ::java::util::stream::Stream Iterate(const ::java::lang::Object& arg0, const ::java::util::function::Predicate& arg1, const ::java::util::function::UnaryOperator& arg2);
	static ::java::util::stream::Stream Iterate(const ::java::lang::Object& arg0, const ::java::util::function::UnaryOperator& arg1);
	::java::util::stream::Stream Limit(const ::jlong& arg0) const;
	::java::util::stream::Stream Map(const ::java::util::function::Function& arg0) const;
	::java::util::stream::DoubleStream MapToDouble(const ::java::util::function::ToDoubleFunction& arg0) const;
	::java::util::stream::IntStream MapToInt(const ::java::util::function::ToIntFunction& arg0) const;
	::java::util::stream::LongStream MapToLong(const ::java::util::function::ToLongFunction& arg0) const;
	::java::util::Optional Max(const ::java::util::Comparator& arg0) const;
	::java::util::Optional Min(const ::java::util::Comparator& arg0) const;
	::jboolean NoneMatch(const ::java::util::function::Predicate& arg0) const;
	static ::java::util::stream::Stream Of(const ::java::lang::Object& arg0);
	static ::java::util::stream::Stream Of(const jni::Array< ::java::lang::Object >& arg0);
	static ::java::util::stream::Stream OfNullable(const ::java::lang::Object& arg0);
	::java::util::stream::Stream Peek(const ::java::util::function::Consumer& arg0) const;
	::java::lang::Object Reduce(const ::java::lang::Object& arg0, const ::java::util::function::BiFunction& arg1, const ::java::util::function::BinaryOperator& arg2) const;
	::java::lang::Object Reduce(const ::java::lang::Object& arg0, const ::java::util::function::BinaryOperator& arg1) const;
	::java::util::Optional Reduce(const ::java::util::function::BinaryOperator& arg0) const;
	::java::util::stream::Stream Skip(const ::jlong& arg0) const;
	::java::util::stream::Stream Sorted() const;
	::java::util::stream::Stream Sorted(const ::java::util::Comparator& arg0) const;
	::java::util::stream::Stream TakeWhile(const ::java::util::function::Predicate& arg0) const;
	jni::Array< ::java::lang::Object > ToArray() const;
	jni::Array< ::java::lang::Object > ToArray(const ::java::util::function::IntFunction& arg0) const;
	explicit Stream(jobject o) : java::lang::Object(o) {}
	Stream(const Stream& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::stream::Stream();
		operator ::java::util::stream::BaseStream();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean AllMatch(const ::java::util::function::Predicate& arg0) = 0;
		virtual ::jboolean AnyMatch(const ::java::util::function::Predicate& arg0) = 0;
		virtual ::java::lang::Object Collect(const ::java::util::function::Supplier& arg0, const ::java::util::function::BiConsumer& arg1, const ::java::util::function::BiConsumer& arg2) = 0;
		virtual ::java::lang::Object Collect(const ::java::util::stream::Collector& arg0) = 0;
		virtual ::jlong Count() = 0;
		virtual ::java::util::stream::Stream Distinct() = 0;
		virtual ::java::util::stream::Stream DropWhile(const ::java::util::function::Predicate& arg0) = 0;
		virtual ::java::util::stream::Stream Filter(const ::java::util::function::Predicate& arg0) = 0;
		virtual ::java::util::Optional FindAny() = 0;
		virtual ::java::util::Optional FindFirst() = 0;
		virtual ::java::util::stream::Stream FlatMap(const ::java::util::function::Function& arg0) = 0;
		virtual ::java::util::stream::DoubleStream FlatMapToDouble(const ::java::util::function::Function& arg0) = 0;
		virtual ::java::util::stream::IntStream FlatMapToInt(const ::java::util::function::Function& arg0) = 0;
		virtual ::java::util::stream::LongStream FlatMapToLong(const ::java::util::function::Function& arg0) = 0;
		virtual void ForEach(const ::java::util::function::Consumer& arg0) = 0;
		virtual void ForEachOrdered(const ::java::util::function::Consumer& arg0) = 0;
		virtual ::java::util::stream::Stream Limit(const ::jlong& arg0) = 0;
		virtual ::java::util::stream::Stream Map(const ::java::util::function::Function& arg0) = 0;
		virtual ::java::util::stream::DoubleStream MapToDouble(const ::java::util::function::ToDoubleFunction& arg0) = 0;
		virtual ::java::util::stream::IntStream MapToInt(const ::java::util::function::ToIntFunction& arg0) = 0;
		virtual ::java::util::stream::LongStream MapToLong(const ::java::util::function::ToLongFunction& arg0) = 0;
		virtual ::java::util::Optional Max(const ::java::util::Comparator& arg0) = 0;
		virtual ::java::util::Optional Min(const ::java::util::Comparator& arg0) = 0;
		virtual ::jboolean NoneMatch(const ::java::util::function::Predicate& arg0) = 0;
		virtual ::java::util::stream::Stream Peek(const ::java::util::function::Consumer& arg0) = 0;
		virtual ::java::lang::Object Reduce(const ::java::lang::Object& arg0, const ::java::util::function::BiFunction& arg1, const ::java::util::function::BinaryOperator& arg2) = 0;
		virtual ::java::lang::Object Reduce(const ::java::lang::Object& arg0, const ::java::util::function::BinaryOperator& arg1) = 0;
		virtual ::java::util::Optional Reduce(const ::java::util::function::BinaryOperator& arg0) = 0;
		virtual ::java::util::stream::Stream Skip(const ::jlong& arg0) = 0;
		virtual ::java::util::stream::Stream Sorted() = 0;
		virtual ::java::util::stream::Stream Sorted(const ::java::util::Comparator& arg0) = 0;
		virtual ::java::util::stream::Stream TakeWhile(const ::java::util::function::Predicate& arg0) = 0;
		virtual jni::Array< ::java::lang::Object > ToArray() = 0;
		virtual jni::Array< ::java::lang::Object > ToArray(const ::java::util::function::IntFunction& arg0) = 0;
	};
};

}}}

namespace java { namespace util { namespace function { 
struct Predicate : java::lang::Object
{
	static jni::Class __CLASS;

	::java::util::function::Predicate And(const ::java::util::function::Predicate& arg0) const;
	static ::java::util::function::Predicate IsEqual(const ::java::lang::Object& arg0);
	::java::util::function::Predicate Negate() const;
	static ::java::util::function::Predicate Not(const ::java::util::function::Predicate& arg0);
	::java::util::function::Predicate Or(const ::java::util::function::Predicate& arg0) const;
	::jboolean Test(const ::java::lang::Object& arg0) const;
	explicit Predicate(jobject o) : java::lang::Object(o) {}
	Predicate(const Predicate& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::function::Predicate();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::util::function::Predicate And(const ::java::util::function::Predicate& arg0) = 0;
		virtual ::java::util::function::Predicate Negate() = 0;
		virtual ::java::util::function::Predicate Or(const ::java::util::function::Predicate& arg0) = 0;
		virtual ::jboolean Test(const ::java::lang::Object& arg0) = 0;
	};
};

}}}

namespace java { namespace util { namespace stream { 
struct Stream_Builder : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::util::function::Consumer();
	::jvoid Accept(const ::java::lang::Object& arg0) const;
	::java::util::stream::Stream_Builder Add(const ::java::lang::Object& arg0) const;
	::java::util::stream::Stream Build() const;
	explicit Stream_Builder(jobject o) : java::lang::Object(o) {}
	Stream_Builder(const Stream_Builder& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::stream::Stream_Builder();
		operator ::java::util::function::Consumer();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void Accept(const ::java::lang::Object& arg0) = 0;
		virtual ::java::util::stream::Stream_Builder Add(const ::java::lang::Object& arg0) = 0;
		virtual ::java::util::stream::Stream Build() = 0;
	};
};

}}}

namespace java { namespace util { namespace function { 
struct BiConsumer : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid Accept(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) const;
	::java::util::function::BiConsumer AndThen(const ::java::util::function::BiConsumer& arg0) const;
	explicit BiConsumer(jobject o) : java::lang::Object(o) {}
	BiConsumer(const BiConsumer& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::function::BiConsumer();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void Accept(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) = 0;
		virtual ::java::util::function::BiConsumer AndThen(const ::java::util::function::BiConsumer& arg0) = 0;
	};
};

}}}

namespace java { namespace util { namespace stream { 
struct Collector : java::lang::Object
{
	static jni::Class __CLASS;

	::java::util::function::BiConsumer Accumulator() const;
	::java::util::Set Characteristics() const;
	::java::util::function::BinaryOperator Combiner() const;
	::java::util::function::Function Finisher() const;
	static ::java::util::stream::Collector Of(const ::java::util::function::Supplier& arg0, const ::java::util::function::BiConsumer& arg1, const ::java::util::function::BinaryOperator& arg2, const ::java::util::function::Function& arg3, const jni::Array< ::java::util::stream::Collector_Characteristics >& arg4);
	static ::java::util::stream::Collector Of(const ::java::util::function::Supplier& arg0, const ::java::util::function::BiConsumer& arg1, const ::java::util::function::BinaryOperator& arg2, const jni::Array< ::java::util::stream::Collector_Characteristics >& arg3);
	::java::util::function::Supplier Supplier() const;
	explicit Collector(jobject o) : java::lang::Object(o) {}
	Collector(const Collector& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::stream::Collector();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::util::function::BiConsumer Accumulator() = 0;
		virtual ::java::util::Set Characteristics() = 0;
		virtual ::java::util::function::BinaryOperator Combiner() = 0;
		virtual ::java::util::function::Function Finisher() = 0;
		virtual ::java::util::function::Supplier Supplier() = 0;
	};
};

}}}

namespace java { namespace util { 
struct Set : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::util::Collection();
	::jboolean Add(const ::java::lang::Object& arg0) const;
	::jboolean AddAll(const ::java::util::Collection& arg0) const;
	::jvoid Clear() const;
	::jboolean Contains(const ::java::lang::Object& arg0) const;
	::jboolean ContainsAll(const ::java::util::Collection& arg0) const;
	static ::java::util::Set CopyOf(const ::java::util::Collection& arg0);
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint HashCode() const;
	::jboolean IsEmpty() const;
	::java::util::Iterator Iterator() const;
	static ::java::util::Set Of();
	static ::java::util::Set Of(const ::java::lang::Object& arg0);
	static ::java::util::Set Of(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1);
	static ::java::util::Set Of(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1, const ::java::lang::Object& arg2);
	static ::java::util::Set Of(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1, const ::java::lang::Object& arg2, const ::java::lang::Object& arg3);
	static ::java::util::Set Of(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1, const ::java::lang::Object& arg2, const ::java::lang::Object& arg3, const ::java::lang::Object& arg4);
	static ::java::util::Set Of(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1, const ::java::lang::Object& arg2, const ::java::lang::Object& arg3, const ::java::lang::Object& arg4, const ::java::lang::Object& arg5);
	static ::java::util::Set Of(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1, const ::java::lang::Object& arg2, const ::java::lang::Object& arg3, const ::java::lang::Object& arg4, const ::java::lang::Object& arg5, const ::java::lang::Object& arg6);
	static ::java::util::Set Of(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1, const ::java::lang::Object& arg2, const ::java::lang::Object& arg3, const ::java::lang::Object& arg4, const ::java::lang::Object& arg5, const ::java::lang::Object& arg6, const ::java::lang::Object& arg7);
	static ::java::util::Set Of(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1, const ::java::lang::Object& arg2, const ::java::lang::Object& arg3, const ::java::lang::Object& arg4, const ::java::lang::Object& arg5, const ::java::lang::Object& arg6, const ::java::lang::Object& arg7, const ::java::lang::Object& arg8);
	static ::java::util::Set Of(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1, const ::java::lang::Object& arg2, const ::java::lang::Object& arg3, const ::java::lang::Object& arg4, const ::java::lang::Object& arg5, const ::java::lang::Object& arg6, const ::java::lang::Object& arg7, const ::java::lang::Object& arg8, const ::java::lang::Object& arg9);
	static ::java::util::Set Of(const jni::Array< ::java::lang::Object >& arg0);
	::jboolean Remove(const ::java::lang::Object& arg0) const;
	::jboolean RemoveAll(const ::java::util::Collection& arg0) const;
	::jboolean RetainAll(const ::java::util::Collection& arg0) const;
	::jint Size() const;
	::java::util::Spliterator Spliterator() const;
	jni::Array< ::java::lang::Object > ToArray() const;
	jni::Array< ::java::lang::Object > ToArray(const jni::Array< ::java::lang::Object >& arg0) const;
	explicit Set(jobject o) : java::lang::Object(o) {}
	Set(const Set& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::Set();
		operator ::java::util::Collection();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean Add(const ::java::lang::Object& arg0) = 0;
		virtual ::jboolean AddAll(const ::java::util::Collection& arg0) = 0;
		virtual void Clear() = 0;
		virtual ::jboolean Contains(const ::java::lang::Object& arg0) = 0;
		virtual ::jboolean ContainsAll(const ::java::util::Collection& arg0) = 0;
		virtual ::jboolean Equals(const ::java::lang::Object& arg0) = 0;
		virtual ::jint HashCode() = 0;
		virtual ::jboolean IsEmpty() = 0;
		virtual ::java::util::Iterator Iterator() = 0;
		virtual ::jboolean Remove(const ::java::lang::Object& arg0) = 0;
		virtual ::jboolean RemoveAll(const ::java::util::Collection& arg0) = 0;
		virtual ::jboolean RetainAll(const ::java::util::Collection& arg0) = 0;
		virtual ::jint Size() = 0;
		virtual ::java::util::Spliterator Spliterator() = 0;
		virtual jni::Array< ::java::lang::Object > ToArray() = 0;
		virtual jni::Array< ::java::lang::Object > ToArray(const jni::Array< ::java::lang::Object >& arg0) = 0;
	};
};

struct Collection : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::Iterable();
	::jboolean Add(const ::java::lang::Object& arg0) const;
	::jboolean AddAll(const ::java::util::Collection& arg0) const;
	::jvoid Clear() const;
	::jboolean Contains(const ::java::lang::Object& arg0) const;
	::jboolean ContainsAll(const ::java::util::Collection& arg0) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint HashCode() const;
	::jboolean IsEmpty() const;
	::java::util::Iterator Iterator() const;
	::java::util::stream::Stream ParallelStream() const;
	::jboolean Remove(const ::java::lang::Object& arg0) const;
	::jboolean RemoveAll(const ::java::util::Collection& arg0) const;
	::jboolean RemoveIf(const ::java::util::function::Predicate& arg0) const;
	::jboolean RetainAll(const ::java::util::Collection& arg0) const;
	::jint Size() const;
	::java::util::Spliterator Spliterator() const;
	::java::util::stream::Stream Stream() const;
	jni::Array< ::java::lang::Object > ToArray() const;
	jni::Array< ::java::lang::Object > ToArray(const ::java::util::function::IntFunction& arg0) const;
	jni::Array< ::java::lang::Object > ToArray(const jni::Array< ::java::lang::Object >& arg0) const;
	explicit Collection(jobject o) : java::lang::Object(o) {}
	Collection(const Collection& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::Collection();
		operator ::java::lang::Iterable();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean Add(const ::java::lang::Object& arg0) = 0;
		virtual ::jboolean AddAll(const ::java::util::Collection& arg0) = 0;
		virtual void Clear() = 0;
		virtual ::jboolean Contains(const ::java::lang::Object& arg0) = 0;
		virtual ::jboolean ContainsAll(const ::java::util::Collection& arg0) = 0;
		virtual ::jboolean Equals(const ::java::lang::Object& arg0) = 0;
		virtual ::jint HashCode() = 0;
		virtual ::jboolean IsEmpty() = 0;
		virtual ::java::util::Iterator Iterator() = 0;
		virtual ::java::util::stream::Stream ParallelStream() = 0;
		virtual ::jboolean Remove(const ::java::lang::Object& arg0) = 0;
		virtual ::jboolean RemoveAll(const ::java::util::Collection& arg0) = 0;
		virtual ::jboolean RemoveIf(const ::java::util::function::Predicate& arg0) = 0;
		virtual ::jboolean RetainAll(const ::java::util::Collection& arg0) = 0;
		virtual ::jint Size() = 0;
		virtual ::java::util::Spliterator Spliterator() = 0;
		virtual ::java::util::stream::Stream Stream() = 0;
		virtual jni::Array< ::java::lang::Object > ToArray() = 0;
		virtual jni::Array< ::java::lang::Object > ToArray(const ::java::util::function::IntFunction& arg0) = 0;
		virtual jni::Array< ::java::lang::Object > ToArray(const jni::Array< ::java::lang::Object >& arg0) = 0;
	};
};

}}

namespace java { namespace lang { 
struct Iterable : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid ForEach(const ::java::util::function::Consumer& arg0) const;
	::java::util::Iterator Iterator() const;
	::java::util::Spliterator Spliterator() const;
	explicit Iterable(jobject o) : java::lang::Object(o) {}
	Iterable(const Iterable& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::lang::Iterable();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void ForEach(const ::java::util::function::Consumer& arg0) = 0;
		virtual ::java::util::Iterator Iterator() = 0;
		virtual ::java::util::Spliterator Spliterator() = 0;
	};
};

}}

namespace java { namespace util { namespace function { 
struct IntFunction : java::lang::Object
{
	static jni::Class __CLASS;

	::java::lang::Object Apply(const ::jint& arg0) const;
	explicit IntFunction(jobject o) : java::lang::Object(o) {}
	IntFunction(const IntFunction& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::function::IntFunction();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::lang::Object Apply(const ::jint& arg0) = 0;
	};
};

struct BinaryOperator : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::util::function::BiFunction();
	static ::java::util::function::BinaryOperator MaxBy(const ::java::util::Comparator& arg0);
	static ::java::util::function::BinaryOperator MinBy(const ::java::util::Comparator& arg0);
	explicit BinaryOperator(jobject o) : java::lang::Object(o) {}
	BinaryOperator(const BinaryOperator& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::function::BinaryOperator();
		operator ::java::util::function::BiFunction();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
	};
};

struct BiFunction : java::lang::Object
{
	static jni::Class __CLASS;

	::java::util::function::BiFunction AndThen(const ::java::util::function::Function& arg0) const;
	::java::lang::Object Apply(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) const;
	explicit BiFunction(jobject o) : java::lang::Object(o) {}
	BiFunction(const BiFunction& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::function::BiFunction();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::util::function::BiFunction AndThen(const ::java::util::function::Function& arg0) = 0;
		virtual ::java::lang::Object Apply(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) = 0;
	};
};

}}}

namespace java { namespace lang { 
struct Enum : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::Comparable();
	operator ::java::io::Serializable();
	::java::lang::Object Clone() const;
	::jint CompareTo(const ::java::lang::Enum& arg0) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jvoid Finalize() const;
	::java::lang::Class GetDeclaringClass() const;
	::jint HashCode() const;
	::java::lang::String Name() const;
	::jint Ordinal() const;
	::java::lang::String ToString() const;
	static ::java::lang::Enum ValueOf(const ::java::lang::Class& arg0, const ::java::lang::String& arg1);
	static jobject __Constructor(const ::java::lang::String& arg0, const ::jint& arg1);
	Enum(const ::java::lang::String& arg0, const ::jint& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit Enum(jobject o) : ::java::lang::Object(o) {}
	Enum(const Enum& o)  : ::java::lang::Object(o) {}

};

}}

namespace java { namespace util { namespace stream { 
struct Collector_Characteristics : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::java::util::stream::Collector_Characteristics& fCONCURRENT();
	static ::java::util::stream::Collector_Characteristics& fIDENTITY_FINISH();
	static ::java::util::stream::Collector_Characteristics& fUNORDERED();
	static ::java::util::stream::Collector_Characteristics ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::java::util::stream::Collector_Characteristics > Values();
	explicit Collector_Characteristics(jobject o) : ::java::lang::Enum(o) {}
	Collector_Characteristics(const Collector_Characteristics& o)  : ::java::lang::Enum(o) {}

};

}}}

namespace java { namespace util { 
struct Optional : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::java::util::Optional Empty();
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::util::Optional Filter(const ::java::util::function::Predicate& arg0) const;
	::java::util::Optional FlatMap(const ::java::util::function::Function& arg0) const;
	::java::lang::Object Get() const;
	::jint HashCode() const;
	::jvoid IfPresent(const ::java::util::function::Consumer& arg0) const;
	::jvoid IfPresentOrElse(const ::java::util::function::Consumer& arg0, const ::java::lang::Runnable& arg1) const;
	::jboolean IsEmpty() const;
	::jboolean IsPresent() const;
	::java::util::Optional Map(const ::java::util::function::Function& arg0) const;
	static ::java::util::Optional Of(const ::java::lang::Object& arg0);
	static ::java::util::Optional OfNullable(const ::java::lang::Object& arg0);
	::java::util::Optional Or(const ::java::util::function::Supplier& arg0) const;
	::java::lang::Object OrElse(const ::java::lang::Object& arg0) const;
	::java::lang::Object OrElseGet(const ::java::util::function::Supplier& arg0) const;
	::java::lang::Object OrElseThrow() const;
	::java::lang::Object OrElseThrow(const ::java::util::function::Supplier& arg0) const;
	::java::util::stream::Stream Stream() const;
	::java::lang::String ToString() const;
	explicit Optional(jobject o) : ::java::lang::Object(o) {}
	Optional(const Optional& o)  : ::java::lang::Object(o) {}

};

}}

namespace java { namespace util { namespace stream { 
struct LongStream : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::util::stream::BaseStream();
	::jboolean AllMatch(const ::java::util::function::LongPredicate& arg0) const;
	::jboolean AnyMatch(const ::java::util::function::LongPredicate& arg0) const;
	::java::util::stream::DoubleStream AsDoubleStream() const;
	::java::util::OptionalDouble Average() const;
	::java::util::stream::Stream Boxed() const;
	static ::java::util::stream::LongStream_Builder Builder();
	::java::lang::Object Collect(const ::java::util::function::Supplier& arg0, const ::java::util::function::ObjLongConsumer& arg1, const ::java::util::function::BiConsumer& arg2) const;
	static ::java::util::stream::LongStream Concat(const ::java::util::stream::LongStream& arg0, const ::java::util::stream::LongStream& arg1);
	::jlong Count() const;
	::java::util::stream::LongStream Distinct() const;
	::java::util::stream::LongStream DropWhile(const ::java::util::function::LongPredicate& arg0) const;
	static ::java::util::stream::LongStream Empty();
	::java::util::stream::LongStream Filter(const ::java::util::function::LongPredicate& arg0) const;
	::java::util::OptionalLong FindAny() const;
	::java::util::OptionalLong FindFirst() const;
	::java::util::stream::LongStream FlatMap(const ::java::util::function::LongFunction& arg0) const;
	::jvoid ForEach(const ::java::util::function::LongConsumer& arg0) const;
	::jvoid ForEachOrdered(const ::java::util::function::LongConsumer& arg0) const;
	static ::java::util::stream::LongStream Generate(const ::java::util::function::LongSupplier& arg0);
	static ::java::util::stream::LongStream Iterate(const ::jlong& arg0, const ::java::util::function::LongPredicate& arg1, const ::java::util::function::LongUnaryOperator& arg2);
	static ::java::util::stream::LongStream Iterate(const ::jlong& arg0, const ::java::util::function::LongUnaryOperator& arg1);
	::java::util::PrimitiveIterator_OfLong Iterator() const;
	::java::util::stream::LongStream Limit(const ::jlong& arg0) const;
	::java::util::stream::LongStream Map(const ::java::util::function::LongUnaryOperator& arg0) const;
	::java::util::stream::DoubleStream MapToDouble(const ::java::util::function::LongToDoubleFunction& arg0) const;
	::java::util::stream::IntStream MapToInt(const ::java::util::function::LongToIntFunction& arg0) const;
	::java::util::stream::Stream MapToObj(const ::java::util::function::LongFunction& arg0) const;
	::java::util::OptionalLong Max() const;
	::java::util::OptionalLong Min() const;
	::jboolean NoneMatch(const ::java::util::function::LongPredicate& arg0) const;
	static ::java::util::stream::LongStream Of(const ::jlong& arg0);
	static ::java::util::stream::LongStream Of(const jni::Array< ::jlong >& arg0);
	::java::util::stream::LongStream Parallel() const;
	::java::util::stream::LongStream Peek(const ::java::util::function::LongConsumer& arg0) const;
	static ::java::util::stream::LongStream Range(const ::jlong& arg0, const ::jlong& arg1);
	static ::java::util::stream::LongStream RangeClosed(const ::jlong& arg0, const ::jlong& arg1);
	::jlong Reduce(const ::jlong& arg0, const ::java::util::function::LongBinaryOperator& arg1) const;
	::java::util::OptionalLong Reduce(const ::java::util::function::LongBinaryOperator& arg0) const;
	::java::util::stream::LongStream Sequential() const;
	::java::util::stream::LongStream Skip(const ::jlong& arg0) const;
	::java::util::stream::LongStream Sorted() const;
	::java::util::Spliterator_OfLong Spliterator() const;
	::jlong Sum() const;
	::java::util::LongSummaryStatistics SummaryStatistics() const;
	::java::util::stream::LongStream TakeWhile(const ::java::util::function::LongPredicate& arg0) const;
	jni::Array< ::jlong > ToArray() const;
	explicit LongStream(jobject o) : java::lang::Object(o) {}
	LongStream(const LongStream& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::stream::LongStream();
		operator ::java::util::stream::BaseStream();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean AllMatch(const ::java::util::function::LongPredicate& arg0) = 0;
		virtual ::jboolean AnyMatch(const ::java::util::function::LongPredicate& arg0) = 0;
		virtual ::java::util::stream::DoubleStream AsDoubleStream() = 0;
		virtual ::java::util::OptionalDouble Average() = 0;
		virtual ::java::util::stream::Stream Boxed() = 0;
		virtual ::java::lang::Object Collect(const ::java::util::function::Supplier& arg0, const ::java::util::function::ObjLongConsumer& arg1, const ::java::util::function::BiConsumer& arg2) = 0;
		virtual ::jlong Count() = 0;
		virtual ::java::util::stream::LongStream Distinct() = 0;
		virtual ::java::util::stream::LongStream DropWhile(const ::java::util::function::LongPredicate& arg0) = 0;
		virtual ::java::util::stream::LongStream Filter(const ::java::util::function::LongPredicate& arg0) = 0;
		virtual ::java::util::OptionalLong FindAny() = 0;
		virtual ::java::util::OptionalLong FindFirst() = 0;
		virtual ::java::util::stream::LongStream FlatMap(const ::java::util::function::LongFunction& arg0) = 0;
		virtual void ForEach(const ::java::util::function::LongConsumer& arg0) = 0;
		virtual void ForEachOrdered(const ::java::util::function::LongConsumer& arg0) = 0;
		virtual ::java::util::PrimitiveIterator_OfLong Iterator() = 0;
		virtual ::java::util::stream::LongStream Limit(const ::jlong& arg0) = 0;
		virtual ::java::util::stream::LongStream Map(const ::java::util::function::LongUnaryOperator& arg0) = 0;
		virtual ::java::util::stream::DoubleStream MapToDouble(const ::java::util::function::LongToDoubleFunction& arg0) = 0;
		virtual ::java::util::stream::IntStream MapToInt(const ::java::util::function::LongToIntFunction& arg0) = 0;
		virtual ::java::util::stream::Stream MapToObj(const ::java::util::function::LongFunction& arg0) = 0;
		virtual ::java::util::OptionalLong Max() = 0;
		virtual ::java::util::OptionalLong Min() = 0;
		virtual ::jboolean NoneMatch(const ::java::util::function::LongPredicate& arg0) = 0;
		virtual ::java::util::stream::LongStream Parallel() = 0;
		virtual ::java::util::stream::LongStream Peek(const ::java::util::function::LongConsumer& arg0) = 0;
		virtual ::jlong Reduce(const ::jlong& arg0, const ::java::util::function::LongBinaryOperator& arg1) = 0;
		virtual ::java::util::OptionalLong Reduce(const ::java::util::function::LongBinaryOperator& arg0) = 0;
		virtual ::java::util::stream::LongStream Sequential() = 0;
		virtual ::java::util::stream::LongStream Skip(const ::jlong& arg0) = 0;
		virtual ::java::util::stream::LongStream Sorted() = 0;
		virtual ::java::util::Spliterator_OfLong Spliterator() = 0;
		virtual ::jlong Sum() = 0;
		virtual ::java::util::LongSummaryStatistics SummaryStatistics() = 0;
		virtual ::java::util::stream::LongStream TakeWhile(const ::java::util::function::LongPredicate& arg0) = 0;
		virtual jni::Array< ::jlong > ToArray() = 0;
	};
};

}}}

namespace java { namespace util { namespace function { 
struct LongPredicate : java::lang::Object
{
	static jni::Class __CLASS;

	::java::util::function::LongPredicate And(const ::java::util::function::LongPredicate& arg0) const;
	::java::util::function::LongPredicate Negate() const;
	::java::util::function::LongPredicate Or(const ::java::util::function::LongPredicate& arg0) const;
	::jboolean Test(const ::jlong& arg0) const;
	explicit LongPredicate(jobject o) : java::lang::Object(o) {}
	LongPredicate(const LongPredicate& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::function::LongPredicate();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::util::function::LongPredicate And(const ::java::util::function::LongPredicate& arg0) = 0;
		virtual ::java::util::function::LongPredicate Negate() = 0;
		virtual ::java::util::function::LongPredicate Or(const ::java::util::function::LongPredicate& arg0) = 0;
		virtual ::jboolean Test(const ::jlong& arg0) = 0;
	};
};

}}}

namespace java { namespace util { namespace stream { 
struct LongStream_Builder : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::util::function::LongConsumer();
	::jvoid Accept(const ::jlong& arg0) const;
	::java::util::stream::LongStream_Builder Add(const ::jlong& arg0) const;
	::java::util::stream::LongStream Build() const;
	explicit LongStream_Builder(jobject o) : java::lang::Object(o) {}
	LongStream_Builder(const LongStream_Builder& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::stream::LongStream_Builder();
		operator ::java::util::function::LongConsumer();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void Accept(const ::jlong& arg0) = 0;
		virtual ::java::util::stream::LongStream_Builder Add(const ::jlong& arg0) = 0;
		virtual ::java::util::stream::LongStream Build() = 0;
	};
};

}}}

namespace java { namespace util { namespace function { 
struct LongConsumer : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid Accept(const ::jlong& arg0) const;
	::java::util::function::LongConsumer AndThen(const ::java::util::function::LongConsumer& arg0) const;
	explicit LongConsumer(jobject o) : java::lang::Object(o) {}
	LongConsumer(const LongConsumer& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::function::LongConsumer();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void Accept(const ::jlong& arg0) = 0;
		virtual ::java::util::function::LongConsumer AndThen(const ::java::util::function::LongConsumer& arg0) = 0;
	};
};

struct ObjLongConsumer : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid Accept(const ::java::lang::Object& arg0, const ::jlong& arg1) const;
	explicit ObjLongConsumer(jobject o) : java::lang::Object(o) {}
	ObjLongConsumer(const ObjLongConsumer& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::function::ObjLongConsumer();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void Accept(const ::java::lang::Object& arg0, const ::jlong& arg1) = 0;
	};
};

}}}

namespace java { namespace util { 
struct OptionalLong : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::java::util::OptionalLong Empty();
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jlong GetAsLong() const;
	::jint HashCode() const;
	::jvoid IfPresent(const ::java::util::function::LongConsumer& arg0) const;
	::jvoid IfPresentOrElse(const ::java::util::function::LongConsumer& arg0, const ::java::lang::Runnable& arg1) const;
	::jboolean IsEmpty() const;
	::jboolean IsPresent() const;
	static ::java::util::OptionalLong Of(const ::jlong& arg0);
	::jlong OrElse(const ::jlong& arg0) const;
	::jlong OrElseGet(const ::java::util::function::LongSupplier& arg0) const;
	::jlong OrElseThrow() const;
	::jlong OrElseThrow(const ::java::util::function::Supplier& arg0) const;
	::java::util::stream::LongStream Stream() const;
	::java::lang::String ToString() const;
	explicit OptionalLong(jobject o) : ::java::lang::Object(o) {}
	OptionalLong(const OptionalLong& o)  : ::java::lang::Object(o) {}

};

}}

namespace java { namespace util { namespace function { 
struct LongSupplier : java::lang::Object
{
	static jni::Class __CLASS;

	::jlong GetAsLong() const;
	explicit LongSupplier(jobject o) : java::lang::Object(o) {}
	LongSupplier(const LongSupplier& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::function::LongSupplier();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jlong GetAsLong() = 0;
	};
};

struct LongFunction : java::lang::Object
{
	static jni::Class __CLASS;

	::java::lang::Object Apply(const ::jlong& arg0) const;
	explicit LongFunction(jobject o) : java::lang::Object(o) {}
	LongFunction(const LongFunction& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::function::LongFunction();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::lang::Object Apply(const ::jlong& arg0) = 0;
	};
};

struct LongUnaryOperator : java::lang::Object
{
	static jni::Class __CLASS;

	::java::util::function::LongUnaryOperator AndThen(const ::java::util::function::LongUnaryOperator& arg0) const;
	::jlong ApplyAsLong(const ::jlong& arg0) const;
	::java::util::function::LongUnaryOperator Compose(const ::java::util::function::LongUnaryOperator& arg0) const;
	static ::java::util::function::LongUnaryOperator Identity();
	explicit LongUnaryOperator(jobject o) : java::lang::Object(o) {}
	LongUnaryOperator(const LongUnaryOperator& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::function::LongUnaryOperator();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::util::function::LongUnaryOperator AndThen(const ::java::util::function::LongUnaryOperator& arg0) = 0;
		virtual ::jlong ApplyAsLong(const ::jlong& arg0) = 0;
		virtual ::java::util::function::LongUnaryOperator Compose(const ::java::util::function::LongUnaryOperator& arg0) = 0;
	};
};

}}}

namespace java { namespace util { 
struct PrimitiveIterator_OfLong : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::util::PrimitiveIterator();
	::jvoid ForEachRemaining(const ::java::util::function::Consumer& arg0) const;
	::jvoid ForEachRemaining(const ::java::util::function::LongConsumer& arg0) const;
	::java::lang::Long Next() const;
	::jlong NextLong() const;
	explicit PrimitiveIterator_OfLong(jobject o) : java::lang::Object(o) {}
	PrimitiveIterator_OfLong(const PrimitiveIterator_OfLong& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::PrimitiveIterator_OfLong();
		operator ::java::util::PrimitiveIterator();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void ForEachRemaining(const ::java::util::function::Consumer& arg0) = 0;
		virtual void ForEachRemaining(const ::java::util::function::LongConsumer& arg0) = 0;
		virtual ::java::lang::Long Next() = 0;
		virtual ::jlong NextLong() = 0;
	};
};

struct PrimitiveIterator : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::util::Iterator();
	::jvoid ForEachRemaining(const ::java::lang::Object& arg0) const;
	explicit PrimitiveIterator(jobject o) : java::lang::Object(o) {}
	PrimitiveIterator(const PrimitiveIterator& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::PrimitiveIterator();
		operator ::java::util::Iterator();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void ForEachRemaining(const ::java::lang::Object& arg0) = 0;
	};
};

}}

namespace java { namespace lang { 
struct Number : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Serializable();
	::jbyte ByteValue() const;
	::jdouble DoubleValue() const;
	::jfloat FloatValue() const;
	::jint IntValue() const;
	::jlong LongValue() const;
	::jshort ShortValue() const;
	static jobject __Constructor();
	Number() : ::java::lang::Object(__Constructor()) { __Initialize(); }
	explicit Number(jobject o) : ::java::lang::Object(o) { __Initialize(); }
	Number(const Number& o)  : ::java::lang::Object(o) { __Initialize(); }

operator ::jbyte() const;
operator ::jshort() const;
operator ::jint() const;
operator ::jlong() const;
operator ::jfloat() const;
operator ::jdouble() const;
private:
	void __Initialize();

};

struct Long : ::java::lang::Number
{
	static jni::Class __CLASS;

	operator ::java::lang::Comparable();
	static ::jint& fBYTES();
	static ::jlong& fMAX_VALUE();
	static ::jlong& fMIN_VALUE();
	static ::jint& fSIZE();
	static ::java::lang::Class& fTYPE();
	static ::jint BitCount(const ::jlong& arg0);
	::jbyte ByteValue() const;
	static ::jint Compare(const ::jlong& arg0, const ::jlong& arg1);
	::jint CompareTo(const ::java::lang::Long& arg0) const;
	static ::jint CompareUnsigned(const ::jlong& arg0, const ::jlong& arg1);
	static ::java::lang::Long Decode(const ::java::lang::String& arg0);
	static ::jlong DivideUnsigned(const ::jlong& arg0, const ::jlong& arg1);
	::jdouble DoubleValue() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jfloat FloatValue() const;
	static ::java::lang::Long GetLong(const ::java::lang::String& arg0);
	static ::java::lang::Long GetLong(const ::java::lang::String& arg0, const ::jlong& arg1);
	static ::java::lang::Long GetLong(const ::java::lang::String& arg0, const ::java::lang::Long& arg1);
	::jint HashCode() const;
	static ::jint HashCode(const ::jlong& arg0);
	static ::jlong HighestOneBit(const ::jlong& arg0);
	::jint IntValue() const;
	::jlong LongValue() const;
	static ::jlong LowestOneBit(const ::jlong& arg0);
	static ::jlong Max(const ::jlong& arg0, const ::jlong& arg1);
	static ::jlong Min(const ::jlong& arg0, const ::jlong& arg1);
	static ::jint NumberOfLeadingZeros(const ::jlong& arg0);
	static ::jint NumberOfTrailingZeros(const ::jlong& arg0);
	static ::jlong ParseLong(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3);
	static ::jlong ParseLong(const ::java::lang::String& arg0);
	static ::jlong ParseLong(const ::java::lang::String& arg0, const ::jint& arg1);
	static ::jlong ParseUnsignedLong(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3);
	static ::jlong ParseUnsignedLong(const ::java::lang::String& arg0);
	static ::jlong ParseUnsignedLong(const ::java::lang::String& arg0, const ::jint& arg1);
	static ::jlong RemainderUnsigned(const ::jlong& arg0, const ::jlong& arg1);
	static ::jlong Reverse(const ::jlong& arg0);
	static ::jlong ReverseBytes(const ::jlong& arg0);
	static ::jlong RotateLeft(const ::jlong& arg0, const ::jint& arg1);
	static ::jlong RotateRight(const ::jlong& arg0, const ::jint& arg1);
	::jshort ShortValue() const;
	static ::jint Signum(const ::jlong& arg0);
	static ::jlong Sum(const ::jlong& arg0, const ::jlong& arg1);
	static ::java::lang::String ToBinaryString(const ::jlong& arg0);
	static ::java::lang::String ToHexString(const ::jlong& arg0);
	static ::java::lang::String ToOctalString(const ::jlong& arg0);
	::java::lang::String ToString() const;
	static ::java::lang::String ToString(const ::jlong& arg0);
	static ::java::lang::String ToString(const ::jlong& arg0, const ::jint& arg1);
	static ::java::lang::String ToUnsignedString(const ::jlong& arg0);
	static ::java::lang::String ToUnsignedString(const ::jlong& arg0, const ::jint& arg1);
	static ::java::lang::Long ValueOf(const ::jlong& arg0);
	static ::java::lang::Long ValueOf(const ::java::lang::String& arg0);
	static ::java::lang::Long ValueOf(const ::java::lang::String& arg0, const ::jint& arg1);
	static jobject __Constructor(const ::jlong& arg0);
	Long(const ::jlong& arg0) : ::java::lang::Number(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::String& arg0);
	Long(const ::java::lang::String& arg0) : ::java::lang::Number(__Constructor(arg0)) {}
	explicit Long(jobject o) : ::java::lang::Number(o) {}
	Long(const Long& o)  : ::java::lang::Number(o) {}

};

}}

namespace java { namespace util { namespace function { 
struct LongToDoubleFunction : java::lang::Object
{
	static jni::Class __CLASS;

	::jdouble ApplyAsDouble(const ::jlong& arg0) const;
	explicit LongToDoubleFunction(jobject o) : java::lang::Object(o) {}
	LongToDoubleFunction(const LongToDoubleFunction& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::function::LongToDoubleFunction();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jdouble ApplyAsDouble(const ::jlong& arg0) = 0;
	};
};

struct LongToIntFunction : java::lang::Object
{
	static jni::Class __CLASS;

	::jint ApplyAsInt(const ::jlong& arg0) const;
	explicit LongToIntFunction(jobject o) : java::lang::Object(o) {}
	LongToIntFunction(const LongToIntFunction& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::function::LongToIntFunction();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jint ApplyAsInt(const ::jlong& arg0) = 0;
	};
};

struct LongBinaryOperator : java::lang::Object
{
	static jni::Class __CLASS;

	::jlong ApplyAsLong(const ::jlong& arg0, const ::jlong& arg1) const;
	explicit LongBinaryOperator(jobject o) : java::lang::Object(o) {}
	LongBinaryOperator(const LongBinaryOperator& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::function::LongBinaryOperator();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jlong ApplyAsLong(const ::jlong& arg0, const ::jlong& arg1) = 0;
	};
};

}}}

namespace java { namespace util { 
struct Spliterator_OfLong : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::util::Spliterator_OfPrimitive();
	::jvoid ForEachRemaining(const ::java::util::function::Consumer& arg0) const;
	::jvoid ForEachRemaining(const ::java::util::function::LongConsumer& arg0) const;
	::jboolean TryAdvance(const ::java::util::function::Consumer& arg0) const;
	::jboolean TryAdvance(const ::java::util::function::LongConsumer& arg0) const;
	::java::util::Spliterator_OfLong TrySplit() const;
	explicit Spliterator_OfLong(jobject o) : java::lang::Object(o) {}
	Spliterator_OfLong(const Spliterator_OfLong& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::Spliterator_OfLong();
		operator ::java::util::Spliterator_OfPrimitive();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void ForEachRemaining(const ::java::util::function::Consumer& arg0) = 0;
		virtual void ForEachRemaining(const ::java::util::function::LongConsumer& arg0) = 0;
		virtual ::jboolean TryAdvance(const ::java::util::function::Consumer& arg0) = 0;
		virtual ::jboolean TryAdvance(const ::java::util::function::LongConsumer& arg0) = 0;
		virtual ::java::util::Spliterator_OfLong TrySplit() = 0;
	};
};

struct Spliterator_OfPrimitive : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::util::Spliterator();
	::jvoid ForEachRemaining(const ::java::lang::Object& arg0) const;
	::jboolean TryAdvance(const ::java::lang::Object& arg0) const;
	::java::util::Spliterator_OfPrimitive TrySplit() const;
	explicit Spliterator_OfPrimitive(jobject o) : java::lang::Object(o) {}
	Spliterator_OfPrimitive(const Spliterator_OfPrimitive& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::Spliterator_OfPrimitive();
		operator ::java::util::Spliterator();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void ForEachRemaining(const ::java::lang::Object& arg0) = 0;
		virtual ::jboolean TryAdvance(const ::java::lang::Object& arg0) = 0;
		virtual ::java::util::Spliterator_OfPrimitive TrySplit() = 0;
	};
};

struct LongSummaryStatistics : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::util::function::LongConsumer();
	operator ::java::util::function::IntConsumer();
	::jvoid Accept(const ::jint& arg0) const;
	::jvoid Accept(const ::jlong& arg0) const;
	::jvoid Combine(const ::java::util::LongSummaryStatistics& arg0) const;
	::jdouble GetAverage() const;
	::jlong GetCount() const;
	::jlong GetMax() const;
	::jlong GetMin() const;
	::jlong GetSum() const;
	::java::lang::String ToString() const;
	static jobject __Constructor();
	LongSummaryStatistics() : ::java::lang::Object(__Constructor()) {}
	static jobject __Constructor(const ::jlong& arg0, const ::jlong& arg1, const ::jlong& arg2, const ::jlong& arg3);
	LongSummaryStatistics(const ::jlong& arg0, const ::jlong& arg1, const ::jlong& arg2, const ::jlong& arg3) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3)) {}
	explicit LongSummaryStatistics(jobject o) : ::java::lang::Object(o) {}
	LongSummaryStatistics(const LongSummaryStatistics& o)  : ::java::lang::Object(o) {}

};

}}

namespace java { namespace util { namespace function { 
struct IntConsumer : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid Accept(const ::jint& arg0) const;
	::java::util::function::IntConsumer AndThen(const ::java::util::function::IntConsumer& arg0) const;
	explicit IntConsumer(jobject o) : java::lang::Object(o) {}
	IntConsumer(const IntConsumer& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::function::IntConsumer();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void Accept(const ::jint& arg0) = 0;
		virtual ::java::util::function::IntConsumer AndThen(const ::java::util::function::IntConsumer& arg0) = 0;
	};
};

struct UnaryOperator : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::util::function::Function();
	static ::java::util::function::UnaryOperator Identity();
	explicit UnaryOperator(jobject o) : java::lang::Object(o) {}
	UnaryOperator(const UnaryOperator& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::function::UnaryOperator();
		operator ::java::util::function::Function();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
	};
};

}}}

namespace java { namespace util { namespace stream { 
struct DoubleStream_Builder : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::util::function::DoubleConsumer();
	::jvoid Accept(const ::jdouble& arg0) const;
	::java::util::stream::DoubleStream_Builder Add(const ::jdouble& arg0) const;
	::java::util::stream::DoubleStream Build() const;
	explicit DoubleStream_Builder(jobject o) : java::lang::Object(o) {}
	DoubleStream_Builder(const DoubleStream_Builder& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::stream::DoubleStream_Builder();
		operator ::java::util::function::DoubleConsumer();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void Accept(const ::jdouble& arg0) = 0;
		virtual ::java::util::stream::DoubleStream_Builder Add(const ::jdouble& arg0) = 0;
		virtual ::java::util::stream::DoubleStream Build() = 0;
	};
};

}}}

namespace java { namespace util { namespace function { 
struct ObjDoubleConsumer : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid Accept(const ::java::lang::Object& arg0, const ::jdouble& arg1) const;
	explicit ObjDoubleConsumer(jobject o) : java::lang::Object(o) {}
	ObjDoubleConsumer(const ObjDoubleConsumer& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::function::ObjDoubleConsumer();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void Accept(const ::java::lang::Object& arg0, const ::jdouble& arg1) = 0;
	};
};

struct DoubleFunction : java::lang::Object
{
	static jni::Class __CLASS;

	::java::lang::Object Apply(const ::jdouble& arg0) const;
	explicit DoubleFunction(jobject o) : java::lang::Object(o) {}
	DoubleFunction(const DoubleFunction& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::function::DoubleFunction();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::lang::Object Apply(const ::jdouble& arg0) = 0;
	};
};

struct DoubleUnaryOperator : java::lang::Object
{
	static jni::Class __CLASS;

	::java::util::function::DoubleUnaryOperator AndThen(const ::java::util::function::DoubleUnaryOperator& arg0) const;
	::jdouble ApplyAsDouble(const ::jdouble& arg0) const;
	::java::util::function::DoubleUnaryOperator Compose(const ::java::util::function::DoubleUnaryOperator& arg0) const;
	static ::java::util::function::DoubleUnaryOperator Identity();
	explicit DoubleUnaryOperator(jobject o) : java::lang::Object(o) {}
	DoubleUnaryOperator(const DoubleUnaryOperator& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::function::DoubleUnaryOperator();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::util::function::DoubleUnaryOperator AndThen(const ::java::util::function::DoubleUnaryOperator& arg0) = 0;
		virtual ::jdouble ApplyAsDouble(const ::jdouble& arg0) = 0;
		virtual ::java::util::function::DoubleUnaryOperator Compose(const ::java::util::function::DoubleUnaryOperator& arg0) = 0;
	};
};

}}}

namespace java { namespace util { 
struct PrimitiveIterator_OfDouble : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::util::PrimitiveIterator();
	::jvoid ForEachRemaining(const ::java::util::function::Consumer& arg0) const;
	::jvoid ForEachRemaining(const ::java::util::function::DoubleConsumer& arg0) const;
	::java::lang::Double Next() const;
	::jdouble NextDouble() const;
	explicit PrimitiveIterator_OfDouble(jobject o) : java::lang::Object(o) {}
	PrimitiveIterator_OfDouble(const PrimitiveIterator_OfDouble& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::PrimitiveIterator_OfDouble();
		operator ::java::util::PrimitiveIterator();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void ForEachRemaining(const ::java::util::function::Consumer& arg0) = 0;
		virtual void ForEachRemaining(const ::java::util::function::DoubleConsumer& arg0) = 0;
		virtual ::java::lang::Double Next() = 0;
		virtual ::jdouble NextDouble() = 0;
	};
};

}}

namespace java { namespace lang { 
struct Double : ::java::lang::Number
{
	static jni::Class __CLASS;

	operator ::java::lang::Comparable();
	static ::jint& fBYTES();
	static ::jint& fMAX_EXPONENT();
	static ::jdouble& fMAX_VALUE();
	static ::jint& fMIN_EXPONENT();
	static ::jdouble& fMIN_NORMAL();
	static ::jdouble& fMIN_VALUE();
	static ::jdouble& fNEGATIVE_INFINITY();
	static ::jdouble& fNaN();
	static ::jdouble& fPOSITIVE_INFINITY();
	static ::jint& fSIZE();
	static ::java::lang::Class& fTYPE();
	::jbyte ByteValue() const;
	static ::jint Compare(const ::jdouble& arg0, const ::jdouble& arg1);
	::jint CompareTo(const ::java::lang::Double& arg0) const;
	static ::jlong DoubleToLongBits(const ::jdouble& arg0);
	static ::jlong DoubleToRawLongBits(const ::jdouble& arg0);
	::jdouble DoubleValue() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jfloat FloatValue() const;
	::jint HashCode() const;
	static ::jint HashCode(const ::jdouble& arg0);
	::jint IntValue() const;
	static ::jboolean IsFinite(const ::jdouble& arg0);
	::jboolean IsInfinite() const;
	static ::jboolean IsInfinite(const ::jdouble& arg0);
	::jboolean IsNaN() const;
	static ::jboolean IsNaN(const ::jdouble& arg0);
	static ::jdouble LongBitsToDouble(const ::jlong& arg0);
	::jlong LongValue() const;
	static ::jdouble Max(const ::jdouble& arg0, const ::jdouble& arg1);
	static ::jdouble Min(const ::jdouble& arg0, const ::jdouble& arg1);
	static ::jdouble ParseDouble(const ::java::lang::String& arg0);
	::jshort ShortValue() const;
	static ::jdouble Sum(const ::jdouble& arg0, const ::jdouble& arg1);
	static ::java::lang::String ToHexString(const ::jdouble& arg0);
	::java::lang::String ToString() const;
	static ::java::lang::String ToString(const ::jdouble& arg0);
	static ::java::lang::Double ValueOf(const ::jdouble& arg0);
	static ::java::lang::Double ValueOf(const ::java::lang::String& arg0);
	static jobject __Constructor(const ::jdouble& arg0);
	Double(const ::jdouble& arg0) : ::java::lang::Number(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::String& arg0);
	Double(const ::java::lang::String& arg0) : ::java::lang::Number(__Constructor(arg0)) {}
	explicit Double(jobject o) : ::java::lang::Number(o) {}
	Double(const Double& o)  : ::java::lang::Number(o) {}

};

}}

namespace java { namespace util { namespace function { 
struct DoubleToIntFunction : java::lang::Object
{
	static jni::Class __CLASS;

	::jint ApplyAsInt(const ::jdouble& arg0) const;
	explicit DoubleToIntFunction(jobject o) : java::lang::Object(o) {}
	DoubleToIntFunction(const DoubleToIntFunction& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::function::DoubleToIntFunction();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jint ApplyAsInt(const ::jdouble& arg0) = 0;
	};
};

struct DoubleToLongFunction : java::lang::Object
{
	static jni::Class __CLASS;

	::jlong ApplyAsLong(const ::jdouble& arg0) const;
	explicit DoubleToLongFunction(jobject o) : java::lang::Object(o) {}
	DoubleToLongFunction(const DoubleToLongFunction& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::function::DoubleToLongFunction();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jlong ApplyAsLong(const ::jdouble& arg0) = 0;
	};
};

struct DoubleBinaryOperator : java::lang::Object
{
	static jni::Class __CLASS;

	::jdouble ApplyAsDouble(const ::jdouble& arg0, const ::jdouble& arg1) const;
	explicit DoubleBinaryOperator(jobject o) : java::lang::Object(o) {}
	DoubleBinaryOperator(const DoubleBinaryOperator& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::function::DoubleBinaryOperator();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jdouble ApplyAsDouble(const ::jdouble& arg0, const ::jdouble& arg1) = 0;
	};
};

}}}

namespace java { namespace util { 
struct Spliterator_OfDouble : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::util::Spliterator_OfPrimitive();
	::jvoid ForEachRemaining(const ::java::util::function::Consumer& arg0) const;
	::jvoid ForEachRemaining(const ::java::util::function::DoubleConsumer& arg0) const;
	::jboolean TryAdvance(const ::java::util::function::Consumer& arg0) const;
	::jboolean TryAdvance(const ::java::util::function::DoubleConsumer& arg0) const;
	::java::util::Spliterator_OfDouble TrySplit() const;
	explicit Spliterator_OfDouble(jobject o) : java::lang::Object(o) {}
	Spliterator_OfDouble(const Spliterator_OfDouble& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::Spliterator_OfDouble();
		operator ::java::util::Spliterator_OfPrimitive();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void ForEachRemaining(const ::java::util::function::Consumer& arg0) = 0;
		virtual void ForEachRemaining(const ::java::util::function::DoubleConsumer& arg0) = 0;
		virtual ::jboolean TryAdvance(const ::java::util::function::Consumer& arg0) = 0;
		virtual ::jboolean TryAdvance(const ::java::util::function::DoubleConsumer& arg0) = 0;
		virtual ::java::util::Spliterator_OfDouble TrySplit() = 0;
	};
};

struct DoubleSummaryStatistics : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::util::function::DoubleConsumer();
	::jvoid Accept(const ::jdouble& arg0) const;
	::jvoid Combine(const ::java::util::DoubleSummaryStatistics& arg0) const;
	::jdouble GetAverage() const;
	::jlong GetCount() const;
	::jdouble GetMax() const;
	::jdouble GetMin() const;
	::jdouble GetSum() const;
	::java::lang::String ToString() const;
	static jobject __Constructor();
	DoubleSummaryStatistics() : ::java::lang::Object(__Constructor()) {}
	static jobject __Constructor(const ::jlong& arg0, const ::jdouble& arg1, const ::jdouble& arg2, const ::jdouble& arg3);
	DoubleSummaryStatistics(const ::jlong& arg0, const ::jdouble& arg1, const ::jdouble& arg2, const ::jdouble& arg3) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3)) {}
	explicit DoubleSummaryStatistics(jobject o) : ::java::lang::Object(o) {}
	DoubleSummaryStatistics(const DoubleSummaryStatistics& o)  : ::java::lang::Object(o) {}

};

}}

namespace java { namespace util { namespace stream { 
struct IntStream_Builder : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::util::function::IntConsumer();
	::jvoid Accept(const ::jint& arg0) const;
	::java::util::stream::IntStream_Builder Add(const ::jint& arg0) const;
	::java::util::stream::IntStream Build() const;
	explicit IntStream_Builder(jobject o) : java::lang::Object(o) {}
	IntStream_Builder(const IntStream_Builder& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::stream::IntStream_Builder();
		operator ::java::util::function::IntConsumer();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void Accept(const ::jint& arg0) = 0;
		virtual ::java::util::stream::IntStream_Builder Add(const ::jint& arg0) = 0;
		virtual ::java::util::stream::IntStream Build() = 0;
	};
};

}}}

namespace java { namespace util { namespace function { 
struct ObjIntConsumer : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid Accept(const ::java::lang::Object& arg0, const ::jint& arg1) const;
	explicit ObjIntConsumer(jobject o) : java::lang::Object(o) {}
	ObjIntConsumer(const ObjIntConsumer& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::function::ObjIntConsumer();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void Accept(const ::java::lang::Object& arg0, const ::jint& arg1) = 0;
	};
};

}}}

namespace java { namespace util { 
struct OptionalInt : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::java::util::OptionalInt Empty();
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint GetAsInt() const;
	::jint HashCode() const;
	::jvoid IfPresent(const ::java::util::function::IntConsumer& arg0) const;
	::jvoid IfPresentOrElse(const ::java::util::function::IntConsumer& arg0, const ::java::lang::Runnable& arg1) const;
	::jboolean IsEmpty() const;
	::jboolean IsPresent() const;
	static ::java::util::OptionalInt Of(const ::jint& arg0);
	::jint OrElse(const ::jint& arg0) const;
	::jint OrElseGet(const ::java::util::function::IntSupplier& arg0) const;
	::jint OrElseThrow() const;
	::jint OrElseThrow(const ::java::util::function::Supplier& arg0) const;
	::java::util::stream::IntStream Stream() const;
	::java::lang::String ToString() const;
	explicit OptionalInt(jobject o) : ::java::lang::Object(o) {}
	OptionalInt(const OptionalInt& o)  : ::java::lang::Object(o) {}

};

}}

namespace java { namespace util { namespace function { 
struct IntSupplier : java::lang::Object
{
	static jni::Class __CLASS;

	::jint GetAsInt() const;
	explicit IntSupplier(jobject o) : java::lang::Object(o) {}
	IntSupplier(const IntSupplier& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::function::IntSupplier();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jint GetAsInt() = 0;
	};
};

struct IntUnaryOperator : java::lang::Object
{
	static jni::Class __CLASS;

	::java::util::function::IntUnaryOperator AndThen(const ::java::util::function::IntUnaryOperator& arg0) const;
	::jint ApplyAsInt(const ::jint& arg0) const;
	::java::util::function::IntUnaryOperator Compose(const ::java::util::function::IntUnaryOperator& arg0) const;
	static ::java::util::function::IntUnaryOperator Identity();
	explicit IntUnaryOperator(jobject o) : java::lang::Object(o) {}
	IntUnaryOperator(const IntUnaryOperator& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::function::IntUnaryOperator();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::util::function::IntUnaryOperator AndThen(const ::java::util::function::IntUnaryOperator& arg0) = 0;
		virtual ::jint ApplyAsInt(const ::jint& arg0) = 0;
		virtual ::java::util::function::IntUnaryOperator Compose(const ::java::util::function::IntUnaryOperator& arg0) = 0;
	};
};

}}}

namespace java { namespace util { 
struct PrimitiveIterator_OfInt : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::util::PrimitiveIterator();
	::jvoid ForEachRemaining(const ::java::util::function::Consumer& arg0) const;
	::jvoid ForEachRemaining(const ::java::util::function::IntConsumer& arg0) const;
	::java::lang::Integer Next() const;
	::jint NextInt() const;
	explicit PrimitiveIterator_OfInt(jobject o) : java::lang::Object(o) {}
	PrimitiveIterator_OfInt(const PrimitiveIterator_OfInt& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::PrimitiveIterator_OfInt();
		operator ::java::util::PrimitiveIterator();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void ForEachRemaining(const ::java::util::function::Consumer& arg0) = 0;
		virtual void ForEachRemaining(const ::java::util::function::IntConsumer& arg0) = 0;
		virtual ::java::lang::Integer Next() = 0;
		virtual ::jint NextInt() = 0;
	};
};

}}

namespace java { namespace lang { 
struct Integer : ::java::lang::Number
{
	static jni::Class __CLASS;

	operator ::java::lang::Comparable();
	static ::jint& fBYTES();
	static ::jint& fMAX_VALUE();
	static ::jint& fMIN_VALUE();
	static ::jint& fSIZE();
	static ::java::lang::Class& fTYPE();
	static ::jint BitCount(const ::jint& arg0);
	::jbyte ByteValue() const;
	static ::jint Compare(const ::jint& arg0, const ::jint& arg1);
	::jint CompareTo(const ::java::lang::Integer& arg0) const;
	static ::jint CompareUnsigned(const ::jint& arg0, const ::jint& arg1);
	static ::java::lang::Integer Decode(const ::java::lang::String& arg0);
	static ::jint DivideUnsigned(const ::jint& arg0, const ::jint& arg1);
	::jdouble DoubleValue() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jfloat FloatValue() const;
	static ::java::lang::Integer GetInteger(const ::java::lang::String& arg0);
	static ::java::lang::Integer GetInteger(const ::java::lang::String& arg0, const ::jint& arg1);
	static ::java::lang::Integer GetInteger(const ::java::lang::String& arg0, const ::java::lang::Integer& arg1);
	::jint HashCode() const;
	static ::jint HashCode(const ::jint& arg0);
	static ::jint HighestOneBit(const ::jint& arg0);
	::jint IntValue() const;
	::jlong LongValue() const;
	static ::jint LowestOneBit(const ::jint& arg0);
	static ::jint Max(const ::jint& arg0, const ::jint& arg1);
	static ::jint Min(const ::jint& arg0, const ::jint& arg1);
	static ::jint NumberOfLeadingZeros(const ::jint& arg0);
	static ::jint NumberOfTrailingZeros(const ::jint& arg0);
	static ::jint ParseInt(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3);
	static ::jint ParseInt(const ::java::lang::String& arg0);
	static ::jint ParseInt(const ::java::lang::String& arg0, const ::jint& arg1);
	static ::jint ParseUnsignedInt(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3);
	static ::jint ParseUnsignedInt(const ::java::lang::String& arg0);
	static ::jint ParseUnsignedInt(const ::java::lang::String& arg0, const ::jint& arg1);
	static ::jint RemainderUnsigned(const ::jint& arg0, const ::jint& arg1);
	static ::jint Reverse(const ::jint& arg0);
	static ::jint ReverseBytes(const ::jint& arg0);
	static ::jint RotateLeft(const ::jint& arg0, const ::jint& arg1);
	static ::jint RotateRight(const ::jint& arg0, const ::jint& arg1);
	::jshort ShortValue() const;
	static ::jint Signum(const ::jint& arg0);
	static ::jint Sum(const ::jint& arg0, const ::jint& arg1);
	static ::java::lang::String ToBinaryString(const ::jint& arg0);
	static ::java::lang::String ToHexString(const ::jint& arg0);
	static ::java::lang::String ToOctalString(const ::jint& arg0);
	::java::lang::String ToString() const;
	static ::java::lang::String ToString(const ::jint& arg0);
	static ::java::lang::String ToString(const ::jint& arg0, const ::jint& arg1);
	static ::jlong ToUnsignedLong(const ::jint& arg0);
	static ::java::lang::String ToUnsignedString(const ::jint& arg0);
	static ::java::lang::String ToUnsignedString(const ::jint& arg0, const ::jint& arg1);
	static ::java::lang::Integer ValueOf(const ::jint& arg0);
	static ::java::lang::Integer ValueOf(const ::java::lang::String& arg0);
	static ::java::lang::Integer ValueOf(const ::java::lang::String& arg0, const ::jint& arg1);
	static jobject __Constructor(const ::jint& arg0);
	Integer(const ::jint& arg0) : ::java::lang::Number(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::String& arg0);
	Integer(const ::java::lang::String& arg0) : ::java::lang::Number(__Constructor(arg0)) {}
	explicit Integer(jobject o) : ::java::lang::Number(o) {}
	Integer(const Integer& o)  : ::java::lang::Number(o) {}

};

}}

namespace java { namespace util { namespace function { 
struct IntToDoubleFunction : java::lang::Object
{
	static jni::Class __CLASS;

	::jdouble ApplyAsDouble(const ::jint& arg0) const;
	explicit IntToDoubleFunction(jobject o) : java::lang::Object(o) {}
	IntToDoubleFunction(const IntToDoubleFunction& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::function::IntToDoubleFunction();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jdouble ApplyAsDouble(const ::jint& arg0) = 0;
	};
};

struct IntToLongFunction : java::lang::Object
{
	static jni::Class __CLASS;

	::jlong ApplyAsLong(const ::jint& arg0) const;
	explicit IntToLongFunction(jobject o) : java::lang::Object(o) {}
	IntToLongFunction(const IntToLongFunction& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::function::IntToLongFunction();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jlong ApplyAsLong(const ::jint& arg0) = 0;
	};
};

struct IntBinaryOperator : java::lang::Object
{
	static jni::Class __CLASS;

	::jint ApplyAsInt(const ::jint& arg0, const ::jint& arg1) const;
	explicit IntBinaryOperator(jobject o) : java::lang::Object(o) {}
	IntBinaryOperator(const IntBinaryOperator& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::function::IntBinaryOperator();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jint ApplyAsInt(const ::jint& arg0, const ::jint& arg1) = 0;
	};
};

}}}

namespace java { namespace util { 
struct Spliterator_OfInt : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::util::Spliterator_OfPrimitive();
	::jvoid ForEachRemaining(const ::java::util::function::Consumer& arg0) const;
	::jvoid ForEachRemaining(const ::java::util::function::IntConsumer& arg0) const;
	::jboolean TryAdvance(const ::java::util::function::Consumer& arg0) const;
	::jboolean TryAdvance(const ::java::util::function::IntConsumer& arg0) const;
	::java::util::Spliterator_OfInt TrySplit() const;
	explicit Spliterator_OfInt(jobject o) : java::lang::Object(o) {}
	Spliterator_OfInt(const Spliterator_OfInt& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::Spliterator_OfInt();
		operator ::java::util::Spliterator_OfPrimitive();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void ForEachRemaining(const ::java::util::function::Consumer& arg0) = 0;
		virtual void ForEachRemaining(const ::java::util::function::IntConsumer& arg0) = 0;
		virtual ::jboolean TryAdvance(const ::java::util::function::Consumer& arg0) = 0;
		virtual ::jboolean TryAdvance(const ::java::util::function::IntConsumer& arg0) = 0;
		virtual ::java::util::Spliterator_OfInt TrySplit() = 0;
	};
};

struct IntSummaryStatistics : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::util::function::IntConsumer();
	::jvoid Accept(const ::jint& arg0) const;
	::jvoid Combine(const ::java::util::IntSummaryStatistics& arg0) const;
	::jdouble GetAverage() const;
	::jlong GetCount() const;
	::jint GetMax() const;
	::jint GetMin() const;
	::jlong GetSum() const;
	::java::lang::String ToString() const;
	static jobject __Constructor();
	IntSummaryStatistics() : ::java::lang::Object(__Constructor()) {}
	static jobject __Constructor(const ::jlong& arg0, const ::jint& arg1, const ::jint& arg2, const ::jlong& arg3);
	IntSummaryStatistics(const ::jlong& arg0, const ::jint& arg1, const ::jint& arg2, const ::jlong& arg3) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3)) {}
	explicit IntSummaryStatistics(jobject o) : ::java::lang::Object(o) {}
	IntSummaryStatistics(const IntSummaryStatistics& o)  : ::java::lang::Object(o) {}

};

}}

namespace java { namespace lang { 
struct AbstractStringBuilder : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::Appendable();
	operator ::java::lang::CharSequence();
	::java::lang::AbstractStringBuilder Append(const ::jchar& arg0) const;
	::java::lang::AbstractStringBuilder Append(const ::jdouble& arg0) const;
	::java::lang::AbstractStringBuilder Append(const ::jfloat& arg0) const;
	::java::lang::AbstractStringBuilder Append(const ::jint& arg0) const;
	::java::lang::AbstractStringBuilder Append(const ::jlong& arg0) const;
	::java::lang::AbstractStringBuilder Append(const ::java::lang::CharSequence& arg0) const;
	::java::lang::AbstractStringBuilder Append(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::java::lang::AbstractStringBuilder Append(const ::java::lang::Object& arg0) const;
	::java::lang::AbstractStringBuilder Append(const ::java::lang::String& arg0) const;
	::java::lang::AbstractStringBuilder Append(const ::java::lang::StringBuffer& arg0) const;
	::java::lang::AbstractStringBuilder Append(const ::jboolean& arg0) const;
	::java::lang::AbstractStringBuilder Append(const jni::Array< ::jchar >& arg0) const;
	::java::lang::AbstractStringBuilder Append(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::java::lang::AbstractStringBuilder AppendCodePoint(const ::jint& arg0) const;
	::jint Capacity() const;
	::jchar CharAt(const ::jint& arg0) const;
	::java::util::stream::IntStream Chars() const;
	::jint CodePointAt(const ::jint& arg0) const;
	::jint CodePointBefore(const ::jint& arg0) const;
	::jint CodePointCount(const ::jint& arg0, const ::jint& arg1) const;
	::java::util::stream::IntStream CodePoints() const;
	::java::lang::AbstractStringBuilder Delete(const ::jint& arg0, const ::jint& arg1) const;
	::java::lang::AbstractStringBuilder DeleteCharAt(const ::jint& arg0) const;
	::jvoid EnsureCapacity(const ::jint& arg0) const;
	::jvoid GetChars(const ::jint& arg0, const ::jint& arg1, const jni::Array< ::jchar >& arg2, const ::jint& arg3) const;
	::jint IndexOf(const ::java::lang::String& arg0) const;
	::jint IndexOf(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::java::lang::AbstractStringBuilder Insert(const ::jint& arg0, const ::jchar& arg1) const;
	::java::lang::AbstractStringBuilder Insert(const ::jint& arg0, const ::jdouble& arg1) const;
	::java::lang::AbstractStringBuilder Insert(const ::jint& arg0, const ::jfloat& arg1) const;
	::java::lang::AbstractStringBuilder Insert(const ::jint& arg0, const ::jint& arg1) const;
	::java::lang::AbstractStringBuilder Insert(const ::jint& arg0, const ::jlong& arg1) const;
	::java::lang::AbstractStringBuilder Insert(const ::jint& arg0, const ::java::lang::CharSequence& arg1) const;
	::java::lang::AbstractStringBuilder Insert(const ::jint& arg0, const ::java::lang::CharSequence& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::java::lang::AbstractStringBuilder Insert(const ::jint& arg0, const ::java::lang::Object& arg1) const;
	::java::lang::AbstractStringBuilder Insert(const ::jint& arg0, const ::java::lang::String& arg1) const;
	::java::lang::AbstractStringBuilder Insert(const ::jint& arg0, const ::jboolean& arg1) const;
	::java::lang::AbstractStringBuilder Insert(const ::jint& arg0, const jni::Array< ::jchar >& arg1) const;
	::java::lang::AbstractStringBuilder Insert(const ::jint& arg0, const jni::Array< ::jchar >& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jint LastIndexOf(const ::java::lang::String& arg0) const;
	::jint LastIndexOf(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::jint Length() const;
	::jint OffsetByCodePoints(const ::jint& arg0, const ::jint& arg1) const;
	::java::lang::AbstractStringBuilder Replace(const ::jint& arg0, const ::jint& arg1, const ::java::lang::String& arg2) const;
	::java::lang::AbstractStringBuilder Reverse() const;
	::jvoid SetCharAt(const ::jint& arg0, const ::jchar& arg1) const;
	::jvoid SetLength(const ::jint& arg0) const;
	::java::lang::CharSequence SubSequence(const ::jint& arg0, const ::jint& arg1) const;
	::java::lang::String Substring(const ::jint& arg0) const;
	::java::lang::String Substring(const ::jint& arg0, const ::jint& arg1) const;
	::java::lang::String ToString() const;
	::jvoid TrimToSize() const;
	explicit AbstractStringBuilder(jobject o) : ::java::lang::Object(o) {}
	AbstractStringBuilder(const AbstractStringBuilder& o)  : ::java::lang::Object(o) {}

};

struct StringBuffer : ::java::lang::AbstractStringBuilder
{
	static jni::Class __CLASS;

	operator ::java::io::Serializable();
	operator ::java::lang::Comparable();
	operator ::java::lang::CharSequence();
	::java::lang::StringBuffer Append(const ::jchar& arg0) const;
	::java::lang::StringBuffer Append(const ::jdouble& arg0) const;
	::java::lang::StringBuffer Append(const ::jfloat& arg0) const;
	::java::lang::StringBuffer Append(const ::jint& arg0) const;
	::java::lang::StringBuffer Append(const ::jlong& arg0) const;
	::java::lang::StringBuffer Append(const ::java::lang::CharSequence& arg0) const;
	::java::lang::StringBuffer Append(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::java::lang::StringBuffer Append(const ::java::lang::Object& arg0) const;
	::java::lang::StringBuffer Append(const ::java::lang::String& arg0) const;
	::java::lang::StringBuffer Append(const ::java::lang::StringBuffer& arg0) const;
	::java::lang::StringBuffer Append(const ::jboolean& arg0) const;
	::java::lang::StringBuffer Append(const jni::Array< ::jchar >& arg0) const;
	::java::lang::StringBuffer Append(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::java::lang::StringBuffer AppendCodePoint(const ::jint& arg0) const;
	::jint Capacity() const;
	::jchar CharAt(const ::jint& arg0) const;
	::jint CodePointAt(const ::jint& arg0) const;
	::jint CodePointBefore(const ::jint& arg0) const;
	::jint CodePointCount(const ::jint& arg0, const ::jint& arg1) const;
	::jint CompareTo(const ::java::lang::StringBuffer& arg0) const;
	::java::lang::StringBuffer Delete(const ::jint& arg0, const ::jint& arg1) const;
	::java::lang::StringBuffer DeleteCharAt(const ::jint& arg0) const;
	::jvoid EnsureCapacity(const ::jint& arg0) const;
	::jvoid GetChars(const ::jint& arg0, const ::jint& arg1, const jni::Array< ::jchar >& arg2, const ::jint& arg3) const;
	::jint IndexOf(const ::java::lang::String& arg0) const;
	::jint IndexOf(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::java::lang::StringBuffer Insert(const ::jint& arg0, const ::jchar& arg1) const;
	::java::lang::StringBuffer Insert(const ::jint& arg0, const ::jdouble& arg1) const;
	::java::lang::StringBuffer Insert(const ::jint& arg0, const ::jfloat& arg1) const;
	::java::lang::StringBuffer Insert(const ::jint& arg0, const ::jint& arg1) const;
	::java::lang::StringBuffer Insert(const ::jint& arg0, const ::jlong& arg1) const;
	::java::lang::StringBuffer Insert(const ::jint& arg0, const ::java::lang::CharSequence& arg1) const;
	::java::lang::StringBuffer Insert(const ::jint& arg0, const ::java::lang::CharSequence& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::java::lang::StringBuffer Insert(const ::jint& arg0, const ::java::lang::Object& arg1) const;
	::java::lang::StringBuffer Insert(const ::jint& arg0, const ::java::lang::String& arg1) const;
	::java::lang::StringBuffer Insert(const ::jint& arg0, const ::jboolean& arg1) const;
	::java::lang::StringBuffer Insert(const ::jint& arg0, const jni::Array< ::jchar >& arg1) const;
	::java::lang::StringBuffer Insert(const ::jint& arg0, const jni::Array< ::jchar >& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jint LastIndexOf(const ::java::lang::String& arg0) const;
	::jint LastIndexOf(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::jint Length() const;
	::jint OffsetByCodePoints(const ::jint& arg0, const ::jint& arg1) const;
	::java::lang::StringBuffer Replace(const ::jint& arg0, const ::jint& arg1, const ::java::lang::String& arg2) const;
	::java::lang::StringBuffer Reverse() const;
	::jvoid SetCharAt(const ::jint& arg0, const ::jchar& arg1) const;
	::jvoid SetLength(const ::jint& arg0) const;
	::java::lang::CharSequence SubSequence(const ::jint& arg0, const ::jint& arg1) const;
	::java::lang::String Substring(const ::jint& arg0) const;
	::java::lang::String Substring(const ::jint& arg0, const ::jint& arg1) const;
	::java::lang::String ToString() const;
	::jvoid TrimToSize() const;
	static jobject __Constructor();
	StringBuffer() : ::java::lang::AbstractStringBuilder(__Constructor()) {}
	static jobject __Constructor(const ::jint& arg0);
	StringBuffer(const ::jint& arg0) : ::java::lang::AbstractStringBuilder(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::CharSequence& arg0);
	StringBuffer(const ::java::lang::CharSequence& arg0) : ::java::lang::AbstractStringBuilder(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::String& arg0);
	StringBuffer(const ::java::lang::String& arg0) : ::java::lang::AbstractStringBuilder(__Constructor(arg0)) {}
	explicit StringBuffer(jobject o) : ::java::lang::AbstractStringBuilder(o) {}
	StringBuffer(const StringBuffer& o)  : ::java::lang::AbstractStringBuilder(o) {}

};

struct Appendable : java::lang::Object
{
	static jni::Class __CLASS;

	::java::lang::Appendable Append(const ::jchar& arg0) const;
	::java::lang::Appendable Append(const ::java::lang::CharSequence& arg0) const;
	::java::lang::Appendable Append(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2) const;
	explicit Appendable(jobject o) : java::lang::Object(o) {}
	Appendable(const Appendable& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::lang::Appendable();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::lang::Appendable Append(const ::jchar& arg0) = 0;
		virtual ::java::lang::Appendable Append(const ::java::lang::CharSequence& arg0) = 0;
		virtual ::java::lang::Appendable Append(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2) = 0;
	};
};

}}

namespace java { namespace util { 
struct Locale : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::Cloneable();
	operator ::java::io::Serializable();
	static ::java::util::Locale& fCANADA();
	static ::java::util::Locale& fCANADA_FRENCH();
	static ::java::util::Locale& fCHINA();
	static ::java::util::Locale& fCHINESE();
	static ::java::util::Locale& fENGLISH();
	static ::java::util::Locale& fFRANCE();
	static ::java::util::Locale& fFRENCH();
	static ::java::util::Locale& fGERMAN();
	static ::java::util::Locale& fGERMANY();
	static ::java::util::Locale& fITALIAN();
	static ::java::util::Locale& fITALY();
	static ::java::util::Locale& fJAPAN();
	static ::java::util::Locale& fJAPANESE();
	static ::java::util::Locale& fKOREA();
	static ::java::util::Locale& fKOREAN();
	static ::java::util::Locale& fPRC();
	static ::jchar& fPRIVATE_USE_EXTENSION();
	static ::java::util::Locale& fROOT();
	static ::java::util::Locale& fSIMPLIFIED_CHINESE();
	static ::java::util::Locale& fTAIWAN();
	static ::java::util::Locale& fTRADITIONAL_CHINESE();
	static ::java::util::Locale& fUK();
	static ::jchar& fUNICODE_LOCALE_EXTENSION();
	static ::java::util::Locale& fUS();
	::java::lang::Object Clone() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	static ::java::util::List Filter(const ::java::util::List& arg0, const ::java::util::Collection& arg1);
	static ::java::util::List Filter(const ::java::util::List& arg0, const ::java::util::Collection& arg1, const ::java::util::Locale_FilteringMode& arg2);
	static ::java::util::List FilterTags(const ::java::util::List& arg0, const ::java::util::Collection& arg1);
	static ::java::util::List FilterTags(const ::java::util::List& arg0, const ::java::util::Collection& arg1, const ::java::util::Locale_FilteringMode& arg2);
	static ::java::util::Locale ForLanguageTag(const ::java::lang::String& arg0);
	static jni::Array< ::java::util::Locale > GetAvailableLocales();
	::java::lang::String GetCountry() const;
	static ::java::util::Locale GetDefault();
	static ::java::util::Locale GetDefault(const ::java::util::Locale_Category& arg0);
	::java::lang::String GetDisplayCountry() const;
	::java::lang::String GetDisplayCountry(const ::java::util::Locale& arg0) const;
	::java::lang::String GetDisplayLanguage() const;
	::java::lang::String GetDisplayLanguage(const ::java::util::Locale& arg0) const;
	::java::lang::String GetDisplayName() const;
	::java::lang::String GetDisplayName(const ::java::util::Locale& arg0) const;
	::java::lang::String GetDisplayScript() const;
	::java::lang::String GetDisplayScript(const ::java::util::Locale& arg0) const;
	::java::lang::String GetDisplayVariant() const;
	::java::lang::String GetDisplayVariant(const ::java::util::Locale& arg0) const;
	::java::lang::String GetExtension(const ::jchar& arg0) const;
	::java::util::Set GetExtensionKeys() const;
	::java::lang::String GetISO3Country() const;
	::java::lang::String GetISO3Language() const;
	static jni::Array< ::java::lang::String > GetISOCountries();
	static ::java::util::Set GetISOCountries(const ::java::util::Locale_IsoCountryCode& arg0);
	static jni::Array< ::java::lang::String > GetISOLanguages();
	::java::lang::String GetLanguage() const;
	::java::lang::String GetScript() const;
	::java::util::Set GetUnicodeLocaleAttributes() const;
	::java::util::Set GetUnicodeLocaleKeys() const;
	::java::lang::String GetUnicodeLocaleType(const ::java::lang::String& arg0) const;
	::java::lang::String GetVariant() const;
	::jboolean HasExtensions() const;
	::jint HashCode() const;
	static ::java::util::Locale Lookup(const ::java::util::List& arg0, const ::java::util::Collection& arg1);
	static ::java::lang::String LookupTag(const ::java::util::List& arg0, const ::java::util::Collection& arg1);
	static ::jvoid SetDefault(const ::java::util::Locale_Category& arg0, const ::java::util::Locale& arg1);
	static ::jvoid SetDefault(const ::java::util::Locale& arg0);
	::java::util::Locale StripExtensions() const;
	::java::lang::String ToLanguageTag() const;
	::java::lang::String ToString() const;
	static jobject __Constructor(const ::java::lang::String& arg0);
	Locale(const ::java::lang::String& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::java::lang::String& arg1);
	Locale(const ::java::lang::String& arg0, const ::java::lang::String& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2);
	Locale(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2) : ::java::lang::Object(__Constructor(arg0, arg1, arg2)) {}
	explicit Locale(jobject o) : ::java::lang::Object(o) {}
	Locale(const Locale& o)  : ::java::lang::Object(o) {}

};

}}

namespace java { namespace lang { 
struct Cloneable : java::lang::Object
{
	static jni::Class __CLASS;

	explicit Cloneable(jobject o) : java::lang::Object(o) {}
	Cloneable(const Cloneable& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::lang::Cloneable();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
	};
};

}}

namespace java { namespace util { 
struct List : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::util::Collection();
	::jvoid Add(const ::jint& arg0, const ::java::lang::Object& arg1) const;
	::jboolean Add(const ::java::lang::Object& arg0) const;
	::jboolean AddAll(const ::jint& arg0, const ::java::util::Collection& arg1) const;
	::jboolean AddAll(const ::java::util::Collection& arg0) const;
	::jvoid Clear() const;
	::jboolean Contains(const ::java::lang::Object& arg0) const;
	::jboolean ContainsAll(const ::java::util::Collection& arg0) const;
	static ::java::util::List CopyOf(const ::java::util::Collection& arg0);
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::lang::Object Get(const ::jint& arg0) const;
	::jint HashCode() const;
	::jint IndexOf(const ::java::lang::Object& arg0) const;
	::jboolean IsEmpty() const;
	::java::util::Iterator Iterator() const;
	::jint LastIndexOf(const ::java::lang::Object& arg0) const;
	::java::util::ListIterator ListIterator() const;
	::java::util::ListIterator ListIterator(const ::jint& arg0) const;
	static ::java::util::List Of();
	static ::java::util::List Of(const ::java::lang::Object& arg0);
	static ::java::util::List Of(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1);
	static ::java::util::List Of(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1, const ::java::lang::Object& arg2);
	static ::java::util::List Of(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1, const ::java::lang::Object& arg2, const ::java::lang::Object& arg3);
	static ::java::util::List Of(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1, const ::java::lang::Object& arg2, const ::java::lang::Object& arg3, const ::java::lang::Object& arg4);
	static ::java::util::List Of(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1, const ::java::lang::Object& arg2, const ::java::lang::Object& arg3, const ::java::lang::Object& arg4, const ::java::lang::Object& arg5);
	static ::java::util::List Of(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1, const ::java::lang::Object& arg2, const ::java::lang::Object& arg3, const ::java::lang::Object& arg4, const ::java::lang::Object& arg5, const ::java::lang::Object& arg6);
	static ::java::util::List Of(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1, const ::java::lang::Object& arg2, const ::java::lang::Object& arg3, const ::java::lang::Object& arg4, const ::java::lang::Object& arg5, const ::java::lang::Object& arg6, const ::java::lang::Object& arg7);
	static ::java::util::List Of(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1, const ::java::lang::Object& arg2, const ::java::lang::Object& arg3, const ::java::lang::Object& arg4, const ::java::lang::Object& arg5, const ::java::lang::Object& arg6, const ::java::lang::Object& arg7, const ::java::lang::Object& arg8);
	static ::java::util::List Of(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1, const ::java::lang::Object& arg2, const ::java::lang::Object& arg3, const ::java::lang::Object& arg4, const ::java::lang::Object& arg5, const ::java::lang::Object& arg6, const ::java::lang::Object& arg7, const ::java::lang::Object& arg8, const ::java::lang::Object& arg9);
	static ::java::util::List Of(const jni::Array< ::java::lang::Object >& arg0);
	::java::lang::Object Remove(const ::jint& arg0) const;
	::jboolean Remove(const ::java::lang::Object& arg0) const;
	::jboolean RemoveAll(const ::java::util::Collection& arg0) const;
	::jvoid ReplaceAll(const ::java::util::function::UnaryOperator& arg0) const;
	::jboolean RetainAll(const ::java::util::Collection& arg0) const;
	::java::lang::Object Set(const ::jint& arg0, const ::java::lang::Object& arg1) const;
	::jint Size() const;
	::jvoid Sort(const ::java::util::Comparator& arg0) const;
	::java::util::Spliterator Spliterator() const;
	::java::util::List SubList(const ::jint& arg0, const ::jint& arg1) const;
	jni::Array< ::java::lang::Object > ToArray() const;
	jni::Array< ::java::lang::Object > ToArray(const jni::Array< ::java::lang::Object >& arg0) const;
	explicit List(jobject o) : java::lang::Object(o) {}
	List(const List& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::List();
		operator ::java::util::Collection();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void Add(const ::jint& arg0, const ::java::lang::Object& arg1) = 0;
		virtual ::jboolean Add(const ::java::lang::Object& arg0) = 0;
		virtual ::jboolean AddAll(const ::jint& arg0, const ::java::util::Collection& arg1) = 0;
		virtual ::jboolean AddAll(const ::java::util::Collection& arg0) = 0;
		virtual void Clear() = 0;
		virtual ::jboolean Contains(const ::java::lang::Object& arg0) = 0;
		virtual ::jboolean ContainsAll(const ::java::util::Collection& arg0) = 0;
		virtual ::jboolean Equals(const ::java::lang::Object& arg0) = 0;
		virtual ::java::lang::Object Get(const ::jint& arg0) = 0;
		virtual ::jint HashCode() = 0;
		virtual ::jint IndexOf(const ::java::lang::Object& arg0) = 0;
		virtual ::jboolean IsEmpty() = 0;
		virtual ::java::util::Iterator Iterator() = 0;
		virtual ::jint LastIndexOf(const ::java::lang::Object& arg0) = 0;
		virtual ::java::util::ListIterator ListIterator() = 0;
		virtual ::java::util::ListIterator ListIterator(const ::jint& arg0) = 0;
		virtual ::java::lang::Object Remove(const ::jint& arg0) = 0;
		virtual ::jboolean Remove(const ::java::lang::Object& arg0) = 0;
		virtual ::jboolean RemoveAll(const ::java::util::Collection& arg0) = 0;
		virtual void ReplaceAll(const ::java::util::function::UnaryOperator& arg0) = 0;
		virtual ::jboolean RetainAll(const ::java::util::Collection& arg0) = 0;
		virtual ::java::lang::Object Set(const ::jint& arg0, const ::java::lang::Object& arg1) = 0;
		virtual ::jint Size() = 0;
		virtual void Sort(const ::java::util::Comparator& arg0) = 0;
		virtual ::java::util::Spliterator Spliterator() = 0;
		virtual ::java::util::List SubList(const ::jint& arg0, const ::jint& arg1) = 0;
		virtual jni::Array< ::java::lang::Object > ToArray() = 0;
		virtual jni::Array< ::java::lang::Object > ToArray(const jni::Array< ::java::lang::Object >& arg0) = 0;
	};
};

struct ListIterator : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::util::Iterator();
	::jvoid Add(const ::java::lang::Object& arg0) const;
	::jboolean HasNext() const;
	::jboolean HasPrevious() const;
	::java::lang::Object Next() const;
	::jint NextIndex() const;
	::java::lang::Object Previous() const;
	::jint PreviousIndex() const;
	::jvoid Remove() const;
	::jvoid Set(const ::java::lang::Object& arg0) const;
	explicit ListIterator(jobject o) : java::lang::Object(o) {}
	ListIterator(const ListIterator& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::ListIterator();
		operator ::java::util::Iterator();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void Add(const ::java::lang::Object& arg0) = 0;
		virtual ::jboolean HasNext() = 0;
		virtual ::jboolean HasPrevious() = 0;
		virtual ::java::lang::Object Next() = 0;
		virtual ::jint NextIndex() = 0;
		virtual ::java::lang::Object Previous() = 0;
		virtual ::jint PreviousIndex() = 0;
		virtual void Remove() = 0;
		virtual void Set(const ::java::lang::Object& arg0) = 0;
	};
};

struct Locale_FilteringMode : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::java::util::Locale_FilteringMode& fAUTOSELECT_FILTERING();
	static ::java::util::Locale_FilteringMode& fEXTENDED_FILTERING();
	static ::java::util::Locale_FilteringMode& fIGNORE_EXTENDED_RANGES();
	static ::java::util::Locale_FilteringMode& fMAP_EXTENDED_RANGES();
	static ::java::util::Locale_FilteringMode& fREJECT_EXTENDED_RANGES();
	static ::java::util::Locale_FilteringMode ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::java::util::Locale_FilteringMode > Values();
	explicit Locale_FilteringMode(jobject o) : ::java::lang::Enum(o) {}
	Locale_FilteringMode(const Locale_FilteringMode& o)  : ::java::lang::Enum(o) {}

};

struct Locale_Category : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::java::util::Locale_Category& fDISPLAY();
	static ::java::util::Locale_Category& fFORMAT();
	static ::java::util::Locale_Category ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::java::util::Locale_Category > Values();
	explicit Locale_Category(jobject o) : ::java::lang::Enum(o) {}
	Locale_Category(const Locale_Category& o)  : ::java::lang::Enum(o) {}

};

struct Locale_IsoCountryCode : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::java::util::Locale_IsoCountryCode& fPART1_ALPHA2();
	static ::java::util::Locale_IsoCountryCode& fPART1_ALPHA3();
	static ::java::util::Locale_IsoCountryCode& fPART3();
	static ::java::util::Locale_IsoCountryCode ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::java::util::Locale_IsoCountryCode > Values();
	explicit Locale_IsoCountryCode(jobject o) : ::java::lang::Enum(o) {}
	Locale_IsoCountryCode(const Locale_IsoCountryCode& o)  : ::java::lang::Enum(o) {}

};

}}

namespace java { namespace nio { namespace charset { 
struct Charset : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::Comparable();
	::java::util::Set Aliases() const;
	static ::java::util::SortedMap AvailableCharsets();
	::jboolean CanEncode() const;
	::jint CompareTo(const ::java::nio::charset::Charset& arg0) const;
	::jboolean Contains(const ::java::nio::charset::Charset& arg0) const;
	::java::nio::CharBuffer Decode(const ::java::nio::ByteBuffer& arg0) const;
	static ::java::nio::charset::Charset DefaultCharset();
	::java::lang::String DisplayName() const;
	::java::lang::String DisplayName(const ::java::util::Locale& arg0) const;
	::java::nio::ByteBuffer Encode(const ::java::lang::String& arg0) const;
	::java::nio::ByteBuffer Encode(const ::java::nio::CharBuffer& arg0) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	static ::java::nio::charset::Charset ForName(const ::java::lang::String& arg0);
	::jint HashCode() const;
	::jboolean IsRegistered() const;
	static ::jboolean IsSupported(const ::java::lang::String& arg0);
	::java::lang::String Name() const;
	::java::nio::charset::CharsetDecoder NewDecoder() const;
	::java::nio::charset::CharsetEncoder NewEncoder() const;
	::java::lang::String ToString() const;
	static jobject __Constructor(const ::java::lang::String& arg0, const jni::Array< ::java::lang::String >& arg1);
	Charset(const ::java::lang::String& arg0, const jni::Array< ::java::lang::String >& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit Charset(jobject o) : ::java::lang::Object(o) {}
	Charset(const Charset& o)  : ::java::lang::Object(o) {}

};

}}}

namespace java { namespace util { 
struct SortedMap : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::util::Map();
	::java::util::Comparator Comparator() const;
	::java::util::Set EntrySet() const;
	::java::lang::Object FirstKey() const;
	::java::util::SortedMap HeadMap(const ::java::lang::Object& arg0) const;
	::java::util::Set KeySet() const;
	::java::lang::Object LastKey() const;
	::java::util::SortedMap SubMap(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) const;
	::java::util::SortedMap TailMap(const ::java::lang::Object& arg0) const;
	::java::util::Collection Values() const;
	explicit SortedMap(jobject o) : java::lang::Object(o) {}
	SortedMap(const SortedMap& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::SortedMap();
		operator ::java::util::Map();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::util::Comparator Comparator() = 0;
		virtual ::java::util::Set EntrySet() = 0;
		virtual ::java::lang::Object FirstKey() = 0;
		virtual ::java::util::SortedMap HeadMap(const ::java::lang::Object& arg0) = 0;
		virtual ::java::util::Set KeySet() = 0;
		virtual ::java::lang::Object LastKey() = 0;
		virtual ::java::util::SortedMap SubMap(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) = 0;
		virtual ::java::util::SortedMap TailMap(const ::java::lang::Object& arg0) = 0;
		virtual ::java::util::Collection Values() = 0;
	};
};

struct Map : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid Clear() const;
	::java::lang::Object Compute(const ::java::lang::Object& arg0, const ::java::util::function::BiFunction& arg1) const;
	::java::lang::Object ComputeIfAbsent(const ::java::lang::Object& arg0, const ::java::util::function::Function& arg1) const;
	::java::lang::Object ComputeIfPresent(const ::java::lang::Object& arg0, const ::java::util::function::BiFunction& arg1) const;
	::jboolean ContainsKey(const ::java::lang::Object& arg0) const;
	::jboolean ContainsValue(const ::java::lang::Object& arg0) const;
	static ::java::util::Map CopyOf(const ::java::util::Map& arg0);
	static ::java::util::Map_Entry Entry(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1);
	::java::util::Set EntrySet() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jvoid ForEach(const ::java::util::function::BiConsumer& arg0) const;
	::java::lang::Object Get(const ::java::lang::Object& arg0) const;
	::java::lang::Object GetOrDefault(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) const;
	::jint HashCode() const;
	::jboolean IsEmpty() const;
	::java::util::Set KeySet() const;
	::java::lang::Object Merge(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1, const ::java::util::function::BiFunction& arg2) const;
	static ::java::util::Map Of();
	static ::java::util::Map Of(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1);
	static ::java::util::Map Of(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1, const ::java::lang::Object& arg2, const ::java::lang::Object& arg3);
	static ::java::util::Map Of(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1, const ::java::lang::Object& arg2, const ::java::lang::Object& arg3, const ::java::lang::Object& arg4, const ::java::lang::Object& arg5);
	static ::java::util::Map Of(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1, const ::java::lang::Object& arg2, const ::java::lang::Object& arg3, const ::java::lang::Object& arg4, const ::java::lang::Object& arg5, const ::java::lang::Object& arg6, const ::java::lang::Object& arg7);
	static ::java::util::Map Of(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1, const ::java::lang::Object& arg2, const ::java::lang::Object& arg3, const ::java::lang::Object& arg4, const ::java::lang::Object& arg5, const ::java::lang::Object& arg6, const ::java::lang::Object& arg7, const ::java::lang::Object& arg8, const ::java::lang::Object& arg9);
	static ::java::util::Map Of(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1, const ::java::lang::Object& arg2, const ::java::lang::Object& arg3, const ::java::lang::Object& arg4, const ::java::lang::Object& arg5, const ::java::lang::Object& arg6, const ::java::lang::Object& arg7, const ::java::lang::Object& arg8, const ::java::lang::Object& arg9, const ::java::lang::Object& arg10, const ::java::lang::Object& arg11);
	static ::java::util::Map Of(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1, const ::java::lang::Object& arg2, const ::java::lang::Object& arg3, const ::java::lang::Object& arg4, const ::java::lang::Object& arg5, const ::java::lang::Object& arg6, const ::java::lang::Object& arg7, const ::java::lang::Object& arg8, const ::java::lang::Object& arg9, const ::java::lang::Object& arg10, const ::java::lang::Object& arg11, const ::java::lang::Object& arg12, const ::java::lang::Object& arg13);
	static ::java::util::Map Of(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1, const ::java::lang::Object& arg2, const ::java::lang::Object& arg3, const ::java::lang::Object& arg4, const ::java::lang::Object& arg5, const ::java::lang::Object& arg6, const ::java::lang::Object& arg7, const ::java::lang::Object& arg8, const ::java::lang::Object& arg9, const ::java::lang::Object& arg10, const ::java::lang::Object& arg11, const ::java::lang::Object& arg12, const ::java::lang::Object& arg13, const ::java::lang::Object& arg14, const ::java::lang::Object& arg15);
	static ::java::util::Map Of(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1, const ::java::lang::Object& arg2, const ::java::lang::Object& arg3, const ::java::lang::Object& arg4, const ::java::lang::Object& arg5, const ::java::lang::Object& arg6, const ::java::lang::Object& arg7, const ::java::lang::Object& arg8, const ::java::lang::Object& arg9, const ::java::lang::Object& arg10, const ::java::lang::Object& arg11, const ::java::lang::Object& arg12, const ::java::lang::Object& arg13, const ::java::lang::Object& arg14, const ::java::lang::Object& arg15, const ::java::lang::Object& arg16, const ::java::lang::Object& arg17);
	static ::java::util::Map Of(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1, const ::java::lang::Object& arg2, const ::java::lang::Object& arg3, const ::java::lang::Object& arg4, const ::java::lang::Object& arg5, const ::java::lang::Object& arg6, const ::java::lang::Object& arg7, const ::java::lang::Object& arg8, const ::java::lang::Object& arg9, const ::java::lang::Object& arg10, const ::java::lang::Object& arg11, const ::java::lang::Object& arg12, const ::java::lang::Object& arg13, const ::java::lang::Object& arg14, const ::java::lang::Object& arg15, const ::java::lang::Object& arg16, const ::java::lang::Object& arg17, const ::java::lang::Object& arg18, const ::java::lang::Object& arg19);
	static ::java::util::Map OfEntries(const jni::Array< ::java::util::Map_Entry >& arg0);
	::java::lang::Object Put(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) const;
	::jvoid PutAll(const ::java::util::Map& arg0) const;
	::java::lang::Object PutIfAbsent(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) const;
	::java::lang::Object Remove(const ::java::lang::Object& arg0) const;
	::jboolean Remove(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) const;
	::java::lang::Object Replace(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) const;
	::jboolean Replace(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1, const ::java::lang::Object& arg2) const;
	::jvoid ReplaceAll(const ::java::util::function::BiFunction& arg0) const;
	::jint Size() const;
	::java::util::Collection Values() const;
	explicit Map(jobject o) : java::lang::Object(o) {}
	Map(const Map& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::Map();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void Clear() = 0;
		virtual ::java::lang::Object Compute(const ::java::lang::Object& arg0, const ::java::util::function::BiFunction& arg1) = 0;
		virtual ::java::lang::Object ComputeIfAbsent(const ::java::lang::Object& arg0, const ::java::util::function::Function& arg1) = 0;
		virtual ::java::lang::Object ComputeIfPresent(const ::java::lang::Object& arg0, const ::java::util::function::BiFunction& arg1) = 0;
		virtual ::jboolean ContainsKey(const ::java::lang::Object& arg0) = 0;
		virtual ::jboolean ContainsValue(const ::java::lang::Object& arg0) = 0;
		virtual ::java::util::Set EntrySet() = 0;
		virtual ::jboolean Equals(const ::java::lang::Object& arg0) = 0;
		virtual void ForEach(const ::java::util::function::BiConsumer& arg0) = 0;
		virtual ::java::lang::Object Get(const ::java::lang::Object& arg0) = 0;
		virtual ::java::lang::Object GetOrDefault(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) = 0;
		virtual ::jint HashCode() = 0;
		virtual ::jboolean IsEmpty() = 0;
		virtual ::java::util::Set KeySet() = 0;
		virtual ::java::lang::Object Merge(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1, const ::java::util::function::BiFunction& arg2) = 0;
		virtual ::java::lang::Object Put(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) = 0;
		virtual void PutAll(const ::java::util::Map& arg0) = 0;
		virtual ::java::lang::Object PutIfAbsent(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) = 0;
		virtual ::java::lang::Object Remove(const ::java::lang::Object& arg0) = 0;
		virtual ::jboolean Remove(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) = 0;
		virtual ::java::lang::Object Replace(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) = 0;
		virtual ::jboolean Replace(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1, const ::java::lang::Object& arg2) = 0;
		virtual void ReplaceAll(const ::java::util::function::BiFunction& arg0) = 0;
		virtual ::jint Size() = 0;
		virtual ::java::util::Collection Values() = 0;
	};
};

struct Map_Entry : java::lang::Object
{
	static jni::Class __CLASS;

	static ::java::util::Comparator ComparingByKey();
	static ::java::util::Comparator ComparingByKey(const ::java::util::Comparator& arg0);
	static ::java::util::Comparator ComparingByValue();
	static ::java::util::Comparator ComparingByValue(const ::java::util::Comparator& arg0);
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::lang::Object GetKey() const;
	::java::lang::Object GetValue() const;
	::jint HashCode() const;
	::java::lang::Object SetValue(const ::java::lang::Object& arg0) const;
	explicit Map_Entry(jobject o) : java::lang::Object(o) {}
	Map_Entry(const Map_Entry& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::Map_Entry();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean Equals(const ::java::lang::Object& arg0) = 0;
		virtual ::java::lang::Object GetKey() = 0;
		virtual ::java::lang::Object GetValue() = 0;
		virtual ::jint HashCode() = 0;
		virtual ::java::lang::Object SetValue(const ::java::lang::Object& arg0) = 0;
	};
};

}}

namespace java { namespace nio { 
struct Buffer : ::java::lang::Object
{
	static jni::Class __CLASS;

	::java::lang::Object Array() const;
	::jint ArrayOffset() const;
	::jint Capacity() const;
	::java::nio::Buffer Clear() const;
	::java::nio::Buffer Duplicate() const;
	::java::nio::Buffer Flip() const;
	::jboolean HasArray() const;
	::jboolean HasRemaining() const;
	::jboolean IsDirect() const;
	::jboolean IsReadOnly() const;
	::jint Limit() const;
	::java::nio::Buffer Limit(const ::jint& arg0) const;
	::java::nio::Buffer Mark() const;
	::jint Position() const;
	::java::nio::Buffer Position(const ::jint& arg0) const;
	::jint Remaining() const;
	::java::nio::Buffer Reset() const;
	::java::nio::Buffer Rewind() const;
	::java::nio::Buffer Slice() const;
	explicit Buffer(jobject o) : ::java::lang::Object(o) {}
	Buffer(const Buffer& o)  : ::java::lang::Object(o) {}

};

struct ByteBuffer : ::java::nio::Buffer
{
	static jni::Class __CLASS;

	operator ::java::lang::Comparable();
	::java::nio::ByteBuffer AlignedSlice(const ::jint& arg0) const;
	::jint AlignmentOffset(const ::jint& arg0, const ::jint& arg1) const;
	static ::java::nio::ByteBuffer Allocate(const ::jint& arg0);
	static ::java::nio::ByteBuffer AllocateDirect(const ::jint& arg0);
	jni::Array< ::jbyte > Array() const;
	::jint ArrayOffset() const;
	::java::nio::CharBuffer AsCharBuffer() const;
	::java::nio::DoubleBuffer AsDoubleBuffer() const;
	::java::nio::FloatBuffer AsFloatBuffer() const;
	::java::nio::IntBuffer AsIntBuffer() const;
	::java::nio::LongBuffer AsLongBuffer() const;
	::java::nio::ByteBuffer AsReadOnlyBuffer() const;
	::java::nio::ShortBuffer AsShortBuffer() const;
	::java::nio::ByteBuffer Clear() const;
	::java::nio::ByteBuffer Compact() const;
	::jint CompareTo(const ::java::nio::ByteBuffer& arg0) const;
	::java::nio::ByteBuffer Duplicate() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::nio::ByteBuffer Flip() const;
	::jbyte Get() const;
	::jbyte Get(const ::jint& arg0) const;
	::java::nio::ByteBuffer Get(const jni::Array< ::jbyte >& arg0) const;
	::java::nio::ByteBuffer Get(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jchar GetChar() const;
	::jchar GetChar(const ::jint& arg0) const;
	::jdouble GetDouble() const;
	::jdouble GetDouble(const ::jint& arg0) const;
	::jfloat GetFloat() const;
	::jfloat GetFloat(const ::jint& arg0) const;
	::jint GetInt() const;
	::jint GetInt(const ::jint& arg0) const;
	::jlong GetLong() const;
	::jlong GetLong(const ::jint& arg0) const;
	::jshort GetShort() const;
	::jshort GetShort(const ::jint& arg0) const;
	::jboolean HasArray() const;
	::jint HashCode() const;
	::jboolean IsDirect() const;
	::java::nio::ByteBuffer Limit(const ::jint& arg0) const;
	::java::nio::ByteBuffer Mark() const;
	::jint Mismatch(const ::java::nio::ByteBuffer& arg0) const;
	::java::nio::ByteOrder Order() const;
	::java::nio::ByteBuffer Order(const ::java::nio::ByteOrder& arg0) const;
	::java::nio::ByteBuffer Position(const ::jint& arg0) const;
	::java::nio::ByteBuffer Put(const ::jbyte& arg0) const;
	::java::nio::ByteBuffer Put(const ::jint& arg0, const ::jbyte& arg1) const;
	::java::nio::ByteBuffer Put(const ::java::nio::ByteBuffer& arg0) const;
	::java::nio::ByteBuffer Put(const jni::Array< ::jbyte >& arg0) const;
	::java::nio::ByteBuffer Put(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::java::nio::ByteBuffer PutChar(const ::jchar& arg0) const;
	::java::nio::ByteBuffer PutChar(const ::jint& arg0, const ::jchar& arg1) const;
	::java::nio::ByteBuffer PutDouble(const ::jdouble& arg0) const;
	::java::nio::ByteBuffer PutDouble(const ::jint& arg0, const ::jdouble& arg1) const;
	::java::nio::ByteBuffer PutFloat(const ::jfloat& arg0) const;
	::java::nio::ByteBuffer PutFloat(const ::jint& arg0, const ::jfloat& arg1) const;
	::java::nio::ByteBuffer PutInt(const ::jint& arg0) const;
	::java::nio::ByteBuffer PutInt(const ::jint& arg0, const ::jint& arg1) const;
	::java::nio::ByteBuffer PutLong(const ::jint& arg0, const ::jlong& arg1) const;
	::java::nio::ByteBuffer PutLong(const ::jlong& arg0) const;
	::java::nio::ByteBuffer PutShort(const ::jint& arg0, const ::jshort& arg1) const;
	::java::nio::ByteBuffer PutShort(const ::jshort& arg0) const;
	::java::nio::ByteBuffer Reset() const;
	::java::nio::ByteBuffer Rewind() const;
	::java::nio::ByteBuffer Slice() const;
	::java::lang::String ToString() const;
	static ::java::nio::ByteBuffer Wrap(const jni::Array< ::jbyte >& arg0);
	static ::java::nio::ByteBuffer Wrap(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::jint& arg2);
	explicit ByteBuffer(jobject o) : ::java::nio::Buffer(o) {}
	ByteBuffer(const ByteBuffer& o)  : ::java::nio::Buffer(o) {}

};

struct CharBuffer : ::java::nio::Buffer
{
	static jni::Class __CLASS;

	operator ::java::lang::Comparable();
	operator ::java::lang::Appendable();
	operator ::java::lang::CharSequence();
	operator ::java::lang::Readable();
	static ::java::nio::CharBuffer Allocate(const ::jint& arg0);
	::java::nio::CharBuffer Append(const ::jchar& arg0) const;
	::java::nio::CharBuffer Append(const ::java::lang::CharSequence& arg0) const;
	::java::nio::CharBuffer Append(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2) const;
	jni::Array< ::jchar > Array() const;
	::jint ArrayOffset() const;
	::java::nio::CharBuffer AsReadOnlyBuffer() const;
	::jchar CharAt(const ::jint& arg0) const;
	::java::util::stream::IntStream Chars() const;
	::java::nio::CharBuffer Clear() const;
	::java::nio::CharBuffer Compact() const;
	::jint CompareTo(const ::java::nio::CharBuffer& arg0) const;
	::java::nio::CharBuffer Duplicate() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::nio::CharBuffer Flip() const;
	::jchar Get() const;
	::jchar Get(const ::jint& arg0) const;
	::java::nio::CharBuffer Get(const jni::Array< ::jchar >& arg0) const;
	::java::nio::CharBuffer Get(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jboolean HasArray() const;
	::jint HashCode() const;
	::jboolean IsDirect() const;
	::jint Length() const;
	::java::nio::CharBuffer Limit(const ::jint& arg0) const;
	::java::nio::CharBuffer Mark() const;
	::jint Mismatch(const ::java::nio::CharBuffer& arg0) const;
	::java::nio::ByteOrder Order() const;
	::java::nio::CharBuffer Position(const ::jint& arg0) const;
	::java::nio::CharBuffer Put(const ::jchar& arg0) const;
	::java::nio::CharBuffer Put(const ::jint& arg0, const ::jchar& arg1) const;
	::java::nio::CharBuffer Put(const ::java::lang::String& arg0) const;
	::java::nio::CharBuffer Put(const ::java::lang::String& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::java::nio::CharBuffer Put(const ::java::nio::CharBuffer& arg0) const;
	::java::nio::CharBuffer Put(const jni::Array< ::jchar >& arg0) const;
	::java::nio::CharBuffer Put(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jint Read(const ::java::nio::CharBuffer& arg0) const;
	::java::nio::CharBuffer Reset() const;
	::java::nio::CharBuffer Rewind() const;
	::java::nio::CharBuffer Slice() const;
	::java::nio::CharBuffer SubSequence(const ::jint& arg0, const ::jint& arg1) const;
	::java::lang::String ToString() const;
	static ::java::nio::CharBuffer Wrap(const ::java::lang::CharSequence& arg0);
	static ::java::nio::CharBuffer Wrap(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2);
	static ::java::nio::CharBuffer Wrap(const jni::Array< ::jchar >& arg0);
	static ::java::nio::CharBuffer Wrap(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2);
	explicit CharBuffer(jobject o) : ::java::nio::Buffer(o) {}
	CharBuffer(const CharBuffer& o)  : ::java::nio::Buffer(o) {}

};

}}

namespace java { namespace lang { 
struct Readable : java::lang::Object
{
	static jni::Class __CLASS;

	::jint Read(const ::java::nio::CharBuffer& arg0) const;
	explicit Readable(jobject o) : java::lang::Object(o) {}
	Readable(const Readable& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::lang::Readable();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jint Read(const ::java::nio::CharBuffer& arg0) = 0;
	};
};

}}

namespace java { namespace nio { 
struct ByteOrder : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::java::nio::ByteOrder& fBIG_ENDIAN();
	static ::java::nio::ByteOrder& fLITTLE_ENDIAN();
	static ::java::nio::ByteOrder NativeOrder();
	::java::lang::String ToString() const;
	explicit ByteOrder(jobject o) : ::java::lang::Object(o) {}
	ByteOrder(const ByteOrder& o)  : ::java::lang::Object(o) {}

};

struct DoubleBuffer : ::java::nio::Buffer
{
	static jni::Class __CLASS;

	operator ::java::lang::Comparable();
	static ::java::nio::DoubleBuffer Allocate(const ::jint& arg0);
	jni::Array< ::jdouble > Array() const;
	::jint ArrayOffset() const;
	::java::nio::DoubleBuffer AsReadOnlyBuffer() const;
	::java::nio::DoubleBuffer Clear() const;
	::java::nio::DoubleBuffer Compact() const;
	::jint CompareTo(const ::java::nio::DoubleBuffer& arg0) const;
	::java::nio::DoubleBuffer Duplicate() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::nio::DoubleBuffer Flip() const;
	::jdouble Get() const;
	::jdouble Get(const ::jint& arg0) const;
	::java::nio::DoubleBuffer Get(const jni::Array< ::jdouble >& arg0) const;
	::java::nio::DoubleBuffer Get(const jni::Array< ::jdouble >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jboolean HasArray() const;
	::jint HashCode() const;
	::jboolean IsDirect() const;
	::java::nio::DoubleBuffer Limit(const ::jint& arg0) const;
	::java::nio::DoubleBuffer Mark() const;
	::jint Mismatch(const ::java::nio::DoubleBuffer& arg0) const;
	::java::nio::ByteOrder Order() const;
	::java::nio::DoubleBuffer Position(const ::jint& arg0) const;
	::java::nio::DoubleBuffer Put(const ::jdouble& arg0) const;
	::java::nio::DoubleBuffer Put(const ::jint& arg0, const ::jdouble& arg1) const;
	::java::nio::DoubleBuffer Put(const ::java::nio::DoubleBuffer& arg0) const;
	::java::nio::DoubleBuffer Put(const jni::Array< ::jdouble >& arg0) const;
	::java::nio::DoubleBuffer Put(const jni::Array< ::jdouble >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::java::nio::DoubleBuffer Reset() const;
	::java::nio::DoubleBuffer Rewind() const;
	::java::nio::DoubleBuffer Slice() const;
	::java::lang::String ToString() const;
	static ::java::nio::DoubleBuffer Wrap(const jni::Array< ::jdouble >& arg0);
	static ::java::nio::DoubleBuffer Wrap(const jni::Array< ::jdouble >& arg0, const ::jint& arg1, const ::jint& arg2);
	explicit DoubleBuffer(jobject o) : ::java::nio::Buffer(o) {}
	DoubleBuffer(const DoubleBuffer& o)  : ::java::nio::Buffer(o) {}

};

struct FloatBuffer : ::java::nio::Buffer
{
	static jni::Class __CLASS;

	operator ::java::lang::Comparable();
	static ::java::nio::FloatBuffer Allocate(const ::jint& arg0);
	jni::Array< ::jfloat > Array() const;
	::jint ArrayOffset() const;
	::java::nio::FloatBuffer AsReadOnlyBuffer() const;
	::java::nio::FloatBuffer Clear() const;
	::java::nio::FloatBuffer Compact() const;
	::jint CompareTo(const ::java::nio::FloatBuffer& arg0) const;
	::java::nio::FloatBuffer Duplicate() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::nio::FloatBuffer Flip() const;
	::jfloat Get() const;
	::jfloat Get(const ::jint& arg0) const;
	::java::nio::FloatBuffer Get(const jni::Array< ::jfloat >& arg0) const;
	::java::nio::FloatBuffer Get(const jni::Array< ::jfloat >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jboolean HasArray() const;
	::jint HashCode() const;
	::jboolean IsDirect() const;
	::java::nio::FloatBuffer Limit(const ::jint& arg0) const;
	::java::nio::FloatBuffer Mark() const;
	::jint Mismatch(const ::java::nio::FloatBuffer& arg0) const;
	::java::nio::ByteOrder Order() const;
	::java::nio::FloatBuffer Position(const ::jint& arg0) const;
	::java::nio::FloatBuffer Put(const ::jfloat& arg0) const;
	::java::nio::FloatBuffer Put(const ::jint& arg0, const ::jfloat& arg1) const;
	::java::nio::FloatBuffer Put(const ::java::nio::FloatBuffer& arg0) const;
	::java::nio::FloatBuffer Put(const jni::Array< ::jfloat >& arg0) const;
	::java::nio::FloatBuffer Put(const jni::Array< ::jfloat >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::java::nio::FloatBuffer Reset() const;
	::java::nio::FloatBuffer Rewind() const;
	::java::nio::FloatBuffer Slice() const;
	::java::lang::String ToString() const;
	static ::java::nio::FloatBuffer Wrap(const jni::Array< ::jfloat >& arg0);
	static ::java::nio::FloatBuffer Wrap(const jni::Array< ::jfloat >& arg0, const ::jint& arg1, const ::jint& arg2);
	explicit FloatBuffer(jobject o) : ::java::nio::Buffer(o) {}
	FloatBuffer(const FloatBuffer& o)  : ::java::nio::Buffer(o) {}

};

struct IntBuffer : ::java::nio::Buffer
{
	static jni::Class __CLASS;

	operator ::java::lang::Comparable();
	static ::java::nio::IntBuffer Allocate(const ::jint& arg0);
	jni::Array< ::jint > Array() const;
	::jint ArrayOffset() const;
	::java::nio::IntBuffer AsReadOnlyBuffer() const;
	::java::nio::IntBuffer Clear() const;
	::java::nio::IntBuffer Compact() const;
	::jint CompareTo(const ::java::nio::IntBuffer& arg0) const;
	::java::nio::IntBuffer Duplicate() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::nio::IntBuffer Flip() const;
	::jint Get() const;
	::jint Get(const ::jint& arg0) const;
	::java::nio::IntBuffer Get(const jni::Array< ::jint >& arg0) const;
	::java::nio::IntBuffer Get(const jni::Array< ::jint >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jboolean HasArray() const;
	::jint HashCode() const;
	::jboolean IsDirect() const;
	::java::nio::IntBuffer Limit(const ::jint& arg0) const;
	::java::nio::IntBuffer Mark() const;
	::jint Mismatch(const ::java::nio::IntBuffer& arg0) const;
	::java::nio::ByteOrder Order() const;
	::java::nio::IntBuffer Position(const ::jint& arg0) const;
	::java::nio::IntBuffer Put(const ::jint& arg0) const;
	::java::nio::IntBuffer Put(const ::jint& arg0, const ::jint& arg1) const;
	::java::nio::IntBuffer Put(const ::java::nio::IntBuffer& arg0) const;
	::java::nio::IntBuffer Put(const jni::Array< ::jint >& arg0) const;
	::java::nio::IntBuffer Put(const jni::Array< ::jint >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::java::nio::IntBuffer Reset() const;
	::java::nio::IntBuffer Rewind() const;
	::java::nio::IntBuffer Slice() const;
	::java::lang::String ToString() const;
	static ::java::nio::IntBuffer Wrap(const jni::Array< ::jint >& arg0);
	static ::java::nio::IntBuffer Wrap(const jni::Array< ::jint >& arg0, const ::jint& arg1, const ::jint& arg2);
	explicit IntBuffer(jobject o) : ::java::nio::Buffer(o) {}
	IntBuffer(const IntBuffer& o)  : ::java::nio::Buffer(o) {}

};

struct LongBuffer : ::java::nio::Buffer
{
	static jni::Class __CLASS;

	operator ::java::lang::Comparable();
	static ::java::nio::LongBuffer Allocate(const ::jint& arg0);
	jni::Array< ::jlong > Array() const;
	::jint ArrayOffset() const;
	::java::nio::LongBuffer AsReadOnlyBuffer() const;
	::java::nio::LongBuffer Clear() const;
	::java::nio::LongBuffer Compact() const;
	::jint CompareTo(const ::java::nio::LongBuffer& arg0) const;
	::java::nio::LongBuffer Duplicate() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::nio::LongBuffer Flip() const;
	::jlong Get() const;
	::jlong Get(const ::jint& arg0) const;
	::java::nio::LongBuffer Get(const jni::Array< ::jlong >& arg0) const;
	::java::nio::LongBuffer Get(const jni::Array< ::jlong >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jboolean HasArray() const;
	::jint HashCode() const;
	::jboolean IsDirect() const;
	::java::nio::LongBuffer Limit(const ::jint& arg0) const;
	::java::nio::LongBuffer Mark() const;
	::jint Mismatch(const ::java::nio::LongBuffer& arg0) const;
	::java::nio::ByteOrder Order() const;
	::java::nio::LongBuffer Position(const ::jint& arg0) const;
	::java::nio::LongBuffer Put(const ::jint& arg0, const ::jlong& arg1) const;
	::java::nio::LongBuffer Put(const ::jlong& arg0) const;
	::java::nio::LongBuffer Put(const ::java::nio::LongBuffer& arg0) const;
	::java::nio::LongBuffer Put(const jni::Array< ::jlong >& arg0) const;
	::java::nio::LongBuffer Put(const jni::Array< ::jlong >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::java::nio::LongBuffer Reset() const;
	::java::nio::LongBuffer Rewind() const;
	::java::nio::LongBuffer Slice() const;
	::java::lang::String ToString() const;
	static ::java::nio::LongBuffer Wrap(const jni::Array< ::jlong >& arg0);
	static ::java::nio::LongBuffer Wrap(const jni::Array< ::jlong >& arg0, const ::jint& arg1, const ::jint& arg2);
	explicit LongBuffer(jobject o) : ::java::nio::Buffer(o) {}
	LongBuffer(const LongBuffer& o)  : ::java::nio::Buffer(o) {}

};

struct ShortBuffer : ::java::nio::Buffer
{
	static jni::Class __CLASS;

	operator ::java::lang::Comparable();
	static ::java::nio::ShortBuffer Allocate(const ::jint& arg0);
	jni::Array< ::jshort > Array() const;
	::jint ArrayOffset() const;
	::java::nio::ShortBuffer AsReadOnlyBuffer() const;
	::java::nio::ShortBuffer Clear() const;
	::java::nio::ShortBuffer Compact() const;
	::jint CompareTo(const ::java::nio::ShortBuffer& arg0) const;
	::java::nio::ShortBuffer Duplicate() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::nio::ShortBuffer Flip() const;
	::jshort Get() const;
	::jshort Get(const ::jint& arg0) const;
	::java::nio::ShortBuffer Get(const jni::Array< ::jshort >& arg0) const;
	::java::nio::ShortBuffer Get(const jni::Array< ::jshort >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jboolean HasArray() const;
	::jint HashCode() const;
	::jboolean IsDirect() const;
	::java::nio::ShortBuffer Limit(const ::jint& arg0) const;
	::java::nio::ShortBuffer Mark() const;
	::jint Mismatch(const ::java::nio::ShortBuffer& arg0) const;
	::java::nio::ByteOrder Order() const;
	::java::nio::ShortBuffer Position(const ::jint& arg0) const;
	::java::nio::ShortBuffer Put(const ::jint& arg0, const ::jshort& arg1) const;
	::java::nio::ShortBuffer Put(const ::java::nio::ShortBuffer& arg0) const;
	::java::nio::ShortBuffer Put(const ::jshort& arg0) const;
	::java::nio::ShortBuffer Put(const jni::Array< ::jshort >& arg0) const;
	::java::nio::ShortBuffer Put(const jni::Array< ::jshort >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::java::nio::ShortBuffer Reset() const;
	::java::nio::ShortBuffer Rewind() const;
	::java::nio::ShortBuffer Slice() const;
	::java::lang::String ToString() const;
	static ::java::nio::ShortBuffer Wrap(const jni::Array< ::jshort >& arg0);
	static ::java::nio::ShortBuffer Wrap(const jni::Array< ::jshort >& arg0, const ::jint& arg1, const ::jint& arg2);
	explicit ShortBuffer(jobject o) : ::java::nio::Buffer(o) {}
	ShortBuffer(const ShortBuffer& o)  : ::java::nio::Buffer(o) {}

};

}}

namespace java { namespace nio { namespace charset { 
struct CharsetDecoder : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jfloat AverageCharsPerByte() const;
	::java::nio::charset::Charset Charset() const;
	::java::nio::CharBuffer Decode(const ::java::nio::ByteBuffer& arg0) const;
	::java::nio::charset::CoderResult Decode(const ::java::nio::ByteBuffer& arg0, const ::java::nio::CharBuffer& arg1, const ::jboolean& arg2) const;
	::java::nio::charset::CoderResult DecodeLoop(const ::java::nio::ByteBuffer& arg0, const ::java::nio::CharBuffer& arg1) const;
	::java::nio::charset::Charset DetectedCharset() const;
	::java::nio::charset::CoderResult Flush(const ::java::nio::CharBuffer& arg0) const;
	::java::nio::charset::CoderResult ImplFlush(const ::java::nio::CharBuffer& arg0) const;
	::jvoid ImplOnMalformedInput(const ::java::nio::charset::CodingErrorAction& arg0) const;
	::jvoid ImplOnUnmappableCharacter(const ::java::nio::charset::CodingErrorAction& arg0) const;
	::jvoid ImplReplaceWith(const ::java::lang::String& arg0) const;
	::jvoid ImplReset() const;
	::jboolean IsAutoDetecting() const;
	::jboolean IsCharsetDetected() const;
	::java::nio::charset::CodingErrorAction MalformedInputAction() const;
	::jfloat MaxCharsPerByte() const;
	::java::nio::charset::CharsetDecoder OnMalformedInput(const ::java::nio::charset::CodingErrorAction& arg0) const;
	::java::nio::charset::CharsetDecoder OnUnmappableCharacter(const ::java::nio::charset::CodingErrorAction& arg0) const;
	::java::nio::charset::CharsetDecoder ReplaceWith(const ::java::lang::String& arg0) const;
	::java::lang::String Replacement() const;
	::java::nio::charset::CharsetDecoder Reset() const;
	::java::nio::charset::CodingErrorAction UnmappableCharacterAction() const;
	static jobject __Constructor(const ::java::nio::charset::Charset& arg0, const ::jfloat& arg1, const ::jfloat& arg2);
	CharsetDecoder(const ::java::nio::charset::Charset& arg0, const ::jfloat& arg1, const ::jfloat& arg2) : ::java::lang::Object(__Constructor(arg0, arg1, arg2)) {}
	explicit CharsetDecoder(jobject o) : ::java::lang::Object(o) {}
	CharsetDecoder(const CharsetDecoder& o)  : ::java::lang::Object(o) {}

};

struct CoderResult : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::java::nio::charset::CoderResult& fOVERFLOW();
	static ::java::nio::charset::CoderResult& fUNDERFLOW();
	::jboolean IsError() const;
	::jboolean IsMalformed() const;
	::jboolean IsOverflow() const;
	::jboolean IsUnderflow() const;
	::jboolean IsUnmappable() const;
	::jint Length() const;
	static ::java::nio::charset::CoderResult MalformedForLength(const ::jint& arg0);
	::jvoid ThrowException() const;
	::java::lang::String ToString() const;
	static ::java::nio::charset::CoderResult UnmappableForLength(const ::jint& arg0);
	explicit CoderResult(jobject o) : ::java::lang::Object(o) {}
	CoderResult(const CoderResult& o)  : ::java::lang::Object(o) {}

};

struct CodingErrorAction : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::java::nio::charset::CodingErrorAction& fIGNORE();
	static ::java::nio::charset::CodingErrorAction& fREPLACE();
	static ::java::nio::charset::CodingErrorAction& fREPORT();
	::java::lang::String ToString() const;
	explicit CodingErrorAction(jobject o) : ::java::lang::Object(o) {}
	CodingErrorAction(const CodingErrorAction& o)  : ::java::lang::Object(o) {}

};

struct CharsetEncoder : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jfloat AverageBytesPerChar() const;
	::jboolean CanEncode(const ::jchar& arg0) const;
	::jboolean CanEncode(const ::java::lang::CharSequence& arg0) const;
	::java::nio::charset::Charset Charset() const;
	::java::nio::ByteBuffer Encode(const ::java::nio::CharBuffer& arg0) const;
	::java::nio::charset::CoderResult Encode(const ::java::nio::CharBuffer& arg0, const ::java::nio::ByteBuffer& arg1, const ::jboolean& arg2) const;
	::java::nio::charset::CoderResult EncodeLoop(const ::java::nio::CharBuffer& arg0, const ::java::nio::ByteBuffer& arg1) const;
	::java::nio::charset::CoderResult Flush(const ::java::nio::ByteBuffer& arg0) const;
	::java::nio::charset::CoderResult ImplFlush(const ::java::nio::ByteBuffer& arg0) const;
	::jvoid ImplOnMalformedInput(const ::java::nio::charset::CodingErrorAction& arg0) const;
	::jvoid ImplOnUnmappableCharacter(const ::java::nio::charset::CodingErrorAction& arg0) const;
	::jvoid ImplReplaceWith(const jni::Array< ::jbyte >& arg0) const;
	::jvoid ImplReset() const;
	::jboolean IsLegalReplacement(const jni::Array< ::jbyte >& arg0) const;
	::java::nio::charset::CodingErrorAction MalformedInputAction() const;
	::jfloat MaxBytesPerChar() const;
	::java::nio::charset::CharsetEncoder OnMalformedInput(const ::java::nio::charset::CodingErrorAction& arg0) const;
	::java::nio::charset::CharsetEncoder OnUnmappableCharacter(const ::java::nio::charset::CodingErrorAction& arg0) const;
	::java::nio::charset::CharsetEncoder ReplaceWith(const jni::Array< ::jbyte >& arg0) const;
	jni::Array< ::jbyte > Replacement() const;
	::java::nio::charset::CharsetEncoder Reset() const;
	::java::nio::charset::CodingErrorAction UnmappableCharacterAction() const;
	static jobject __Constructor(const ::java::nio::charset::Charset& arg0, const ::jfloat& arg1, const ::jfloat& arg2);
	CharsetEncoder(const ::java::nio::charset::Charset& arg0, const ::jfloat& arg1, const ::jfloat& arg2) : ::java::lang::Object(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::java::nio::charset::Charset& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const jni::Array< ::jbyte >& arg3);
	CharsetEncoder(const ::java::nio::charset::Charset& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const jni::Array< ::jbyte >& arg3) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3)) {}
	explicit CharsetEncoder(jobject o) : ::java::lang::Object(o) {}
	CharsetEncoder(const CharsetEncoder& o)  : ::java::lang::Object(o) {}

};

}}}

namespace java { namespace lang { 
struct StringBuilder : ::java::lang::AbstractStringBuilder
{
	static jni::Class __CLASS;

	operator ::java::io::Serializable();
	operator ::java::lang::Comparable();
	operator ::java::lang::CharSequence();
	::java::lang::StringBuilder Append(const ::jchar& arg0) const;
	::java::lang::StringBuilder Append(const ::jdouble& arg0) const;
	::java::lang::StringBuilder Append(const ::jfloat& arg0) const;
	::java::lang::StringBuilder Append(const ::jint& arg0) const;
	::java::lang::StringBuilder Append(const ::jlong& arg0) const;
	::java::lang::StringBuilder Append(const ::java::lang::CharSequence& arg0) const;
	::java::lang::StringBuilder Append(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::java::lang::StringBuilder Append(const ::java::lang::Object& arg0) const;
	::java::lang::StringBuilder Append(const ::java::lang::String& arg0) const;
	::java::lang::StringBuilder Append(const ::java::lang::StringBuffer& arg0) const;
	::java::lang::StringBuilder Append(const ::jboolean& arg0) const;
	::java::lang::StringBuilder Append(const jni::Array< ::jchar >& arg0) const;
	::java::lang::StringBuilder Append(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::java::lang::StringBuilder AppendCodePoint(const ::jint& arg0) const;
	::jint CompareTo(const ::java::lang::StringBuilder& arg0) const;
	::java::lang::StringBuilder Delete(const ::jint& arg0, const ::jint& arg1) const;
	::java::lang::StringBuilder DeleteCharAt(const ::jint& arg0) const;
	::jint IndexOf(const ::java::lang::String& arg0) const;
	::jint IndexOf(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::java::lang::StringBuilder Insert(const ::jint& arg0, const ::jchar& arg1) const;
	::java::lang::StringBuilder Insert(const ::jint& arg0, const ::jdouble& arg1) const;
	::java::lang::StringBuilder Insert(const ::jint& arg0, const ::jfloat& arg1) const;
	::java::lang::StringBuilder Insert(const ::jint& arg0, const ::jint& arg1) const;
	::java::lang::StringBuilder Insert(const ::jint& arg0, const ::jlong& arg1) const;
	::java::lang::StringBuilder Insert(const ::jint& arg0, const ::java::lang::CharSequence& arg1) const;
	::java::lang::StringBuilder Insert(const ::jint& arg0, const ::java::lang::CharSequence& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::java::lang::StringBuilder Insert(const ::jint& arg0, const ::java::lang::Object& arg1) const;
	::java::lang::StringBuilder Insert(const ::jint& arg0, const ::java::lang::String& arg1) const;
	::java::lang::StringBuilder Insert(const ::jint& arg0, const ::jboolean& arg1) const;
	::java::lang::StringBuilder Insert(const ::jint& arg0, const jni::Array< ::jchar >& arg1) const;
	::java::lang::StringBuilder Insert(const ::jint& arg0, const jni::Array< ::jchar >& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jint LastIndexOf(const ::java::lang::String& arg0) const;
	::jint LastIndexOf(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::java::lang::StringBuilder Replace(const ::jint& arg0, const ::jint& arg1, const ::java::lang::String& arg2) const;
	::java::lang::StringBuilder Reverse() const;
	::java::lang::String ToString() const;
	static jobject __Constructor();
	StringBuilder() : ::java::lang::AbstractStringBuilder(__Constructor()) {}
	static jobject __Constructor(const ::jint& arg0);
	StringBuilder(const ::jint& arg0) : ::java::lang::AbstractStringBuilder(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::CharSequence& arg0);
	StringBuilder(const ::java::lang::CharSequence& arg0) : ::java::lang::AbstractStringBuilder(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::String& arg0);
	StringBuilder(const ::java::lang::String& arg0) : ::java::lang::AbstractStringBuilder(__Constructor(arg0)) {}
	explicit StringBuilder(jobject o) : ::java::lang::AbstractStringBuilder(o) {}
	StringBuilder(const StringBuilder& o)  : ::java::lang::AbstractStringBuilder(o) {}

};

}}

namespace java { namespace lang { namespace reflect { 
struct TypeVariable : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::reflect::Type();
	operator ::java::lang::reflect::AnnotatedElement();
	jni::Array< ::java::lang::reflect::AnnotatedType > GetAnnotatedBounds() const;
	jni::Array< ::java::lang::reflect::Type > GetBounds() const;
	::java::lang::reflect::GenericDeclaration GetGenericDeclaration() const;
	::java::lang::String GetName() const;
	explicit TypeVariable(jobject o) : java::lang::Object(o) {}
	TypeVariable(const TypeVariable& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::lang::reflect::TypeVariable();
		operator ::java::lang::reflect::Type();
		operator ::java::lang::reflect::AnnotatedElement();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual jni::Array< ::java::lang::reflect::AnnotatedType > GetAnnotatedBounds() = 0;
		virtual jni::Array< ::java::lang::reflect::Type > GetBounds() = 0;
		virtual ::java::lang::reflect::GenericDeclaration GetGenericDeclaration() = 0;
		virtual ::java::lang::String GetName() = 0;
	};
};

struct Type : java::lang::Object
{
	static jni::Class __CLASS;

	::java::lang::String GetTypeName() const;
	explicit Type(jobject o) : java::lang::Object(o) {}
	Type(const Type& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::lang::reflect::Type();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::lang::String GetTypeName() = 0;
	};
};

struct AnnotatedType : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::reflect::AnnotatedElement();
	::java::lang::reflect::AnnotatedType GetAnnotatedOwnerType() const;
	::java::lang::reflect::Type GetType() const;
	explicit AnnotatedType(jobject o) : java::lang::Object(o) {}
	AnnotatedType(const AnnotatedType& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::lang::reflect::AnnotatedType();
		operator ::java::lang::reflect::AnnotatedElement();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::lang::reflect::AnnotatedType GetAnnotatedOwnerType() = 0;
		virtual ::java::lang::reflect::Type GetType() = 0;
	};
};

}}}

namespace java { namespace lang { 
struct Module : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::reflect::AnnotatedElement();
	::java::lang::Module AddExports(const ::java::lang::String& arg0, const ::java::lang::Module& arg1) const;
	::java::lang::Module AddOpens(const ::java::lang::String& arg0, const ::java::lang::Module& arg1) const;
	::java::lang::Module AddReads(const ::java::lang::Module& arg0) const;
	::java::lang::Module AddUses(const ::java::lang::Class& arg0) const;
	::jboolean CanRead(const ::java::lang::Module& arg0) const;
	::jboolean CanUse(const ::java::lang::Class& arg0) const;
	::java::lang::annotation::Annotation GetAnnotation(const ::java::lang::Class& arg0) const;
	jni::Array< ::java::lang::annotation::Annotation > GetAnnotations() const;
	::java::lang::ClassLoader GetClassLoader() const;
	jni::Array< ::java::lang::annotation::Annotation > GetDeclaredAnnotations() const;
	::java::lang::module::ModuleDescriptor GetDescriptor() const;
	::java::lang::ModuleLayer GetLayer() const;
	::java::lang::String GetName() const;
	::java::util::Set GetPackages() const;
	::java::io::InputStream GetResourceAsStream(const ::java::lang::String& arg0) const;
	::jboolean IsExported(const ::java::lang::String& arg0) const;
	::jboolean IsExported(const ::java::lang::String& arg0, const ::java::lang::Module& arg1) const;
	::jboolean IsNamed() const;
	::jboolean IsOpen(const ::java::lang::String& arg0) const;
	::jboolean IsOpen(const ::java::lang::String& arg0, const ::java::lang::Module& arg1) const;
	::java::lang::String ToString() const;
	explicit Module(jobject o) : ::java::lang::Object(o) {}
	Module(const Module& o)  : ::java::lang::Object(o) {}

};

struct ClassLoader : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid ClearAssertionStatus() const;
	::java::lang::Class DefineClass(const ::java::lang::String& arg0, const ::java::nio::ByteBuffer& arg1, const ::java::security::ProtectionDomain& arg2) const;
	::java::lang::Class DefineClass(const ::java::lang::String& arg0, const jni::Array< ::jbyte >& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::java::lang::Class DefineClass(const ::java::lang::String& arg0, const jni::Array< ::jbyte >& arg1, const ::jint& arg2, const ::jint& arg3, const ::java::security::ProtectionDomain& arg4) const;
	::java::lang::Class DefineClass(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::java::lang::Package DefinePackage(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2, const ::java::lang::String& arg3, const ::java::lang::String& arg4, const ::java::lang::String& arg5, const ::java::lang::String& arg6, const ::java::net::URL& arg7) const;
	::java::lang::Class FindClass(const ::java::lang::String& arg0) const;
	::java::lang::Class FindClass(const ::java::lang::String& arg0, const ::java::lang::String& arg1) const;
	::java::lang::String FindLibrary(const ::java::lang::String& arg0) const;
	::java::lang::Class FindLoadedClass(const ::java::lang::String& arg0) const;
	::java::net::URL FindResource(const ::java::lang::String& arg0) const;
	::java::net::URL FindResource(const ::java::lang::String& arg0, const ::java::lang::String& arg1) const;
	::java::util::Enumeration FindResources(const ::java::lang::String& arg0) const;
	::java::lang::Class FindSystemClass(const ::java::lang::String& arg0) const;
	::java::lang::Object GetClassLoadingLock(const ::java::lang::String& arg0) const;
	::java::lang::Package GetDefinedPackage(const ::java::lang::String& arg0) const;
	jni::Array< ::java::lang::Package > GetDefinedPackages() const;
	::java::lang::String GetName() const;
	::java::lang::Package GetPackage(const ::java::lang::String& arg0) const;
	jni::Array< ::java::lang::Package > GetPackages() const;
	::java::lang::ClassLoader GetParent() const;
	static ::java::lang::ClassLoader GetPlatformClassLoader();
	::java::net::URL GetResource(const ::java::lang::String& arg0) const;
	::java::io::InputStream GetResourceAsStream(const ::java::lang::String& arg0) const;
	::java::util::Enumeration GetResources(const ::java::lang::String& arg0) const;
	static ::java::lang::ClassLoader GetSystemClassLoader();
	static ::java::net::URL GetSystemResource(const ::java::lang::String& arg0);
	static ::java::io::InputStream GetSystemResourceAsStream(const ::java::lang::String& arg0);
	static ::java::util::Enumeration GetSystemResources(const ::java::lang::String& arg0);
	::java::lang::Module GetUnnamedModule() const;
	::jboolean IsRegisteredAsParallelCapable() const;
	::java::lang::Class LoadClass(const ::java::lang::String& arg0) const;
	::java::lang::Class LoadClass(const ::java::lang::String& arg0, const ::jboolean& arg1) const;
	static ::jboolean RegisterAsParallelCapable();
	::jvoid ResolveClass(const ::java::lang::Class& arg0) const;
	::java::util::stream::Stream Resources(const ::java::lang::String& arg0) const;
	::jvoid SetClassAssertionStatus(const ::java::lang::String& arg0, const ::jboolean& arg1) const;
	::jvoid SetDefaultAssertionStatus(const ::jboolean& arg0) const;
	::jvoid SetPackageAssertionStatus(const ::java::lang::String& arg0, const ::jboolean& arg1) const;
	::jvoid SetSigners(const ::java::lang::Class& arg0, const jni::Array< ::java::lang::Object >& arg1) const;
	static jobject __Constructor();
	ClassLoader() : ::java::lang::Object(__Constructor()) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::java::lang::ClassLoader& arg1);
	ClassLoader(const ::java::lang::String& arg0, const ::java::lang::ClassLoader& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit ClassLoader(jobject o) : ::java::lang::Object(o) {}
	ClassLoader(const ClassLoader& o)  : ::java::lang::Object(o) {}

};

}}

namespace java { namespace security { 
struct ProtectionDomain : ::java::lang::Object
{
	static jni::Class __CLASS;

	::java::lang::ClassLoader GetClassLoader() const;
	::java::security::CodeSource GetCodeSource() const;
	::java::security::PermissionCollection GetPermissions() const;
	jni::Array< ::java::security::Principal > GetPrincipals() const;
	::jboolean Implies(const ::java::security::Permission& arg0) const;
	::jboolean StaticPermissionsOnly() const;
	::java::lang::String ToString() const;
	static jobject __Constructor(const ::java::security::CodeSource& arg0, const ::java::security::PermissionCollection& arg1);
	ProtectionDomain(const ::java::security::CodeSource& arg0, const ::java::security::PermissionCollection& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::security::CodeSource& arg0, const ::java::security::PermissionCollection& arg1, const ::java::lang::ClassLoader& arg2, const jni::Array< ::java::security::Principal >& arg3);
	ProtectionDomain(const ::java::security::CodeSource& arg0, const ::java::security::PermissionCollection& arg1, const ::java::lang::ClassLoader& arg2, const jni::Array< ::java::security::Principal >& arg3) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3)) {}
	explicit ProtectionDomain(jobject o) : ::java::lang::Object(o) {}
	ProtectionDomain(const ProtectionDomain& o)  : ::java::lang::Object(o) {}

};

struct CodeSource : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Serializable();
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	jni::Array< ::java::security::cert::Certificate > GetCertificates() const;
	jni::Array< ::java::security::CodeSigner > GetCodeSigners() const;
	::java::net::URL GetLocation() const;
	::jint HashCode() const;
	::jboolean Implies(const ::java::security::CodeSource& arg0) const;
	::java::lang::String ToString() const;
	static jobject __Constructor(const ::java::net::URL& arg0, const jni::Array< ::java::security::CodeSigner >& arg1);
	CodeSource(const ::java::net::URL& arg0, const jni::Array< ::java::security::CodeSigner >& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::net::URL& arg0, const jni::Array< ::java::security::cert::Certificate >& arg1);
	CodeSource(const ::java::net::URL& arg0, const jni::Array< ::java::security::cert::Certificate >& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit CodeSource(jobject o) : ::java::lang::Object(o) {}
	CodeSource(const CodeSource& o)  : ::java::lang::Object(o) {}

};

}}

namespace java { namespace security { namespace cert { 
struct Certificate : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Serializable();
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	jni::Array< ::jbyte > GetEncoded() const;
	::java::security::PublicKey GetPublicKey() const;
	::java::lang::String GetType() const;
	::jint HashCode() const;
	::java::lang::String ToString() const;
	::jvoid Verify(const ::java::security::PublicKey& arg0) const;
	::jvoid Verify(const ::java::security::PublicKey& arg0, const ::java::lang::String& arg1) const;
	::jvoid Verify(const ::java::security::PublicKey& arg0, const ::java::security::Provider& arg1) const;
	::java::lang::Object WriteReplace() const;
	static jobject __Constructor(const ::java::lang::String& arg0);
	Certificate(const ::java::lang::String& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit Certificate(jobject o) : ::java::lang::Object(o) {}
	Certificate(const Certificate& o)  : ::java::lang::Object(o) {}

};

}}}

namespace java { namespace security { 
struct PublicKey : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::security::Key();
	static ::jlong& fSerialVersionUID();
	explicit PublicKey(jobject o) : java::lang::Object(o) {}
	PublicKey(const PublicKey& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::security::PublicKey();
		operator ::java::security::Key();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
	};
};

struct Key : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Serializable();
	static ::jlong& fSerialVersionUID();
	::java::lang::String GetAlgorithm() const;
	jni::Array< ::jbyte > GetEncoded() const;
	::java::lang::String GetFormat() const;
	explicit Key(jobject o) : java::lang::Object(o) {}
	Key(const Key& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::security::Key();
		operator ::java::io::Serializable();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::lang::String GetAlgorithm() = 0;
		virtual jni::Array< ::jbyte > GetEncoded() = 0;
		virtual ::java::lang::String GetFormat() = 0;
	};
};

}}

namespace java { namespace util { 
struct Dictionary : ::java::lang::Object
{
	static jni::Class __CLASS;

	::java::util::Enumeration Elements() const;
	::java::lang::Object Get(const ::java::lang::Object& arg0) const;
	::jboolean IsEmpty() const;
	::java::util::Enumeration Keys() const;
	::java::lang::Object Put(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) const;
	::java::lang::Object Remove(const ::java::lang::Object& arg0) const;
	::jint Size() const;
	static jobject __Constructor();
	Dictionary() : ::java::lang::Object(__Constructor()) {}
	explicit Dictionary(jobject o) : ::java::lang::Object(o) {}
	Dictionary(const Dictionary& o)  : ::java::lang::Object(o) {}

};

struct Hashtable : ::java::util::Dictionary
{
	static jni::Class __CLASS;

	operator ::java::util::Map();
	operator ::java::lang::Cloneable();
	operator ::java::io::Serializable();
	::jvoid Clear() const;
	::java::lang::Object Clone() const;
	::java::lang::Object Compute(const ::java::lang::Object& arg0, const ::java::util::function::BiFunction& arg1) const;
	::java::lang::Object ComputeIfAbsent(const ::java::lang::Object& arg0, const ::java::util::function::Function& arg1) const;
	::java::lang::Object ComputeIfPresent(const ::java::lang::Object& arg0, const ::java::util::function::BiFunction& arg1) const;
	::jboolean Contains(const ::java::lang::Object& arg0) const;
	::jboolean ContainsKey(const ::java::lang::Object& arg0) const;
	::jboolean ContainsValue(const ::java::lang::Object& arg0) const;
	::java::util::Enumeration Elements() const;
	::java::util::Set EntrySet() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jvoid ForEach(const ::java::util::function::BiConsumer& arg0) const;
	::java::lang::Object Get(const ::java::lang::Object& arg0) const;
	::java::lang::Object GetOrDefault(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) const;
	::jint HashCode() const;
	::jboolean IsEmpty() const;
	::java::util::Set KeySet() const;
	::java::util::Enumeration Keys() const;
	::java::lang::Object Merge(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1, const ::java::util::function::BiFunction& arg2) const;
	::java::lang::Object Put(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) const;
	::jvoid PutAll(const ::java::util::Map& arg0) const;
	::java::lang::Object PutIfAbsent(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) const;
	::jvoid Rehash() const;
	::java::lang::Object Remove(const ::java::lang::Object& arg0) const;
	::jboolean Remove(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) const;
	::java::lang::Object Replace(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) const;
	::jboolean Replace(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1, const ::java::lang::Object& arg2) const;
	::jvoid ReplaceAll(const ::java::util::function::BiFunction& arg0) const;
	::jint Size() const;
	::java::lang::String ToString() const;
	::java::util::Collection Values() const;
	static jobject __Constructor();
	Hashtable() : ::java::util::Dictionary(__Constructor()) {}
	static jobject __Constructor(const ::jint& arg0);
	Hashtable(const ::jint& arg0) : ::java::util::Dictionary(__Constructor(arg0)) {}
	static jobject __Constructor(const ::jint& arg0, const ::jfloat& arg1);
	Hashtable(const ::jint& arg0, const ::jfloat& arg1) : ::java::util::Dictionary(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::util::Map& arg0);
	Hashtable(const ::java::util::Map& arg0) : ::java::util::Dictionary(__Constructor(arg0)) {}
	explicit Hashtable(jobject o) : ::java::util::Dictionary(o) {}
	Hashtable(const Hashtable& o)  : ::java::util::Dictionary(o) {}

};

struct Properties : ::java::util::Hashtable
{
	static jni::Class __CLASS;

	::java::util::Properties fDefaults() const;
	void fDefaults(const ::java::util::Properties& arg0) const;
	::jvoid Clear() const;
	::java::lang::Object Clone() const;
	::java::lang::Object Compute(const ::java::lang::Object& arg0, const ::java::util::function::BiFunction& arg1) const;
	::java::lang::Object ComputeIfAbsent(const ::java::lang::Object& arg0, const ::java::util::function::Function& arg1) const;
	::java::lang::Object ComputeIfPresent(const ::java::lang::Object& arg0, const ::java::util::function::BiFunction& arg1) const;
	::jboolean Contains(const ::java::lang::Object& arg0) const;
	::jboolean ContainsKey(const ::java::lang::Object& arg0) const;
	::jboolean ContainsValue(const ::java::lang::Object& arg0) const;
	::java::util::Enumeration Elements() const;
	::java::util::Set EntrySet() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jvoid ForEach(const ::java::util::function::BiConsumer& arg0) const;
	::java::lang::Object Get(const ::java::lang::Object& arg0) const;
	::java::lang::Object GetOrDefault(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) const;
	::java::lang::String GetProperty(const ::java::lang::String& arg0) const;
	::java::lang::String GetProperty(const ::java::lang::String& arg0, const ::java::lang::String& arg1) const;
	::jint HashCode() const;
	::jboolean IsEmpty() const;
	::java::util::Set KeySet() const;
	::java::util::Enumeration Keys() const;
	::jvoid List(const ::java::io::PrintStream& arg0) const;
	::jvoid List(const ::java::io::PrintWriter& arg0) const;
	::jvoid Load(const ::java::io::InputStream& arg0) const;
	::jvoid Load(const ::java::io::Reader& arg0) const;
	::jvoid LoadFromXML(const ::java::io::InputStream& arg0) const;
	::java::lang::Object Merge(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1, const ::java::util::function::BiFunction& arg2) const;
	::java::util::Enumeration PropertyNames() const;
	::java::lang::Object Put(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) const;
	::jvoid PutAll(const ::java::util::Map& arg0) const;
	::java::lang::Object PutIfAbsent(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) const;
	::jvoid Rehash() const;
	::java::lang::Object Remove(const ::java::lang::Object& arg0) const;
	::jboolean Remove(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) const;
	::java::lang::Object Replace(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) const;
	::jboolean Replace(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1, const ::java::lang::Object& arg2) const;
	::jvoid ReplaceAll(const ::java::util::function::BiFunction& arg0) const;
	::jvoid Save(const ::java::io::OutputStream& arg0, const ::java::lang::String& arg1) const;
	::java::lang::Object SetProperty(const ::java::lang::String& arg0, const ::java::lang::String& arg1) const;
	::jint Size() const;
	::jvoid Store(const ::java::io::OutputStream& arg0, const ::java::lang::String& arg1) const;
	::jvoid Store(const ::java::io::Writer& arg0, const ::java::lang::String& arg1) const;
	::jvoid StoreToXML(const ::java::io::OutputStream& arg0, const ::java::lang::String& arg1) const;
	::jvoid StoreToXML(const ::java::io::OutputStream& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2) const;
	::jvoid StoreToXML(const ::java::io::OutputStream& arg0, const ::java::lang::String& arg1, const ::java::nio::charset::Charset& arg2) const;
	::java::util::Set StringPropertyNames() const;
	::java::lang::String ToString() const;
	::java::util::Collection Values() const;
	static jobject __Constructor();
	Properties() : ::java::util::Hashtable(__Constructor()) {}
	static jobject __Constructor(const ::jint& arg0);
	Properties(const ::jint& arg0) : ::java::util::Hashtable(__Constructor(arg0)) {}
	explicit Properties(jobject o) : ::java::util::Hashtable(o) {}
	Properties(const Properties& o)  : ::java::util::Hashtable(o) {}

};

}}

namespace java { namespace security { 
struct Provider : ::java::util::Properties
{
	static jni::Class __CLASS;

	::jvoid Clear() const;
	::java::lang::Object Compute(const ::java::lang::Object& arg0, const ::java::util::function::BiFunction& arg1) const;
	::java::lang::Object ComputeIfAbsent(const ::java::lang::Object& arg0, const ::java::util::function::Function& arg1) const;
	::java::lang::Object ComputeIfPresent(const ::java::lang::Object& arg0, const ::java::util::function::BiFunction& arg1) const;
	::java::security::Provider Configure(const ::java::lang::String& arg0) const;
	::java::util::Enumeration Elements() const;
	::java::util::Set EntrySet() const;
	::jvoid ForEach(const ::java::util::function::BiConsumer& arg0) const;
	::java::lang::Object Get(const ::java::lang::Object& arg0) const;
	::java::lang::String GetInfo() const;
	::java::lang::String GetName() const;
	::java::lang::Object GetOrDefault(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) const;
	::java::lang::String GetProperty(const ::java::lang::String& arg0) const;
	::java::security::Provider_Service GetService(const ::java::lang::String& arg0, const ::java::lang::String& arg1) const;
	::java::util::Set GetServices() const;
	::jdouble GetVersion() const;
	::java::lang::String GetVersionStr() const;
	::jboolean IsConfigured() const;
	::java::util::Set KeySet() const;
	::java::util::Enumeration Keys() const;
	::jvoid Load(const ::java::io::InputStream& arg0) const;
	::java::lang::Object Merge(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1, const ::java::util::function::BiFunction& arg2) const;
	::java::lang::Object Put(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) const;
	::jvoid PutAll(const ::java::util::Map& arg0) const;
	::java::lang::Object PutIfAbsent(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) const;
	::jvoid PutService(const ::java::security::Provider_Service& arg0) const;
	::java::lang::Object Remove(const ::java::lang::Object& arg0) const;
	::jboolean Remove(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) const;
	::jvoid RemoveService(const ::java::security::Provider_Service& arg0) const;
	::java::lang::Object Replace(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) const;
	::jboolean Replace(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1, const ::java::lang::Object& arg2) const;
	::jvoid ReplaceAll(const ::java::util::function::BiFunction& arg0) const;
	::java::lang::String ToString() const;
	::java::util::Collection Values() const;
	static jobject __Constructor(const ::java::lang::String& arg0, const ::jdouble& arg1, const ::java::lang::String& arg2);
	Provider(const ::java::lang::String& arg0, const ::jdouble& arg1, const ::java::lang::String& arg2) : ::java::util::Properties(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2);
	Provider(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2) : ::java::util::Properties(__Constructor(arg0, arg1, arg2)) {}
	explicit Provider(jobject o) : ::java::util::Properties(o) {}
	Provider(const Provider& o)  : ::java::util::Properties(o) {}

};

}}

namespace java { namespace util { 
struct Enumeration : java::lang::Object
{
	static jni::Class __CLASS;

	::java::util::Iterator AsIterator() const;
	::jboolean HasMoreElements() const;
	::java::lang::Object NextElement() const;
	explicit Enumeration(jobject o) : java::lang::Object(o) {}
	Enumeration(const Enumeration& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::Enumeration();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::util::Iterator AsIterator() = 0;
		virtual ::jboolean HasMoreElements() = 0;
		virtual ::java::lang::Object NextElement() = 0;
	};
};

}}

namespace java { namespace io { 
struct OutputStream : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Closeable();
	operator ::java::io::Flushable();
	::jvoid Close() const;
	::jvoid Flush() const;
	static ::java::io::OutputStream NullOutputStream();
	::jvoid Write(const ::jint& arg0) const;
	::jvoid Write(const jni::Array< ::jbyte >& arg0) const;
	::jvoid Write(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	static jobject __Constructor();
	OutputStream() : ::java::lang::Object(__Constructor()) {}
	explicit OutputStream(jobject o) : ::java::lang::Object(o) {}
	OutputStream(const OutputStream& o)  : ::java::lang::Object(o) {}

};

struct FilterOutputStream : ::java::io::OutputStream
{
	static jni::Class __CLASS;

	::java::io::OutputStream fOut() const;
	void fOut(const ::java::io::OutputStream& arg0) const;
	::jvoid Close() const;
	::jvoid Flush() const;
	::jvoid Write(const ::jint& arg0) const;
	::jvoid Write(const jni::Array< ::jbyte >& arg0) const;
	::jvoid Write(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	static jobject __Constructor(const ::java::io::OutputStream& arg0);
	FilterOutputStream(const ::java::io::OutputStream& arg0) : ::java::io::OutputStream(__Constructor(arg0)) {}
	explicit FilterOutputStream(jobject o) : ::java::io::OutputStream(o) {}
	FilterOutputStream(const FilterOutputStream& o)  : ::java::io::OutputStream(o) {}

};

struct PrintStream : ::java::io::FilterOutputStream
{
	static jni::Class __CLASS;

	operator ::java::lang::Appendable();
	operator ::java::io::Closeable();
	::java::io::PrintStream Append(const ::jchar& arg0) const;
	::java::io::PrintStream Append(const ::java::lang::CharSequence& arg0) const;
	::java::io::PrintStream Append(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jboolean CheckError() const;
	::jvoid ClearError() const;
	::jvoid Close() const;
	::jvoid Flush() const;
	::java::io::PrintStream Format(const ::java::lang::String& arg0, const jni::Array< ::java::lang::Object >& arg1) const;
	::java::io::PrintStream Format(const ::java::util::Locale& arg0, const ::java::lang::String& arg1, const jni::Array< ::java::lang::Object >& arg2) const;
	::jvoid Print(const ::jchar& arg0) const;
	::jvoid Print(const ::jdouble& arg0) const;
	::jvoid Print(const ::jfloat& arg0) const;
	::jvoid Print(const ::jint& arg0) const;
	::jvoid Print(const ::jlong& arg0) const;
	::jvoid Print(const ::java::lang::Object& arg0) const;
	::jvoid Print(const ::java::lang::String& arg0) const;
	::jvoid Print(const ::jboolean& arg0) const;
	::jvoid Print(const jni::Array< ::jchar >& arg0) const;
	::java::io::PrintStream Printf(const ::java::lang::String& arg0, const jni::Array< ::java::lang::Object >& arg1) const;
	::java::io::PrintStream Printf(const ::java::util::Locale& arg0, const ::java::lang::String& arg1, const jni::Array< ::java::lang::Object >& arg2) const;
	::jvoid Println() const;
	::jvoid Println(const ::jchar& arg0) const;
	::jvoid Println(const ::jdouble& arg0) const;
	::jvoid Println(const ::jfloat& arg0) const;
	::jvoid Println(const ::jint& arg0) const;
	::jvoid Println(const ::jlong& arg0) const;
	::jvoid Println(const ::java::lang::Object& arg0) const;
	::jvoid Println(const ::java::lang::String& arg0) const;
	::jvoid Println(const ::jboolean& arg0) const;
	::jvoid Println(const jni::Array< ::jchar >& arg0) const;
	::jvoid SetError() const;
	::jvoid Write(const ::jint& arg0) const;
	::jvoid Write(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	static jobject __Constructor(const ::java::io::File& arg0);
	PrintStream(const ::java::io::File& arg0) : ::java::io::FilterOutputStream(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::io::File& arg0, const ::java::lang::String& arg1);
	PrintStream(const ::java::io::File& arg0, const ::java::lang::String& arg1) : ::java::io::FilterOutputStream(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::io::File& arg0, const ::java::nio::charset::Charset& arg1);
	PrintStream(const ::java::io::File& arg0, const ::java::nio::charset::Charset& arg1) : ::java::io::FilterOutputStream(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::io::OutputStream& arg0);
	PrintStream(const ::java::io::OutputStream& arg0) : ::java::io::FilterOutputStream(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::io::OutputStream& arg0, const ::jboolean& arg1);
	PrintStream(const ::java::io::OutputStream& arg0, const ::jboolean& arg1) : ::java::io::FilterOutputStream(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::io::OutputStream& arg0, const ::jboolean& arg1, const ::java::lang::String& arg2);
	PrintStream(const ::java::io::OutputStream& arg0, const ::jboolean& arg1, const ::java::lang::String& arg2) : ::java::io::FilterOutputStream(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::java::io::OutputStream& arg0, const ::jboolean& arg1, const ::java::nio::charset::Charset& arg2);
	PrintStream(const ::java::io::OutputStream& arg0, const ::jboolean& arg1, const ::java::nio::charset::Charset& arg2) : ::java::io::FilterOutputStream(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::java::lang::String& arg0);
	PrintStream(const ::java::lang::String& arg0) : ::java::io::FilterOutputStream(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::java::lang::String& arg1);
	PrintStream(const ::java::lang::String& arg0, const ::java::lang::String& arg1) : ::java::io::FilterOutputStream(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::java::nio::charset::Charset& arg1);
	PrintStream(const ::java::lang::String& arg0, const ::java::nio::charset::Charset& arg1) : ::java::io::FilterOutputStream(__Constructor(arg0, arg1)) {}
	explicit PrintStream(jobject o) : ::java::io::FilterOutputStream(o) {}
	PrintStream(const PrintStream& o)  : ::java::io::FilterOutputStream(o) {}

};

struct Closeable : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::AutoCloseable();
	::jvoid Close() const;
	explicit Closeable(jobject o) : java::lang::Object(o) {}
	Closeable(const Closeable& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::io::Closeable();
		operator ::java::lang::AutoCloseable();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void Close() = 0;
	};
};

struct Flushable : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid Flush() const;
	explicit Flushable(jobject o) : java::lang::Object(o) {}
	Flushable(const Flushable& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::io::Flushable();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void Flush() = 0;
	};
};

struct File : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Serializable();
	operator ::java::lang::Comparable();
	static ::java::lang::String& fPathSeparator();
	static ::jchar& fPathSeparatorChar();
	static ::java::lang::String& fSeparator();
	static ::jchar& fSeparatorChar();
	::jboolean CanExecute() const;
	::jboolean CanRead() const;
	::jboolean CanWrite() const;
	::jint CompareTo(const ::java::io::File& arg0) const;
	::jboolean CreateNewFile() const;
	static ::java::io::File CreateTempFile(const ::java::lang::String& arg0, const ::java::lang::String& arg1);
	static ::java::io::File CreateTempFile(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::java::io::File& arg2);
	::jboolean Delete() const;
	::jvoid DeleteOnExit() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jboolean Exists() const;
	::java::io::File GetAbsoluteFile() const;
	::java::lang::String GetAbsolutePath() const;
	::java::io::File GetCanonicalFile() const;
	::java::lang::String GetCanonicalPath() const;
	::jlong GetFreeSpace() const;
	::java::lang::String GetName() const;
	::java::lang::String GetParent() const;
	::java::io::File GetParentFile() const;
	::java::lang::String GetPath() const;
	::jlong GetTotalSpace() const;
	::jlong GetUsableSpace() const;
	::jint HashCode() const;
	::jboolean IsAbsolute() const;
	::jboolean IsDirectory() const;
	::jboolean IsFile() const;
	::jboolean IsHidden() const;
	::jlong LastModified() const;
	::jlong Length() const;
	jni::Array< ::java::lang::String > List() const;
	jni::Array< ::java::lang::String > List(const ::java::io::FilenameFilter& arg0) const;
	jni::Array< ::java::io::File > ListFiles() const;
	jni::Array< ::java::io::File > ListFiles(const ::java::io::FileFilter& arg0) const;
	jni::Array< ::java::io::File > ListFiles(const ::java::io::FilenameFilter& arg0) const;
	static jni::Array< ::java::io::File > ListRoots();
	::jboolean Mkdir() const;
	::jboolean Mkdirs() const;
	::jboolean RenameTo(const ::java::io::File& arg0) const;
	::jboolean SetExecutable(const ::jboolean& arg0) const;
	::jboolean SetExecutable(const ::jboolean& arg0, const ::jboolean& arg1) const;
	::jboolean SetLastModified(const ::jlong& arg0) const;
	::jboolean SetReadOnly() const;
	::jboolean SetReadable(const ::jboolean& arg0) const;
	::jboolean SetReadable(const ::jboolean& arg0, const ::jboolean& arg1) const;
	::jboolean SetWritable(const ::jboolean& arg0) const;
	::jboolean SetWritable(const ::jboolean& arg0, const ::jboolean& arg1) const;
	::java::nio::file::Path ToPath() const;
	::java::lang::String ToString() const;
	::java::net::URI ToURI() const;
	::java::net::URL ToURL() const;
	static jobject __Constructor(const ::java::io::File& arg0, const ::java::lang::String& arg1);
	File(const ::java::io::File& arg0, const ::java::lang::String& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::lang::String& arg0);
	File(const ::java::lang::String& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::java::lang::String& arg1);
	File(const ::java::lang::String& arg0, const ::java::lang::String& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::net::URI& arg0);
	File(const ::java::net::URI& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit File(jobject o) : ::java::lang::Object(o) {}
	File(const File& o)  : ::java::lang::Object(o) {}

};

struct FilenameFilter : java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean Accept(const ::java::io::File& arg0, const ::java::lang::String& arg1) const;
	explicit FilenameFilter(jobject o) : java::lang::Object(o) {}
	FilenameFilter(const FilenameFilter& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::io::FilenameFilter();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean Accept(const ::java::io::File& arg0, const ::java::lang::String& arg1) = 0;
	};
};

struct FileFilter : java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean Accept(const ::java::io::File& arg0) const;
	explicit FileFilter(jobject o) : java::lang::Object(o) {}
	FileFilter(const FileFilter& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::io::FileFilter();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean Accept(const ::java::io::File& arg0) = 0;
	};
};

}}

namespace java { namespace nio { namespace file { 
struct Path : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::Comparable();
	operator ::java::lang::Iterable();
	operator ::java::nio::file::Watchable();
	::jint CompareTo(const ::java::nio::file::Path& arg0) const;
	::jboolean EndsWith(const ::java::lang::String& arg0) const;
	::jboolean EndsWith(const ::java::nio::file::Path& arg0) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::nio::file::Path GetFileName() const;
	::java::nio::file::FileSystem GetFileSystem() const;
	::java::nio::file::Path GetName(const ::jint& arg0) const;
	::jint GetNameCount() const;
	::java::nio::file::Path GetParent() const;
	::java::nio::file::Path GetRoot() const;
	::jint HashCode() const;
	::jboolean IsAbsolute() const;
	::java::util::Iterator Iterator() const;
	::java::nio::file::Path Normalize() const;
	static ::java::nio::file::Path Of(const ::java::lang::String& arg0, const jni::Array< ::java::lang::String >& arg1);
	static ::java::nio::file::Path Of(const ::java::net::URI& arg0);
	::java::nio::file::WatchKey Register(const ::java::nio::file::WatchService& arg0, const jni::Array< ::java::nio::file::WatchEvent_Kind >& arg1) const;
	::java::nio::file::WatchKey Register(const ::java::nio::file::WatchService& arg0, const jni::Array< ::java::nio::file::WatchEvent_Kind >& arg1, const jni::Array< ::java::nio::file::WatchEvent_Modifier >& arg2) const;
	::java::nio::file::Path Relativize(const ::java::nio::file::Path& arg0) const;
	::java::nio::file::Path Resolve(const ::java::lang::String& arg0) const;
	::java::nio::file::Path Resolve(const ::java::nio::file::Path& arg0) const;
	::java::nio::file::Path ResolveSibling(const ::java::lang::String& arg0) const;
	::java::nio::file::Path ResolveSibling(const ::java::nio::file::Path& arg0) const;
	::jboolean StartsWith(const ::java::lang::String& arg0) const;
	::jboolean StartsWith(const ::java::nio::file::Path& arg0) const;
	::java::nio::file::Path Subpath(const ::jint& arg0, const ::jint& arg1) const;
	::java::nio::file::Path ToAbsolutePath() const;
	::java::io::File ToFile() const;
	::java::nio::file::Path ToRealPath(const jni::Array< ::java::nio::file::LinkOption >& arg0) const;
	::java::lang::String ToString() const;
	::java::net::URI ToUri() const;
	explicit Path(jobject o) : java::lang::Object(o) {}
	Path(const Path& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::nio::file::Path();
		operator ::java::lang::Comparable();
		operator ::java::lang::Iterable();
		operator ::java::nio::file::Watchable();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jint CompareTo(const ::java::nio::file::Path& arg0) = 0;
		virtual ::jboolean EndsWith(const ::java::lang::String& arg0) = 0;
		virtual ::jboolean EndsWith(const ::java::nio::file::Path& arg0) = 0;
		virtual ::jboolean Equals(const ::java::lang::Object& arg0) = 0;
		virtual ::java::nio::file::Path GetFileName() = 0;
		virtual ::java::nio::file::FileSystem GetFileSystem() = 0;
		virtual ::java::nio::file::Path GetName(const ::jint& arg0) = 0;
		virtual ::jint GetNameCount() = 0;
		virtual ::java::nio::file::Path GetParent() = 0;
		virtual ::java::nio::file::Path GetRoot() = 0;
		virtual ::jint HashCode() = 0;
		virtual ::jboolean IsAbsolute() = 0;
		virtual ::java::util::Iterator Iterator() = 0;
		virtual ::java::nio::file::Path Normalize() = 0;
		virtual ::java::nio::file::WatchKey Register(const ::java::nio::file::WatchService& arg0, const jni::Array< ::java::nio::file::WatchEvent_Kind >& arg1) = 0;
		virtual ::java::nio::file::WatchKey Register(const ::java::nio::file::WatchService& arg0, const jni::Array< ::java::nio::file::WatchEvent_Kind >& arg1, const jni::Array< ::java::nio::file::WatchEvent_Modifier >& arg2) = 0;
		virtual ::java::nio::file::Path Relativize(const ::java::nio::file::Path& arg0) = 0;
		virtual ::java::nio::file::Path Resolve(const ::java::lang::String& arg0) = 0;
		virtual ::java::nio::file::Path Resolve(const ::java::nio::file::Path& arg0) = 0;
		virtual ::java::nio::file::Path ResolveSibling(const ::java::lang::String& arg0) = 0;
		virtual ::java::nio::file::Path ResolveSibling(const ::java::nio::file::Path& arg0) = 0;
		virtual ::jboolean StartsWith(const ::java::lang::String& arg0) = 0;
		virtual ::jboolean StartsWith(const ::java::nio::file::Path& arg0) = 0;
		virtual ::java::nio::file::Path Subpath(const ::jint& arg0, const ::jint& arg1) = 0;
		virtual ::java::nio::file::Path ToAbsolutePath() = 0;
		virtual ::java::io::File ToFile() = 0;
		virtual ::java::nio::file::Path ToRealPath(const jni::Array< ::java::nio::file::LinkOption >& arg0) = 0;
		virtual ::java::lang::String ToString() = 0;
		virtual ::java::net::URI ToUri() = 0;
	};
};

struct Watchable : java::lang::Object
{
	static jni::Class __CLASS;

	::java::nio::file::WatchKey Register(const ::java::nio::file::WatchService& arg0, const jni::Array< ::java::nio::file::WatchEvent_Kind >& arg1) const;
	::java::nio::file::WatchKey Register(const ::java::nio::file::WatchService& arg0, const jni::Array< ::java::nio::file::WatchEvent_Kind >& arg1, const jni::Array< ::java::nio::file::WatchEvent_Modifier >& arg2) const;
	explicit Watchable(jobject o) : java::lang::Object(o) {}
	Watchable(const Watchable& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::nio::file::Watchable();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::nio::file::WatchKey Register(const ::java::nio::file::WatchService& arg0, const jni::Array< ::java::nio::file::WatchEvent_Kind >& arg1) = 0;
		virtual ::java::nio::file::WatchKey Register(const ::java::nio::file::WatchService& arg0, const jni::Array< ::java::nio::file::WatchEvent_Kind >& arg1, const jni::Array< ::java::nio::file::WatchEvent_Modifier >& arg2) = 0;
	};
};

struct WatchService : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Closeable();
	::jvoid Close() const;
	::java::nio::file::WatchKey Poll() const;
	::java::nio::file::WatchKey Poll(const ::jlong& arg0, const ::java::util::concurrent::TimeUnit& arg1) const;
	::java::nio::file::WatchKey Take() const;
	explicit WatchService(jobject o) : java::lang::Object(o) {}
	WatchService(const WatchService& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::nio::file::WatchService();
		operator ::java::io::Closeable();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void Close() = 0;
		virtual ::java::nio::file::WatchKey Poll() = 0;
		virtual ::java::nio::file::WatchKey Poll(const ::jlong& arg0, const ::java::util::concurrent::TimeUnit& arg1) = 0;
		virtual ::java::nio::file::WatchKey Take() = 0;
	};
};

struct WatchKey : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid Cancel() const;
	::jboolean IsValid() const;
	::java::util::List PollEvents() const;
	::jboolean Reset() const;
	::java::nio::file::Watchable Watchable() const;
	explicit WatchKey(jobject o) : java::lang::Object(o) {}
	WatchKey(const WatchKey& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::nio::file::WatchKey();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void Cancel() = 0;
		virtual ::jboolean IsValid() = 0;
		virtual ::java::util::List PollEvents() = 0;
		virtual ::jboolean Reset() = 0;
		virtual ::java::nio::file::Watchable Watchable() = 0;
	};
};

}}}

namespace java { namespace util { namespace concurrent { 
struct TimeUnit : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::java::util::concurrent::TimeUnit& fDAYS();
	static ::java::util::concurrent::TimeUnit& fHOURS();
	static ::java::util::concurrent::TimeUnit& fMICROSECONDS();
	static ::java::util::concurrent::TimeUnit& fMILLISECONDS();
	static ::java::util::concurrent::TimeUnit& fMINUTES();
	static ::java::util::concurrent::TimeUnit& fNANOSECONDS();
	static ::java::util::concurrent::TimeUnit& fSECONDS();
	::jlong Convert(const ::jlong& arg0, const ::java::util::concurrent::TimeUnit& arg1) const;
	::jlong Convert(const ::java::time::Duration& arg0) const;
	static ::java::util::concurrent::TimeUnit Of(const ::java::time::temporal::ChronoUnit& arg0);
	::jvoid Sleep(const ::jlong& arg0) const;
	::jvoid TimedJoin(const ::java::lang::Thread& arg0, const ::jlong& arg1) const;
	::jvoid TimedWait(const ::java::lang::Object& arg0, const ::jlong& arg1) const;
	::java::time::temporal::ChronoUnit ToChronoUnit() const;
	::jlong ToDays(const ::jlong& arg0) const;
	::jlong ToHours(const ::jlong& arg0) const;
	::jlong ToMicros(const ::jlong& arg0) const;
	::jlong ToMillis(const ::jlong& arg0) const;
	::jlong ToMinutes(const ::jlong& arg0) const;
	::jlong ToNanos(const ::jlong& arg0) const;
	::jlong ToSeconds(const ::jlong& arg0) const;
	static ::java::util::concurrent::TimeUnit ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::java::util::concurrent::TimeUnit > Values();
	explicit TimeUnit(jobject o) : ::java::lang::Enum(o) {}
	TimeUnit(const TimeUnit& o)  : ::java::lang::Enum(o) {}

};

}}}

namespace java { namespace time { 
struct Duration : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::time::temporal::TemporalAmount();
	operator ::java::lang::Comparable();
	operator ::java::io::Serializable();
	static ::java::time::Duration& fZERO();
	::java::time::Duration Abs() const;
	::java::time::temporal::Temporal AddTo(const ::java::time::temporal::Temporal& arg0) const;
	static ::java::time::Duration Between(const ::java::time::temporal::Temporal& arg0, const ::java::time::temporal::Temporal& arg1);
	::jint CompareTo(const ::java::time::Duration& arg0) const;
	::java::time::Duration DividedBy(const ::jlong& arg0) const;
	::jlong DividedBy(const ::java::time::Duration& arg0) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	static ::java::time::Duration From(const ::java::time::temporal::TemporalAmount& arg0);
	::jlong Get(const ::java::time::temporal::TemporalUnit& arg0) const;
	::jint GetNano() const;
	::jlong GetSeconds() const;
	::java::util::List GetUnits() const;
	::jint HashCode() const;
	::jboolean IsNegative() const;
	::jboolean IsZero() const;
	::java::time::Duration Minus(const ::jlong& arg0, const ::java::time::temporal::TemporalUnit& arg1) const;
	::java::time::Duration Minus(const ::java::time::Duration& arg0) const;
	::java::time::Duration MinusDays(const ::jlong& arg0) const;
	::java::time::Duration MinusHours(const ::jlong& arg0) const;
	::java::time::Duration MinusMillis(const ::jlong& arg0) const;
	::java::time::Duration MinusMinutes(const ::jlong& arg0) const;
	::java::time::Duration MinusNanos(const ::jlong& arg0) const;
	::java::time::Duration MinusSeconds(const ::jlong& arg0) const;
	::java::time::Duration MultipliedBy(const ::jlong& arg0) const;
	::java::time::Duration Negated() const;
	static ::java::time::Duration Of(const ::jlong& arg0, const ::java::time::temporal::TemporalUnit& arg1);
	static ::java::time::Duration OfDays(const ::jlong& arg0);
	static ::java::time::Duration OfHours(const ::jlong& arg0);
	static ::java::time::Duration OfMillis(const ::jlong& arg0);
	static ::java::time::Duration OfMinutes(const ::jlong& arg0);
	static ::java::time::Duration OfNanos(const ::jlong& arg0);
	static ::java::time::Duration OfSeconds(const ::jlong& arg0);
	static ::java::time::Duration OfSeconds(const ::jlong& arg0, const ::jlong& arg1);
	static ::java::time::Duration Parse(const ::java::lang::CharSequence& arg0);
	::java::time::Duration Plus(const ::jlong& arg0, const ::java::time::temporal::TemporalUnit& arg1) const;
	::java::time::Duration Plus(const ::java::time::Duration& arg0) const;
	::java::time::Duration PlusDays(const ::jlong& arg0) const;
	::java::time::Duration PlusHours(const ::jlong& arg0) const;
	::java::time::Duration PlusMillis(const ::jlong& arg0) const;
	::java::time::Duration PlusMinutes(const ::jlong& arg0) const;
	::java::time::Duration PlusNanos(const ::jlong& arg0) const;
	::java::time::Duration PlusSeconds(const ::jlong& arg0) const;
	::java::time::temporal::Temporal SubtractFrom(const ::java::time::temporal::Temporal& arg0) const;
	::jlong ToDays() const;
	::jlong ToDaysPart() const;
	::jlong ToHours() const;
	::jint ToHoursPart() const;
	::jlong ToMillis() const;
	::jint ToMillisPart() const;
	::jlong ToMinutes() const;
	::jint ToMinutesPart() const;
	::jlong ToNanos() const;
	::jint ToNanosPart() const;
	::jlong ToSeconds() const;
	::jint ToSecondsPart() const;
	::java::lang::String ToString() const;
	::java::time::Duration TruncatedTo(const ::java::time::temporal::TemporalUnit& arg0) const;
	::java::time::Duration WithNanos(const ::jint& arg0) const;
	::java::time::Duration WithSeconds(const ::jlong& arg0) const;
	explicit Duration(jobject o) : ::java::lang::Object(o) {}
	Duration(const Duration& o)  : ::java::lang::Object(o) {}

};

}}

namespace java { namespace time { namespace temporal { 
struct TemporalAmount : java::lang::Object
{
	static jni::Class __CLASS;

	::java::time::temporal::Temporal AddTo(const ::java::time::temporal::Temporal& arg0) const;
	::jlong Get(const ::java::time::temporal::TemporalUnit& arg0) const;
	::java::util::List GetUnits() const;
	::java::time::temporal::Temporal SubtractFrom(const ::java::time::temporal::Temporal& arg0) const;
	explicit TemporalAmount(jobject o) : java::lang::Object(o) {}
	TemporalAmount(const TemporalAmount& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::time::temporal::TemporalAmount();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::time::temporal::Temporal AddTo(const ::java::time::temporal::Temporal& arg0) = 0;
		virtual ::jlong Get(const ::java::time::temporal::TemporalUnit& arg0) = 0;
		virtual ::java::util::List GetUnits() = 0;
		virtual ::java::time::temporal::Temporal SubtractFrom(const ::java::time::temporal::Temporal& arg0) = 0;
	};
};

struct Temporal : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::time::temporal::TemporalAccessor();
	::jboolean IsSupported(const ::java::time::temporal::TemporalUnit& arg0) const;
	::java::time::temporal::Temporal Minus(const ::jlong& arg0, const ::java::time::temporal::TemporalUnit& arg1) const;
	::java::time::temporal::Temporal Minus(const ::java::time::temporal::TemporalAmount& arg0) const;
	::java::time::temporal::Temporal Plus(const ::jlong& arg0, const ::java::time::temporal::TemporalUnit& arg1) const;
	::java::time::temporal::Temporal Plus(const ::java::time::temporal::TemporalAmount& arg0) const;
	::jlong Until(const ::java::time::temporal::Temporal& arg0, const ::java::time::temporal::TemporalUnit& arg1) const;
	::java::time::temporal::Temporal With(const ::java::time::temporal::TemporalAdjuster& arg0) const;
	::java::time::temporal::Temporal With(const ::java::time::temporal::TemporalField& arg0, const ::jlong& arg1) const;
	explicit Temporal(jobject o) : java::lang::Object(o) {}
	Temporal(const Temporal& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::time::temporal::Temporal();
		operator ::java::time::temporal::TemporalAccessor();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean IsSupported(const ::java::time::temporal::TemporalUnit& arg0) = 0;
		virtual ::java::time::temporal::Temporal Minus(const ::jlong& arg0, const ::java::time::temporal::TemporalUnit& arg1) = 0;
		virtual ::java::time::temporal::Temporal Minus(const ::java::time::temporal::TemporalAmount& arg0) = 0;
		virtual ::java::time::temporal::Temporal Plus(const ::jlong& arg0, const ::java::time::temporal::TemporalUnit& arg1) = 0;
		virtual ::java::time::temporal::Temporal Plus(const ::java::time::temporal::TemporalAmount& arg0) = 0;
		virtual ::jlong Until(const ::java::time::temporal::Temporal& arg0, const ::java::time::temporal::TemporalUnit& arg1) = 0;
		virtual ::java::time::temporal::Temporal With(const ::java::time::temporal::TemporalAdjuster& arg0) = 0;
		virtual ::java::time::temporal::Temporal With(const ::java::time::temporal::TemporalField& arg0, const ::jlong& arg1) = 0;
	};
};

struct TemporalAccessor : java::lang::Object
{
	static jni::Class __CLASS;

	::jint Get(const ::java::time::temporal::TemporalField& arg0) const;
	::jlong GetLong(const ::java::time::temporal::TemporalField& arg0) const;
	::jboolean IsSupported(const ::java::time::temporal::TemporalField& arg0) const;
	::java::lang::Object Query(const ::java::time::temporal::TemporalQuery& arg0) const;
	::java::time::temporal::ValueRange Range(const ::java::time::temporal::TemporalField& arg0) const;
	explicit TemporalAccessor(jobject o) : java::lang::Object(o) {}
	TemporalAccessor(const TemporalAccessor& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::time::temporal::TemporalAccessor();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jint Get(const ::java::time::temporal::TemporalField& arg0) = 0;
		virtual ::jlong GetLong(const ::java::time::temporal::TemporalField& arg0) = 0;
		virtual ::jboolean IsSupported(const ::java::time::temporal::TemporalField& arg0) = 0;
		virtual ::java::lang::Object Query(const ::java::time::temporal::TemporalQuery& arg0) = 0;
		virtual ::java::time::temporal::ValueRange Range(const ::java::time::temporal::TemporalField& arg0) = 0;
	};
};

struct TemporalField : java::lang::Object
{
	static jni::Class __CLASS;

	::java::time::temporal::Temporal AdjustInto(const ::java::time::temporal::Temporal& arg0, const ::jlong& arg1) const;
	::java::time::temporal::TemporalUnit GetBaseUnit() const;
	::java::lang::String GetDisplayName(const ::java::util::Locale& arg0) const;
	::jlong GetFrom(const ::java::time::temporal::TemporalAccessor& arg0) const;
	::java::time::temporal::TemporalUnit GetRangeUnit() const;
	::jboolean IsDateBased() const;
	::jboolean IsSupportedBy(const ::java::time::temporal::TemporalAccessor& arg0) const;
	::jboolean IsTimeBased() const;
	::java::time::temporal::ValueRange Range() const;
	::java::time::temporal::ValueRange RangeRefinedBy(const ::java::time::temporal::TemporalAccessor& arg0) const;
	::java::time::temporal::TemporalAccessor Resolve(const ::java::util::Map& arg0, const ::java::time::temporal::TemporalAccessor& arg1, const ::java::time::format::ResolverStyle& arg2) const;
	::java::lang::String ToString() const;
	explicit TemporalField(jobject o) : java::lang::Object(o) {}
	TemporalField(const TemporalField& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::time::temporal::TemporalField();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::time::temporal::Temporal AdjustInto(const ::java::time::temporal::Temporal& arg0, const ::jlong& arg1) = 0;
		virtual ::java::time::temporal::TemporalUnit GetBaseUnit() = 0;
		virtual ::java::lang::String GetDisplayName(const ::java::util::Locale& arg0) = 0;
		virtual ::jlong GetFrom(const ::java::time::temporal::TemporalAccessor& arg0) = 0;
		virtual ::java::time::temporal::TemporalUnit GetRangeUnit() = 0;
		virtual ::jboolean IsDateBased() = 0;
		virtual ::jboolean IsSupportedBy(const ::java::time::temporal::TemporalAccessor& arg0) = 0;
		virtual ::jboolean IsTimeBased() = 0;
		virtual ::java::time::temporal::ValueRange Range() = 0;
		virtual ::java::time::temporal::ValueRange RangeRefinedBy(const ::java::time::temporal::TemporalAccessor& arg0) = 0;
		virtual ::java::time::temporal::TemporalAccessor Resolve(const ::java::util::Map& arg0, const ::java::time::temporal::TemporalAccessor& arg1, const ::java::time::format::ResolverStyle& arg2) = 0;
		virtual ::java::lang::String ToString() = 0;
	};
};

struct TemporalUnit : java::lang::Object
{
	static jni::Class __CLASS;

	::java::time::temporal::Temporal AddTo(const ::java::time::temporal::Temporal& arg0, const ::jlong& arg1) const;
	::jlong Between(const ::java::time::temporal::Temporal& arg0, const ::java::time::temporal::Temporal& arg1) const;
	::java::time::Duration GetDuration() const;
	::jboolean IsDateBased() const;
	::jboolean IsDurationEstimated() const;
	::jboolean IsSupportedBy(const ::java::time::temporal::Temporal& arg0) const;
	::jboolean IsTimeBased() const;
	::java::lang::String ToString() const;
	explicit TemporalUnit(jobject o) : java::lang::Object(o) {}
	TemporalUnit(const TemporalUnit& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::time::temporal::TemporalUnit();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::time::temporal::Temporal AddTo(const ::java::time::temporal::Temporal& arg0, const ::jlong& arg1) = 0;
		virtual ::jlong Between(const ::java::time::temporal::Temporal& arg0, const ::java::time::temporal::Temporal& arg1) = 0;
		virtual ::java::time::Duration GetDuration() = 0;
		virtual ::jboolean IsDateBased() = 0;
		virtual ::jboolean IsDurationEstimated() = 0;
		virtual ::jboolean IsSupportedBy(const ::java::time::temporal::Temporal& arg0) = 0;
		virtual ::jboolean IsTimeBased() = 0;
		virtual ::java::lang::String ToString() = 0;
	};
};

struct ValueRange : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Serializable();
	::jint CheckValidIntValue(const ::jlong& arg0, const ::java::time::temporal::TemporalField& arg1) const;
	::jlong CheckValidValue(const ::jlong& arg0, const ::java::time::temporal::TemporalField& arg1) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jlong GetLargestMinimum() const;
	::jlong GetMaximum() const;
	::jlong GetMinimum() const;
	::jlong GetSmallestMaximum() const;
	::jint HashCode() const;
	::jboolean IsFixed() const;
	::jboolean IsIntValue() const;
	::jboolean IsValidIntValue(const ::jlong& arg0) const;
	::jboolean IsValidValue(const ::jlong& arg0) const;
	static ::java::time::temporal::ValueRange Of(const ::jlong& arg0, const ::jlong& arg1);
	static ::java::time::temporal::ValueRange Of(const ::jlong& arg0, const ::jlong& arg1, const ::jlong& arg2);
	static ::java::time::temporal::ValueRange Of(const ::jlong& arg0, const ::jlong& arg1, const ::jlong& arg2, const ::jlong& arg3);
	::java::lang::String ToString() const;
	explicit ValueRange(jobject o) : ::java::lang::Object(o) {}
	ValueRange(const ValueRange& o)  : ::java::lang::Object(o) {}

};

}}}

namespace java { namespace time { namespace format { 
struct ResolverStyle : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::java::time::format::ResolverStyle& fLENIENT();
	static ::java::time::format::ResolverStyle& fSMART();
	static ::java::time::format::ResolverStyle& fSTRICT();
	static ::java::time::format::ResolverStyle ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::java::time::format::ResolverStyle > Values();
	explicit ResolverStyle(jobject o) : ::java::lang::Enum(o) {}
	ResolverStyle(const ResolverStyle& o)  : ::java::lang::Enum(o) {}

};

}}}

namespace java { namespace time { namespace temporal { 
struct TemporalQuery : java::lang::Object
{
	static jni::Class __CLASS;

	::java::lang::Object QueryFrom(const ::java::time::temporal::TemporalAccessor& arg0) const;
	explicit TemporalQuery(jobject o) : java::lang::Object(o) {}
	TemporalQuery(const TemporalQuery& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::time::temporal::TemporalQuery();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::lang::Object QueryFrom(const ::java::time::temporal::TemporalAccessor& arg0) = 0;
	};
};

struct TemporalAdjuster : java::lang::Object
{
	static jni::Class __CLASS;

	::java::time::temporal::Temporal AdjustInto(const ::java::time::temporal::Temporal& arg0) const;
	explicit TemporalAdjuster(jobject o) : java::lang::Object(o) {}
	TemporalAdjuster(const TemporalAdjuster& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::time::temporal::TemporalAdjuster();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::time::temporal::Temporal AdjustInto(const ::java::time::temporal::Temporal& arg0) = 0;
	};
};

struct ChronoUnit : ::java::lang::Enum
{
	static jni::Class __CLASS;

	operator ::java::time::temporal::TemporalUnit();
	static ::java::time::temporal::ChronoUnit& fCENTURIES();
	static ::java::time::temporal::ChronoUnit& fDAYS();
	static ::java::time::temporal::ChronoUnit& fDECADES();
	static ::java::time::temporal::ChronoUnit& fERAS();
	static ::java::time::temporal::ChronoUnit& fFOREVER();
	static ::java::time::temporal::ChronoUnit& fHALF_DAYS();
	static ::java::time::temporal::ChronoUnit& fHOURS();
	static ::java::time::temporal::ChronoUnit& fMICROS();
	static ::java::time::temporal::ChronoUnit& fMILLENNIA();
	static ::java::time::temporal::ChronoUnit& fMILLIS();
	static ::java::time::temporal::ChronoUnit& fMINUTES();
	static ::java::time::temporal::ChronoUnit& fMONTHS();
	static ::java::time::temporal::ChronoUnit& fNANOS();
	static ::java::time::temporal::ChronoUnit& fSECONDS();
	static ::java::time::temporal::ChronoUnit& fWEEKS();
	static ::java::time::temporal::ChronoUnit& fYEARS();
	::java::time::temporal::Temporal AddTo(const ::java::time::temporal::Temporal& arg0, const ::jlong& arg1) const;
	::jlong Between(const ::java::time::temporal::Temporal& arg0, const ::java::time::temporal::Temporal& arg1) const;
	::java::time::Duration GetDuration() const;
	::jboolean IsDateBased() const;
	::jboolean IsDurationEstimated() const;
	::jboolean IsSupportedBy(const ::java::time::temporal::Temporal& arg0) const;
	::jboolean IsTimeBased() const;
	::java::lang::String ToString() const;
	static ::java::time::temporal::ChronoUnit ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::java::time::temporal::ChronoUnit > Values();
	explicit ChronoUnit(jobject o) : ::java::lang::Enum(o) {}
	ChronoUnit(const ChronoUnit& o)  : ::java::lang::Enum(o) {}

};

}}}

namespace java { namespace lang { 
struct Thread : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::Runnable();
	static ::jint& fMAX_PRIORITY();
	static ::jint& fMIN_PRIORITY();
	static ::jint& fNORM_PRIORITY();
	static ::jint ActiveCount();
	::jvoid CheckAccess() const;
	::java::lang::Object Clone() const;
	::jint CountStackFrames() const;
	static ::java::lang::Thread CurrentThread();
	static ::jvoid DumpStack();
	static ::jint Enumerate(const jni::Array< ::java::lang::Thread >& arg0);
	static ::java::util::Map GetAllStackTraces();
	::java::lang::ClassLoader GetContextClassLoader() const;
	static ::java::lang::Thread_UncaughtExceptionHandler GetDefaultUncaughtExceptionHandler();
	::jlong GetId() const;
	::java::lang::String GetName() const;
	::jint GetPriority() const;
	jni::Array< ::java::lang::StackTraceElement > GetStackTrace() const;
	::java::lang::Thread_State GetState() const;
	::java::lang::ThreadGroup GetThreadGroup() const;
	::java::lang::Thread_UncaughtExceptionHandler GetUncaughtExceptionHandler() const;
	static ::jboolean HoldsLock(const ::java::lang::Object& arg0);
	::jvoid Interrupt() const;
	static ::jboolean Interrupted();
	::jboolean IsAlive() const;
	::jboolean IsDaemon() const;
	::jboolean IsInterrupted() const;
	::jvoid Join() const;
	::jvoid Join(const ::jlong& arg0) const;
	::jvoid Join(const ::jlong& arg0, const ::jint& arg1) const;
	static ::jvoid OnSpinWait();
	::jvoid Resume() const;
	::jvoid Run() const;
	::jvoid SetContextClassLoader(const ::java::lang::ClassLoader& arg0) const;
	::jvoid SetDaemon(const ::jboolean& arg0) const;
	static ::jvoid SetDefaultUncaughtExceptionHandler(const ::java::lang::Thread_UncaughtExceptionHandler& arg0);
	::jvoid SetName(const ::java::lang::String& arg0) const;
	::jvoid SetPriority(const ::jint& arg0) const;
	::jvoid SetUncaughtExceptionHandler(const ::java::lang::Thread_UncaughtExceptionHandler& arg0) const;
	static ::jvoid Sleep(const ::jlong& arg0);
	static ::jvoid Sleep(const ::jlong& arg0, const ::jint& arg1);
	::jvoid Start() const;
	::jvoid Stop() const;
	::jvoid Suspend() const;
	::java::lang::String ToString() const;
	static ::jvoid Yield();
	static jobject __Constructor();
	Thread() : ::java::lang::Object(__Constructor()) {}
	static jobject __Constructor(const ::java::lang::Runnable& arg0);
	Thread(const ::java::lang::Runnable& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::Runnable& arg0, const ::java::lang::String& arg1);
	Thread(const ::java::lang::Runnable& arg0, const ::java::lang::String& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::lang::String& arg0);
	Thread(const ::java::lang::String& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::ThreadGroup& arg0, const ::java::lang::Runnable& arg1);
	Thread(const ::java::lang::ThreadGroup& arg0, const ::java::lang::Runnable& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::lang::ThreadGroup& arg0, const ::java::lang::Runnable& arg1, const ::java::lang::String& arg2);
	Thread(const ::java::lang::ThreadGroup& arg0, const ::java::lang::Runnable& arg1, const ::java::lang::String& arg2) : ::java::lang::Object(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::java::lang::ThreadGroup& arg0, const ::java::lang::Runnable& arg1, const ::java::lang::String& arg2, const ::jlong& arg3);
	Thread(const ::java::lang::ThreadGroup& arg0, const ::java::lang::Runnable& arg1, const ::java::lang::String& arg2, const ::jlong& arg3) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3)) {}
	static jobject __Constructor(const ::java::lang::ThreadGroup& arg0, const ::java::lang::Runnable& arg1, const ::java::lang::String& arg2, const ::jlong& arg3, const ::jboolean& arg4);
	Thread(const ::java::lang::ThreadGroup& arg0, const ::java::lang::Runnable& arg1, const ::java::lang::String& arg2, const ::jlong& arg3, const ::jboolean& arg4) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3, arg4)) {}
	static jobject __Constructor(const ::java::lang::ThreadGroup& arg0, const ::java::lang::String& arg1);
	Thread(const ::java::lang::ThreadGroup& arg0, const ::java::lang::String& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit Thread(jobject o) : ::java::lang::Object(o) {}
	Thread(const Thread& o)  : ::java::lang::Object(o) {}

};

struct Thread_UncaughtExceptionHandler : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid UncaughtException(const ::java::lang::Thread& arg0, const ::java::lang::Throwable& arg1) const;
	explicit Thread_UncaughtExceptionHandler(jobject o) : java::lang::Object(o) {}
	Thread_UncaughtExceptionHandler(const Thread_UncaughtExceptionHandler& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::lang::Thread_UncaughtExceptionHandler();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void UncaughtException(const ::java::lang::Thread& arg0, const ::java::lang::Throwable& arg1) = 0;
	};
};

struct Throwable : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Serializable();
	::jvoid AddSuppressed(const ::java::lang::Throwable& arg0) const;
	::java::lang::Throwable FillInStackTrace() const;
	::java::lang::Throwable GetCause() const;
	::java::lang::String GetLocalizedMessage() const;
	::java::lang::String GetMessage() const;
	jni::Array< ::java::lang::StackTraceElement > GetStackTrace() const;
	jni::Array< ::java::lang::Throwable > GetSuppressed() const;
	::java::lang::Throwable InitCause(const ::java::lang::Throwable& arg0) const;
	::jvoid PrintStackTrace() const;
	::jvoid PrintStackTrace(const ::java::io::PrintStream& arg0) const;
	::jvoid PrintStackTrace(const ::java::io::PrintWriter& arg0) const;
	::jvoid SetStackTrace(const jni::Array< ::java::lang::StackTraceElement >& arg0) const;
	::java::lang::String ToString() const;
	static jobject __Constructor();
	Throwable() : ::java::lang::Object(__Constructor()) {}
	static jobject __Constructor(const ::java::lang::String& arg0);
	Throwable(const ::java::lang::String& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::java::lang::Throwable& arg1);
	Throwable(const ::java::lang::String& arg0, const ::java::lang::Throwable& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::java::lang::Throwable& arg1, const ::jboolean& arg2, const ::jboolean& arg3);
	Throwable(const ::java::lang::String& arg0, const ::java::lang::Throwable& arg1, const ::jboolean& arg2, const ::jboolean& arg3) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3)) {}
	explicit Throwable(jobject o) : ::java::lang::Object(o) {}
	Throwable(const Throwable& o)  : ::java::lang::Object(o) {}

};

struct StackTraceElement : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Serializable();
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::lang::String GetClassLoaderName() const;
	::java::lang::String GetClassName() const;
	::java::lang::String GetFileName() const;
	::jint GetLineNumber() const;
	::java::lang::String GetMethodName() const;
	::java::lang::String GetModuleName() const;
	::java::lang::String GetModuleVersion() const;
	::jint HashCode() const;
	::jboolean IsNativeMethod() const;
	::java::lang::String ToString() const;
	static jobject __Constructor(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2, const ::jint& arg3);
	StackTraceElement(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2, const ::jint& arg3) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2, const ::java::lang::String& arg3, const ::java::lang::String& arg4, const ::java::lang::String& arg5, const ::jint& arg6);
	StackTraceElement(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2, const ::java::lang::String& arg3, const ::java::lang::String& arg4, const ::java::lang::String& arg5, const ::jint& arg6) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3, arg4, arg5, arg6)) {}
	explicit StackTraceElement(jobject o) : ::java::lang::Object(o) {}
	StackTraceElement(const StackTraceElement& o)  : ::java::lang::Object(o) {}

};

}}

namespace java { namespace io { 
struct Writer : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::Appendable();
	operator ::java::io::Closeable();
	operator ::java::io::Flushable();
	::java::lang::Object fLock() const;
	void fLock(const ::java::lang::Object& arg0) const;
	::java::io::Writer Append(const ::jchar& arg0) const;
	::java::io::Writer Append(const ::java::lang::CharSequence& arg0) const;
	::java::io::Writer Append(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jvoid Close() const;
	::jvoid Flush() const;
	static ::java::io::Writer NullWriter();
	::jvoid Write(const ::jint& arg0) const;
	::jvoid Write(const ::java::lang::String& arg0) const;
	::jvoid Write(const ::java::lang::String& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jvoid Write(const jni::Array< ::jchar >& arg0) const;
	::jvoid Write(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	static jobject __Constructor();
	Writer() : ::java::lang::Object(__Constructor()) {}
	static jobject __Constructor(const ::java::lang::Object& arg0);
	Writer(const ::java::lang::Object& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit Writer(jobject o) : ::java::lang::Object(o) {}
	Writer(const Writer& o)  : ::java::lang::Object(o) {}

};

struct PrintWriter : ::java::io::Writer
{
	static jni::Class __CLASS;

	::java::io::Writer fOut() const;
	void fOut(const ::java::io::Writer& arg0) const;
	::java::io::PrintWriter Append(const ::jchar& arg0) const;
	::java::io::PrintWriter Append(const ::java::lang::CharSequence& arg0) const;
	::java::io::PrintWriter Append(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jboolean CheckError() const;
	::jvoid ClearError() const;
	::jvoid Close() const;
	::jvoid Flush() const;
	::java::io::PrintWriter Format(const ::java::lang::String& arg0, const jni::Array< ::java::lang::Object >& arg1) const;
	::java::io::PrintWriter Format(const ::java::util::Locale& arg0, const ::java::lang::String& arg1, const jni::Array< ::java::lang::Object >& arg2) const;
	::jvoid Print(const ::jchar& arg0) const;
	::jvoid Print(const ::jdouble& arg0) const;
	::jvoid Print(const ::jfloat& arg0) const;
	::jvoid Print(const ::jint& arg0) const;
	::jvoid Print(const ::jlong& arg0) const;
	::jvoid Print(const ::java::lang::Object& arg0) const;
	::jvoid Print(const ::java::lang::String& arg0) const;
	::jvoid Print(const ::jboolean& arg0) const;
	::jvoid Print(const jni::Array< ::jchar >& arg0) const;
	::java::io::PrintWriter Printf(const ::java::lang::String& arg0, const jni::Array< ::java::lang::Object >& arg1) const;
	::java::io::PrintWriter Printf(const ::java::util::Locale& arg0, const ::java::lang::String& arg1, const jni::Array< ::java::lang::Object >& arg2) const;
	::jvoid Println() const;
	::jvoid Println(const ::jchar& arg0) const;
	::jvoid Println(const ::jdouble& arg0) const;
	::jvoid Println(const ::jfloat& arg0) const;
	::jvoid Println(const ::jint& arg0) const;
	::jvoid Println(const ::jlong& arg0) const;
	::jvoid Println(const ::java::lang::Object& arg0) const;
	::jvoid Println(const ::java::lang::String& arg0) const;
	::jvoid Println(const ::jboolean& arg0) const;
	::jvoid Println(const jni::Array< ::jchar >& arg0) const;
	::jvoid SetError() const;
	::jvoid Write(const ::jint& arg0) const;
	::jvoid Write(const ::java::lang::String& arg0) const;
	::jvoid Write(const ::java::lang::String& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jvoid Write(const jni::Array< ::jchar >& arg0) const;
	::jvoid Write(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	static jobject __Constructor(const ::java::io::File& arg0);
	PrintWriter(const ::java::io::File& arg0) : ::java::io::Writer(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::io::File& arg0, const ::java::lang::String& arg1);
	PrintWriter(const ::java::io::File& arg0, const ::java::lang::String& arg1) : ::java::io::Writer(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::io::File& arg0, const ::java::nio::charset::Charset& arg1);
	PrintWriter(const ::java::io::File& arg0, const ::java::nio::charset::Charset& arg1) : ::java::io::Writer(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::io::OutputStream& arg0);
	PrintWriter(const ::java::io::OutputStream& arg0) : ::java::io::Writer(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::io::OutputStream& arg0, const ::jboolean& arg1);
	PrintWriter(const ::java::io::OutputStream& arg0, const ::jboolean& arg1) : ::java::io::Writer(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::io::OutputStream& arg0, const ::jboolean& arg1, const ::java::nio::charset::Charset& arg2);
	PrintWriter(const ::java::io::OutputStream& arg0, const ::jboolean& arg1, const ::java::nio::charset::Charset& arg2) : ::java::io::Writer(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::java::io::Writer& arg0);
	PrintWriter(const ::java::io::Writer& arg0) : ::java::io::Writer(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::io::Writer& arg0, const ::jboolean& arg1);
	PrintWriter(const ::java::io::Writer& arg0, const ::jboolean& arg1) : ::java::io::Writer(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::lang::String& arg0);
	PrintWriter(const ::java::lang::String& arg0) : ::java::io::Writer(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::java::lang::String& arg1);
	PrintWriter(const ::java::lang::String& arg0, const ::java::lang::String& arg1) : ::java::io::Writer(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::java::nio::charset::Charset& arg1);
	PrintWriter(const ::java::lang::String& arg0, const ::java::nio::charset::Charset& arg1) : ::java::io::Writer(__Constructor(arg0, arg1)) {}
	explicit PrintWriter(jobject o) : ::java::io::Writer(o) {}
	PrintWriter(const PrintWriter& o)  : ::java::io::Writer(o) {}

};

}}

namespace java { namespace lang { 
struct Thread_State : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::java::lang::Thread_State& fBLOCKED();
	static ::java::lang::Thread_State& fNEW();
	static ::java::lang::Thread_State& fRUNNABLE();
	static ::java::lang::Thread_State& fTERMINATED();
	static ::java::lang::Thread_State& fTIMED_WAITING();
	static ::java::lang::Thread_State& fWAITING();
	static ::java::lang::Thread_State ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::java::lang::Thread_State > Values();
	explicit Thread_State(jobject o) : ::java::lang::Enum(o) {}
	Thread_State(const Thread_State& o)  : ::java::lang::Enum(o) {}

};

struct ThreadGroup : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::Thread_UncaughtExceptionHandler();
	::jint ActiveCount() const;
	::jint ActiveGroupCount() const;
	::jboolean AllowThreadSuspension(const ::jboolean& arg0) const;
	::jvoid CheckAccess() const;
	::jvoid Destroy() const;
	::jint Enumerate(const jni::Array< ::java::lang::Thread >& arg0) const;
	::jint Enumerate(const jni::Array< ::java::lang::Thread >& arg0, const ::jboolean& arg1) const;
	::jint Enumerate(const jni::Array< ::java::lang::ThreadGroup >& arg0) const;
	::jint Enumerate(const jni::Array< ::java::lang::ThreadGroup >& arg0, const ::jboolean& arg1) const;
	::jint GetMaxPriority() const;
	::java::lang::String GetName() const;
	::java::lang::ThreadGroup GetParent() const;
	::jvoid Interrupt() const;
	::jboolean IsDaemon() const;
	::jboolean IsDestroyed() const;
	::jvoid List() const;
	::jboolean ParentOf(const ::java::lang::ThreadGroup& arg0) const;
	::jvoid Resume() const;
	::jvoid SetDaemon(const ::jboolean& arg0) const;
	::jvoid SetMaxPriority(const ::jint& arg0) const;
	::jvoid Stop() const;
	::jvoid Suspend() const;
	::java::lang::String ToString() const;
	::jvoid UncaughtException(const ::java::lang::Thread& arg0, const ::java::lang::Throwable& arg1) const;
	static jobject __Constructor(const ::java::lang::String& arg0);
	ThreadGroup(const ::java::lang::String& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::ThreadGroup& arg0, const ::java::lang::String& arg1);
	ThreadGroup(const ::java::lang::ThreadGroup& arg0, const ::java::lang::String& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit ThreadGroup(jobject o) : ::java::lang::Object(o) {}
	ThreadGroup(const ThreadGroup& o)  : ::java::lang::Object(o) {}

};

}}

namespace java { namespace nio { namespace file { 
struct WatchEvent_Kind : java::lang::Object
{
	static jni::Class __CLASS;

	::java::lang::String Name() const;
	::java::lang::Class Type() const;
	explicit WatchEvent_Kind(jobject o) : java::lang::Object(o) {}
	WatchEvent_Kind(const WatchEvent_Kind& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::nio::file::WatchEvent_Kind();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::lang::String Name() = 0;
		virtual ::java::lang::Class Type() = 0;
	};
};

struct WatchEvent_Modifier : java::lang::Object
{
	static jni::Class __CLASS;

	::java::lang::String Name() const;
	explicit WatchEvent_Modifier(jobject o) : java::lang::Object(o) {}
	WatchEvent_Modifier(const WatchEvent_Modifier& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::nio::file::WatchEvent_Modifier();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::lang::String Name() = 0;
	};
};

struct FileSystem : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Closeable();
	::jvoid Close() const;
	::java::lang::Iterable GetFileStores() const;
	::java::nio::file::Path GetPath(const ::java::lang::String& arg0, const jni::Array< ::java::lang::String >& arg1) const;
	::java::nio::file::PathMatcher GetPathMatcher(const ::java::lang::String& arg0) const;
	::java::lang::Iterable GetRootDirectories() const;
	::java::lang::String GetSeparator() const;
	::java::nio::file::attribute::UserPrincipalLookupService GetUserPrincipalLookupService() const;
	::jboolean IsOpen() const;
	::jboolean IsReadOnly() const;
	::java::nio::file::WatchService NewWatchService() const;
	::java::nio::file::spi::FileSystemProvider Provider() const;
	::java::util::Set SupportedFileAttributeViews() const;
	static jobject __Constructor();
	FileSystem() : ::java::lang::Object(__Constructor()) {}
	explicit FileSystem(jobject o) : ::java::lang::Object(o) {}
	FileSystem(const FileSystem& o)  : ::java::lang::Object(o) {}

};

struct PathMatcher : java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean Matches(const ::java::nio::file::Path& arg0) const;
	explicit PathMatcher(jobject o) : java::lang::Object(o) {}
	PathMatcher(const PathMatcher& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::nio::file::PathMatcher();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean Matches(const ::java::nio::file::Path& arg0) = 0;
	};
};

}}}

namespace java { namespace nio { namespace file { namespace attribute { 
struct UserPrincipalLookupService : ::java::lang::Object
{
	static jni::Class __CLASS;

	::java::nio::file::attribute::GroupPrincipal LookupPrincipalByGroupName(const ::java::lang::String& arg0) const;
	::java::nio::file::attribute::UserPrincipal LookupPrincipalByName(const ::java::lang::String& arg0) const;
	static jobject __Constructor();
	UserPrincipalLookupService() : ::java::lang::Object(__Constructor()) {}
	explicit UserPrincipalLookupService(jobject o) : ::java::lang::Object(o) {}
	UserPrincipalLookupService(const UserPrincipalLookupService& o)  : ::java::lang::Object(o) {}

};

struct GroupPrincipal : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::nio::file::attribute::UserPrincipal();
	explicit GroupPrincipal(jobject o) : java::lang::Object(o) {}
	GroupPrincipal(const GroupPrincipal& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::nio::file::attribute::GroupPrincipal();
		operator ::java::nio::file::attribute::UserPrincipal();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
	};
};

struct UserPrincipal : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::security::Principal();
	explicit UserPrincipal(jobject o) : java::lang::Object(o) {}
	UserPrincipal(const UserPrincipal& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::nio::file::attribute::UserPrincipal();
		operator ::java::security::Principal();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
	};
};

}}}}

namespace java { namespace security { 
struct Principal : java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::lang::String GetName() const;
	::jint HashCode() const;
	::jboolean Implies(const ::javax::security::auth::Subject& arg0) const;
	::java::lang::String ToString() const;
	explicit Principal(jobject o) : java::lang::Object(o) {}
	Principal(const Principal& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::security::Principal();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean Equals(const ::java::lang::Object& arg0) = 0;
		virtual ::java::lang::String GetName() = 0;
		virtual ::jint HashCode() = 0;
		virtual ::jboolean Implies(const ::javax::security::auth::Subject& arg0) = 0;
		virtual ::java::lang::String ToString() = 0;
	};
};

}}

namespace javax { namespace security { namespace auth { 
struct Subject : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Serializable();
	static ::java::lang::Object DoAs(const ::javax::security::auth::Subject& arg0, const ::java::security::PrivilegedAction& arg1);
	static ::java::lang::Object DoAs(const ::javax::security::auth::Subject& arg0, const ::java::security::PrivilegedExceptionAction& arg1);
	static ::java::lang::Object DoAsPrivileged(const ::javax::security::auth::Subject& arg0, const ::java::security::PrivilegedAction& arg1, const ::java::security::AccessControlContext& arg2);
	static ::java::lang::Object DoAsPrivileged(const ::javax::security::auth::Subject& arg0, const ::java::security::PrivilegedExceptionAction& arg1, const ::java::security::AccessControlContext& arg2);
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::util::Set GetPrincipals() const;
	::java::util::Set GetPrincipals(const ::java::lang::Class& arg0) const;
	::java::util::Set GetPrivateCredentials() const;
	::java::util::Set GetPrivateCredentials(const ::java::lang::Class& arg0) const;
	::java::util::Set GetPublicCredentials() const;
	::java::util::Set GetPublicCredentials(const ::java::lang::Class& arg0) const;
	static ::javax::security::auth::Subject GetSubject(const ::java::security::AccessControlContext& arg0);
	::jint HashCode() const;
	::jboolean IsReadOnly() const;
	::jvoid SetReadOnly() const;
	::java::lang::String ToString() const;
	static jobject __Constructor();
	Subject() : ::java::lang::Object(__Constructor()) {}
	static jobject __Constructor(const ::jboolean& arg0, const ::java::util::Set& arg1, const ::java::util::Set& arg2, const ::java::util::Set& arg3);
	Subject(const ::jboolean& arg0, const ::java::util::Set& arg1, const ::java::util::Set& arg2, const ::java::util::Set& arg3) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3)) {}
	explicit Subject(jobject o) : ::java::lang::Object(o) {}
	Subject(const Subject& o)  : ::java::lang::Object(o) {}

};

}}}

namespace java { namespace security { 
struct PrivilegedAction : java::lang::Object
{
	static jni::Class __CLASS;

	::java::lang::Object Run() const;
	explicit PrivilegedAction(jobject o) : java::lang::Object(o) {}
	PrivilegedAction(const PrivilegedAction& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::security::PrivilegedAction();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::lang::Object Run() = 0;
	};
};

struct PrivilegedExceptionAction : java::lang::Object
{
	static jni::Class __CLASS;

	::java::lang::Object Run() const;
	explicit PrivilegedExceptionAction(jobject o) : java::lang::Object(o) {}
	PrivilegedExceptionAction(const PrivilegedExceptionAction& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::security::PrivilegedExceptionAction();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::lang::Object Run() = 0;
	};
};

struct AccessControlContext : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid CheckPermission(const ::java::security::Permission& arg0) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::security::DomainCombiner GetDomainCombiner() const;
	::jint HashCode() const;
	static jobject __Constructor(const ::java::security::AccessControlContext& arg0, const ::java::security::DomainCombiner& arg1);
	AccessControlContext(const ::java::security::AccessControlContext& arg0, const ::java::security::DomainCombiner& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const jni::Array< ::java::security::ProtectionDomain >& arg0);
	AccessControlContext(const jni::Array< ::java::security::ProtectionDomain >& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit AccessControlContext(jobject o) : ::java::lang::Object(o) {}
	AccessControlContext(const AccessControlContext& o)  : ::java::lang::Object(o) {}

};

struct Permission : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::security::Guard();
	operator ::java::io::Serializable();
	::jvoid CheckGuard(const ::java::lang::Object& arg0) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::lang::String GetActions() const;
	::java::lang::String GetName() const;
	::jint HashCode() const;
	::jboolean Implies(const ::java::security::Permission& arg0) const;
	::java::security::PermissionCollection NewPermissionCollection() const;
	::java::lang::String ToString() const;
	static jobject __Constructor(const ::java::lang::String& arg0);
	Permission(const ::java::lang::String& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit Permission(jobject o) : ::java::lang::Object(o) {}
	Permission(const Permission& o)  : ::java::lang::Object(o) {}

};

struct Guard : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid CheckGuard(const ::java::lang::Object& arg0) const;
	explicit Guard(jobject o) : java::lang::Object(o) {}
	Guard(const Guard& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::security::Guard();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void CheckGuard(const ::java::lang::Object& arg0) = 0;
	};
};

struct PermissionCollection : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Serializable();
	::jvoid Add(const ::java::security::Permission& arg0) const;
	::java::util::Enumeration Elements() const;
	::java::util::stream::Stream ElementsAsStream() const;
	::jboolean Implies(const ::java::security::Permission& arg0) const;
	::jboolean IsReadOnly() const;
	::jvoid SetReadOnly() const;
	::java::lang::String ToString() const;
	static jobject __Constructor();
	PermissionCollection() : ::java::lang::Object(__Constructor()) {}
	explicit PermissionCollection(jobject o) : ::java::lang::Object(o) {}
	PermissionCollection(const PermissionCollection& o)  : ::java::lang::Object(o) {}

};

struct DomainCombiner : java::lang::Object
{
	static jni::Class __CLASS;

	jni::Array< ::java::security::ProtectionDomain > Combine(const jni::Array< ::java::security::ProtectionDomain >& arg0, const jni::Array< ::java::security::ProtectionDomain >& arg1) const;
	explicit DomainCombiner(jobject o) : java::lang::Object(o) {}
	DomainCombiner(const DomainCombiner& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::security::DomainCombiner();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual jni::Array< ::java::security::ProtectionDomain > Combine(const jni::Array< ::java::security::ProtectionDomain >& arg0, const jni::Array< ::java::security::ProtectionDomain >& arg1) = 0;
	};
};

}}

namespace java { namespace nio { namespace file { namespace spi { 
struct FileSystemProvider : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid CheckAccess(const ::java::nio::file::Path& arg0, const jni::Array< ::java::nio::file::AccessMode >& arg1) const;
	::jvoid Copy(const ::java::nio::file::Path& arg0, const ::java::nio::file::Path& arg1, const jni::Array< ::java::nio::file::CopyOption >& arg2) const;
	::jvoid CreateDirectory(const ::java::nio::file::Path& arg0, const jni::Array< ::java::nio::file::attribute::FileAttribute >& arg1) const;
	::jvoid CreateLink(const ::java::nio::file::Path& arg0, const ::java::nio::file::Path& arg1) const;
	::jvoid CreateSymbolicLink(const ::java::nio::file::Path& arg0, const ::java::nio::file::Path& arg1, const jni::Array< ::java::nio::file::attribute::FileAttribute >& arg2) const;
	::jvoid Delete(const ::java::nio::file::Path& arg0) const;
	::jboolean DeleteIfExists(const ::java::nio::file::Path& arg0) const;
	::java::nio::file::attribute::FileAttributeView GetFileAttributeView(const ::java::nio::file::Path& arg0, const ::java::lang::Class& arg1, const jni::Array< ::java::nio::file::LinkOption >& arg2) const;
	::java::nio::file::FileStore GetFileStore(const ::java::nio::file::Path& arg0) const;
	::java::nio::file::FileSystem GetFileSystem(const ::java::net::URI& arg0) const;
	::java::nio::file::Path GetPath(const ::java::net::URI& arg0) const;
	::java::lang::String GetScheme() const;
	static ::java::util::List InstalledProviders();
	::jboolean IsHidden(const ::java::nio::file::Path& arg0) const;
	::jboolean IsSameFile(const ::java::nio::file::Path& arg0, const ::java::nio::file::Path& arg1) const;
	::jvoid Move(const ::java::nio::file::Path& arg0, const ::java::nio::file::Path& arg1, const jni::Array< ::java::nio::file::CopyOption >& arg2) const;
	::java::nio::channels::AsynchronousFileChannel NewAsynchronousFileChannel(const ::java::nio::file::Path& arg0, const ::java::util::Set& arg1, const ::java::util::concurrent::ExecutorService& arg2, const jni::Array< ::java::nio::file::attribute::FileAttribute >& arg3) const;
	::java::nio::channels::SeekableByteChannel NewByteChannel(const ::java::nio::file::Path& arg0, const ::java::util::Set& arg1, const jni::Array< ::java::nio::file::attribute::FileAttribute >& arg2) const;
	::java::nio::file::DirectoryStream NewDirectoryStream(const ::java::nio::file::Path& arg0, const ::java::nio::file::DirectoryStream_Filter& arg1) const;
	::java::nio::channels::FileChannel NewFileChannel(const ::java::nio::file::Path& arg0, const ::java::util::Set& arg1, const jni::Array< ::java::nio::file::attribute::FileAttribute >& arg2) const;
	::java::nio::file::FileSystem NewFileSystem(const ::java::net::URI& arg0, const ::java::util::Map& arg1) const;
	::java::nio::file::FileSystem NewFileSystem(const ::java::nio::file::Path& arg0, const ::java::util::Map& arg1) const;
	::java::io::InputStream NewInputStream(const ::java::nio::file::Path& arg0, const jni::Array< ::java::nio::file::OpenOption >& arg1) const;
	::java::io::OutputStream NewOutputStream(const ::java::nio::file::Path& arg0, const jni::Array< ::java::nio::file::OpenOption >& arg1) const;
	::java::nio::file::attribute::BasicFileAttributes ReadAttributes(const ::java::nio::file::Path& arg0, const ::java::lang::Class& arg1, const jni::Array< ::java::nio::file::LinkOption >& arg2) const;
	::java::util::Map ReadAttributes(const ::java::nio::file::Path& arg0, const ::java::lang::String& arg1, const jni::Array< ::java::nio::file::LinkOption >& arg2) const;
	::java::nio::file::Path ReadSymbolicLink(const ::java::nio::file::Path& arg0) const;
	::jvoid SetAttribute(const ::java::nio::file::Path& arg0, const ::java::lang::String& arg1, const ::java::lang::Object& arg2, const jni::Array< ::java::nio::file::LinkOption >& arg3) const;
	static jobject __Constructor();
	FileSystemProvider() : ::java::lang::Object(__Constructor()) {}
	explicit FileSystemProvider(jobject o) : ::java::lang::Object(o) {}
	FileSystemProvider(const FileSystemProvider& o)  : ::java::lang::Object(o) {}

};

}}}}

namespace java { namespace nio { namespace file { 
struct AccessMode : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::java::nio::file::AccessMode& fEXECUTE();
	static ::java::nio::file::AccessMode& fREAD();
	static ::java::nio::file::AccessMode& fWRITE();
	static ::java::nio::file::AccessMode ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::java::nio::file::AccessMode > Values();
	explicit AccessMode(jobject o) : ::java::lang::Enum(o) {}
	AccessMode(const AccessMode& o)  : ::java::lang::Enum(o) {}

};

struct CopyOption : java::lang::Object
{
	static jni::Class __CLASS;

	explicit CopyOption(jobject o) : java::lang::Object(o) {}
	CopyOption(const CopyOption& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::nio::file::CopyOption();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
	};
};

}}}

namespace java { namespace nio { namespace file { namespace attribute { 
struct FileAttribute : java::lang::Object
{
	static jni::Class __CLASS;

	::java::lang::String Name() const;
	::java::lang::Object Value() const;
	explicit FileAttribute(jobject o) : java::lang::Object(o) {}
	FileAttribute(const FileAttribute& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::nio::file::attribute::FileAttribute();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::lang::String Name() = 0;
		virtual ::java::lang::Object Value() = 0;
	};
};

}}}}

namespace java { namespace nio { namespace file { 
struct LinkOption : ::java::lang::Enum
{
	static jni::Class __CLASS;

	operator ::java::nio::file::OpenOption();
	operator ::java::nio::file::CopyOption();
	static ::java::nio::file::LinkOption& fNOFOLLOW_LINKS();
	static ::java::nio::file::LinkOption ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::java::nio::file::LinkOption > Values();
	explicit LinkOption(jobject o) : ::java::lang::Enum(o) {}
	LinkOption(const LinkOption& o)  : ::java::lang::Enum(o) {}

};

struct OpenOption : java::lang::Object
{
	static jni::Class __CLASS;

	explicit OpenOption(jobject o) : java::lang::Object(o) {}
	OpenOption(const OpenOption& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::nio::file::OpenOption();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
	};
};

}}}

namespace java { namespace nio { namespace file { namespace attribute { 
struct FileAttributeView : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::nio::file::attribute::AttributeView();
	explicit FileAttributeView(jobject o) : java::lang::Object(o) {}
	FileAttributeView(const FileAttributeView& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::nio::file::attribute::FileAttributeView();
		operator ::java::nio::file::attribute::AttributeView();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
	};
};

struct AttributeView : java::lang::Object
{
	static jni::Class __CLASS;

	::java::lang::String Name() const;
	explicit AttributeView(jobject o) : java::lang::Object(o) {}
	AttributeView(const AttributeView& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::nio::file::attribute::AttributeView();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::lang::String Name() = 0;
	};
};

}}}}

namespace java { namespace nio { namespace file { 
struct FileStore : ::java::lang::Object
{
	static jni::Class __CLASS;

	::java::lang::Object GetAttribute(const ::java::lang::String& arg0) const;
	::jlong GetBlockSize() const;
	::java::nio::file::attribute::FileStoreAttributeView GetFileStoreAttributeView(const ::java::lang::Class& arg0) const;
	::jlong GetTotalSpace() const;
	::jlong GetUnallocatedSpace() const;
	::jlong GetUsableSpace() const;
	::jboolean IsReadOnly() const;
	::java::lang::String Name() const;
	::jboolean SupportsFileAttributeView(const ::java::lang::Class& arg0) const;
	::jboolean SupportsFileAttributeView(const ::java::lang::String& arg0) const;
	::java::lang::String Type() const;
	static jobject __Constructor();
	FileStore() : ::java::lang::Object(__Constructor()) {}
	explicit FileStore(jobject o) : ::java::lang::Object(o) {}
	FileStore(const FileStore& o)  : ::java::lang::Object(o) {}

};

}}}

namespace java { namespace nio { namespace file { namespace attribute { 
struct FileStoreAttributeView : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::nio::file::attribute::AttributeView();
	explicit FileStoreAttributeView(jobject o) : java::lang::Object(o) {}
	FileStoreAttributeView(const FileStoreAttributeView& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::nio::file::attribute::FileStoreAttributeView();
		operator ::java::nio::file::attribute::AttributeView();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
	};
};

}}}}

namespace java { namespace net { 
struct URI : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::Comparable();
	operator ::java::io::Serializable();
	::jint CompareTo(const ::java::net::URI& arg0) const;
	static ::java::net::URI Create(const ::java::lang::String& arg0);
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::lang::String GetAuthority() const;
	::java::lang::String GetFragment() const;
	::java::lang::String GetHost() const;
	::java::lang::String GetPath() const;
	::jint GetPort() const;
	::java::lang::String GetQuery() const;
	::java::lang::String GetRawAuthority() const;
	::java::lang::String GetRawFragment() const;
	::java::lang::String GetRawPath() const;
	::java::lang::String GetRawQuery() const;
	::java::lang::String GetRawSchemeSpecificPart() const;
	::java::lang::String GetRawUserInfo() const;
	::java::lang::String GetScheme() const;
	::java::lang::String GetSchemeSpecificPart() const;
	::java::lang::String GetUserInfo() const;
	::jint HashCode() const;
	::jboolean IsAbsolute() const;
	::jboolean IsOpaque() const;
	::java::net::URI Normalize() const;
	::java::net::URI ParseServerAuthority() const;
	::java::net::URI Relativize(const ::java::net::URI& arg0) const;
	::java::net::URI Resolve(const ::java::lang::String& arg0) const;
	::java::net::URI Resolve(const ::java::net::URI& arg0) const;
	::java::lang::String ToASCIIString() const;
	::java::lang::String ToString() const;
	::java::net::URL ToURL() const;
	static jobject __Constructor(const ::java::lang::String& arg0);
	URI(const ::java::lang::String& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2);
	URI(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2) : ::java::lang::Object(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2, const ::jint& arg3, const ::java::lang::String& arg4, const ::java::lang::String& arg5, const ::java::lang::String& arg6);
	URI(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2, const ::jint& arg3, const ::java::lang::String& arg4, const ::java::lang::String& arg5, const ::java::lang::String& arg6) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3, arg4, arg5, arg6)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2, const ::java::lang::String& arg3);
	URI(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2, const ::java::lang::String& arg3) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2, const ::java::lang::String& arg3, const ::java::lang::String& arg4);
	URI(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2, const ::java::lang::String& arg3, const ::java::lang::String& arg4) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3, arg4)) {}
	explicit URI(jobject o) : ::java::lang::Object(o) {}
	URI(const URI& o)  : ::java::lang::Object(o) {}

};

struct URL : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Serializable();
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::lang::String GetAuthority() const;
	::java::lang::Object GetContent() const;
	::java::lang::Object GetContent(const jni::Array< ::java::lang::Class >& arg0) const;
	::jint GetDefaultPort() const;
	::java::lang::String GetFile() const;
	::java::lang::String GetHost() const;
	::java::lang::String GetPath() const;
	::jint GetPort() const;
	::java::lang::String GetProtocol() const;
	::java::lang::String GetQuery() const;
	::java::lang::String GetRef() const;
	::java::lang::String GetUserInfo() const;
	::jint HashCode() const;
	::java::net::URLConnection OpenConnection() const;
	::java::net::URLConnection OpenConnection(const ::java::net::Proxy& arg0) const;
	::java::io::InputStream OpenStream() const;
	::jboolean SameFile(const ::java::net::URL& arg0) const;
	static ::jvoid SetURLStreamHandlerFactory(const ::java::net::URLStreamHandlerFactory& arg0);
	::java::lang::String ToExternalForm() const;
	::java::lang::String ToString() const;
	::java::net::URI ToURI() const;
	static jobject __Constructor(const ::java::lang::String& arg0);
	URL(const ::java::lang::String& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::jint& arg2, const ::java::lang::String& arg3);
	URL(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::jint& arg2, const ::java::lang::String& arg3) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::jint& arg2, const ::java::lang::String& arg3, const ::java::net::URLStreamHandler& arg4);
	URL(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::jint& arg2, const ::java::lang::String& arg3, const ::java::net::URLStreamHandler& arg4) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3, arg4)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2);
	URL(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2) : ::java::lang::Object(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::java::net::URL& arg0, const ::java::lang::String& arg1);
	URL(const ::java::net::URL& arg0, const ::java::lang::String& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::net::URL& arg0, const ::java::lang::String& arg1, const ::java::net::URLStreamHandler& arg2);
	URL(const ::java::net::URL& arg0, const ::java::lang::String& arg1, const ::java::net::URLStreamHandler& arg2) : ::java::lang::Object(__Constructor(arg0, arg1, arg2)) {}
	explicit URL(jobject o) : ::java::lang::Object(o) {}
	URL(const URL& o)  : ::java::lang::Object(o) {}

};

struct URLConnection : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean fAllowUserInteraction() const;
	void fAllowUserInteraction(const ::jboolean& arg0) const;
	::jboolean fConnected() const;
	void fConnected(const ::jboolean& arg0) const;
	::jboolean fDoInput() const;
	void fDoInput(const ::jboolean& arg0) const;
	::jboolean fDoOutput() const;
	void fDoOutput(const ::jboolean& arg0) const;
	::jlong fIfModifiedSince() const;
	void fIfModifiedSince(const ::jlong& arg0) const;
	::java::net::URL fUrl() const;
	void fUrl(const ::java::net::URL& arg0) const;
	::jboolean fUseCaches() const;
	void fUseCaches(const ::jboolean& arg0) const;
	::jvoid AddRequestProperty(const ::java::lang::String& arg0, const ::java::lang::String& arg1) const;
	::jvoid Connect() const;
	::jboolean GetAllowUserInteraction() const;
	::jint GetConnectTimeout() const;
	::java::lang::Object GetContent() const;
	::java::lang::Object GetContent(const jni::Array< ::java::lang::Class >& arg0) const;
	::java::lang::String GetContentEncoding() const;
	::jint GetContentLength() const;
	::jlong GetContentLengthLong() const;
	::java::lang::String GetContentType() const;
	::jlong GetDate() const;
	static ::jboolean GetDefaultAllowUserInteraction();
	static ::java::lang::String GetDefaultRequestProperty(const ::java::lang::String& arg0);
	::jboolean GetDefaultUseCaches() const;
	static ::jboolean GetDefaultUseCaches(const ::java::lang::String& arg0);
	::jboolean GetDoInput() const;
	::jboolean GetDoOutput() const;
	::jlong GetExpiration() const;
	static ::java::net::FileNameMap GetFileNameMap();
	::java::lang::String GetHeaderField(const ::jint& arg0) const;
	::java::lang::String GetHeaderField(const ::java::lang::String& arg0) const;
	::jlong GetHeaderFieldDate(const ::java::lang::String& arg0, const ::jlong& arg1) const;
	::jint GetHeaderFieldInt(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::java::lang::String GetHeaderFieldKey(const ::jint& arg0) const;
	::jlong GetHeaderFieldLong(const ::java::lang::String& arg0, const ::jlong& arg1) const;
	::java::util::Map GetHeaderFields() const;
	::jlong GetIfModifiedSince() const;
	::java::io::InputStream GetInputStream() const;
	::jlong GetLastModified() const;
	::java::io::OutputStream GetOutputStream() const;
	::java::security::Permission GetPermission() const;
	::jint GetReadTimeout() const;
	::java::util::Map GetRequestProperties() const;
	::java::lang::String GetRequestProperty(const ::java::lang::String& arg0) const;
	::java::net::URL GetURL() const;
	::jboolean GetUseCaches() const;
	static ::java::lang::String GuessContentTypeFromName(const ::java::lang::String& arg0);
	static ::java::lang::String GuessContentTypeFromStream(const ::java::io::InputStream& arg0);
	::jvoid SetAllowUserInteraction(const ::jboolean& arg0) const;
	::jvoid SetConnectTimeout(const ::jint& arg0) const;
	static ::jvoid SetContentHandlerFactory(const ::java::net::ContentHandlerFactory& arg0);
	static ::jvoid SetDefaultAllowUserInteraction(const ::jboolean& arg0);
	static ::jvoid SetDefaultRequestProperty(const ::java::lang::String& arg0, const ::java::lang::String& arg1);
	static ::jvoid SetDefaultUseCaches(const ::java::lang::String& arg0, const ::jboolean& arg1);
	::jvoid SetDefaultUseCaches(const ::jboolean& arg0) const;
	::jvoid SetDoInput(const ::jboolean& arg0) const;
	::jvoid SetDoOutput(const ::jboolean& arg0) const;
	static ::jvoid SetFileNameMap(const ::java::net::FileNameMap& arg0);
	::jvoid SetIfModifiedSince(const ::jlong& arg0) const;
	::jvoid SetReadTimeout(const ::jint& arg0) const;
	::jvoid SetRequestProperty(const ::java::lang::String& arg0, const ::java::lang::String& arg1) const;
	::jvoid SetUseCaches(const ::jboolean& arg0) const;
	::java::lang::String ToString() const;
	static jobject __Constructor(const ::java::net::URL& arg0);
	URLConnection(const ::java::net::URL& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit URLConnection(jobject o) : ::java::lang::Object(o) {}
	URLConnection(const URLConnection& o)  : ::java::lang::Object(o) {}

};

struct FileNameMap : java::lang::Object
{
	static jni::Class __CLASS;

	::java::lang::String GetContentTypeFor(const ::java::lang::String& arg0) const;
	explicit FileNameMap(jobject o) : java::lang::Object(o) {}
	FileNameMap(const FileNameMap& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::net::FileNameMap();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::lang::String GetContentTypeFor(const ::java::lang::String& arg0) = 0;
	};
};

}}

namespace java { namespace io { 
struct InputStream : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Closeable();
	::jint Available() const;
	::jvoid Close() const;
	::jvoid Mark(const ::jint& arg0) const;
	::jboolean MarkSupported() const;
	static ::java::io::InputStream NullInputStream();
	::jint Read() const;
	::jint Read(const jni::Array< ::jbyte >& arg0) const;
	::jint Read(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	jni::Array< ::jbyte > ReadAllBytes() const;
	jni::Array< ::jbyte > ReadNBytes(const ::jint& arg0) const;
	::jint ReadNBytes(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jvoid Reset() const;
	::jlong Skip(const ::jlong& arg0) const;
	::jlong TransferTo(const ::java::io::OutputStream& arg0) const;
	static jobject __Constructor();
	InputStream() : ::java::lang::Object(__Constructor()) {}
	explicit InputStream(jobject o) : ::java::lang::Object(o) {}
	InputStream(const InputStream& o)  : ::java::lang::Object(o) {}

};

}}

namespace java { namespace net { 
struct ContentHandlerFactory : java::lang::Object
{
	static jni::Class __CLASS;

	::java::net::ContentHandler CreateContentHandler(const ::java::lang::String& arg0) const;
	explicit ContentHandlerFactory(jobject o) : java::lang::Object(o) {}
	ContentHandlerFactory(const ContentHandlerFactory& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::net::ContentHandlerFactory();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::net::ContentHandler CreateContentHandler(const ::java::lang::String& arg0) = 0;
	};
};

struct ContentHandler : ::java::lang::Object
{
	static jni::Class __CLASS;

	::java::lang::Object GetContent(const ::java::net::URLConnection& arg0) const;
	::java::lang::Object GetContent(const ::java::net::URLConnection& arg0, const jni::Array< ::java::lang::Class >& arg1) const;
	static jobject __Constructor();
	ContentHandler() : ::java::lang::Object(__Constructor()) {}
	explicit ContentHandler(jobject o) : ::java::lang::Object(o) {}
	ContentHandler(const ContentHandler& o)  : ::java::lang::Object(o) {}

};

struct Proxy : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::java::net::Proxy& fNO_PROXY();
	::java::net::SocketAddress Address() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint HashCode() const;
	::java::lang::String ToString() const;
	::java::net::Proxy_Type Type() const;
	static jobject __Constructor(const ::java::net::Proxy_Type& arg0, const ::java::net::SocketAddress& arg1);
	Proxy(const ::java::net::Proxy_Type& arg0, const ::java::net::SocketAddress& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit Proxy(jobject o) : ::java::lang::Object(o) {}
	Proxy(const Proxy& o)  : ::java::lang::Object(o) {}

};

struct SocketAddress : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Serializable();
	static jobject __Constructor();
	SocketAddress() : ::java::lang::Object(__Constructor()) {}
	explicit SocketAddress(jobject o) : ::java::lang::Object(o) {}
	SocketAddress(const SocketAddress& o)  : ::java::lang::Object(o) {}

};

struct Proxy_Type : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::java::net::Proxy_Type& fDIRECT();
	static ::java::net::Proxy_Type& fHTTP();
	static ::java::net::Proxy_Type& fSOCKS();
	static ::java::net::Proxy_Type ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::java::net::Proxy_Type > Values();
	explicit Proxy_Type(jobject o) : ::java::lang::Enum(o) {}
	Proxy_Type(const Proxy_Type& o)  : ::java::lang::Enum(o) {}

};

struct URLStreamHandlerFactory : java::lang::Object
{
	static jni::Class __CLASS;

	::java::net::URLStreamHandler CreateURLStreamHandler(const ::java::lang::String& arg0) const;
	explicit URLStreamHandlerFactory(jobject o) : java::lang::Object(o) {}
	URLStreamHandlerFactory(const URLStreamHandlerFactory& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::net::URLStreamHandlerFactory();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::net::URLStreamHandler CreateURLStreamHandler(const ::java::lang::String& arg0) = 0;
	};
};

struct URLStreamHandler : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean Equals(const ::java::net::URL& arg0, const ::java::net::URL& arg1) const;
	::jint GetDefaultPort() const;
	::java::net::InetAddress GetHostAddress(const ::java::net::URL& arg0) const;
	::jint HashCode(const ::java::net::URL& arg0) const;
	::jboolean HostsEqual(const ::java::net::URL& arg0, const ::java::net::URL& arg1) const;
	::java::net::URLConnection OpenConnection(const ::java::net::URL& arg0) const;
	::java::net::URLConnection OpenConnection(const ::java::net::URL& arg0, const ::java::net::Proxy& arg1) const;
	::jvoid ParseURL(const ::java::net::URL& arg0, const ::java::lang::String& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jboolean SameFile(const ::java::net::URL& arg0, const ::java::net::URL& arg1) const;
	::jvoid SetURL(const ::java::net::URL& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2, const ::jint& arg3, const ::java::lang::String& arg4, const ::java::lang::String& arg5) const;
	::jvoid SetURL(const ::java::net::URL& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2, const ::jint& arg3, const ::java::lang::String& arg4, const ::java::lang::String& arg5, const ::java::lang::String& arg6, const ::java::lang::String& arg7, const ::java::lang::String& arg8) const;
	::java::lang::String ToExternalForm(const ::java::net::URL& arg0) const;
	static jobject __Constructor();
	URLStreamHandler() : ::java::lang::Object(__Constructor()) {}
	explicit URLStreamHandler(jobject o) : ::java::lang::Object(o) {}
	URLStreamHandler(const URLStreamHandler& o)  : ::java::lang::Object(o) {}

};

struct InetAddress : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Serializable();
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	jni::Array< ::jbyte > GetAddress() const;
	static jni::Array< ::java::net::InetAddress > GetAllByName(const ::java::lang::String& arg0);
	static ::java::net::InetAddress GetByAddress(const ::java::lang::String& arg0, const jni::Array< ::jbyte >& arg1);
	static ::java::net::InetAddress GetByAddress(const jni::Array< ::jbyte >& arg0);
	static ::java::net::InetAddress GetByName(const ::java::lang::String& arg0);
	::java::lang::String GetCanonicalHostName() const;
	::java::lang::String GetHostAddress() const;
	::java::lang::String GetHostName() const;
	static ::java::net::InetAddress GetLocalHost();
	static ::java::net::InetAddress GetLoopbackAddress();
	::jint HashCode() const;
	::jboolean IsAnyLocalAddress() const;
	::jboolean IsLinkLocalAddress() const;
	::jboolean IsLoopbackAddress() const;
	::jboolean IsMCGlobal() const;
	::jboolean IsMCLinkLocal() const;
	::jboolean IsMCNodeLocal() const;
	::jboolean IsMCOrgLocal() const;
	::jboolean IsMCSiteLocal() const;
	::jboolean IsMulticastAddress() const;
	::jboolean IsReachable(const ::jint& arg0) const;
	::jboolean IsReachable(const ::java::net::NetworkInterface& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jboolean IsSiteLocalAddress() const;
	::java::lang::String ToString() const;
	explicit InetAddress(jobject o) : ::java::lang::Object(o) {}
	InetAddress(const InetAddress& o)  : ::java::lang::Object(o) {}

};

struct NetworkInterface : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean Equals(const ::java::lang::Object& arg0) const;
	static ::java::net::NetworkInterface GetByIndex(const ::jint& arg0);
	static ::java::net::NetworkInterface GetByInetAddress(const ::java::net::InetAddress& arg0);
	static ::java::net::NetworkInterface GetByName(const ::java::lang::String& arg0);
	::java::lang::String GetDisplayName() const;
	jni::Array< ::jbyte > GetHardwareAddress() const;
	::jint GetIndex() const;
	::java::util::Enumeration GetInetAddresses() const;
	::java::util::List GetInterfaceAddresses() const;
	::jint GetMTU() const;
	::java::lang::String GetName() const;
	static ::java::util::Enumeration GetNetworkInterfaces();
	::java::net::NetworkInterface GetParent() const;
	::java::util::Enumeration GetSubInterfaces() const;
	::jint HashCode() const;
	::java::util::stream::Stream InetAddresses() const;
	::jboolean IsLoopback() const;
	::jboolean IsPointToPoint() const;
	::jboolean IsUp() const;
	::jboolean IsVirtual() const;
	static ::java::util::stream::Stream NetworkInterfaces();
	::java::util::stream::Stream SubInterfaces() const;
	::jboolean SupportsMulticast() const;
	::java::lang::String ToString() const;
	explicit NetworkInterface(jobject o) : ::java::lang::Object(o) {}
	NetworkInterface(const NetworkInterface& o)  : ::java::lang::Object(o) {}

};

}}

namespace java { namespace util { namespace concurrent { 
struct ExecutorService : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::util::concurrent::Executor();
	::jboolean AwaitTermination(const ::jlong& arg0, const ::java::util::concurrent::TimeUnit& arg1) const;
	::java::util::List InvokeAll(const ::java::util::Collection& arg0) const;
	::java::util::List InvokeAll(const ::java::util::Collection& arg0, const ::jlong& arg1, const ::java::util::concurrent::TimeUnit& arg2) const;
	::java::lang::Object InvokeAny(const ::java::util::Collection& arg0) const;
	::java::lang::Object InvokeAny(const ::java::util::Collection& arg0, const ::jlong& arg1, const ::java::util::concurrent::TimeUnit& arg2) const;
	::jboolean IsShutdown() const;
	::jboolean IsTerminated() const;
	::jvoid Shutdown() const;
	::java::util::List ShutdownNow() const;
	::java::util::concurrent::Future Submit(const ::java::lang::Runnable& arg0) const;
	::java::util::concurrent::Future Submit(const ::java::lang::Runnable& arg0, const ::java::lang::Object& arg1) const;
	::java::util::concurrent::Future Submit(const ::java::util::concurrent::Callable& arg0) const;
	explicit ExecutorService(jobject o) : java::lang::Object(o) {}
	ExecutorService(const ExecutorService& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::concurrent::ExecutorService();
		operator ::java::util::concurrent::Executor();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean AwaitTermination(const ::jlong& arg0, const ::java::util::concurrent::TimeUnit& arg1) = 0;
		virtual ::java::util::List InvokeAll(const ::java::util::Collection& arg0) = 0;
		virtual ::java::util::List InvokeAll(const ::java::util::Collection& arg0, const ::jlong& arg1, const ::java::util::concurrent::TimeUnit& arg2) = 0;
		virtual ::java::lang::Object InvokeAny(const ::java::util::Collection& arg0) = 0;
		virtual ::java::lang::Object InvokeAny(const ::java::util::Collection& arg0, const ::jlong& arg1, const ::java::util::concurrent::TimeUnit& arg2) = 0;
		virtual ::jboolean IsShutdown() = 0;
		virtual ::jboolean IsTerminated() = 0;
		virtual void Shutdown() = 0;
		virtual ::java::util::List ShutdownNow() = 0;
		virtual ::java::util::concurrent::Future Submit(const ::java::lang::Runnable& arg0) = 0;
		virtual ::java::util::concurrent::Future Submit(const ::java::lang::Runnable& arg0, const ::java::lang::Object& arg1) = 0;
		virtual ::java::util::concurrent::Future Submit(const ::java::util::concurrent::Callable& arg0) = 0;
	};
};

struct Executor : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid Execute(const ::java::lang::Runnable& arg0) const;
	explicit Executor(jobject o) : java::lang::Object(o) {}
	Executor(const Executor& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::concurrent::Executor();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void Execute(const ::java::lang::Runnable& arg0) = 0;
	};
};

struct Future : java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean Cancel(const ::jboolean& arg0) const;
	::java::lang::Object Get() const;
	::java::lang::Object Get(const ::jlong& arg0, const ::java::util::concurrent::TimeUnit& arg1) const;
	::jboolean IsCancelled() const;
	::jboolean IsDone() const;
	explicit Future(jobject o) : java::lang::Object(o) {}
	Future(const Future& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::concurrent::Future();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean Cancel(const ::jboolean& arg0) = 0;
		virtual ::java::lang::Object Get() = 0;
		virtual ::java::lang::Object Get(const ::jlong& arg0, const ::java::util::concurrent::TimeUnit& arg1) = 0;
		virtual ::jboolean IsCancelled() = 0;
		virtual ::jboolean IsDone() = 0;
	};
};

struct Callable : java::lang::Object
{
	static jni::Class __CLASS;

	::java::lang::Object Call() const;
	explicit Callable(jobject o) : java::lang::Object(o) {}
	Callable(const Callable& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::concurrent::Callable();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::lang::Object Call() = 0;
	};
};

}}}

namespace java { namespace nio { namespace channels { 
struct AsynchronousFileChannel : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::nio::channels::AsynchronousChannel();
	::jvoid Force(const ::jboolean& arg0) const;
	::java::util::concurrent::Future Lock() const;
	::java::util::concurrent::Future Lock(const ::jlong& arg0, const ::jlong& arg1, const ::jboolean& arg2) const;
	::jvoid Lock(const ::jlong& arg0, const ::jlong& arg1, const ::jboolean& arg2, const ::java::lang::Object& arg3, const ::java::nio::channels::CompletionHandler& arg4) const;
	::jvoid Lock(const ::java::lang::Object& arg0, const ::java::nio::channels::CompletionHandler& arg1) const;
	static ::java::nio::channels::AsynchronousFileChannel Open(const ::java::nio::file::Path& arg0, const ::java::util::Set& arg1, const ::java::util::concurrent::ExecutorService& arg2, const jni::Array< ::java::nio::file::attribute::FileAttribute >& arg3);
	static ::java::nio::channels::AsynchronousFileChannel Open(const ::java::nio::file::Path& arg0, const jni::Array< ::java::nio::file::OpenOption >& arg1);
	::java::util::concurrent::Future Read(const ::java::nio::ByteBuffer& arg0, const ::jlong& arg1) const;
	::jvoid Read(const ::java::nio::ByteBuffer& arg0, const ::jlong& arg1, const ::java::lang::Object& arg2, const ::java::nio::channels::CompletionHandler& arg3) const;
	::jlong Size() const;
	::java::nio::channels::AsynchronousFileChannel Truncate(const ::jlong& arg0) const;
	::java::nio::channels::FileLock TryLock() const;
	::java::nio::channels::FileLock TryLock(const ::jlong& arg0, const ::jlong& arg1, const ::jboolean& arg2) const;
	::java::util::concurrent::Future Write(const ::java::nio::ByteBuffer& arg0, const ::jlong& arg1) const;
	::jvoid Write(const ::java::nio::ByteBuffer& arg0, const ::jlong& arg1, const ::java::lang::Object& arg2, const ::java::nio::channels::CompletionHandler& arg3) const;
	static jobject __Constructor();
	AsynchronousFileChannel() : ::java::lang::Object(__Constructor()) {}
	explicit AsynchronousFileChannel(jobject o) : ::java::lang::Object(o) {}
	AsynchronousFileChannel(const AsynchronousFileChannel& o)  : ::java::lang::Object(o) {}

};

struct AsynchronousChannel : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::nio::channels::Channel();
	::jvoid Close() const;
	explicit AsynchronousChannel(jobject o) : java::lang::Object(o) {}
	AsynchronousChannel(const AsynchronousChannel& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::nio::channels::AsynchronousChannel();
		operator ::java::nio::channels::Channel();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void Close() = 0;
	};
};

struct Channel : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Closeable();
	::jvoid Close() const;
	::jboolean IsOpen() const;
	explicit Channel(jobject o) : java::lang::Object(o) {}
	Channel(const Channel& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::nio::channels::Channel();
		operator ::java::io::Closeable();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void Close() = 0;
		virtual ::jboolean IsOpen() = 0;
	};
};

struct CompletionHandler : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid Completed(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) const;
	::jvoid Failed(const ::java::lang::Throwable& arg0, const ::java::lang::Object& arg1) const;
	explicit CompletionHandler(jobject o) : java::lang::Object(o) {}
	CompletionHandler(const CompletionHandler& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::nio::channels::CompletionHandler();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void Completed(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) = 0;
		virtual void Failed(const ::java::lang::Throwable& arg0, const ::java::lang::Object& arg1) = 0;
	};
};

struct FileLock : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::AutoCloseable();
	::java::nio::channels::Channel AcquiredBy() const;
	::java::nio::channels::FileChannel Channel() const;
	::jvoid Close() const;
	::jboolean IsShared() const;
	::jboolean IsValid() const;
	::jboolean Overlaps(const ::jlong& arg0, const ::jlong& arg1) const;
	::jlong Position() const;
	::jvoid Release() const;
	::jlong Size() const;
	::java::lang::String ToString() const;
	static jobject __Constructor(const ::java::nio::channels::AsynchronousFileChannel& arg0, const ::jlong& arg1, const ::jlong& arg2, const ::jboolean& arg3);
	FileLock(const ::java::nio::channels::AsynchronousFileChannel& arg0, const ::jlong& arg1, const ::jlong& arg2, const ::jboolean& arg3) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3)) {}
	static jobject __Constructor(const ::java::nio::channels::FileChannel& arg0, const ::jlong& arg1, const ::jlong& arg2, const ::jboolean& arg3);
	FileLock(const ::java::nio::channels::FileChannel& arg0, const ::jlong& arg1, const ::jlong& arg2, const ::jboolean& arg3) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3)) {}
	explicit FileLock(jobject o) : ::java::lang::Object(o) {}
	FileLock(const FileLock& o)  : ::java::lang::Object(o) {}

};

}}}

namespace java { namespace nio { namespace channels { namespace spi { 
struct AbstractInterruptibleChannel : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::nio::channels::Channel();
	operator ::java::nio::channels::InterruptibleChannel();
	::jvoid Begin() const;
	::jvoid Close() const;
	::jvoid End(const ::jboolean& arg0) const;
	::jvoid ImplCloseChannel() const;
	::jboolean IsOpen() const;
	static jobject __Constructor();
	AbstractInterruptibleChannel() : ::java::lang::Object(__Constructor()) {}
	explicit AbstractInterruptibleChannel(jobject o) : ::java::lang::Object(o) {}
	AbstractInterruptibleChannel(const AbstractInterruptibleChannel& o)  : ::java::lang::Object(o) {}

};

}}}}

namespace java { namespace nio { namespace channels { 
struct FileChannel : ::java::nio::channels::spi::AbstractInterruptibleChannel
{
	static jni::Class __CLASS;

	operator ::java::nio::channels::SeekableByteChannel();
	operator ::java::nio::channels::GatheringByteChannel();
	operator ::java::nio::channels::ScatteringByteChannel();
	::jvoid Force(const ::jboolean& arg0) const;
	::java::nio::channels::FileLock Lock() const;
	::java::nio::channels::FileLock Lock(const ::jlong& arg0, const ::jlong& arg1, const ::jboolean& arg2) const;
	::java::nio::MappedByteBuffer Map(const ::java::nio::channels::FileChannel_MapMode& arg0, const ::jlong& arg1, const ::jlong& arg2) const;
	static ::java::nio::channels::FileChannel Open(const ::java::nio::file::Path& arg0, const ::java::util::Set& arg1, const jni::Array< ::java::nio::file::attribute::FileAttribute >& arg2);
	static ::java::nio::channels::FileChannel Open(const ::java::nio::file::Path& arg0, const jni::Array< ::java::nio::file::OpenOption >& arg1);
	::jlong Position() const;
	::java::nio::channels::FileChannel Position(const ::jlong& arg0) const;
	::jint Read(const ::java::nio::ByteBuffer& arg0) const;
	::jint Read(const ::java::nio::ByteBuffer& arg0, const ::jlong& arg1) const;
	::jlong Read(const jni::Array< ::java::nio::ByteBuffer >& arg0) const;
	::jlong Read(const jni::Array< ::java::nio::ByteBuffer >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jlong Size() const;
	::jlong TransferFrom(const ::java::nio::channels::ReadableByteChannel& arg0, const ::jlong& arg1, const ::jlong& arg2) const;
	::jlong TransferTo(const ::jlong& arg0, const ::jlong& arg1, const ::java::nio::channels::WritableByteChannel& arg2) const;
	::java::nio::channels::FileChannel Truncate(const ::jlong& arg0) const;
	::java::nio::channels::FileLock TryLock() const;
	::java::nio::channels::FileLock TryLock(const ::jlong& arg0, const ::jlong& arg1, const ::jboolean& arg2) const;
	::jint Write(const ::java::nio::ByteBuffer& arg0) const;
	::jint Write(const ::java::nio::ByteBuffer& arg0, const ::jlong& arg1) const;
	::jlong Write(const jni::Array< ::java::nio::ByteBuffer >& arg0) const;
	::jlong Write(const jni::Array< ::java::nio::ByteBuffer >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	static jobject __Constructor();
	FileChannel() : ::java::nio::channels::spi::AbstractInterruptibleChannel(__Constructor()) {}
	explicit FileChannel(jobject o) : ::java::nio::channels::spi::AbstractInterruptibleChannel(o) {}
	FileChannel(const FileChannel& o)  : ::java::nio::channels::spi::AbstractInterruptibleChannel(o) {}

};

struct InterruptibleChannel : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::nio::channels::Channel();
	::jvoid Close() const;
	explicit InterruptibleChannel(jobject o) : java::lang::Object(o) {}
	InterruptibleChannel(const InterruptibleChannel& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::nio::channels::InterruptibleChannel();
		operator ::java::nio::channels::Channel();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void Close() = 0;
	};
};

struct SeekableByteChannel : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::nio::channels::ByteChannel();
	::jlong Position() const;
	::java::nio::channels::SeekableByteChannel Position(const ::jlong& arg0) const;
	::jint Read(const ::java::nio::ByteBuffer& arg0) const;
	::jlong Size() const;
	::java::nio::channels::SeekableByteChannel Truncate(const ::jlong& arg0) const;
	::jint Write(const ::java::nio::ByteBuffer& arg0) const;
	explicit SeekableByteChannel(jobject o) : java::lang::Object(o) {}
	SeekableByteChannel(const SeekableByteChannel& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::nio::channels::SeekableByteChannel();
		operator ::java::nio::channels::ByteChannel();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jlong Position() = 0;
		virtual ::java::nio::channels::SeekableByteChannel Position(const ::jlong& arg0) = 0;
		virtual ::jint Read(const ::java::nio::ByteBuffer& arg0) = 0;
		virtual ::jlong Size() = 0;
		virtual ::java::nio::channels::SeekableByteChannel Truncate(const ::jlong& arg0) = 0;
		virtual ::jint Write(const ::java::nio::ByteBuffer& arg0) = 0;
	};
};

struct ByteChannel : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::nio::channels::ReadableByteChannel();
	operator ::java::nio::channels::WritableByteChannel();
	explicit ByteChannel(jobject o) : java::lang::Object(o) {}
	ByteChannel(const ByteChannel& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::nio::channels::ByteChannel();
		operator ::java::nio::channels::ReadableByteChannel();
		operator ::java::nio::channels::WritableByteChannel();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
	};
};

struct ReadableByteChannel : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::nio::channels::Channel();
	::jint Read(const ::java::nio::ByteBuffer& arg0) const;
	explicit ReadableByteChannel(jobject o) : java::lang::Object(o) {}
	ReadableByteChannel(const ReadableByteChannel& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::nio::channels::ReadableByteChannel();
		operator ::java::nio::channels::Channel();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jint Read(const ::java::nio::ByteBuffer& arg0) = 0;
	};
};

struct WritableByteChannel : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::nio::channels::Channel();
	::jint Write(const ::java::nio::ByteBuffer& arg0) const;
	explicit WritableByteChannel(jobject o) : java::lang::Object(o) {}
	WritableByteChannel(const WritableByteChannel& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::nio::channels::WritableByteChannel();
		operator ::java::nio::channels::Channel();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jint Write(const ::java::nio::ByteBuffer& arg0) = 0;
	};
};

struct GatheringByteChannel : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::nio::channels::WritableByteChannel();
	::jlong Write(const jni::Array< ::java::nio::ByteBuffer >& arg0) const;
	::jlong Write(const jni::Array< ::java::nio::ByteBuffer >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	explicit GatheringByteChannel(jobject o) : java::lang::Object(o) {}
	GatheringByteChannel(const GatheringByteChannel& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::nio::channels::GatheringByteChannel();
		operator ::java::nio::channels::WritableByteChannel();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jlong Write(const jni::Array< ::java::nio::ByteBuffer >& arg0) = 0;
		virtual ::jlong Write(const jni::Array< ::java::nio::ByteBuffer >& arg0, const ::jint& arg1, const ::jint& arg2) = 0;
	};
};

struct ScatteringByteChannel : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::nio::channels::ReadableByteChannel();
	::jlong Read(const jni::Array< ::java::nio::ByteBuffer >& arg0) const;
	::jlong Read(const jni::Array< ::java::nio::ByteBuffer >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	explicit ScatteringByteChannel(jobject o) : java::lang::Object(o) {}
	ScatteringByteChannel(const ScatteringByteChannel& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::nio::channels::ScatteringByteChannel();
		operator ::java::nio::channels::ReadableByteChannel();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jlong Read(const jni::Array< ::java::nio::ByteBuffer >& arg0) = 0;
		virtual ::jlong Read(const jni::Array< ::java::nio::ByteBuffer >& arg0, const ::jint& arg1, const ::jint& arg2) = 0;
	};
};

struct FileChannel_MapMode : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::java::nio::channels::FileChannel_MapMode& fPRIVATE();
	static ::java::nio::channels::FileChannel_MapMode& fREAD_ONLY();
	static ::java::nio::channels::FileChannel_MapMode& fREAD_WRITE();
	::java::lang::String ToString() const;
	explicit FileChannel_MapMode(jobject o) : ::java::lang::Object(o) {}
	FileChannel_MapMode(const FileChannel_MapMode& o)  : ::java::lang::Object(o) {}

};

}}}

namespace java { namespace nio { 
struct MappedByteBuffer : ::java::nio::ByteBuffer
{
	static jni::Class __CLASS;

	::java::nio::MappedByteBuffer Clear() const;
	::java::nio::MappedByteBuffer Flip() const;
	::java::nio::MappedByteBuffer Force() const;
	::jboolean IsLoaded() const;
	::java::nio::MappedByteBuffer Limit(const ::jint& arg0) const;
	::java::nio::MappedByteBuffer Load() const;
	::java::nio::MappedByteBuffer Mark() const;
	::java::nio::MappedByteBuffer Position(const ::jint& arg0) const;
	::java::nio::MappedByteBuffer Reset() const;
	::java::nio::MappedByteBuffer Rewind() const;
	explicit MappedByteBuffer(jobject o) : ::java::nio::ByteBuffer(o) {}
	MappedByteBuffer(const MappedByteBuffer& o)  : ::java::nio::ByteBuffer(o) {}

};

}}

namespace java { namespace nio { namespace file { 
struct DirectoryStream_Filter : java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean Accept(const ::java::lang::Object& arg0) const;
	explicit DirectoryStream_Filter(jobject o) : java::lang::Object(o) {}
	DirectoryStream_Filter(const DirectoryStream_Filter& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::nio::file::DirectoryStream_Filter();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean Accept(const ::java::lang::Object& arg0) = 0;
	};
};

struct DirectoryStream : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Closeable();
	operator ::java::lang::Iterable();
	::java::util::Iterator Iterator() const;
	explicit DirectoryStream(jobject o) : java::lang::Object(o) {}
	DirectoryStream(const DirectoryStream& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::nio::file::DirectoryStream();
		operator ::java::io::Closeable();
		operator ::java::lang::Iterable();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::util::Iterator Iterator() = 0;
	};
};

}}}

namespace java { namespace nio { namespace file { namespace attribute { 
struct BasicFileAttributes : java::lang::Object
{
	static jni::Class __CLASS;

	::java::nio::file::attribute::FileTime CreationTime() const;
	::java::lang::Object FileKey() const;
	::jboolean IsDirectory() const;
	::jboolean IsOther() const;
	::jboolean IsRegularFile() const;
	::jboolean IsSymbolicLink() const;
	::java::nio::file::attribute::FileTime LastAccessTime() const;
	::java::nio::file::attribute::FileTime LastModifiedTime() const;
	::jlong Size() const;
	explicit BasicFileAttributes(jobject o) : java::lang::Object(o) {}
	BasicFileAttributes(const BasicFileAttributes& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::nio::file::attribute::BasicFileAttributes();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::nio::file::attribute::FileTime CreationTime() = 0;
		virtual ::java::lang::Object FileKey() = 0;
		virtual ::jboolean IsDirectory() = 0;
		virtual ::jboolean IsOther() = 0;
		virtual ::jboolean IsRegularFile() = 0;
		virtual ::jboolean IsSymbolicLink() = 0;
		virtual ::java::nio::file::attribute::FileTime LastAccessTime() = 0;
		virtual ::java::nio::file::attribute::FileTime LastModifiedTime() = 0;
		virtual ::jlong Size() = 0;
	};
};

struct FileTime : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::Comparable();
	::jint CompareTo(const ::java::nio::file::attribute::FileTime& arg0) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	static ::java::nio::file::attribute::FileTime From(const ::jlong& arg0, const ::java::util::concurrent::TimeUnit& arg1);
	static ::java::nio::file::attribute::FileTime From(const ::java::time::Instant& arg0);
	static ::java::nio::file::attribute::FileTime FromMillis(const ::jlong& arg0);
	::jint HashCode() const;
	::jlong To(const ::java::util::concurrent::TimeUnit& arg0) const;
	::java::time::Instant ToInstant() const;
	::jlong ToMillis() const;
	::java::lang::String ToString() const;
	explicit FileTime(jobject o) : ::java::lang::Object(o) {}
	FileTime(const FileTime& o)  : ::java::lang::Object(o) {}

};

}}}}

namespace java { namespace time { 
struct Instant : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::time::temporal::Temporal();
	operator ::java::time::temporal::TemporalAdjuster();
	operator ::java::lang::Comparable();
	operator ::java::io::Serializable();
	static ::java::time::Instant& fEPOCH();
	static ::java::time::Instant& fMAX();
	static ::java::time::Instant& fMIN();
	::java::time::temporal::Temporal AdjustInto(const ::java::time::temporal::Temporal& arg0) const;
	::java::time::OffsetDateTime AtOffset(const ::java::time::ZoneOffset& arg0) const;
	::java::time::ZonedDateTime AtZone(const ::java::time::ZoneId& arg0) const;
	::jint CompareTo(const ::java::time::Instant& arg0) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	static ::java::time::Instant From(const ::java::time::temporal::TemporalAccessor& arg0);
	::jint Get(const ::java::time::temporal::TemporalField& arg0) const;
	::jlong GetEpochSecond() const;
	::jlong GetLong(const ::java::time::temporal::TemporalField& arg0) const;
	::jint GetNano() const;
	::jint HashCode() const;
	::jboolean IsAfter(const ::java::time::Instant& arg0) const;
	::jboolean IsBefore(const ::java::time::Instant& arg0) const;
	::jboolean IsSupported(const ::java::time::temporal::TemporalField& arg0) const;
	::jboolean IsSupported(const ::java::time::temporal::TemporalUnit& arg0) const;
	::java::time::Instant Minus(const ::jlong& arg0, const ::java::time::temporal::TemporalUnit& arg1) const;
	::java::time::Instant Minus(const ::java::time::temporal::TemporalAmount& arg0) const;
	::java::time::Instant MinusMillis(const ::jlong& arg0) const;
	::java::time::Instant MinusNanos(const ::jlong& arg0) const;
	::java::time::Instant MinusSeconds(const ::jlong& arg0) const;
	static ::java::time::Instant Now();
	static ::java::time::Instant Now(const ::java::time::Clock& arg0);
	static ::java::time::Instant OfEpochMilli(const ::jlong& arg0);
	static ::java::time::Instant OfEpochSecond(const ::jlong& arg0);
	static ::java::time::Instant OfEpochSecond(const ::jlong& arg0, const ::jlong& arg1);
	static ::java::time::Instant Parse(const ::java::lang::CharSequence& arg0);
	::java::time::Instant Plus(const ::jlong& arg0, const ::java::time::temporal::TemporalUnit& arg1) const;
	::java::time::Instant Plus(const ::java::time::temporal::TemporalAmount& arg0) const;
	::java::time::Instant PlusMillis(const ::jlong& arg0) const;
	::java::time::Instant PlusNanos(const ::jlong& arg0) const;
	::java::time::Instant PlusSeconds(const ::jlong& arg0) const;
	::java::lang::Object Query(const ::java::time::temporal::TemporalQuery& arg0) const;
	::java::time::temporal::ValueRange Range(const ::java::time::temporal::TemporalField& arg0) const;
	::jlong ToEpochMilli() const;
	::java::lang::String ToString() const;
	::java::time::Instant TruncatedTo(const ::java::time::temporal::TemporalUnit& arg0) const;
	::jlong Until(const ::java::time::temporal::Temporal& arg0, const ::java::time::temporal::TemporalUnit& arg1) const;
	::java::time::Instant With(const ::java::time::temporal::TemporalAdjuster& arg0) const;
	::java::time::Instant With(const ::java::time::temporal::TemporalField& arg0, const ::jlong& arg1) const;
	explicit Instant(jobject o) : ::java::lang::Object(o) {}
	Instant(const Instant& o)  : ::java::lang::Object(o) {}

};

struct ZoneId : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Serializable();
	static ::java::util::Map& fSHORT_IDS();
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	static ::java::time::ZoneId From(const ::java::time::temporal::TemporalAccessor& arg0);
	static ::java::util::Set GetAvailableZoneIds();
	::java::lang::String GetDisplayName(const ::java::time::format::TextStyle& arg0, const ::java::util::Locale& arg1) const;
	::java::lang::String GetId() const;
	::java::time::zone::ZoneRules GetRules() const;
	::jint HashCode() const;
	::java::time::ZoneId Normalized() const;
	static ::java::time::ZoneId Of(const ::java::lang::String& arg0);
	static ::java::time::ZoneId Of(const ::java::lang::String& arg0, const ::java::util::Map& arg1);
	static ::java::time::ZoneId OfOffset(const ::java::lang::String& arg0, const ::java::time::ZoneOffset& arg1);
	static ::java::time::ZoneId SystemDefault();
	::java::lang::String ToString() const;
	explicit ZoneId(jobject o) : ::java::lang::Object(o) {}
	ZoneId(const ZoneId& o)  : ::java::lang::Object(o) {}

};

struct ZoneOffset : ::java::time::ZoneId
{
	static jni::Class __CLASS;

	operator ::java::time::temporal::TemporalAccessor();
	operator ::java::time::temporal::TemporalAdjuster();
	operator ::java::lang::Comparable();
	operator ::java::io::Serializable();
	static ::java::time::ZoneOffset& fMAX();
	static ::java::time::ZoneOffset& fMIN();
	static ::java::time::ZoneOffset& fUTC();
	::java::time::temporal::Temporal AdjustInto(const ::java::time::temporal::Temporal& arg0) const;
	::jint CompareTo(const ::java::time::ZoneOffset& arg0) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	static ::java::time::ZoneOffset From(const ::java::time::temporal::TemporalAccessor& arg0);
	::jint Get(const ::java::time::temporal::TemporalField& arg0) const;
	::java::lang::String GetId() const;
	::jlong GetLong(const ::java::time::temporal::TemporalField& arg0) const;
	::java::time::zone::ZoneRules GetRules() const;
	::jint GetTotalSeconds() const;
	::jint HashCode() const;
	::jboolean IsSupported(const ::java::time::temporal::TemporalField& arg0) const;
	static ::java::time::ZoneOffset Of(const ::java::lang::String& arg0);
	static ::java::time::ZoneOffset OfHours(const ::jint& arg0);
	static ::java::time::ZoneOffset OfHoursMinutes(const ::jint& arg0, const ::jint& arg1);
	static ::java::time::ZoneOffset OfHoursMinutesSeconds(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2);
	static ::java::time::ZoneOffset OfTotalSeconds(const ::jint& arg0);
	::java::lang::Object Query(const ::java::time::temporal::TemporalQuery& arg0) const;
	::java::time::temporal::ValueRange Range(const ::java::time::temporal::TemporalField& arg0) const;
	::java::lang::String ToString() const;
	explicit ZoneOffset(jobject o) : ::java::time::ZoneId(o) {}
	ZoneOffset(const ZoneOffset& o)  : ::java::time::ZoneId(o) {}

};

}}

namespace java { namespace time { namespace format { 
struct TextStyle : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::java::time::format::TextStyle& fFULL();
	static ::java::time::format::TextStyle& fFULL_STANDALONE();
	static ::java::time::format::TextStyle& fNARROW();
	static ::java::time::format::TextStyle& fNARROW_STANDALONE();
	static ::java::time::format::TextStyle& fSHORT();
	static ::java::time::format::TextStyle& fSHORT_STANDALONE();
	::java::time::format::TextStyle AsNormal() const;
	::java::time::format::TextStyle AsStandalone() const;
	::jboolean IsStandalone() const;
	static ::java::time::format::TextStyle ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::java::time::format::TextStyle > Values();
	explicit TextStyle(jobject o) : ::java::lang::Enum(o) {}
	TextStyle(const TextStyle& o)  : ::java::lang::Enum(o) {}

};

}}}

namespace java { namespace time { namespace zone { 
struct ZoneRules : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Serializable();
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::time::Duration GetDaylightSavings(const ::java::time::Instant& arg0) const;
	::java::time::ZoneOffset GetOffset(const ::java::time::Instant& arg0) const;
	::java::time::ZoneOffset GetOffset(const ::java::time::LocalDateTime& arg0) const;
	::java::time::ZoneOffset GetStandardOffset(const ::java::time::Instant& arg0) const;
	::java::time::zone::ZoneOffsetTransition GetTransition(const ::java::time::LocalDateTime& arg0) const;
	::java::util::List GetTransitionRules() const;
	::java::util::List GetTransitions() const;
	::java::util::List GetValidOffsets(const ::java::time::LocalDateTime& arg0) const;
	::jint HashCode() const;
	::jboolean IsDaylightSavings(const ::java::time::Instant& arg0) const;
	::jboolean IsFixedOffset() const;
	::jboolean IsValidOffset(const ::java::time::LocalDateTime& arg0, const ::java::time::ZoneOffset& arg1) const;
	::java::time::zone::ZoneOffsetTransition NextTransition(const ::java::time::Instant& arg0) const;
	static ::java::time::zone::ZoneRules Of(const ::java::time::ZoneOffset& arg0);
	static ::java::time::zone::ZoneRules Of(const ::java::time::ZoneOffset& arg0, const ::java::time::ZoneOffset& arg1, const ::java::util::List& arg2, const ::java::util::List& arg3, const ::java::util::List& arg4);
	::java::time::zone::ZoneOffsetTransition PreviousTransition(const ::java::time::Instant& arg0) const;
	::java::lang::String ToString() const;
	explicit ZoneRules(jobject o) : ::java::lang::Object(o) {}
	ZoneRules(const ZoneRules& o)  : ::java::lang::Object(o) {}

};

}}}

namespace java { namespace time { 
struct LocalDateTime : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::time::temporal::Temporal();
	operator ::java::time::temporal::TemporalAdjuster();
	operator ::java::time::chrono::ChronoLocalDateTime();
	operator ::java::io::Serializable();
	static ::java::time::LocalDateTime& fMAX();
	static ::java::time::LocalDateTime& fMIN();
	::java::time::temporal::Temporal AdjustInto(const ::java::time::temporal::Temporal& arg0) const;
	::java::time::OffsetDateTime AtOffset(const ::java::time::ZoneOffset& arg0) const;
	::java::time::ZonedDateTime AtZone(const ::java::time::ZoneId& arg0) const;
	::jint CompareTo(const ::java::time::chrono::ChronoLocalDateTime& arg0) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::lang::String Format(const ::java::time::format::DateTimeFormatter& arg0) const;
	static ::java::time::LocalDateTime From(const ::java::time::temporal::TemporalAccessor& arg0);
	::jint Get(const ::java::time::temporal::TemporalField& arg0) const;
	::jint GetDayOfMonth() const;
	::java::time::DayOfWeek GetDayOfWeek() const;
	::jint GetDayOfYear() const;
	::jint GetHour() const;
	::jlong GetLong(const ::java::time::temporal::TemporalField& arg0) const;
	::jint GetMinute() const;
	::java::time::Month GetMonth() const;
	::jint GetMonthValue() const;
	::jint GetNano() const;
	::jint GetSecond() const;
	::jint GetYear() const;
	::jint HashCode() const;
	::jboolean IsAfter(const ::java::time::chrono::ChronoLocalDateTime& arg0) const;
	::jboolean IsBefore(const ::java::time::chrono::ChronoLocalDateTime& arg0) const;
	::jboolean IsEqual(const ::java::time::chrono::ChronoLocalDateTime& arg0) const;
	::jboolean IsSupported(const ::java::time::temporal::TemporalField& arg0) const;
	::jboolean IsSupported(const ::java::time::temporal::TemporalUnit& arg0) const;
	::java::time::LocalDateTime Minus(const ::jlong& arg0, const ::java::time::temporal::TemporalUnit& arg1) const;
	::java::time::LocalDateTime Minus(const ::java::time::temporal::TemporalAmount& arg0) const;
	::java::time::LocalDateTime MinusDays(const ::jlong& arg0) const;
	::java::time::LocalDateTime MinusHours(const ::jlong& arg0) const;
	::java::time::LocalDateTime MinusMinutes(const ::jlong& arg0) const;
	::java::time::LocalDateTime MinusMonths(const ::jlong& arg0) const;
	::java::time::LocalDateTime MinusNanos(const ::jlong& arg0) const;
	::java::time::LocalDateTime MinusSeconds(const ::jlong& arg0) const;
	::java::time::LocalDateTime MinusWeeks(const ::jlong& arg0) const;
	::java::time::LocalDateTime MinusYears(const ::jlong& arg0) const;
	static ::java::time::LocalDateTime Now();
	static ::java::time::LocalDateTime Now(const ::java::time::Clock& arg0);
	static ::java::time::LocalDateTime Now(const ::java::time::ZoneId& arg0);
	static ::java::time::LocalDateTime Of(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4);
	static ::java::time::LocalDateTime Of(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5);
	static ::java::time::LocalDateTime Of(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5, const ::jint& arg6);
	static ::java::time::LocalDateTime Of(const ::jint& arg0, const ::java::time::Month& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4);
	static ::java::time::LocalDateTime Of(const ::jint& arg0, const ::java::time::Month& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5);
	static ::java::time::LocalDateTime Of(const ::jint& arg0, const ::java::time::Month& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5, const ::jint& arg6);
	static ::java::time::LocalDateTime Of(const ::java::time::LocalDate& arg0, const ::java::time::LocalTime& arg1);
	static ::java::time::LocalDateTime OfEpochSecond(const ::jlong& arg0, const ::jint& arg1, const ::java::time::ZoneOffset& arg2);
	static ::java::time::LocalDateTime OfInstant(const ::java::time::Instant& arg0, const ::java::time::ZoneId& arg1);
	static ::java::time::LocalDateTime Parse(const ::java::lang::CharSequence& arg0);
	static ::java::time::LocalDateTime Parse(const ::java::lang::CharSequence& arg0, const ::java::time::format::DateTimeFormatter& arg1);
	::java::time::LocalDateTime Plus(const ::jlong& arg0, const ::java::time::temporal::TemporalUnit& arg1) const;
	::java::time::LocalDateTime Plus(const ::java::time::temporal::TemporalAmount& arg0) const;
	::java::time::LocalDateTime PlusDays(const ::jlong& arg0) const;
	::java::time::LocalDateTime PlusHours(const ::jlong& arg0) const;
	::java::time::LocalDateTime PlusMinutes(const ::jlong& arg0) const;
	::java::time::LocalDateTime PlusMonths(const ::jlong& arg0) const;
	::java::time::LocalDateTime PlusNanos(const ::jlong& arg0) const;
	::java::time::LocalDateTime PlusSeconds(const ::jlong& arg0) const;
	::java::time::LocalDateTime PlusWeeks(const ::jlong& arg0) const;
	::java::time::LocalDateTime PlusYears(const ::jlong& arg0) const;
	::java::lang::Object Query(const ::java::time::temporal::TemporalQuery& arg0) const;
	::java::time::temporal::ValueRange Range(const ::java::time::temporal::TemporalField& arg0) const;
	::java::time::LocalDate ToLocalDate() const;
	::java::time::LocalTime ToLocalTime() const;
	::java::lang::String ToString() const;
	::java::time::LocalDateTime TruncatedTo(const ::java::time::temporal::TemporalUnit& arg0) const;
	::jlong Until(const ::java::time::temporal::Temporal& arg0, const ::java::time::temporal::TemporalUnit& arg1) const;
	::java::time::LocalDateTime With(const ::java::time::temporal::TemporalAdjuster& arg0) const;
	::java::time::LocalDateTime With(const ::java::time::temporal::TemporalField& arg0, const ::jlong& arg1) const;
	::java::time::LocalDateTime WithDayOfMonth(const ::jint& arg0) const;
	::java::time::LocalDateTime WithDayOfYear(const ::jint& arg0) const;
	::java::time::LocalDateTime WithHour(const ::jint& arg0) const;
	::java::time::LocalDateTime WithMinute(const ::jint& arg0) const;
	::java::time::LocalDateTime WithMonth(const ::jint& arg0) const;
	::java::time::LocalDateTime WithNano(const ::jint& arg0) const;
	::java::time::LocalDateTime WithSecond(const ::jint& arg0) const;
	::java::time::LocalDateTime WithYear(const ::jint& arg0) const;
	explicit LocalDateTime(jobject o) : ::java::lang::Object(o) {}
	LocalDateTime(const LocalDateTime& o)  : ::java::lang::Object(o) {}

};

}}

namespace java { namespace time { namespace chrono { 
struct ChronoLocalDateTime : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::time::temporal::Temporal();
	operator ::java::time::temporal::TemporalAdjuster();
	operator ::java::lang::Comparable();
	::java::time::temporal::Temporal AdjustInto(const ::java::time::temporal::Temporal& arg0) const;
	::java::time::chrono::ChronoZonedDateTime AtZone(const ::java::time::ZoneId& arg0) const;
	::jint CompareTo(const ::java::time::chrono::ChronoLocalDateTime& arg0) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::lang::String Format(const ::java::time::format::DateTimeFormatter& arg0) const;
	static ::java::time::chrono::ChronoLocalDateTime From(const ::java::time::temporal::TemporalAccessor& arg0);
	::java::time::chrono::Chronology GetChronology() const;
	::jint HashCode() const;
	::jboolean IsAfter(const ::java::time::chrono::ChronoLocalDateTime& arg0) const;
	::jboolean IsBefore(const ::java::time::chrono::ChronoLocalDateTime& arg0) const;
	::jboolean IsEqual(const ::java::time::chrono::ChronoLocalDateTime& arg0) const;
	::jboolean IsSupported(const ::java::time::temporal::TemporalField& arg0) const;
	::jboolean IsSupported(const ::java::time::temporal::TemporalUnit& arg0) const;
	::java::time::chrono::ChronoLocalDateTime Minus(const ::jlong& arg0, const ::java::time::temporal::TemporalUnit& arg1) const;
	::java::time::chrono::ChronoLocalDateTime Minus(const ::java::time::temporal::TemporalAmount& arg0) const;
	::java::time::chrono::ChronoLocalDateTime Plus(const ::jlong& arg0, const ::java::time::temporal::TemporalUnit& arg1) const;
	::java::time::chrono::ChronoLocalDateTime Plus(const ::java::time::temporal::TemporalAmount& arg0) const;
	::java::lang::Object Query(const ::java::time::temporal::TemporalQuery& arg0) const;
	static ::java::util::Comparator TimeLineOrder();
	::jlong ToEpochSecond(const ::java::time::ZoneOffset& arg0) const;
	::java::time::Instant ToInstant(const ::java::time::ZoneOffset& arg0) const;
	::java::time::chrono::ChronoLocalDate ToLocalDate() const;
	::java::time::LocalTime ToLocalTime() const;
	::java::lang::String ToString() const;
	::java::time::chrono::ChronoLocalDateTime With(const ::java::time::temporal::TemporalAdjuster& arg0) const;
	::java::time::chrono::ChronoLocalDateTime With(const ::java::time::temporal::TemporalField& arg0, const ::jlong& arg1) const;
	explicit ChronoLocalDateTime(jobject o) : java::lang::Object(o) {}
	ChronoLocalDateTime(const ChronoLocalDateTime& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::time::chrono::ChronoLocalDateTime();
		operator ::java::time::temporal::Temporal();
		operator ::java::time::temporal::TemporalAdjuster();
		operator ::java::lang::Comparable();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::time::temporal::Temporal AdjustInto(const ::java::time::temporal::Temporal& arg0) = 0;
		virtual ::java::time::chrono::ChronoZonedDateTime AtZone(const ::java::time::ZoneId& arg0) = 0;
		virtual ::jint CompareTo(const ::java::time::chrono::ChronoLocalDateTime& arg0) = 0;
		virtual ::jboolean Equals(const ::java::lang::Object& arg0) = 0;
		virtual ::java::lang::String Format(const ::java::time::format::DateTimeFormatter& arg0) = 0;
		virtual ::java::time::chrono::Chronology GetChronology() = 0;
		virtual ::jint HashCode() = 0;
		virtual ::jboolean IsAfter(const ::java::time::chrono::ChronoLocalDateTime& arg0) = 0;
		virtual ::jboolean IsBefore(const ::java::time::chrono::ChronoLocalDateTime& arg0) = 0;
		virtual ::jboolean IsEqual(const ::java::time::chrono::ChronoLocalDateTime& arg0) = 0;
		virtual ::jboolean IsSupported(const ::java::time::temporal::TemporalField& arg0) = 0;
		virtual ::jboolean IsSupported(const ::java::time::temporal::TemporalUnit& arg0) = 0;
		virtual ::java::time::chrono::ChronoLocalDateTime Minus(const ::jlong& arg0, const ::java::time::temporal::TemporalUnit& arg1) = 0;
		virtual ::java::time::chrono::ChronoLocalDateTime Minus(const ::java::time::temporal::TemporalAmount& arg0) = 0;
		virtual ::java::time::chrono::ChronoLocalDateTime Plus(const ::jlong& arg0, const ::java::time::temporal::TemporalUnit& arg1) = 0;
		virtual ::java::time::chrono::ChronoLocalDateTime Plus(const ::java::time::temporal::TemporalAmount& arg0) = 0;
		virtual ::java::lang::Object Query(const ::java::time::temporal::TemporalQuery& arg0) = 0;
		virtual ::jlong ToEpochSecond(const ::java::time::ZoneOffset& arg0) = 0;
		virtual ::java::time::Instant ToInstant(const ::java::time::ZoneOffset& arg0) = 0;
		virtual ::java::time::chrono::ChronoLocalDate ToLocalDate() = 0;
		virtual ::java::time::LocalTime ToLocalTime() = 0;
		virtual ::java::lang::String ToString() = 0;
		virtual ::java::time::chrono::ChronoLocalDateTime With(const ::java::time::temporal::TemporalAdjuster& arg0) = 0;
		virtual ::java::time::chrono::ChronoLocalDateTime With(const ::java::time::temporal::TemporalField& arg0, const ::jlong& arg1) = 0;
	};
};

struct ChronoZonedDateTime : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::time::temporal::Temporal();
	operator ::java::lang::Comparable();
	::jint CompareTo(const ::java::time::chrono::ChronoZonedDateTime& arg0) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::lang::String Format(const ::java::time::format::DateTimeFormatter& arg0) const;
	static ::java::time::chrono::ChronoZonedDateTime From(const ::java::time::temporal::TemporalAccessor& arg0);
	::jint Get(const ::java::time::temporal::TemporalField& arg0) const;
	::java::time::chrono::Chronology GetChronology() const;
	::jlong GetLong(const ::java::time::temporal::TemporalField& arg0) const;
	::java::time::ZoneOffset GetOffset() const;
	::java::time::ZoneId GetZone() const;
	::jint HashCode() const;
	::jboolean IsAfter(const ::java::time::chrono::ChronoZonedDateTime& arg0) const;
	::jboolean IsBefore(const ::java::time::chrono::ChronoZonedDateTime& arg0) const;
	::jboolean IsEqual(const ::java::time::chrono::ChronoZonedDateTime& arg0) const;
	::jboolean IsSupported(const ::java::time::temporal::TemporalField& arg0) const;
	::jboolean IsSupported(const ::java::time::temporal::TemporalUnit& arg0) const;
	::java::time::chrono::ChronoZonedDateTime Minus(const ::jlong& arg0, const ::java::time::temporal::TemporalUnit& arg1) const;
	::java::time::chrono::ChronoZonedDateTime Minus(const ::java::time::temporal::TemporalAmount& arg0) const;
	::java::time::chrono::ChronoZonedDateTime Plus(const ::jlong& arg0, const ::java::time::temporal::TemporalUnit& arg1) const;
	::java::time::chrono::ChronoZonedDateTime Plus(const ::java::time::temporal::TemporalAmount& arg0) const;
	::java::lang::Object Query(const ::java::time::temporal::TemporalQuery& arg0) const;
	::java::time::temporal::ValueRange Range(const ::java::time::temporal::TemporalField& arg0) const;
	static ::java::util::Comparator TimeLineOrder();
	::jlong ToEpochSecond() const;
	::java::time::Instant ToInstant() const;
	::java::time::chrono::ChronoLocalDate ToLocalDate() const;
	::java::time::chrono::ChronoLocalDateTime ToLocalDateTime() const;
	::java::time::LocalTime ToLocalTime() const;
	::java::lang::String ToString() const;
	::java::time::chrono::ChronoZonedDateTime With(const ::java::time::temporal::TemporalAdjuster& arg0) const;
	::java::time::chrono::ChronoZonedDateTime With(const ::java::time::temporal::TemporalField& arg0, const ::jlong& arg1) const;
	::java::time::chrono::ChronoZonedDateTime WithEarlierOffsetAtOverlap() const;
	::java::time::chrono::ChronoZonedDateTime WithLaterOffsetAtOverlap() const;
	::java::time::chrono::ChronoZonedDateTime WithZoneSameInstant(const ::java::time::ZoneId& arg0) const;
	::java::time::chrono::ChronoZonedDateTime WithZoneSameLocal(const ::java::time::ZoneId& arg0) const;
	explicit ChronoZonedDateTime(jobject o) : java::lang::Object(o) {}
	ChronoZonedDateTime(const ChronoZonedDateTime& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::time::chrono::ChronoZonedDateTime();
		operator ::java::time::temporal::Temporal();
		operator ::java::lang::Comparable();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jint CompareTo(const ::java::time::chrono::ChronoZonedDateTime& arg0) = 0;
		virtual ::jboolean Equals(const ::java::lang::Object& arg0) = 0;
		virtual ::java::lang::String Format(const ::java::time::format::DateTimeFormatter& arg0) = 0;
		virtual ::jint Get(const ::java::time::temporal::TemporalField& arg0) = 0;
		virtual ::java::time::chrono::Chronology GetChronology() = 0;
		virtual ::jlong GetLong(const ::java::time::temporal::TemporalField& arg0) = 0;
		virtual ::java::time::ZoneOffset GetOffset() = 0;
		virtual ::java::time::ZoneId GetZone() = 0;
		virtual ::jint HashCode() = 0;
		virtual ::jboolean IsAfter(const ::java::time::chrono::ChronoZonedDateTime& arg0) = 0;
		virtual ::jboolean IsBefore(const ::java::time::chrono::ChronoZonedDateTime& arg0) = 0;
		virtual ::jboolean IsEqual(const ::java::time::chrono::ChronoZonedDateTime& arg0) = 0;
		virtual ::jboolean IsSupported(const ::java::time::temporal::TemporalField& arg0) = 0;
		virtual ::jboolean IsSupported(const ::java::time::temporal::TemporalUnit& arg0) = 0;
		virtual ::java::time::chrono::ChronoZonedDateTime Minus(const ::jlong& arg0, const ::java::time::temporal::TemporalUnit& arg1) = 0;
		virtual ::java::time::chrono::ChronoZonedDateTime Minus(const ::java::time::temporal::TemporalAmount& arg0) = 0;
		virtual ::java::time::chrono::ChronoZonedDateTime Plus(const ::jlong& arg0, const ::java::time::temporal::TemporalUnit& arg1) = 0;
		virtual ::java::time::chrono::ChronoZonedDateTime Plus(const ::java::time::temporal::TemporalAmount& arg0) = 0;
		virtual ::java::lang::Object Query(const ::java::time::temporal::TemporalQuery& arg0) = 0;
		virtual ::java::time::temporal::ValueRange Range(const ::java::time::temporal::TemporalField& arg0) = 0;
		virtual ::jlong ToEpochSecond() = 0;
		virtual ::java::time::Instant ToInstant() = 0;
		virtual ::java::time::chrono::ChronoLocalDate ToLocalDate() = 0;
		virtual ::java::time::chrono::ChronoLocalDateTime ToLocalDateTime() = 0;
		virtual ::java::time::LocalTime ToLocalTime() = 0;
		virtual ::java::lang::String ToString() = 0;
		virtual ::java::time::chrono::ChronoZonedDateTime With(const ::java::time::temporal::TemporalAdjuster& arg0) = 0;
		virtual ::java::time::chrono::ChronoZonedDateTime With(const ::java::time::temporal::TemporalField& arg0, const ::jlong& arg1) = 0;
		virtual ::java::time::chrono::ChronoZonedDateTime WithEarlierOffsetAtOverlap() = 0;
		virtual ::java::time::chrono::ChronoZonedDateTime WithLaterOffsetAtOverlap() = 0;
		virtual ::java::time::chrono::ChronoZonedDateTime WithZoneSameInstant(const ::java::time::ZoneId& arg0) = 0;
		virtual ::java::time::chrono::ChronoZonedDateTime WithZoneSameLocal(const ::java::time::ZoneId& arg0) = 0;
	};
};

}}}

namespace java { namespace time { namespace format { 
struct DateTimeFormatter : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::java::time::format::DateTimeFormatter& fBASIC_ISO_DATE();
	static ::java::time::format::DateTimeFormatter& fISO_DATE();
	static ::java::time::format::DateTimeFormatter& fISO_DATE_TIME();
	static ::java::time::format::DateTimeFormatter& fISO_INSTANT();
	static ::java::time::format::DateTimeFormatter& fISO_LOCAL_DATE();
	static ::java::time::format::DateTimeFormatter& fISO_LOCAL_DATE_TIME();
	static ::java::time::format::DateTimeFormatter& fISO_LOCAL_TIME();
	static ::java::time::format::DateTimeFormatter& fISO_OFFSET_DATE();
	static ::java::time::format::DateTimeFormatter& fISO_OFFSET_DATE_TIME();
	static ::java::time::format::DateTimeFormatter& fISO_OFFSET_TIME();
	static ::java::time::format::DateTimeFormatter& fISO_ORDINAL_DATE();
	static ::java::time::format::DateTimeFormatter& fISO_TIME();
	static ::java::time::format::DateTimeFormatter& fISO_WEEK_DATE();
	static ::java::time::format::DateTimeFormatter& fISO_ZONED_DATE_TIME();
	static ::java::time::format::DateTimeFormatter& fRFC_1123_DATE_TIME();
	::java::lang::String Format(const ::java::time::temporal::TemporalAccessor& arg0) const;
	::jvoid FormatTo(const ::java::time::temporal::TemporalAccessor& arg0, const ::java::lang::Appendable& arg1) const;
	::java::time::chrono::Chronology GetChronology() const;
	::java::time::format::DecimalStyle GetDecimalStyle() const;
	::java::util::Locale GetLocale() const;
	::java::util::Set GetResolverFields() const;
	::java::time::format::ResolverStyle GetResolverStyle() const;
	::java::time::ZoneId GetZone() const;
	::java::time::format::DateTimeFormatter LocalizedBy(const ::java::util::Locale& arg0) const;
	static ::java::time::format::DateTimeFormatter OfLocalizedDate(const ::java::time::format::FormatStyle& arg0);
	static ::java::time::format::DateTimeFormatter OfLocalizedDateTime(const ::java::time::format::FormatStyle& arg0);
	static ::java::time::format::DateTimeFormatter OfLocalizedDateTime(const ::java::time::format::FormatStyle& arg0, const ::java::time::format::FormatStyle& arg1);
	static ::java::time::format::DateTimeFormatter OfLocalizedTime(const ::java::time::format::FormatStyle& arg0);
	static ::java::time::format::DateTimeFormatter OfPattern(const ::java::lang::String& arg0);
	static ::java::time::format::DateTimeFormatter OfPattern(const ::java::lang::String& arg0, const ::java::util::Locale& arg1);
	::java::time::temporal::TemporalAccessor Parse(const ::java::lang::CharSequence& arg0) const;
	::java::time::temporal::TemporalAccessor Parse(const ::java::lang::CharSequence& arg0, const ::java::text::ParsePosition& arg1) const;
	::java::lang::Object Parse(const ::java::lang::CharSequence& arg0, const ::java::time::temporal::TemporalQuery& arg1) const;
	::java::time::temporal::TemporalAccessor ParseBest(const ::java::lang::CharSequence& arg0, const jni::Array< ::java::time::temporal::TemporalQuery >& arg1) const;
	::java::time::temporal::TemporalAccessor ParseUnresolved(const ::java::lang::CharSequence& arg0, const ::java::text::ParsePosition& arg1) const;
	static ::java::time::temporal::TemporalQuery ParsedExcessDays();
	static ::java::time::temporal::TemporalQuery ParsedLeapSecond();
	::java::text::Format ToFormat() const;
	::java::text::Format ToFormat(const ::java::time::temporal::TemporalQuery& arg0) const;
	::java::lang::String ToString() const;
	::java::time::format::DateTimeFormatter WithChronology(const ::java::time::chrono::Chronology& arg0) const;
	::java::time::format::DateTimeFormatter WithDecimalStyle(const ::java::time::format::DecimalStyle& arg0) const;
	::java::time::format::DateTimeFormatter WithLocale(const ::java::util::Locale& arg0) const;
	::java::time::format::DateTimeFormatter WithResolverFields(const ::java::util::Set& arg0) const;
	::java::time::format::DateTimeFormatter WithResolverFields(const jni::Array< ::java::time::temporal::TemporalField >& arg0) const;
	::java::time::format::DateTimeFormatter WithResolverStyle(const ::java::time::format::ResolverStyle& arg0) const;
	::java::time::format::DateTimeFormatter WithZone(const ::java::time::ZoneId& arg0) const;
	explicit DateTimeFormatter(jobject o) : ::java::lang::Object(o) {}
	DateTimeFormatter(const DateTimeFormatter& o)  : ::java::lang::Object(o) {}

};

}}}

namespace java { namespace time { namespace chrono { 
struct Chronology : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::Comparable();
	::jint CompareTo(const ::java::time::chrono::Chronology& arg0) const;
	::java::time::chrono::ChronoLocalDate Date(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::java::time::chrono::ChronoLocalDate Date(const ::java::time::chrono::Era& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::java::time::chrono::ChronoLocalDate Date(const ::java::time::temporal::TemporalAccessor& arg0) const;
	::java::time::chrono::ChronoLocalDate DateEpochDay(const ::jlong& arg0) const;
	::java::time::chrono::ChronoLocalDate DateNow() const;
	::java::time::chrono::ChronoLocalDate DateNow(const ::java::time::Clock& arg0) const;
	::java::time::chrono::ChronoLocalDate DateNow(const ::java::time::ZoneId& arg0) const;
	::java::time::chrono::ChronoLocalDate DateYearDay(const ::jint& arg0, const ::jint& arg1) const;
	::java::time::chrono::ChronoLocalDate DateYearDay(const ::java::time::chrono::Era& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jlong EpochSecond(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5, const ::java::time::ZoneOffset& arg6) const;
	::jlong EpochSecond(const ::java::time::chrono::Era& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5, const ::jint& arg6, const ::java::time::ZoneOffset& arg7) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::time::chrono::Era EraOf(const ::jint& arg0) const;
	::java::util::List Eras() const;
	static ::java::time::chrono::Chronology From(const ::java::time::temporal::TemporalAccessor& arg0);
	static ::java::util::Set GetAvailableChronologies();
	::java::lang::String GetCalendarType() const;
	::java::lang::String GetDisplayName(const ::java::time::format::TextStyle& arg0, const ::java::util::Locale& arg1) const;
	::java::lang::String GetId() const;
	::jint HashCode() const;
	::jboolean IsLeapYear(const ::jlong& arg0) const;
	::java::time::chrono::ChronoLocalDateTime LocalDateTime(const ::java::time::temporal::TemporalAccessor& arg0) const;
	static ::java::time::chrono::Chronology Of(const ::java::lang::String& arg0);
	static ::java::time::chrono::Chronology OfLocale(const ::java::util::Locale& arg0);
	::java::time::chrono::ChronoPeriod Period(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jint ProlepticYear(const ::java::time::chrono::Era& arg0, const ::jint& arg1) const;
	::java::time::temporal::ValueRange Range(const ::java::time::temporal::ChronoField& arg0) const;
	::java::time::chrono::ChronoLocalDate ResolveDate(const ::java::util::Map& arg0, const ::java::time::format::ResolverStyle& arg1) const;
	::java::lang::String ToString() const;
	::java::time::chrono::ChronoZonedDateTime ZonedDateTime(const ::java::time::Instant& arg0, const ::java::time::ZoneId& arg1) const;
	::java::time::chrono::ChronoZonedDateTime ZonedDateTime(const ::java::time::temporal::TemporalAccessor& arg0) const;
	explicit Chronology(jobject o) : java::lang::Object(o) {}
	Chronology(const Chronology& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::time::chrono::Chronology();
		operator ::java::lang::Comparable();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jint CompareTo(const ::java::time::chrono::Chronology& arg0) = 0;
		virtual ::java::time::chrono::ChronoLocalDate Date(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2) = 0;
		virtual ::java::time::chrono::ChronoLocalDate Date(const ::java::time::chrono::Era& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) = 0;
		virtual ::java::time::chrono::ChronoLocalDate Date(const ::java::time::temporal::TemporalAccessor& arg0) = 0;
		virtual ::java::time::chrono::ChronoLocalDate DateEpochDay(const ::jlong& arg0) = 0;
		virtual ::java::time::chrono::ChronoLocalDate DateNow() = 0;
		virtual ::java::time::chrono::ChronoLocalDate DateNow(const ::java::time::Clock& arg0) = 0;
		virtual ::java::time::chrono::ChronoLocalDate DateNow(const ::java::time::ZoneId& arg0) = 0;
		virtual ::java::time::chrono::ChronoLocalDate DateYearDay(const ::jint& arg0, const ::jint& arg1) = 0;
		virtual ::java::time::chrono::ChronoLocalDate DateYearDay(const ::java::time::chrono::Era& arg0, const ::jint& arg1, const ::jint& arg2) = 0;
		virtual ::jlong EpochSecond(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5, const ::java::time::ZoneOffset& arg6) = 0;
		virtual ::jlong EpochSecond(const ::java::time::chrono::Era& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5, const ::jint& arg6, const ::java::time::ZoneOffset& arg7) = 0;
		virtual ::jboolean Equals(const ::java::lang::Object& arg0) = 0;
		virtual ::java::time::chrono::Era EraOf(const ::jint& arg0) = 0;
		virtual ::java::util::List Eras() = 0;
		virtual ::java::lang::String GetCalendarType() = 0;
		virtual ::java::lang::String GetDisplayName(const ::java::time::format::TextStyle& arg0, const ::java::util::Locale& arg1) = 0;
		virtual ::java::lang::String GetId() = 0;
		virtual ::jint HashCode() = 0;
		virtual ::jboolean IsLeapYear(const ::jlong& arg0) = 0;
		virtual ::java::time::chrono::ChronoLocalDateTime LocalDateTime(const ::java::time::temporal::TemporalAccessor& arg0) = 0;
		virtual ::java::time::chrono::ChronoPeriod Period(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2) = 0;
		virtual ::jint ProlepticYear(const ::java::time::chrono::Era& arg0, const ::jint& arg1) = 0;
		virtual ::java::time::temporal::ValueRange Range(const ::java::time::temporal::ChronoField& arg0) = 0;
		virtual ::java::time::chrono::ChronoLocalDate ResolveDate(const ::java::util::Map& arg0, const ::java::time::format::ResolverStyle& arg1) = 0;
		virtual ::java::lang::String ToString() = 0;
		virtual ::java::time::chrono::ChronoZonedDateTime ZonedDateTime(const ::java::time::Instant& arg0, const ::java::time::ZoneId& arg1) = 0;
		virtual ::java::time::chrono::ChronoZonedDateTime ZonedDateTime(const ::java::time::temporal::TemporalAccessor& arg0) = 0;
	};
};

struct ChronoLocalDate : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::time::temporal::Temporal();
	operator ::java::time::temporal::TemporalAdjuster();
	operator ::java::lang::Comparable();
	::java::time::temporal::Temporal AdjustInto(const ::java::time::temporal::Temporal& arg0) const;
	::java::time::chrono::ChronoLocalDateTime AtTime(const ::java::time::LocalTime& arg0) const;
	::jint CompareTo(const ::java::time::chrono::ChronoLocalDate& arg0) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::lang::String Format(const ::java::time::format::DateTimeFormatter& arg0) const;
	static ::java::time::chrono::ChronoLocalDate From(const ::java::time::temporal::TemporalAccessor& arg0);
	::java::time::chrono::Chronology GetChronology() const;
	::java::time::chrono::Era GetEra() const;
	::jint HashCode() const;
	::jboolean IsAfter(const ::java::time::chrono::ChronoLocalDate& arg0) const;
	::jboolean IsBefore(const ::java::time::chrono::ChronoLocalDate& arg0) const;
	::jboolean IsEqual(const ::java::time::chrono::ChronoLocalDate& arg0) const;
	::jboolean IsLeapYear() const;
	::jboolean IsSupported(const ::java::time::temporal::TemporalField& arg0) const;
	::jboolean IsSupported(const ::java::time::temporal::TemporalUnit& arg0) const;
	::jint LengthOfMonth() const;
	::jint LengthOfYear() const;
	::java::time::chrono::ChronoLocalDate Minus(const ::jlong& arg0, const ::java::time::temporal::TemporalUnit& arg1) const;
	::java::time::chrono::ChronoLocalDate Minus(const ::java::time::temporal::TemporalAmount& arg0) const;
	::java::time::chrono::ChronoLocalDate Plus(const ::jlong& arg0, const ::java::time::temporal::TemporalUnit& arg1) const;
	::java::time::chrono::ChronoLocalDate Plus(const ::java::time::temporal::TemporalAmount& arg0) const;
	::java::lang::Object Query(const ::java::time::temporal::TemporalQuery& arg0) const;
	static ::java::util::Comparator TimeLineOrder();
	::jlong ToEpochDay() const;
	::java::lang::String ToString() const;
	::java::time::chrono::ChronoPeriod Until(const ::java::time::chrono::ChronoLocalDate& arg0) const;
	::jlong Until(const ::java::time::temporal::Temporal& arg0, const ::java::time::temporal::TemporalUnit& arg1) const;
	::java::time::chrono::ChronoLocalDate With(const ::java::time::temporal::TemporalAdjuster& arg0) const;
	::java::time::chrono::ChronoLocalDate With(const ::java::time::temporal::TemporalField& arg0, const ::jlong& arg1) const;
	explicit ChronoLocalDate(jobject o) : java::lang::Object(o) {}
	ChronoLocalDate(const ChronoLocalDate& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::time::chrono::ChronoLocalDate();
		operator ::java::time::temporal::Temporal();
		operator ::java::time::temporal::TemporalAdjuster();
		operator ::java::lang::Comparable();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::time::temporal::Temporal AdjustInto(const ::java::time::temporal::Temporal& arg0) = 0;
		virtual ::java::time::chrono::ChronoLocalDateTime AtTime(const ::java::time::LocalTime& arg0) = 0;
		virtual ::jint CompareTo(const ::java::time::chrono::ChronoLocalDate& arg0) = 0;
		virtual ::jboolean Equals(const ::java::lang::Object& arg0) = 0;
		virtual ::java::lang::String Format(const ::java::time::format::DateTimeFormatter& arg0) = 0;
		virtual ::java::time::chrono::Chronology GetChronology() = 0;
		virtual ::java::time::chrono::Era GetEra() = 0;
		virtual ::jint HashCode() = 0;
		virtual ::jboolean IsAfter(const ::java::time::chrono::ChronoLocalDate& arg0) = 0;
		virtual ::jboolean IsBefore(const ::java::time::chrono::ChronoLocalDate& arg0) = 0;
		virtual ::jboolean IsEqual(const ::java::time::chrono::ChronoLocalDate& arg0) = 0;
		virtual ::jboolean IsLeapYear() = 0;
		virtual ::jboolean IsSupported(const ::java::time::temporal::TemporalField& arg0) = 0;
		virtual ::jboolean IsSupported(const ::java::time::temporal::TemporalUnit& arg0) = 0;
		virtual ::jint LengthOfMonth() = 0;
		virtual ::jint LengthOfYear() = 0;
		virtual ::java::time::chrono::ChronoLocalDate Minus(const ::jlong& arg0, const ::java::time::temporal::TemporalUnit& arg1) = 0;
		virtual ::java::time::chrono::ChronoLocalDate Minus(const ::java::time::temporal::TemporalAmount& arg0) = 0;
		virtual ::java::time::chrono::ChronoLocalDate Plus(const ::jlong& arg0, const ::java::time::temporal::TemporalUnit& arg1) = 0;
		virtual ::java::time::chrono::ChronoLocalDate Plus(const ::java::time::temporal::TemporalAmount& arg0) = 0;
		virtual ::java::lang::Object Query(const ::java::time::temporal::TemporalQuery& arg0) = 0;
		virtual ::jlong ToEpochDay() = 0;
		virtual ::java::lang::String ToString() = 0;
		virtual ::java::time::chrono::ChronoPeriod Until(const ::java::time::chrono::ChronoLocalDate& arg0) = 0;
		virtual ::jlong Until(const ::java::time::temporal::Temporal& arg0, const ::java::time::temporal::TemporalUnit& arg1) = 0;
		virtual ::java::time::chrono::ChronoLocalDate With(const ::java::time::temporal::TemporalAdjuster& arg0) = 0;
		virtual ::java::time::chrono::ChronoLocalDate With(const ::java::time::temporal::TemporalField& arg0, const ::jlong& arg1) = 0;
	};
};

}}}

namespace java { namespace time { 
struct LocalTime : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::time::temporal::Temporal();
	operator ::java::time::temporal::TemporalAdjuster();
	operator ::java::lang::Comparable();
	operator ::java::io::Serializable();
	static ::java::time::LocalTime& fMAX();
	static ::java::time::LocalTime& fMIDNIGHT();
	static ::java::time::LocalTime& fMIN();
	static ::java::time::LocalTime& fNOON();
	::java::time::temporal::Temporal AdjustInto(const ::java::time::temporal::Temporal& arg0) const;
	::java::time::LocalDateTime AtDate(const ::java::time::LocalDate& arg0) const;
	::java::time::OffsetTime AtOffset(const ::java::time::ZoneOffset& arg0) const;
	::jint CompareTo(const ::java::time::LocalTime& arg0) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::lang::String Format(const ::java::time::format::DateTimeFormatter& arg0) const;
	static ::java::time::LocalTime From(const ::java::time::temporal::TemporalAccessor& arg0);
	::jint Get(const ::java::time::temporal::TemporalField& arg0) const;
	::jint GetHour() const;
	::jlong GetLong(const ::java::time::temporal::TemporalField& arg0) const;
	::jint GetMinute() const;
	::jint GetNano() const;
	::jint GetSecond() const;
	::jint HashCode() const;
	::jboolean IsAfter(const ::java::time::LocalTime& arg0) const;
	::jboolean IsBefore(const ::java::time::LocalTime& arg0) const;
	::jboolean IsSupported(const ::java::time::temporal::TemporalField& arg0) const;
	::jboolean IsSupported(const ::java::time::temporal::TemporalUnit& arg0) const;
	::java::time::LocalTime Minus(const ::jlong& arg0, const ::java::time::temporal::TemporalUnit& arg1) const;
	::java::time::LocalTime Minus(const ::java::time::temporal::TemporalAmount& arg0) const;
	::java::time::LocalTime MinusHours(const ::jlong& arg0) const;
	::java::time::LocalTime MinusMinutes(const ::jlong& arg0) const;
	::java::time::LocalTime MinusNanos(const ::jlong& arg0) const;
	::java::time::LocalTime MinusSeconds(const ::jlong& arg0) const;
	static ::java::time::LocalTime Now();
	static ::java::time::LocalTime Now(const ::java::time::Clock& arg0);
	static ::java::time::LocalTime Now(const ::java::time::ZoneId& arg0);
	static ::java::time::LocalTime Of(const ::jint& arg0, const ::jint& arg1);
	static ::java::time::LocalTime Of(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2);
	static ::java::time::LocalTime Of(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3);
	static ::java::time::LocalTime OfInstant(const ::java::time::Instant& arg0, const ::java::time::ZoneId& arg1);
	static ::java::time::LocalTime OfNanoOfDay(const ::jlong& arg0);
	static ::java::time::LocalTime OfSecondOfDay(const ::jlong& arg0);
	static ::java::time::LocalTime Parse(const ::java::lang::CharSequence& arg0);
	static ::java::time::LocalTime Parse(const ::java::lang::CharSequence& arg0, const ::java::time::format::DateTimeFormatter& arg1);
	::java::time::LocalTime Plus(const ::jlong& arg0, const ::java::time::temporal::TemporalUnit& arg1) const;
	::java::time::LocalTime Plus(const ::java::time::temporal::TemporalAmount& arg0) const;
	::java::time::LocalTime PlusHours(const ::jlong& arg0) const;
	::java::time::LocalTime PlusMinutes(const ::jlong& arg0) const;
	::java::time::LocalTime PlusNanos(const ::jlong& arg0) const;
	::java::time::LocalTime PlusSeconds(const ::jlong& arg0) const;
	::java::lang::Object Query(const ::java::time::temporal::TemporalQuery& arg0) const;
	::java::time::temporal::ValueRange Range(const ::java::time::temporal::TemporalField& arg0) const;
	::jlong ToEpochSecond(const ::java::time::LocalDate& arg0, const ::java::time::ZoneOffset& arg1) const;
	::jlong ToNanoOfDay() const;
	::jint ToSecondOfDay() const;
	::java::lang::String ToString() const;
	::java::time::LocalTime TruncatedTo(const ::java::time::temporal::TemporalUnit& arg0) const;
	::jlong Until(const ::java::time::temporal::Temporal& arg0, const ::java::time::temporal::TemporalUnit& arg1) const;
	::java::time::LocalTime With(const ::java::time::temporal::TemporalAdjuster& arg0) const;
	::java::time::LocalTime With(const ::java::time::temporal::TemporalField& arg0, const ::jlong& arg1) const;
	::java::time::LocalTime WithHour(const ::jint& arg0) const;
	::java::time::LocalTime WithMinute(const ::jint& arg0) const;
	::java::time::LocalTime WithNano(const ::jint& arg0) const;
	::java::time::LocalTime WithSecond(const ::jint& arg0) const;
	explicit LocalTime(jobject o) : ::java::lang::Object(o) {}
	LocalTime(const LocalTime& o)  : ::java::lang::Object(o) {}

};

struct LocalDate : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::time::temporal::Temporal();
	operator ::java::time::temporal::TemporalAdjuster();
	operator ::java::time::chrono::ChronoLocalDate();
	operator ::java::io::Serializable();
	static ::java::time::LocalDate& fEPOCH();
	static ::java::time::LocalDate& fMAX();
	static ::java::time::LocalDate& fMIN();
	::java::time::temporal::Temporal AdjustInto(const ::java::time::temporal::Temporal& arg0) const;
	::java::time::LocalDateTime AtStartOfDay() const;
	::java::time::ZonedDateTime AtStartOfDay(const ::java::time::ZoneId& arg0) const;
	::java::time::LocalDateTime AtTime(const ::jint& arg0, const ::jint& arg1) const;
	::java::time::LocalDateTime AtTime(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::java::time::LocalDateTime AtTime(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::java::time::LocalDateTime AtTime(const ::java::time::LocalTime& arg0) const;
	::java::time::OffsetDateTime AtTime(const ::java::time::OffsetTime& arg0) const;
	::jint CompareTo(const ::java::time::chrono::ChronoLocalDate& arg0) const;
	::java::util::stream::Stream DatesUntil(const ::java::time::LocalDate& arg0) const;
	::java::util::stream::Stream DatesUntil(const ::java::time::LocalDate& arg0, const ::java::time::Period& arg1) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::lang::String Format(const ::java::time::format::DateTimeFormatter& arg0) const;
	static ::java::time::LocalDate From(const ::java::time::temporal::TemporalAccessor& arg0);
	::jint Get(const ::java::time::temporal::TemporalField& arg0) const;
	::java::time::chrono::IsoChronology GetChronology() const;
	::jint GetDayOfMonth() const;
	::java::time::DayOfWeek GetDayOfWeek() const;
	::jint GetDayOfYear() const;
	::java::time::chrono::IsoEra GetEra() const;
	::jlong GetLong(const ::java::time::temporal::TemporalField& arg0) const;
	::java::time::Month GetMonth() const;
	::jint GetMonthValue() const;
	::jint GetYear() const;
	::jint HashCode() const;
	::jboolean IsAfter(const ::java::time::chrono::ChronoLocalDate& arg0) const;
	::jboolean IsBefore(const ::java::time::chrono::ChronoLocalDate& arg0) const;
	::jboolean IsEqual(const ::java::time::chrono::ChronoLocalDate& arg0) const;
	::jboolean IsLeapYear() const;
	::jboolean IsSupported(const ::java::time::temporal::TemporalField& arg0) const;
	::jboolean IsSupported(const ::java::time::temporal::TemporalUnit& arg0) const;
	::jint LengthOfMonth() const;
	::jint LengthOfYear() const;
	::java::time::LocalDate Minus(const ::jlong& arg0, const ::java::time::temporal::TemporalUnit& arg1) const;
	::java::time::LocalDate Minus(const ::java::time::temporal::TemporalAmount& arg0) const;
	::java::time::LocalDate MinusDays(const ::jlong& arg0) const;
	::java::time::LocalDate MinusMonths(const ::jlong& arg0) const;
	::java::time::LocalDate MinusWeeks(const ::jlong& arg0) const;
	::java::time::LocalDate MinusYears(const ::jlong& arg0) const;
	static ::java::time::LocalDate Now();
	static ::java::time::LocalDate Now(const ::java::time::Clock& arg0);
	static ::java::time::LocalDate Now(const ::java::time::ZoneId& arg0);
	static ::java::time::LocalDate Of(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2);
	static ::java::time::LocalDate Of(const ::jint& arg0, const ::java::time::Month& arg1, const ::jint& arg2);
	static ::java::time::LocalDate OfEpochDay(const ::jlong& arg0);
	static ::java::time::LocalDate OfInstant(const ::java::time::Instant& arg0, const ::java::time::ZoneId& arg1);
	static ::java::time::LocalDate OfYearDay(const ::jint& arg0, const ::jint& arg1);
	static ::java::time::LocalDate Parse(const ::java::lang::CharSequence& arg0);
	static ::java::time::LocalDate Parse(const ::java::lang::CharSequence& arg0, const ::java::time::format::DateTimeFormatter& arg1);
	::java::time::LocalDate Plus(const ::jlong& arg0, const ::java::time::temporal::TemporalUnit& arg1) const;
	::java::time::LocalDate Plus(const ::java::time::temporal::TemporalAmount& arg0) const;
	::java::time::LocalDate PlusDays(const ::jlong& arg0) const;
	::java::time::LocalDate PlusMonths(const ::jlong& arg0) const;
	::java::time::LocalDate PlusWeeks(const ::jlong& arg0) const;
	::java::time::LocalDate PlusYears(const ::jlong& arg0) const;
	::java::lang::Object Query(const ::java::time::temporal::TemporalQuery& arg0) const;
	::java::time::temporal::ValueRange Range(const ::java::time::temporal::TemporalField& arg0) const;
	::jlong ToEpochDay() const;
	::jlong ToEpochSecond(const ::java::time::LocalTime& arg0, const ::java::time::ZoneOffset& arg1) const;
	::java::lang::String ToString() const;
	::java::time::Period Until(const ::java::time::chrono::ChronoLocalDate& arg0) const;
	::jlong Until(const ::java::time::temporal::Temporal& arg0, const ::java::time::temporal::TemporalUnit& arg1) const;
	::java::time::LocalDate With(const ::java::time::temporal::TemporalAdjuster& arg0) const;
	::java::time::LocalDate With(const ::java::time::temporal::TemporalField& arg0, const ::jlong& arg1) const;
	::java::time::LocalDate WithDayOfMonth(const ::jint& arg0) const;
	::java::time::LocalDate WithDayOfYear(const ::jint& arg0) const;
	::java::time::LocalDate WithMonth(const ::jint& arg0) const;
	::java::time::LocalDate WithYear(const ::jint& arg0) const;
	explicit LocalDate(jobject o) : ::java::lang::Object(o) {}
	LocalDate(const LocalDate& o)  : ::java::lang::Object(o) {}

};

struct ZonedDateTime : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::time::temporal::Temporal();
	operator ::java::time::chrono::ChronoZonedDateTime();
	operator ::java::io::Serializable();
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::lang::String Format(const ::java::time::format::DateTimeFormatter& arg0) const;
	static ::java::time::ZonedDateTime From(const ::java::time::temporal::TemporalAccessor& arg0);
	::jint Get(const ::java::time::temporal::TemporalField& arg0) const;
	::jint GetDayOfMonth() const;
	::java::time::DayOfWeek GetDayOfWeek() const;
	::jint GetDayOfYear() const;
	::jint GetHour() const;
	::jlong GetLong(const ::java::time::temporal::TemporalField& arg0) const;
	::jint GetMinute() const;
	::java::time::Month GetMonth() const;
	::jint GetMonthValue() const;
	::jint GetNano() const;
	::java::time::ZoneOffset GetOffset() const;
	::jint GetSecond() const;
	::jint GetYear() const;
	::java::time::ZoneId GetZone() const;
	::jint HashCode() const;
	::jboolean IsSupported(const ::java::time::temporal::TemporalField& arg0) const;
	::jboolean IsSupported(const ::java::time::temporal::TemporalUnit& arg0) const;
	::java::time::ZonedDateTime Minus(const ::jlong& arg0, const ::java::time::temporal::TemporalUnit& arg1) const;
	::java::time::ZonedDateTime Minus(const ::java::time::temporal::TemporalAmount& arg0) const;
	::java::time::ZonedDateTime MinusDays(const ::jlong& arg0) const;
	::java::time::ZonedDateTime MinusHours(const ::jlong& arg0) const;
	::java::time::ZonedDateTime MinusMinutes(const ::jlong& arg0) const;
	::java::time::ZonedDateTime MinusMonths(const ::jlong& arg0) const;
	::java::time::ZonedDateTime MinusNanos(const ::jlong& arg0) const;
	::java::time::ZonedDateTime MinusSeconds(const ::jlong& arg0) const;
	::java::time::ZonedDateTime MinusWeeks(const ::jlong& arg0) const;
	::java::time::ZonedDateTime MinusYears(const ::jlong& arg0) const;
	static ::java::time::ZonedDateTime Now();
	static ::java::time::ZonedDateTime Now(const ::java::time::Clock& arg0);
	static ::java::time::ZonedDateTime Now(const ::java::time::ZoneId& arg0);
	static ::java::time::ZonedDateTime Of(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5, const ::jint& arg6, const ::java::time::ZoneId& arg7);
	static ::java::time::ZonedDateTime Of(const ::java::time::LocalDate& arg0, const ::java::time::LocalTime& arg1, const ::java::time::ZoneId& arg2);
	static ::java::time::ZonedDateTime Of(const ::java::time::LocalDateTime& arg0, const ::java::time::ZoneId& arg1);
	static ::java::time::ZonedDateTime OfInstant(const ::java::time::Instant& arg0, const ::java::time::ZoneId& arg1);
	static ::java::time::ZonedDateTime OfInstant(const ::java::time::LocalDateTime& arg0, const ::java::time::ZoneOffset& arg1, const ::java::time::ZoneId& arg2);
	static ::java::time::ZonedDateTime OfLocal(const ::java::time::LocalDateTime& arg0, const ::java::time::ZoneId& arg1, const ::java::time::ZoneOffset& arg2);
	static ::java::time::ZonedDateTime OfStrict(const ::java::time::LocalDateTime& arg0, const ::java::time::ZoneOffset& arg1, const ::java::time::ZoneId& arg2);
	static ::java::time::ZonedDateTime Parse(const ::java::lang::CharSequence& arg0);
	static ::java::time::ZonedDateTime Parse(const ::java::lang::CharSequence& arg0, const ::java::time::format::DateTimeFormatter& arg1);
	::java::time::ZonedDateTime Plus(const ::jlong& arg0, const ::java::time::temporal::TemporalUnit& arg1) const;
	::java::time::ZonedDateTime Plus(const ::java::time::temporal::TemporalAmount& arg0) const;
	::java::time::ZonedDateTime PlusDays(const ::jlong& arg0) const;
	::java::time::ZonedDateTime PlusHours(const ::jlong& arg0) const;
	::java::time::ZonedDateTime PlusMinutes(const ::jlong& arg0) const;
	::java::time::ZonedDateTime PlusMonths(const ::jlong& arg0) const;
	::java::time::ZonedDateTime PlusNanos(const ::jlong& arg0) const;
	::java::time::ZonedDateTime PlusSeconds(const ::jlong& arg0) const;
	::java::time::ZonedDateTime PlusWeeks(const ::jlong& arg0) const;
	::java::time::ZonedDateTime PlusYears(const ::jlong& arg0) const;
	::java::lang::Object Query(const ::java::time::temporal::TemporalQuery& arg0) const;
	::java::time::temporal::ValueRange Range(const ::java::time::temporal::TemporalField& arg0) const;
	::java::time::LocalDate ToLocalDate() const;
	::java::time::LocalDateTime ToLocalDateTime() const;
	::java::time::LocalTime ToLocalTime() const;
	::java::time::OffsetDateTime ToOffsetDateTime() const;
	::java::lang::String ToString() const;
	::java::time::ZonedDateTime TruncatedTo(const ::java::time::temporal::TemporalUnit& arg0) const;
	::jlong Until(const ::java::time::temporal::Temporal& arg0, const ::java::time::temporal::TemporalUnit& arg1) const;
	::java::time::ZonedDateTime With(const ::java::time::temporal::TemporalAdjuster& arg0) const;
	::java::time::ZonedDateTime With(const ::java::time::temporal::TemporalField& arg0, const ::jlong& arg1) const;
	::java::time::ZonedDateTime WithDayOfMonth(const ::jint& arg0) const;
	::java::time::ZonedDateTime WithDayOfYear(const ::jint& arg0) const;
	::java::time::ZonedDateTime WithEarlierOffsetAtOverlap() const;
	::java::time::ZonedDateTime WithFixedOffsetZone() const;
	::java::time::ZonedDateTime WithHour(const ::jint& arg0) const;
	::java::time::ZonedDateTime WithLaterOffsetAtOverlap() const;
	::java::time::ZonedDateTime WithMinute(const ::jint& arg0) const;
	::java::time::ZonedDateTime WithMonth(const ::jint& arg0) const;
	::java::time::ZonedDateTime WithNano(const ::jint& arg0) const;
	::java::time::ZonedDateTime WithSecond(const ::jint& arg0) const;
	::java::time::ZonedDateTime WithYear(const ::jint& arg0) const;
	::java::time::ZonedDateTime WithZoneSameInstant(const ::java::time::ZoneId& arg0) const;
	::java::time::ZonedDateTime WithZoneSameLocal(const ::java::time::ZoneId& arg0) const;
	explicit ZonedDateTime(jobject o) : ::java::lang::Object(o) {}
	ZonedDateTime(const ZonedDateTime& o)  : ::java::lang::Object(o) {}

};

struct DayOfWeek : ::java::lang::Enum
{
	static jni::Class __CLASS;

	operator ::java::time::temporal::TemporalAccessor();
	operator ::java::time::temporal::TemporalAdjuster();
	static ::java::time::DayOfWeek& fFRIDAY();
	static ::java::time::DayOfWeek& fMONDAY();
	static ::java::time::DayOfWeek& fSATURDAY();
	static ::java::time::DayOfWeek& fSUNDAY();
	static ::java::time::DayOfWeek& fTHURSDAY();
	static ::java::time::DayOfWeek& fTUESDAY();
	static ::java::time::DayOfWeek& fWEDNESDAY();
	::java::time::temporal::Temporal AdjustInto(const ::java::time::temporal::Temporal& arg0) const;
	static ::java::time::DayOfWeek From(const ::java::time::temporal::TemporalAccessor& arg0);
	::jint Get(const ::java::time::temporal::TemporalField& arg0) const;
	::java::lang::String GetDisplayName(const ::java::time::format::TextStyle& arg0, const ::java::util::Locale& arg1) const;
	::jlong GetLong(const ::java::time::temporal::TemporalField& arg0) const;
	::jint GetValue() const;
	::jboolean IsSupported(const ::java::time::temporal::TemporalField& arg0) const;
	::java::time::DayOfWeek Minus(const ::jlong& arg0) const;
	static ::java::time::DayOfWeek Of(const ::jint& arg0);
	::java::time::DayOfWeek Plus(const ::jlong& arg0) const;
	::java::lang::Object Query(const ::java::time::temporal::TemporalQuery& arg0) const;
	::java::time::temporal::ValueRange Range(const ::java::time::temporal::TemporalField& arg0) const;
	static ::java::time::DayOfWeek ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::java::time::DayOfWeek > Values();
	explicit DayOfWeek(jobject o) : ::java::lang::Enum(o) {}
	DayOfWeek(const DayOfWeek& o)  : ::java::lang::Enum(o) {}

};

struct Month : ::java::lang::Enum
{
	static jni::Class __CLASS;

	operator ::java::time::temporal::TemporalAccessor();
	operator ::java::time::temporal::TemporalAdjuster();
	static ::java::time::Month& fAPRIL();
	static ::java::time::Month& fAUGUST();
	static ::java::time::Month& fDECEMBER();
	static ::java::time::Month& fFEBRUARY();
	static ::java::time::Month& fJANUARY();
	static ::java::time::Month& fJULY();
	static ::java::time::Month& fJUNE();
	static ::java::time::Month& fMARCH();
	static ::java::time::Month& fMAY();
	static ::java::time::Month& fNOVEMBER();
	static ::java::time::Month& fOCTOBER();
	static ::java::time::Month& fSEPTEMBER();
	::java::time::temporal::Temporal AdjustInto(const ::java::time::temporal::Temporal& arg0) const;
	::jint FirstDayOfYear(const ::jboolean& arg0) const;
	::java::time::Month FirstMonthOfQuarter() const;
	static ::java::time::Month From(const ::java::time::temporal::TemporalAccessor& arg0);
	::jint Get(const ::java::time::temporal::TemporalField& arg0) const;
	::java::lang::String GetDisplayName(const ::java::time::format::TextStyle& arg0, const ::java::util::Locale& arg1) const;
	::jlong GetLong(const ::java::time::temporal::TemporalField& arg0) const;
	::jint GetValue() const;
	::jboolean IsSupported(const ::java::time::temporal::TemporalField& arg0) const;
	::jint Length(const ::jboolean& arg0) const;
	::jint MaxLength() const;
	::jint MinLength() const;
	::java::time::Month Minus(const ::jlong& arg0) const;
	static ::java::time::Month Of(const ::jint& arg0);
	::java::time::Month Plus(const ::jlong& arg0) const;
	::java::lang::Object Query(const ::java::time::temporal::TemporalQuery& arg0) const;
	::java::time::temporal::ValueRange Range(const ::java::time::temporal::TemporalField& arg0) const;
	static ::java::time::Month ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::java::time::Month > Values();
	explicit Month(jobject o) : ::java::lang::Enum(o) {}
	Month(const Month& o)  : ::java::lang::Enum(o) {}

};

struct Clock : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean Equals(const ::java::lang::Object& arg0) const;
	static ::java::time::Clock Fixed(const ::java::time::Instant& arg0, const ::java::time::ZoneId& arg1);
	::java::time::ZoneId GetZone() const;
	::jint HashCode() const;
	::java::time::Instant Instant() const;
	::jlong Millis() const;
	static ::java::time::Clock Offset(const ::java::time::Clock& arg0, const ::java::time::Duration& arg1);
	static ::java::time::Clock System(const ::java::time::ZoneId& arg0);
	static ::java::time::Clock SystemDefaultZone();
	static ::java::time::Clock SystemUTC();
	static ::java::time::Clock Tick(const ::java::time::Clock& arg0, const ::java::time::Duration& arg1);
	static ::java::time::Clock TickMillis(const ::java::time::ZoneId& arg0);
	static ::java::time::Clock TickMinutes(const ::java::time::ZoneId& arg0);
	static ::java::time::Clock TickSeconds(const ::java::time::ZoneId& arg0);
	::java::time::Clock WithZone(const ::java::time::ZoneId& arg0) const;
	static jobject __Constructor();
	Clock() : ::java::lang::Object(__Constructor()) {}
	explicit Clock(jobject o) : ::java::lang::Object(o) {}
	Clock(const Clock& o)  : ::java::lang::Object(o) {}

};

struct OffsetDateTime : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::time::temporal::Temporal();
	operator ::java::time::temporal::TemporalAdjuster();
	operator ::java::lang::Comparable();
	operator ::java::io::Serializable();
	static ::java::time::OffsetDateTime& fMAX();
	static ::java::time::OffsetDateTime& fMIN();
	::java::time::temporal::Temporal AdjustInto(const ::java::time::temporal::Temporal& arg0) const;
	::java::time::ZonedDateTime AtZoneSameInstant(const ::java::time::ZoneId& arg0) const;
	::java::time::ZonedDateTime AtZoneSimilarLocal(const ::java::time::ZoneId& arg0) const;
	::jint CompareTo(const ::java::time::OffsetDateTime& arg0) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::lang::String Format(const ::java::time::format::DateTimeFormatter& arg0) const;
	static ::java::time::OffsetDateTime From(const ::java::time::temporal::TemporalAccessor& arg0);
	::jint Get(const ::java::time::temporal::TemporalField& arg0) const;
	::jint GetDayOfMonth() const;
	::java::time::DayOfWeek GetDayOfWeek() const;
	::jint GetDayOfYear() const;
	::jint GetHour() const;
	::jlong GetLong(const ::java::time::temporal::TemporalField& arg0) const;
	::jint GetMinute() const;
	::java::time::Month GetMonth() const;
	::jint GetMonthValue() const;
	::jint GetNano() const;
	::java::time::ZoneOffset GetOffset() const;
	::jint GetSecond() const;
	::jint GetYear() const;
	::jint HashCode() const;
	::jboolean IsAfter(const ::java::time::OffsetDateTime& arg0) const;
	::jboolean IsBefore(const ::java::time::OffsetDateTime& arg0) const;
	::jboolean IsEqual(const ::java::time::OffsetDateTime& arg0) const;
	::jboolean IsSupported(const ::java::time::temporal::TemporalField& arg0) const;
	::jboolean IsSupported(const ::java::time::temporal::TemporalUnit& arg0) const;
	::java::time::OffsetDateTime Minus(const ::jlong& arg0, const ::java::time::temporal::TemporalUnit& arg1) const;
	::java::time::OffsetDateTime Minus(const ::java::time::temporal::TemporalAmount& arg0) const;
	::java::time::OffsetDateTime MinusDays(const ::jlong& arg0) const;
	::java::time::OffsetDateTime MinusHours(const ::jlong& arg0) const;
	::java::time::OffsetDateTime MinusMinutes(const ::jlong& arg0) const;
	::java::time::OffsetDateTime MinusMonths(const ::jlong& arg0) const;
	::java::time::OffsetDateTime MinusNanos(const ::jlong& arg0) const;
	::java::time::OffsetDateTime MinusSeconds(const ::jlong& arg0) const;
	::java::time::OffsetDateTime MinusWeeks(const ::jlong& arg0) const;
	::java::time::OffsetDateTime MinusYears(const ::jlong& arg0) const;
	static ::java::time::OffsetDateTime Now();
	static ::java::time::OffsetDateTime Now(const ::java::time::Clock& arg0);
	static ::java::time::OffsetDateTime Now(const ::java::time::ZoneId& arg0);
	static ::java::time::OffsetDateTime Of(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5, const ::jint& arg6, const ::java::time::ZoneOffset& arg7);
	static ::java::time::OffsetDateTime Of(const ::java::time::LocalDate& arg0, const ::java::time::LocalTime& arg1, const ::java::time::ZoneOffset& arg2);
	static ::java::time::OffsetDateTime Of(const ::java::time::LocalDateTime& arg0, const ::java::time::ZoneOffset& arg1);
	static ::java::time::OffsetDateTime OfInstant(const ::java::time::Instant& arg0, const ::java::time::ZoneId& arg1);
	static ::java::time::OffsetDateTime Parse(const ::java::lang::CharSequence& arg0);
	static ::java::time::OffsetDateTime Parse(const ::java::lang::CharSequence& arg0, const ::java::time::format::DateTimeFormatter& arg1);
	::java::time::OffsetDateTime Plus(const ::jlong& arg0, const ::java::time::temporal::TemporalUnit& arg1) const;
	::java::time::OffsetDateTime Plus(const ::java::time::temporal::TemporalAmount& arg0) const;
	::java::time::OffsetDateTime PlusDays(const ::jlong& arg0) const;
	::java::time::OffsetDateTime PlusHours(const ::jlong& arg0) const;
	::java::time::OffsetDateTime PlusMinutes(const ::jlong& arg0) const;
	::java::time::OffsetDateTime PlusMonths(const ::jlong& arg0) const;
	::java::time::OffsetDateTime PlusNanos(const ::jlong& arg0) const;
	::java::time::OffsetDateTime PlusSeconds(const ::jlong& arg0) const;
	::java::time::OffsetDateTime PlusWeeks(const ::jlong& arg0) const;
	::java::time::OffsetDateTime PlusYears(const ::jlong& arg0) const;
	::java::lang::Object Query(const ::java::time::temporal::TemporalQuery& arg0) const;
	::java::time::temporal::ValueRange Range(const ::java::time::temporal::TemporalField& arg0) const;
	static ::java::util::Comparator TimeLineOrder();
	::jlong ToEpochSecond() const;
	::java::time::Instant ToInstant() const;
	::java::time::LocalDate ToLocalDate() const;
	::java::time::LocalDateTime ToLocalDateTime() const;
	::java::time::LocalTime ToLocalTime() const;
	::java::time::OffsetTime ToOffsetTime() const;
	::java::lang::String ToString() const;
	::java::time::ZonedDateTime ToZonedDateTime() const;
	::java::time::OffsetDateTime TruncatedTo(const ::java::time::temporal::TemporalUnit& arg0) const;
	::jlong Until(const ::java::time::temporal::Temporal& arg0, const ::java::time::temporal::TemporalUnit& arg1) const;
	::java::time::OffsetDateTime With(const ::java::time::temporal::TemporalAdjuster& arg0) const;
	::java::time::OffsetDateTime With(const ::java::time::temporal::TemporalField& arg0, const ::jlong& arg1) const;
	::java::time::OffsetDateTime WithDayOfMonth(const ::jint& arg0) const;
	::java::time::OffsetDateTime WithDayOfYear(const ::jint& arg0) const;
	::java::time::OffsetDateTime WithHour(const ::jint& arg0) const;
	::java::time::OffsetDateTime WithMinute(const ::jint& arg0) const;
	::java::time::OffsetDateTime WithMonth(const ::jint& arg0) const;
	::java::time::OffsetDateTime WithNano(const ::jint& arg0) const;
	::java::time::OffsetDateTime WithOffsetSameInstant(const ::java::time::ZoneOffset& arg0) const;
	::java::time::OffsetDateTime WithOffsetSameLocal(const ::java::time::ZoneOffset& arg0) const;
	::java::time::OffsetDateTime WithSecond(const ::jint& arg0) const;
	::java::time::OffsetDateTime WithYear(const ::jint& arg0) const;
	explicit OffsetDateTime(jobject o) : ::java::lang::Object(o) {}
	OffsetDateTime(const OffsetDateTime& o)  : ::java::lang::Object(o) {}

};

struct OffsetTime : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::time::temporal::Temporal();
	operator ::java::time::temporal::TemporalAdjuster();
	operator ::java::lang::Comparable();
	operator ::java::io::Serializable();
	static ::java::time::OffsetTime& fMAX();
	static ::java::time::OffsetTime& fMIN();
	::java::time::temporal::Temporal AdjustInto(const ::java::time::temporal::Temporal& arg0) const;
	::java::time::OffsetDateTime AtDate(const ::java::time::LocalDate& arg0) const;
	::jint CompareTo(const ::java::time::OffsetTime& arg0) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::lang::String Format(const ::java::time::format::DateTimeFormatter& arg0) const;
	static ::java::time::OffsetTime From(const ::java::time::temporal::TemporalAccessor& arg0);
	::jint Get(const ::java::time::temporal::TemporalField& arg0) const;
	::jint GetHour() const;
	::jlong GetLong(const ::java::time::temporal::TemporalField& arg0) const;
	::jint GetMinute() const;
	::jint GetNano() const;
	::java::time::ZoneOffset GetOffset() const;
	::jint GetSecond() const;
	::jint HashCode() const;
	::jboolean IsAfter(const ::java::time::OffsetTime& arg0) const;
	::jboolean IsBefore(const ::java::time::OffsetTime& arg0) const;
	::jboolean IsEqual(const ::java::time::OffsetTime& arg0) const;
	::jboolean IsSupported(const ::java::time::temporal::TemporalField& arg0) const;
	::jboolean IsSupported(const ::java::time::temporal::TemporalUnit& arg0) const;
	::java::time::OffsetTime Minus(const ::jlong& arg0, const ::java::time::temporal::TemporalUnit& arg1) const;
	::java::time::OffsetTime Minus(const ::java::time::temporal::TemporalAmount& arg0) const;
	::java::time::OffsetTime MinusHours(const ::jlong& arg0) const;
	::java::time::OffsetTime MinusMinutes(const ::jlong& arg0) const;
	::java::time::OffsetTime MinusNanos(const ::jlong& arg0) const;
	::java::time::OffsetTime MinusSeconds(const ::jlong& arg0) const;
	static ::java::time::OffsetTime Now();
	static ::java::time::OffsetTime Now(const ::java::time::Clock& arg0);
	static ::java::time::OffsetTime Now(const ::java::time::ZoneId& arg0);
	static ::java::time::OffsetTime Of(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::java::time::ZoneOffset& arg4);
	static ::java::time::OffsetTime Of(const ::java::time::LocalTime& arg0, const ::java::time::ZoneOffset& arg1);
	static ::java::time::OffsetTime OfInstant(const ::java::time::Instant& arg0, const ::java::time::ZoneId& arg1);
	static ::java::time::OffsetTime Parse(const ::java::lang::CharSequence& arg0);
	static ::java::time::OffsetTime Parse(const ::java::lang::CharSequence& arg0, const ::java::time::format::DateTimeFormatter& arg1);
	::java::time::OffsetTime Plus(const ::jlong& arg0, const ::java::time::temporal::TemporalUnit& arg1) const;
	::java::time::OffsetTime Plus(const ::java::time::temporal::TemporalAmount& arg0) const;
	::java::time::OffsetTime PlusHours(const ::jlong& arg0) const;
	::java::time::OffsetTime PlusMinutes(const ::jlong& arg0) const;
	::java::time::OffsetTime PlusNanos(const ::jlong& arg0) const;
	::java::time::OffsetTime PlusSeconds(const ::jlong& arg0) const;
	::java::lang::Object Query(const ::java::time::temporal::TemporalQuery& arg0) const;
	::java::time::temporal::ValueRange Range(const ::java::time::temporal::TemporalField& arg0) const;
	::jlong ToEpochSecond(const ::java::time::LocalDate& arg0) const;
	::java::time::LocalTime ToLocalTime() const;
	::java::lang::String ToString() const;
	::java::time::OffsetTime TruncatedTo(const ::java::time::temporal::TemporalUnit& arg0) const;
	::jlong Until(const ::java::time::temporal::Temporal& arg0, const ::java::time::temporal::TemporalUnit& arg1) const;
	::java::time::OffsetTime With(const ::java::time::temporal::TemporalAdjuster& arg0) const;
	::java::time::OffsetTime With(const ::java::time::temporal::TemporalField& arg0, const ::jlong& arg1) const;
	::java::time::OffsetTime WithHour(const ::jint& arg0) const;
	::java::time::OffsetTime WithMinute(const ::jint& arg0) const;
	::java::time::OffsetTime WithNano(const ::jint& arg0) const;
	::java::time::OffsetTime WithOffsetSameInstant(const ::java::time::ZoneOffset& arg0) const;
	::java::time::OffsetTime WithOffsetSameLocal(const ::java::time::ZoneOffset& arg0) const;
	::java::time::OffsetTime WithSecond(const ::jint& arg0) const;
	explicit OffsetTime(jobject o) : ::java::lang::Object(o) {}
	OffsetTime(const OffsetTime& o)  : ::java::lang::Object(o) {}

};

struct Period : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::time::chrono::ChronoPeriod();
	operator ::java::io::Serializable();
	static ::java::time::Period& fZERO();
	::java::time::temporal::Temporal AddTo(const ::java::time::temporal::Temporal& arg0) const;
	static ::java::time::Period Between(const ::java::time::LocalDate& arg0, const ::java::time::LocalDate& arg1);
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	static ::java::time::Period From(const ::java::time::temporal::TemporalAmount& arg0);
	::jlong Get(const ::java::time::temporal::TemporalUnit& arg0) const;
	::java::time::chrono::IsoChronology GetChronology() const;
	::jint GetDays() const;
	::jint GetMonths() const;
	::java::util::List GetUnits() const;
	::jint GetYears() const;
	::jint HashCode() const;
	::jboolean IsNegative() const;
	::jboolean IsZero() const;
	::java::time::Period Minus(const ::java::time::temporal::TemporalAmount& arg0) const;
	::java::time::Period MinusDays(const ::jlong& arg0) const;
	::java::time::Period MinusMonths(const ::jlong& arg0) const;
	::java::time::Period MinusYears(const ::jlong& arg0) const;
	::java::time::Period MultipliedBy(const ::jint& arg0) const;
	::java::time::Period Negated() const;
	::java::time::Period Normalized() const;
	static ::java::time::Period Of(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2);
	static ::java::time::Period OfDays(const ::jint& arg0);
	static ::java::time::Period OfMonths(const ::jint& arg0);
	static ::java::time::Period OfWeeks(const ::jint& arg0);
	static ::java::time::Period OfYears(const ::jint& arg0);
	static ::java::time::Period Parse(const ::java::lang::CharSequence& arg0);
	::java::time::Period Plus(const ::java::time::temporal::TemporalAmount& arg0) const;
	::java::time::Period PlusDays(const ::jlong& arg0) const;
	::java::time::Period PlusMonths(const ::jlong& arg0) const;
	::java::time::Period PlusYears(const ::jlong& arg0) const;
	::java::time::temporal::Temporal SubtractFrom(const ::java::time::temporal::Temporal& arg0) const;
	::java::lang::String ToString() const;
	::jlong ToTotalMonths() const;
	::java::time::Period WithDays(const ::jint& arg0) const;
	::java::time::Period WithMonths(const ::jint& arg0) const;
	::java::time::Period WithYears(const ::jint& arg0) const;
	explicit Period(jobject o) : ::java::lang::Object(o) {}
	Period(const Period& o)  : ::java::lang::Object(o) {}

};

}}

namespace java { namespace time { namespace chrono { 
struct ChronoPeriod : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::time::temporal::TemporalAmount();
	::java::time::temporal::Temporal AddTo(const ::java::time::temporal::Temporal& arg0) const;
	static ::java::time::chrono::ChronoPeriod Between(const ::java::time::chrono::ChronoLocalDate& arg0, const ::java::time::chrono::ChronoLocalDate& arg1);
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jlong Get(const ::java::time::temporal::TemporalUnit& arg0) const;
	::java::time::chrono::Chronology GetChronology() const;
	::java::util::List GetUnits() const;
	::jint HashCode() const;
	::jboolean IsNegative() const;
	::jboolean IsZero() const;
	::java::time::chrono::ChronoPeriod Minus(const ::java::time::temporal::TemporalAmount& arg0) const;
	::java::time::chrono::ChronoPeriod MultipliedBy(const ::jint& arg0) const;
	::java::time::chrono::ChronoPeriod Negated() const;
	::java::time::chrono::ChronoPeriod Normalized() const;
	::java::time::chrono::ChronoPeriod Plus(const ::java::time::temporal::TemporalAmount& arg0) const;
	::java::time::temporal::Temporal SubtractFrom(const ::java::time::temporal::Temporal& arg0) const;
	::java::lang::String ToString() const;
	explicit ChronoPeriod(jobject o) : java::lang::Object(o) {}
	ChronoPeriod(const ChronoPeriod& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::time::chrono::ChronoPeriod();
		operator ::java::time::temporal::TemporalAmount();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::time::temporal::Temporal AddTo(const ::java::time::temporal::Temporal& arg0) = 0;
		virtual ::jboolean Equals(const ::java::lang::Object& arg0) = 0;
		virtual ::jlong Get(const ::java::time::temporal::TemporalUnit& arg0) = 0;
		virtual ::java::time::chrono::Chronology GetChronology() = 0;
		virtual ::java::util::List GetUnits() = 0;
		virtual ::jint HashCode() = 0;
		virtual ::jboolean IsNegative() = 0;
		virtual ::jboolean IsZero() = 0;
		virtual ::java::time::chrono::ChronoPeriod Minus(const ::java::time::temporal::TemporalAmount& arg0) = 0;
		virtual ::java::time::chrono::ChronoPeriod MultipliedBy(const ::jint& arg0) = 0;
		virtual ::java::time::chrono::ChronoPeriod Negated() = 0;
		virtual ::java::time::chrono::ChronoPeriod Normalized() = 0;
		virtual ::java::time::chrono::ChronoPeriod Plus(const ::java::time::temporal::TemporalAmount& arg0) = 0;
		virtual ::java::time::temporal::Temporal SubtractFrom(const ::java::time::temporal::Temporal& arg0) = 0;
		virtual ::java::lang::String ToString() = 0;
	};
};

struct AbstractChronology : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::time::chrono::Chronology();
	::jint CompareTo(const ::java::time::chrono::Chronology& arg0) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint HashCode() const;
	::java::time::chrono::ChronoLocalDate ResolveDate(const ::java::util::Map& arg0, const ::java::time::format::ResolverStyle& arg1) const;
	::java::lang::String ToString() const;
	static jobject __Constructor();
	AbstractChronology() : ::java::lang::Object(__Constructor()) {}
	explicit AbstractChronology(jobject o) : ::java::lang::Object(o) {}
	AbstractChronology(const AbstractChronology& o)  : ::java::lang::Object(o) {}

};

struct IsoChronology : ::java::time::chrono::AbstractChronology
{
	static jni::Class __CLASS;

	operator ::java::io::Serializable();
	static ::java::time::chrono::IsoChronology& fINSTANCE();
	::java::time::LocalDate Date(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::java::time::LocalDate Date(const ::java::time::chrono::Era& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::java::time::LocalDate Date(const ::java::time::temporal::TemporalAccessor& arg0) const;
	::java::time::LocalDate DateEpochDay(const ::jlong& arg0) const;
	::java::time::LocalDate DateNow() const;
	::java::time::LocalDate DateNow(const ::java::time::Clock& arg0) const;
	::java::time::LocalDate DateNow(const ::java::time::ZoneId& arg0) const;
	::java::time::LocalDate DateYearDay(const ::jint& arg0, const ::jint& arg1) const;
	::java::time::LocalDate DateYearDay(const ::java::time::chrono::Era& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jlong EpochSecond(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5, const ::java::time::ZoneOffset& arg6) const;
	::java::time::chrono::IsoEra EraOf(const ::jint& arg0) const;
	::java::util::List Eras() const;
	::java::lang::String GetCalendarType() const;
	::java::lang::String GetId() const;
	::jboolean IsLeapYear(const ::jlong& arg0) const;
	::java::time::LocalDateTime LocalDateTime(const ::java::time::temporal::TemporalAccessor& arg0) const;
	::java::time::Period Period(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jint ProlepticYear(const ::java::time::chrono::Era& arg0, const ::jint& arg1) const;
	::java::time::temporal::ValueRange Range(const ::java::time::temporal::ChronoField& arg0) const;
	::java::time::LocalDate ResolveDate(const ::java::util::Map& arg0, const ::java::time::format::ResolverStyle& arg1) const;
	::java::time::ZonedDateTime ZonedDateTime(const ::java::time::Instant& arg0, const ::java::time::ZoneId& arg1) const;
	::java::time::ZonedDateTime ZonedDateTime(const ::java::time::temporal::TemporalAccessor& arg0) const;
	explicit IsoChronology(jobject o) : ::java::time::chrono::AbstractChronology(o) {}
	IsoChronology(const IsoChronology& o)  : ::java::time::chrono::AbstractChronology(o) {}

};

struct Era : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::time::temporal::TemporalAccessor();
	operator ::java::time::temporal::TemporalAdjuster();
	::java::time::temporal::Temporal AdjustInto(const ::java::time::temporal::Temporal& arg0) const;
	::jint Get(const ::java::time::temporal::TemporalField& arg0) const;
	::java::lang::String GetDisplayName(const ::java::time::format::TextStyle& arg0, const ::java::util::Locale& arg1) const;
	::jlong GetLong(const ::java::time::temporal::TemporalField& arg0) const;
	::jint GetValue() const;
	::jboolean IsSupported(const ::java::time::temporal::TemporalField& arg0) const;
	::java::lang::Object Query(const ::java::time::temporal::TemporalQuery& arg0) const;
	::java::time::temporal::ValueRange Range(const ::java::time::temporal::TemporalField& arg0) const;
	explicit Era(jobject o) : java::lang::Object(o) {}
	Era(const Era& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::time::chrono::Era();
		operator ::java::time::temporal::TemporalAccessor();
		operator ::java::time::temporal::TemporalAdjuster();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::time::temporal::Temporal AdjustInto(const ::java::time::temporal::Temporal& arg0) = 0;
		virtual ::jint Get(const ::java::time::temporal::TemporalField& arg0) = 0;
		virtual ::java::lang::String GetDisplayName(const ::java::time::format::TextStyle& arg0, const ::java::util::Locale& arg1) = 0;
		virtual ::jlong GetLong(const ::java::time::temporal::TemporalField& arg0) = 0;
		virtual ::jint GetValue() = 0;
		virtual ::jboolean IsSupported(const ::java::time::temporal::TemporalField& arg0) = 0;
		virtual ::java::lang::Object Query(const ::java::time::temporal::TemporalQuery& arg0) = 0;
		virtual ::java::time::temporal::ValueRange Range(const ::java::time::temporal::TemporalField& arg0) = 0;
	};
};

struct IsoEra : ::java::lang::Enum
{
	static jni::Class __CLASS;

	operator ::java::time::chrono::Era();
	static ::java::time::chrono::IsoEra& fBCE();
	static ::java::time::chrono::IsoEra& fCE();
	::jint GetValue() const;
	static ::java::time::chrono::IsoEra Of(const ::jint& arg0);
	static ::java::time::chrono::IsoEra ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::java::time::chrono::IsoEra > Values();
	explicit IsoEra(jobject o) : ::java::lang::Enum(o) {}
	IsoEra(const IsoEra& o)  : ::java::lang::Enum(o) {}

};

}}}

namespace java { namespace time { namespace temporal { 
struct ChronoField : ::java::lang::Enum
{
	static jni::Class __CLASS;

	operator ::java::time::temporal::TemporalField();
	static ::java::time::temporal::ChronoField& fALIGNED_DAY_OF_WEEK_IN_MONTH();
	static ::java::time::temporal::ChronoField& fALIGNED_DAY_OF_WEEK_IN_YEAR();
	static ::java::time::temporal::ChronoField& fALIGNED_WEEK_OF_MONTH();
	static ::java::time::temporal::ChronoField& fALIGNED_WEEK_OF_YEAR();
	static ::java::time::temporal::ChronoField& fAMPM_OF_DAY();
	static ::java::time::temporal::ChronoField& fCLOCK_HOUR_OF_AMPM();
	static ::java::time::temporal::ChronoField& fCLOCK_HOUR_OF_DAY();
	static ::java::time::temporal::ChronoField& fDAY_OF_MONTH();
	static ::java::time::temporal::ChronoField& fDAY_OF_WEEK();
	static ::java::time::temporal::ChronoField& fDAY_OF_YEAR();
	static ::java::time::temporal::ChronoField& fEPOCH_DAY();
	static ::java::time::temporal::ChronoField& fERA();
	static ::java::time::temporal::ChronoField& fHOUR_OF_AMPM();
	static ::java::time::temporal::ChronoField& fHOUR_OF_DAY();
	static ::java::time::temporal::ChronoField& fINSTANT_SECONDS();
	static ::java::time::temporal::ChronoField& fMICRO_OF_DAY();
	static ::java::time::temporal::ChronoField& fMICRO_OF_SECOND();
	static ::java::time::temporal::ChronoField& fMILLI_OF_DAY();
	static ::java::time::temporal::ChronoField& fMILLI_OF_SECOND();
	static ::java::time::temporal::ChronoField& fMINUTE_OF_DAY();
	static ::java::time::temporal::ChronoField& fMINUTE_OF_HOUR();
	static ::java::time::temporal::ChronoField& fMONTH_OF_YEAR();
	static ::java::time::temporal::ChronoField& fNANO_OF_DAY();
	static ::java::time::temporal::ChronoField& fNANO_OF_SECOND();
	static ::java::time::temporal::ChronoField& fOFFSET_SECONDS();
	static ::java::time::temporal::ChronoField& fPROLEPTIC_MONTH();
	static ::java::time::temporal::ChronoField& fSECOND_OF_DAY();
	static ::java::time::temporal::ChronoField& fSECOND_OF_MINUTE();
	static ::java::time::temporal::ChronoField& fYEAR();
	static ::java::time::temporal::ChronoField& fYEAR_OF_ERA();
	::java::time::temporal::Temporal AdjustInto(const ::java::time::temporal::Temporal& arg0, const ::jlong& arg1) const;
	::jint CheckValidIntValue(const ::jlong& arg0) const;
	::jlong CheckValidValue(const ::jlong& arg0) const;
	::java::time::temporal::TemporalUnit GetBaseUnit() const;
	::java::lang::String GetDisplayName(const ::java::util::Locale& arg0) const;
	::jlong GetFrom(const ::java::time::temporal::TemporalAccessor& arg0) const;
	::java::time::temporal::TemporalUnit GetRangeUnit() const;
	::jboolean IsDateBased() const;
	::jboolean IsSupportedBy(const ::java::time::temporal::TemporalAccessor& arg0) const;
	::jboolean IsTimeBased() const;
	::java::time::temporal::ValueRange Range() const;
	::java::time::temporal::ValueRange RangeRefinedBy(const ::java::time::temporal::TemporalAccessor& arg0) const;
	::java::lang::String ToString() const;
	static ::java::time::temporal::ChronoField ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::java::time::temporal::ChronoField > Values();
	explicit ChronoField(jobject o) : ::java::lang::Enum(o) {}
	ChronoField(const ChronoField& o)  : ::java::lang::Enum(o) {}

};

}}}

namespace java { namespace time { namespace format { 
struct DecimalStyle : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::java::time::format::DecimalStyle& fSTANDARD();
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	static ::java::util::Set GetAvailableLocales();
	::jchar GetDecimalSeparator() const;
	::jchar GetNegativeSign() const;
	::jchar GetPositiveSign() const;
	::jchar GetZeroDigit() const;
	::jint HashCode() const;
	static ::java::time::format::DecimalStyle Of(const ::java::util::Locale& arg0);
	static ::java::time::format::DecimalStyle OfDefaultLocale();
	::java::lang::String ToString() const;
	::java::time::format::DecimalStyle WithDecimalSeparator(const ::jchar& arg0) const;
	::java::time::format::DecimalStyle WithNegativeSign(const ::jchar& arg0) const;
	::java::time::format::DecimalStyle WithPositiveSign(const ::jchar& arg0) const;
	::java::time::format::DecimalStyle WithZeroDigit(const ::jchar& arg0) const;
	explicit DecimalStyle(jobject o) : ::java::lang::Object(o) {}
	DecimalStyle(const DecimalStyle& o)  : ::java::lang::Object(o) {}

};

struct FormatStyle : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::java::time::format::FormatStyle& fFULL();
	static ::java::time::format::FormatStyle& fLONG();
	static ::java::time::format::FormatStyle& fMEDIUM();
	static ::java::time::format::FormatStyle& fSHORT();
	static ::java::time::format::FormatStyle ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::java::time::format::FormatStyle > Values();
	explicit FormatStyle(jobject o) : ::java::lang::Enum(o) {}
	FormatStyle(const FormatStyle& o)  : ::java::lang::Enum(o) {}

};

}}}

namespace java { namespace text { 
struct ParsePosition : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint GetErrorIndex() const;
	::jint GetIndex() const;
	::jint HashCode() const;
	::jvoid SetErrorIndex(const ::jint& arg0) const;
	::jvoid SetIndex(const ::jint& arg0) const;
	::java::lang::String ToString() const;
	static jobject __Constructor(const ::jint& arg0);
	ParsePosition(const ::jint& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit ParsePosition(jobject o) : ::java::lang::Object(o) {}
	ParsePosition(const ParsePosition& o)  : ::java::lang::Object(o) {}

};

struct Format : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Serializable();
	operator ::java::lang::Cloneable();
	::java::lang::Object Clone() const;
	::java::lang::String xFormat(const ::java::lang::Object& arg0) const;
	::java::lang::StringBuffer xFormat(const ::java::lang::Object& arg0, const ::java::lang::StringBuffer& arg1, const ::java::text::FieldPosition& arg2) const;
	::java::text::AttributedCharacterIterator FormatToCharacterIterator(const ::java::lang::Object& arg0) const;
	::java::lang::Object ParseObject(const ::java::lang::String& arg0) const;
	::java::lang::Object ParseObject(const ::java::lang::String& arg0, const ::java::text::ParsePosition& arg1) const;
	static jobject __Constructor();
	Format() : ::java::lang::Object(__Constructor()) {}
	explicit Format(jobject o) : ::java::lang::Object(o) {}
	Format(const Format& o)  : ::java::lang::Object(o) {}

};

struct FieldPosition : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint GetBeginIndex() const;
	::jint GetEndIndex() const;
	::jint GetField() const;
	::java::text::Format_Field GetFieldAttribute() const;
	::jint HashCode() const;
	::jvoid SetBeginIndex(const ::jint& arg0) const;
	::jvoid SetEndIndex(const ::jint& arg0) const;
	::java::lang::String ToString() const;
	static jobject __Constructor(const ::jint& arg0);
	FieldPosition(const ::jint& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::text::Format_Field& arg0);
	FieldPosition(const ::java::text::Format_Field& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::text::Format_Field& arg0, const ::jint& arg1);
	FieldPosition(const ::java::text::Format_Field& arg0, const ::jint& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit FieldPosition(jobject o) : ::java::lang::Object(o) {}
	FieldPosition(const FieldPosition& o)  : ::java::lang::Object(o) {}

};

struct AttributedCharacterIterator_Attribute : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Serializable();
	static ::java::text::AttributedCharacterIterator_Attribute& fINPUT_METHOD_SEGMENT();
	static ::java::text::AttributedCharacterIterator_Attribute& fLANGUAGE();
	static ::java::text::AttributedCharacterIterator_Attribute& fREADING();
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::lang::String GetName() const;
	::jint HashCode() const;
	::java::lang::Object ReadResolve() const;
	::java::lang::String ToString() const;
	static jobject __Constructor(const ::java::lang::String& arg0);
	AttributedCharacterIterator_Attribute(const ::java::lang::String& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit AttributedCharacterIterator_Attribute(jobject o) : ::java::lang::Object(o) {}
	AttributedCharacterIterator_Attribute(const AttributedCharacterIterator_Attribute& o)  : ::java::lang::Object(o) {}

};

struct Format_Field : ::java::text::AttributedCharacterIterator_Attribute
{
	static jni::Class __CLASS;

	static jobject __Constructor(const ::java::lang::String& arg0);
	Format_Field(const ::java::lang::String& arg0) : ::java::text::AttributedCharacterIterator_Attribute(__Constructor(arg0)) {}
	explicit Format_Field(jobject o) : ::java::text::AttributedCharacterIterator_Attribute(o) {}
	Format_Field(const Format_Field& o)  : ::java::text::AttributedCharacterIterator_Attribute(o) {}

};

struct AttributedCharacterIterator : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::text::CharacterIterator();
	::java::util::Set GetAllAttributeKeys() const;
	::java::lang::Object GetAttribute(const ::java::text::AttributedCharacterIterator_Attribute& arg0) const;
	::java::util::Map GetAttributes() const;
	::jint GetRunLimit() const;
	::jint GetRunLimit(const ::java::text::AttributedCharacterIterator_Attribute& arg0) const;
	::jint GetRunLimit(const ::java::util::Set& arg0) const;
	::jint GetRunStart() const;
	::jint GetRunStart(const ::java::text::AttributedCharacterIterator_Attribute& arg0) const;
	::jint GetRunStart(const ::java::util::Set& arg0) const;
	explicit AttributedCharacterIterator(jobject o) : java::lang::Object(o) {}
	AttributedCharacterIterator(const AttributedCharacterIterator& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::text::AttributedCharacterIterator();
		operator ::java::text::CharacterIterator();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::util::Set GetAllAttributeKeys() = 0;
		virtual ::java::lang::Object GetAttribute(const ::java::text::AttributedCharacterIterator_Attribute& arg0) = 0;
		virtual ::java::util::Map GetAttributes() = 0;
		virtual ::jint GetRunLimit() = 0;
		virtual ::jint GetRunLimit(const ::java::text::AttributedCharacterIterator_Attribute& arg0) = 0;
		virtual ::jint GetRunLimit(const ::java::util::Set& arg0) = 0;
		virtual ::jint GetRunStart() = 0;
		virtual ::jint GetRunStart(const ::java::text::AttributedCharacterIterator_Attribute& arg0) = 0;
		virtual ::jint GetRunStart(const ::java::util::Set& arg0) = 0;
	};
};

struct CharacterIterator : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::Cloneable();
	static ::jchar& fDONE();
	::java::lang::Object Clone() const;
	::jchar Current() const;
	::jchar First() const;
	::jint GetBeginIndex() const;
	::jint GetEndIndex() const;
	::jint GetIndex() const;
	::jchar Last() const;
	::jchar Next() const;
	::jchar Previous() const;
	::jchar SetIndex(const ::jint& arg0) const;
	explicit CharacterIterator(jobject o) : java::lang::Object(o) {}
	CharacterIterator(const CharacterIterator& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::text::CharacterIterator();
		operator ::java::lang::Cloneable();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::lang::Object Clone() = 0;
		virtual ::jchar Current() = 0;
		virtual ::jchar First() = 0;
		virtual ::jint GetBeginIndex() = 0;
		virtual ::jint GetEndIndex() = 0;
		virtual ::jint GetIndex() = 0;
		virtual ::jchar Last() = 0;
		virtual ::jchar Next() = 0;
		virtual ::jchar Previous() = 0;
		virtual ::jchar SetIndex(const ::jint& arg0) = 0;
	};
};

}}

namespace java { namespace time { namespace zone { 
struct ZoneOffsetTransition : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::Comparable();
	operator ::java::io::Serializable();
	::jint CompareTo(const ::java::time::zone::ZoneOffsetTransition& arg0) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::time::LocalDateTime GetDateTimeAfter() const;
	::java::time::LocalDateTime GetDateTimeBefore() const;
	::java::time::Duration GetDuration() const;
	::java::time::Instant GetInstant() const;
	::java::time::ZoneOffset GetOffsetAfter() const;
	::java::time::ZoneOffset GetOffsetBefore() const;
	::jint HashCode() const;
	::jboolean IsGap() const;
	::jboolean IsOverlap() const;
	::jboolean IsValidOffset(const ::java::time::ZoneOffset& arg0) const;
	static ::java::time::zone::ZoneOffsetTransition Of(const ::java::time::LocalDateTime& arg0, const ::java::time::ZoneOffset& arg1, const ::java::time::ZoneOffset& arg2);
	::jlong ToEpochSecond() const;
	::java::lang::String ToString() const;
	explicit ZoneOffsetTransition(jobject o) : ::java::lang::Object(o) {}
	ZoneOffsetTransition(const ZoneOffsetTransition& o)  : ::java::lang::Object(o) {}

};

}}}

namespace java { namespace io { 
struct Reader : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::Readable();
	operator ::java::io::Closeable();
	::java::lang::Object fLock() const;
	void fLock(const ::java::lang::Object& arg0) const;
	::jvoid Close() const;
	::jvoid Mark(const ::jint& arg0) const;
	::jboolean MarkSupported() const;
	static ::java::io::Reader NullReader();
	::jint Read() const;
	::jint Read(const ::java::nio::CharBuffer& arg0) const;
	::jint Read(const jni::Array< ::jchar >& arg0) const;
	::jint Read(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jboolean Ready() const;
	::jvoid Reset() const;
	::jlong Skip(const ::jlong& arg0) const;
	::jlong TransferTo(const ::java::io::Writer& arg0) const;
	static jobject __Constructor();
	Reader() : ::java::lang::Object(__Constructor()) {}
	static jobject __Constructor(const ::java::lang::Object& arg0);
	Reader(const ::java::lang::Object& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit Reader(jobject o) : ::java::lang::Object(o) {}
	Reader(const Reader& o)  : ::java::lang::Object(o) {}

};

}}

namespace java { namespace security { 
struct Provider_Service : ::java::lang::Object
{
	static jni::Class __CLASS;

	::java::lang::String GetAlgorithm() const;
	::java::lang::String GetAttribute(const ::java::lang::String& arg0) const;
	::java::lang::String GetClassName() const;
	::java::security::Provider GetProvider() const;
	::java::lang::String GetType() const;
	::java::lang::Object NewInstance(const ::java::lang::Object& arg0) const;
	::jboolean SupportsParameter(const ::java::lang::Object& arg0) const;
	::java::lang::String ToString() const;
	static jobject __Constructor(const ::java::security::Provider& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2, const ::java::lang::String& arg3, const ::java::util::List& arg4, const ::java::util::Map& arg5);
	Provider_Service(const ::java::security::Provider& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2, const ::java::lang::String& arg3, const ::java::util::List& arg4, const ::java::util::Map& arg5) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3, arg4, arg5)) {}
	explicit Provider_Service(jobject o) : ::java::lang::Object(o) {}
	Provider_Service(const Provider_Service& o)  : ::java::lang::Object(o) {}

};

struct CodeSigner : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Serializable();
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::security::cert::CertPath GetSignerCertPath() const;
	::java::security::Timestamp GetTimestamp() const;
	::jint HashCode() const;
	::java::lang::String ToString() const;
	static jobject __Constructor(const ::java::security::cert::CertPath& arg0, const ::java::security::Timestamp& arg1);
	CodeSigner(const ::java::security::cert::CertPath& arg0, const ::java::security::Timestamp& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit CodeSigner(jobject o) : ::java::lang::Object(o) {}
	CodeSigner(const CodeSigner& o)  : ::java::lang::Object(o) {}

};

}}

namespace java { namespace security { namespace cert { 
struct CertPath : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Serializable();
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::util::List GetCertificates() const;
	jni::Array< ::jbyte > GetEncoded() const;
	jni::Array< ::jbyte > GetEncoded(const ::java::lang::String& arg0) const;
	::java::util::Iterator GetEncodings() const;
	::java::lang::String GetType() const;
	::jint HashCode() const;
	::java::lang::String ToString() const;
	::java::lang::Object WriteReplace() const;
	static jobject __Constructor(const ::java::lang::String& arg0);
	CertPath(const ::java::lang::String& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit CertPath(jobject o) : ::java::lang::Object(o) {}
	CertPath(const CertPath& o)  : ::java::lang::Object(o) {}

};

}}}

namespace java { namespace security { 
struct Timestamp : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Serializable();
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::security::cert::CertPath GetSignerCertPath() const;
	::java::util::Date GetTimestamp() const;
	::jint HashCode() const;
	::java::lang::String ToString() const;
	static jobject __Constructor(const ::java::util::Date& arg0, const ::java::security::cert::CertPath& arg1);
	Timestamp(const ::java::util::Date& arg0, const ::java::security::cert::CertPath& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit Timestamp(jobject o) : ::java::lang::Object(o) {}
	Timestamp(const Timestamp& o)  : ::java::lang::Object(o) {}

};

}}

namespace java { namespace util { 
struct Date : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Serializable();
	operator ::java::lang::Cloneable();
	operator ::java::lang::Comparable();
	static ::jlong UTC(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5);
	::jboolean After(const ::java::util::Date& arg0) const;
	::jboolean Before(const ::java::util::Date& arg0) const;
	::java::lang::Object Clone() const;
	::jint CompareTo(const ::java::util::Date& arg0) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	static ::java::util::Date From(const ::java::time::Instant& arg0);
	::jint GetDate() const;
	::jint GetDay() const;
	::jint GetHours() const;
	::jint GetMinutes() const;
	::jint GetMonth() const;
	::jint GetSeconds() const;
	::jlong GetTime() const;
	::jint GetTimezoneOffset() const;
	::jint GetYear() const;
	::jint HashCode() const;
	static ::jlong Parse(const ::java::lang::String& arg0);
	::jvoid SetDate(const ::jint& arg0) const;
	::jvoid SetHours(const ::jint& arg0) const;
	::jvoid SetMinutes(const ::jint& arg0) const;
	::jvoid SetMonth(const ::jint& arg0) const;
	::jvoid SetSeconds(const ::jint& arg0) const;
	::jvoid SetTime(const ::jlong& arg0) const;
	::jvoid SetYear(const ::jint& arg0) const;
	::java::lang::String ToGMTString() const;
	::java::time::Instant ToInstant() const;
	::java::lang::String ToLocaleString() const;
	::java::lang::String ToString() const;
	static jobject __Constructor();
	Date() : ::java::lang::Object(__Constructor()) {}
	static jobject __Constructor(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2);
	Date(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2) : ::java::lang::Object(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4);
	Date(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3, arg4)) {}
	static jobject __Constructor(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5);
	Date(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3, arg4, arg5)) {}
	static jobject __Constructor(const ::jlong& arg0);
	Date(const ::jlong& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::String& arg0);
	Date(const ::java::lang::String& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit Date(jobject o) : ::java::lang::Object(o) {}
	Date(const Date& o)  : ::java::lang::Object(o) {}

};

}}

namespace java { namespace lang { 
struct NamedPackage : ::java::lang::Object
{
	static jni::Class __CLASS;

	explicit NamedPackage(jobject o) : ::java::lang::Object(o) {}
	NamedPackage(const NamedPackage& o)  : ::java::lang::Object(o) {}

};

struct Package : ::java::lang::NamedPackage
{
	static jni::Class __CLASS;

	operator ::java::lang::reflect::AnnotatedElement();
	::java::lang::annotation::Annotation GetAnnotation(const ::java::lang::Class& arg0) const;
	jni::Array< ::java::lang::annotation::Annotation > GetAnnotations() const;
	jni::Array< ::java::lang::annotation::Annotation > GetAnnotationsByType(const ::java::lang::Class& arg0) const;
	::java::lang::annotation::Annotation GetDeclaredAnnotation(const ::java::lang::Class& arg0) const;
	jni::Array< ::java::lang::annotation::Annotation > GetDeclaredAnnotations() const;
	jni::Array< ::java::lang::annotation::Annotation > GetDeclaredAnnotationsByType(const ::java::lang::Class& arg0) const;
	::java::lang::String GetImplementationTitle() const;
	::java::lang::String GetImplementationVendor() const;
	::java::lang::String GetImplementationVersion() const;
	::java::lang::String GetName() const;
	static ::java::lang::Package GetPackage(const ::java::lang::String& arg0);
	static jni::Array< ::java::lang::Package > GetPackages();
	::java::lang::String GetSpecificationTitle() const;
	::java::lang::String GetSpecificationVendor() const;
	::java::lang::String GetSpecificationVersion() const;
	::jint HashCode() const;
	::jboolean IsAnnotationPresent(const ::java::lang::Class& arg0) const;
	::jboolean IsCompatibleWith(const ::java::lang::String& arg0) const;
	::jboolean IsSealed() const;
	::jboolean IsSealed(const ::java::net::URL& arg0) const;
	::java::lang::String ToString() const;
	explicit Package(jobject o) : ::java::lang::NamedPackage(o) {}
	Package(const Package& o)  : ::java::lang::NamedPackage(o) {}

};

}}

namespace java { namespace lang { namespace module { 
struct ModuleDescriptor : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::Comparable();
	::jint CompareTo(const ::java::lang::module::ModuleDescriptor& arg0) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::util::Set Exports() const;
	::jint HashCode() const;
	::jboolean IsAutomatic() const;
	::jboolean IsOpen() const;
	::java::util::Optional MainClass() const;
	::java::util::Set Modifiers() const;
	::java::lang::String Name() const;
	static ::java::lang::module::ModuleDescriptor_Builder NewAutomaticModule(const ::java::lang::String& arg0);
	static ::java::lang::module::ModuleDescriptor_Builder NewModule(const ::java::lang::String& arg0);
	static ::java::lang::module::ModuleDescriptor_Builder NewModule(const ::java::lang::String& arg0, const ::java::util::Set& arg1);
	static ::java::lang::module::ModuleDescriptor_Builder NewOpenModule(const ::java::lang::String& arg0);
	::java::util::Set Opens() const;
	::java::util::Set Packages() const;
	::java::util::Set Provides() const;
	::java::util::Optional RawVersion() const;
	static ::java::lang::module::ModuleDescriptor Read(const ::java::io::InputStream& arg0);
	static ::java::lang::module::ModuleDescriptor Read(const ::java::io::InputStream& arg0, const ::java::util::function::Supplier& arg1);
	static ::java::lang::module::ModuleDescriptor Read(const ::java::nio::ByteBuffer& arg0);
	static ::java::lang::module::ModuleDescriptor Read(const ::java::nio::ByteBuffer& arg0, const ::java::util::function::Supplier& arg1);
	::java::util::Set Requires() const;
	::java::lang::String ToNameAndVersion() const;
	::java::lang::String ToString() const;
	::java::util::Set Uses() const;
	::java::util::Optional Version() const;
	explicit ModuleDescriptor(jobject o) : ::java::lang::Object(o) {}
	ModuleDescriptor(const ModuleDescriptor& o)  : ::java::lang::Object(o) {}

};

struct ModuleDescriptor_Builder : ::java::lang::Object
{
	static jni::Class __CLASS;

	::java::lang::module::ModuleDescriptor Build() const;
	::java::lang::module::ModuleDescriptor_Builder Exports(const ::java::lang::String& arg0) const;
	::java::lang::module::ModuleDescriptor_Builder Exports(const ::java::lang::String& arg0, const ::java::util::Set& arg1) const;
	::java::lang::module::ModuleDescriptor_Builder Exports(const ::java::lang::module::ModuleDescriptor_Exports& arg0) const;
	::java::lang::module::ModuleDescriptor_Builder Exports(const ::java::util::Set& arg0, const ::java::lang::String& arg1) const;
	::java::lang::module::ModuleDescriptor_Builder Exports(const ::java::util::Set& arg0, const ::java::lang::String& arg1, const ::java::util::Set& arg2) const;
	::java::lang::module::ModuleDescriptor_Builder MainClass(const ::java::lang::String& arg0) const;
	::java::lang::module::ModuleDescriptor_Builder Opens(const ::java::lang::String& arg0) const;
	::java::lang::module::ModuleDescriptor_Builder Opens(const ::java::lang::String& arg0, const ::java::util::Set& arg1) const;
	::java::lang::module::ModuleDescriptor_Builder Opens(const ::java::lang::module::ModuleDescriptor_Opens& arg0) const;
	::java::lang::module::ModuleDescriptor_Builder Opens(const ::java::util::Set& arg0, const ::java::lang::String& arg1) const;
	::java::lang::module::ModuleDescriptor_Builder Opens(const ::java::util::Set& arg0, const ::java::lang::String& arg1, const ::java::util::Set& arg2) const;
	::java::lang::module::ModuleDescriptor_Builder Packages(const ::java::util::Set& arg0) const;
	::java::lang::module::ModuleDescriptor_Builder Provides(const ::java::lang::String& arg0, const ::java::util::List& arg1) const;
	::java::lang::module::ModuleDescriptor_Builder Provides(const ::java::lang::module::ModuleDescriptor_Provides& arg0) const;
	::java::lang::module::ModuleDescriptor_Builder Requires(const ::java::lang::String& arg0) const;
	::java::lang::module::ModuleDescriptor_Builder Requires(const ::java::lang::module::ModuleDescriptor_Requires& arg0) const;
	::java::lang::module::ModuleDescriptor_Builder Requires(const ::java::util::Set& arg0, const ::java::lang::String& arg1) const;
	::java::lang::module::ModuleDescriptor_Builder Requires(const ::java::util::Set& arg0, const ::java::lang::String& arg1, const ::java::lang::module::ModuleDescriptor_Version& arg2) const;
	::java::lang::module::ModuleDescriptor_Builder Uses(const ::java::lang::String& arg0) const;
	::java::lang::module::ModuleDescriptor_Builder Version(const ::java::lang::String& arg0) const;
	::java::lang::module::ModuleDescriptor_Builder Version(const ::java::lang::module::ModuleDescriptor_Version& arg0) const;
	explicit ModuleDescriptor_Builder(jobject o) : ::java::lang::Object(o) {}
	ModuleDescriptor_Builder(const ModuleDescriptor_Builder& o)  : ::java::lang::Object(o) {}

};

struct ModuleDescriptor_Exports : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::Comparable();
	::jint CompareTo(const ::java::lang::module::ModuleDescriptor_Exports& arg0) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint HashCode() const;
	::jboolean IsQualified() const;
	::java::util::Set Modifiers() const;
	::java::lang::String Source() const;
	::java::util::Set Targets() const;
	::java::lang::String ToString() const;
	explicit ModuleDescriptor_Exports(jobject o) : ::java::lang::Object(o) {}
	ModuleDescriptor_Exports(const ModuleDescriptor_Exports& o)  : ::java::lang::Object(o) {}

};

struct ModuleDescriptor_Opens : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::Comparable();
	::jint CompareTo(const ::java::lang::module::ModuleDescriptor_Opens& arg0) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint HashCode() const;
	::jboolean IsQualified() const;
	::java::util::Set Modifiers() const;
	::java::lang::String Source() const;
	::java::util::Set Targets() const;
	::java::lang::String ToString() const;
	explicit ModuleDescriptor_Opens(jobject o) : ::java::lang::Object(o) {}
	ModuleDescriptor_Opens(const ModuleDescriptor_Opens& o)  : ::java::lang::Object(o) {}

};

struct ModuleDescriptor_Provides : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::Comparable();
	::jint CompareTo(const ::java::lang::module::ModuleDescriptor_Provides& arg0) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint HashCode() const;
	::java::util::List Providers() const;
	::java::lang::String Service() const;
	::java::lang::String ToString() const;
	explicit ModuleDescriptor_Provides(jobject o) : ::java::lang::Object(o) {}
	ModuleDescriptor_Provides(const ModuleDescriptor_Provides& o)  : ::java::lang::Object(o) {}

};

struct ModuleDescriptor_Requires : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::Comparable();
	::jint CompareTo(const ::java::lang::module::ModuleDescriptor_Requires& arg0) const;
	::java::util::Optional CompiledVersion() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint HashCode() const;
	::java::util::Set Modifiers() const;
	::java::lang::String Name() const;
	::java::util::Optional RawCompiledVersion() const;
	::java::lang::String ToString() const;
	explicit ModuleDescriptor_Requires(jobject o) : ::java::lang::Object(o) {}
	ModuleDescriptor_Requires(const ModuleDescriptor_Requires& o)  : ::java::lang::Object(o) {}

};

struct ModuleDescriptor_Version : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::Comparable();
	::jint CompareTo(const ::java::lang::module::ModuleDescriptor_Version& arg0) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint HashCode() const;
	static ::java::lang::module::ModuleDescriptor_Version Parse(const ::java::lang::String& arg0);
	::java::lang::String ToString() const;
	explicit ModuleDescriptor_Version(jobject o) : ::java::lang::Object(o) {}
	ModuleDescriptor_Version(const ModuleDescriptor_Version& o)  : ::java::lang::Object(o) {}

};

}}}

namespace java { namespace lang { 
struct ModuleLayer : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::java::lang::ModuleLayer Boot();
	::java::lang::module::Configuration Configuration() const;
	static ::java::lang::ModuleLayer_Controller DefineModules(const ::java::lang::module::Configuration& arg0, const ::java::util::List& arg1, const ::java::util::function::Function& arg2);
	::java::lang::ModuleLayer DefineModules(const ::java::lang::module::Configuration& arg0, const ::java::util::function::Function& arg1) const;
	::java::lang::ModuleLayer DefineModulesWithManyLoaders(const ::java::lang::module::Configuration& arg0, const ::java::lang::ClassLoader& arg1) const;
	static ::java::lang::ModuleLayer_Controller DefineModulesWithManyLoaders(const ::java::lang::module::Configuration& arg0, const ::java::util::List& arg1, const ::java::lang::ClassLoader& arg2);
	::java::lang::ModuleLayer DefineModulesWithOneLoader(const ::java::lang::module::Configuration& arg0, const ::java::lang::ClassLoader& arg1) const;
	static ::java::lang::ModuleLayer_Controller DefineModulesWithOneLoader(const ::java::lang::module::Configuration& arg0, const ::java::util::List& arg1, const ::java::lang::ClassLoader& arg2);
	static ::java::lang::ModuleLayer Empty();
	::java::lang::ClassLoader FindLoader(const ::java::lang::String& arg0) const;
	::java::util::Optional FindModule(const ::java::lang::String& arg0) const;
	::java::util::Set Modules() const;
	::java::util::List Parents() const;
	::java::lang::String ToString() const;
	explicit ModuleLayer(jobject o) : ::java::lang::Object(o) {}
	ModuleLayer(const ModuleLayer& o)  : ::java::lang::Object(o) {}

};

}}

namespace java { namespace lang { namespace module { 
struct Configuration : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::java::lang::module::Configuration Empty();
	::java::util::Optional FindModule(const ::java::lang::String& arg0) const;
	::java::util::Set Modules() const;
	::java::util::List Parents() const;
	::java::lang::module::Configuration Resolve(const ::java::lang::module::ModuleFinder& arg0, const ::java::lang::module::ModuleFinder& arg1, const ::java::util::Collection& arg2) const;
	static ::java::lang::module::Configuration Resolve(const ::java::lang::module::ModuleFinder& arg0, const ::java::util::List& arg1, const ::java::lang::module::ModuleFinder& arg2, const ::java::util::Collection& arg3);
	::java::lang::module::Configuration ResolveAndBind(const ::java::lang::module::ModuleFinder& arg0, const ::java::lang::module::ModuleFinder& arg1, const ::java::util::Collection& arg2) const;
	static ::java::lang::module::Configuration ResolveAndBind(const ::java::lang::module::ModuleFinder& arg0, const ::java::util::List& arg1, const ::java::lang::module::ModuleFinder& arg2, const ::java::util::Collection& arg3);
	::java::lang::String ToString() const;
	explicit Configuration(jobject o) : ::java::lang::Object(o) {}
	Configuration(const Configuration& o)  : ::java::lang::Object(o) {}

};

struct ModuleFinder : java::lang::Object
{
	static jni::Class __CLASS;

	static ::java::lang::module::ModuleFinder Compose(const jni::Array< ::java::lang::module::ModuleFinder >& arg0);
	::java::util::Optional Find(const ::java::lang::String& arg0) const;
	::java::util::Set FindAll() const;
	static ::java::lang::module::ModuleFinder Of(const jni::Array< ::java::nio::file::Path >& arg0);
	static ::java::lang::module::ModuleFinder OfSystem();
	explicit ModuleFinder(jobject o) : java::lang::Object(o) {}
	ModuleFinder(const ModuleFinder& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::lang::module::ModuleFinder();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::util::Optional Find(const ::java::lang::String& arg0) = 0;
		virtual ::java::util::Set FindAll() = 0;
	};
};

}}}

namespace java { namespace lang { 
struct ModuleLayer_Controller : ::java::lang::Object
{
	static jni::Class __CLASS;

	::java::lang::ModuleLayer_Controller AddExports(const ::java::lang::Module& arg0, const ::java::lang::String& arg1, const ::java::lang::Module& arg2) const;
	::java::lang::ModuleLayer_Controller AddOpens(const ::java::lang::Module& arg0, const ::java::lang::String& arg1, const ::java::lang::Module& arg2) const;
	::java::lang::ModuleLayer_Controller AddReads(const ::java::lang::Module& arg0, const ::java::lang::Module& arg1) const;
	::java::lang::ModuleLayer Layer() const;
	explicit ModuleLayer_Controller(jobject o) : ::java::lang::Object(o) {}
	ModuleLayer_Controller(const ModuleLayer_Controller& o)  : ::java::lang::Object(o) {}

};

}}

namespace java { namespace lang { namespace reflect { 
struct AccessibleObject : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::reflect::AnnotatedElement();
	::jboolean CanAccess(const ::java::lang::Object& arg0) const;
	::java::lang::annotation::Annotation GetAnnotation(const ::java::lang::Class& arg0) const;
	jni::Array< ::java::lang::annotation::Annotation > GetAnnotations() const;
	jni::Array< ::java::lang::annotation::Annotation > GetAnnotationsByType(const ::java::lang::Class& arg0) const;
	::java::lang::annotation::Annotation GetDeclaredAnnotation(const ::java::lang::Class& arg0) const;
	jni::Array< ::java::lang::annotation::Annotation > GetDeclaredAnnotations() const;
	jni::Array< ::java::lang::annotation::Annotation > GetDeclaredAnnotationsByType(const ::java::lang::Class& arg0) const;
	::jboolean IsAccessible() const;
	::jboolean IsAnnotationPresent(const ::java::lang::Class& arg0) const;
	::jvoid SetAccessible(const ::jboolean& arg0) const;
	static ::jvoid SetAccessible(const jni::Array< ::java::lang::reflect::AccessibleObject >& arg0, const ::jboolean& arg1);
	::jboolean TrySetAccessible() const;
	static jobject __Constructor();
	AccessibleObject() : ::java::lang::Object(__Constructor()) {}
	explicit AccessibleObject(jobject o) : ::java::lang::Object(o) {}
	AccessibleObject(const AccessibleObject& o)  : ::java::lang::Object(o) {}

};

struct Executable : ::java::lang::reflect::AccessibleObject
{
	static jni::Class __CLASS;

	operator ::java::lang::reflect::Member();
	operator ::java::lang::reflect::GenericDeclaration();
	jni::Array< ::java::lang::reflect::AnnotatedType > GetAnnotatedExceptionTypes() const;
	jni::Array< ::java::lang::reflect::AnnotatedType > GetAnnotatedParameterTypes() const;
	::java::lang::reflect::AnnotatedType GetAnnotatedReceiverType() const;
	::java::lang::reflect::AnnotatedType GetAnnotatedReturnType() const;
	::java::lang::annotation::Annotation GetAnnotation(const ::java::lang::Class& arg0) const;
	jni::Array< ::java::lang::annotation::Annotation > GetAnnotationsByType(const ::java::lang::Class& arg0) const;
	jni::Array< ::java::lang::annotation::Annotation > GetDeclaredAnnotations() const;
	::java::lang::Class GetDeclaringClass() const;
	jni::Array< ::java::lang::Class > GetExceptionTypes() const;
	jni::Array< ::java::lang::reflect::Type > GetGenericExceptionTypes() const;
	jni::Array< ::java::lang::reflect::Type > GetGenericParameterTypes() const;
	::jint GetModifiers() const;
	::java::lang::String GetName() const;
	jni::Array< jni::Array< ::java::lang::annotation::Annotation > > GetParameterAnnotations() const;
	::jint GetParameterCount() const;
	jni::Array< ::java::lang::Class > GetParameterTypes() const;
	jni::Array< ::java::lang::reflect::Parameter > GetParameters() const;
	jni::Array< ::java::lang::reflect::TypeVariable > GetTypeParameters() const;
	::jboolean IsSynthetic() const;
	::jboolean IsVarArgs() const;
	::java::lang::String ToGenericString() const;
	explicit Executable(jobject o) : ::java::lang::reflect::AccessibleObject(o) {}
	Executable(const Executable& o)  : ::java::lang::reflect::AccessibleObject(o) {}

};

struct Constructor : ::java::lang::reflect::Executable
{
	static jni::Class __CLASS;

	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::lang::reflect::AnnotatedType GetAnnotatedReceiverType() const;
	::java::lang::reflect::AnnotatedType GetAnnotatedReturnType() const;
	::java::lang::annotation::Annotation GetAnnotation(const ::java::lang::Class& arg0) const;
	jni::Array< ::java::lang::annotation::Annotation > GetDeclaredAnnotations() const;
	::java::lang::Class GetDeclaringClass() const;
	jni::Array< ::java::lang::Class > GetExceptionTypes() const;
	jni::Array< ::java::lang::reflect::Type > GetGenericExceptionTypes() const;
	jni::Array< ::java::lang::reflect::Type > GetGenericParameterTypes() const;
	::jint GetModifiers() const;
	::java::lang::String GetName() const;
	jni::Array< jni::Array< ::java::lang::annotation::Annotation > > GetParameterAnnotations() const;
	::jint GetParameterCount() const;
	jni::Array< ::java::lang::Class > GetParameterTypes() const;
	jni::Array< ::java::lang::reflect::TypeVariable > GetTypeParameters() const;
	::jint HashCode() const;
	::jboolean IsSynthetic() const;
	::jboolean IsVarArgs() const;
	::java::lang::Object NewInstance(const jni::Array< ::java::lang::Object >& arg0) const;
	::jvoid SetAccessible(const ::jboolean& arg0) const;
	::java::lang::String ToGenericString() const;
	::java::lang::String ToString() const;
	explicit Constructor(jobject o) : ::java::lang::reflect::Executable(o) {}
	Constructor(const Constructor& o)  : ::java::lang::reflect::Executable(o) {}

};

struct Member : java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fDECLARED();
	static ::jint& fPUBLIC();
	::java::lang::Class GetDeclaringClass() const;
	::jint GetModifiers() const;
	::java::lang::String GetName() const;
	::jboolean IsSynthetic() const;
	explicit Member(jobject o) : java::lang::Object(o) {}
	Member(const Member& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::lang::reflect::Member();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::lang::Class GetDeclaringClass() = 0;
		virtual ::jint GetModifiers() = 0;
		virtual ::java::lang::String GetName() = 0;
		virtual ::jboolean IsSynthetic() = 0;
	};
};

struct Parameter : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::reflect::AnnotatedElement();
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::lang::reflect::AnnotatedType GetAnnotatedType() const;
	::java::lang::annotation::Annotation GetAnnotation(const ::java::lang::Class& arg0) const;
	jni::Array< ::java::lang::annotation::Annotation > GetAnnotations() const;
	jni::Array< ::java::lang::annotation::Annotation > GetAnnotationsByType(const ::java::lang::Class& arg0) const;
	::java::lang::annotation::Annotation GetDeclaredAnnotation(const ::java::lang::Class& arg0) const;
	jni::Array< ::java::lang::annotation::Annotation > GetDeclaredAnnotations() const;
	jni::Array< ::java::lang::annotation::Annotation > GetDeclaredAnnotationsByType(const ::java::lang::Class& arg0) const;
	::java::lang::reflect::Executable GetDeclaringExecutable() const;
	::jint GetModifiers() const;
	::java::lang::String GetName() const;
	::java::lang::reflect::Type GetParameterizedType() const;
	::java::lang::Class GetType() const;
	::jint HashCode() const;
	::jboolean IsImplicit() const;
	::jboolean IsNamePresent() const;
	::jboolean IsSynthetic() const;
	::jboolean IsVarArgs() const;
	::java::lang::String ToString() const;
	explicit Parameter(jobject o) : ::java::lang::Object(o) {}
	Parameter(const Parameter& o)  : ::java::lang::Object(o) {}

};

struct Field : ::java::lang::reflect::AccessibleObject
{
	static jni::Class __CLASS;

	operator ::java::lang::reflect::Member();
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::lang::Object Get(const ::java::lang::Object& arg0) const;
	::java::lang::reflect::AnnotatedType GetAnnotatedType() const;
	::java::lang::annotation::Annotation GetAnnotation(const ::java::lang::Class& arg0) const;
	jni::Array< ::java::lang::annotation::Annotation > GetAnnotationsByType(const ::java::lang::Class& arg0) const;
	::jboolean GetBoolean(const ::java::lang::Object& arg0) const;
	::jbyte GetByte(const ::java::lang::Object& arg0) const;
	::jchar GetChar(const ::java::lang::Object& arg0) const;
	jni::Array< ::java::lang::annotation::Annotation > GetDeclaredAnnotations() const;
	::java::lang::Class GetDeclaringClass() const;
	::jdouble GetDouble(const ::java::lang::Object& arg0) const;
	::jfloat GetFloat(const ::java::lang::Object& arg0) const;
	::java::lang::reflect::Type GetGenericType() const;
	::jint GetInt(const ::java::lang::Object& arg0) const;
	::jlong GetLong(const ::java::lang::Object& arg0) const;
	::jint GetModifiers() const;
	::java::lang::String GetName() const;
	::jshort GetShort(const ::java::lang::Object& arg0) const;
	::java::lang::Class GetType() const;
	::jint HashCode() const;
	::jboolean IsEnumConstant() const;
	::jboolean IsSynthetic() const;
	::jvoid Set(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) const;
	::jvoid SetAccessible(const ::jboolean& arg0) const;
	::jvoid SetBoolean(const ::java::lang::Object& arg0, const ::jboolean& arg1) const;
	::jvoid SetByte(const ::java::lang::Object& arg0, const ::jbyte& arg1) const;
	::jvoid SetChar(const ::java::lang::Object& arg0, const ::jchar& arg1) const;
	::jvoid SetDouble(const ::java::lang::Object& arg0, const ::jdouble& arg1) const;
	::jvoid SetFloat(const ::java::lang::Object& arg0, const ::jfloat& arg1) const;
	::jvoid SetInt(const ::java::lang::Object& arg0, const ::jint& arg1) const;
	::jvoid SetLong(const ::java::lang::Object& arg0, const ::jlong& arg1) const;
	::jvoid SetShort(const ::java::lang::Object& arg0, const ::jshort& arg1) const;
	::java::lang::String ToGenericString() const;
	::java::lang::String ToString() const;
	explicit Field(jobject o) : ::java::lang::reflect::AccessibleObject(o) {}
	Field(const Field& o)  : ::java::lang::reflect::AccessibleObject(o) {}

};

struct Method : ::java::lang::reflect::Executable
{
	static jni::Class __CLASS;

	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::lang::reflect::AnnotatedType GetAnnotatedReturnType() const;
	::java::lang::annotation::Annotation GetAnnotation(const ::java::lang::Class& arg0) const;
	jni::Array< ::java::lang::annotation::Annotation > GetDeclaredAnnotations() const;
	::java::lang::Class GetDeclaringClass() const;
	::java::lang::Object GetDefaultValue() const;
	jni::Array< ::java::lang::Class > GetExceptionTypes() const;
	jni::Array< ::java::lang::reflect::Type > GetGenericExceptionTypes() const;
	jni::Array< ::java::lang::reflect::Type > GetGenericParameterTypes() const;
	::java::lang::reflect::Type GetGenericReturnType() const;
	::jint GetModifiers() const;
	::java::lang::String GetName() const;
	jni::Array< jni::Array< ::java::lang::annotation::Annotation > > GetParameterAnnotations() const;
	::jint GetParameterCount() const;
	jni::Array< ::java::lang::Class > GetParameterTypes() const;
	::java::lang::Class GetReturnType() const;
	jni::Array< ::java::lang::reflect::TypeVariable > GetTypeParameters() const;
	::jint HashCode() const;
	::java::lang::Object Invoke(const ::java::lang::Object& arg0, const jni::Array< ::java::lang::Object >& arg1) const;
	::jboolean IsBridge() const;
	::jboolean IsDefault() const;
	::jboolean IsSynthetic() const;
	::jboolean IsVarArgs() const;
	::jvoid SetAccessible(const ::jboolean& arg0) const;
	::java::lang::String ToGenericString() const;
	::java::lang::String ToString() const;
	explicit Method(jobject o) : ::java::lang::reflect::Executable(o) {}
	Method(const Method& o)  : ::java::lang::reflect::Executable(o) {}

};

}}}

namespace android { 
struct Manifest_permission : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::java::lang::String& fACCEPT_HANDOVER();
	static ::java::lang::String& fACCESS_BACKGROUND_LOCATION();
	static ::java::lang::String& fACCESS_BLOBS_ACROSS_USERS();
	static ::java::lang::String& fACCESS_CHECKIN_PROPERTIES();
	static ::java::lang::String& fACCESS_COARSE_LOCATION();
	static ::java::lang::String& fACCESS_FINE_LOCATION();
	static ::java::lang::String& fACCESS_LOCATION_EXTRA_COMMANDS();
	static ::java::lang::String& fACCESS_MEDIA_LOCATION();
	static ::java::lang::String& fACCESS_NETWORK_STATE();
	static ::java::lang::String& fACCESS_NOTIFICATION_POLICY();
	static ::java::lang::String& fACCESS_WIFI_STATE();
	static ::java::lang::String& fACCOUNT_MANAGER();
	static ::java::lang::String& fACTIVITY_RECOGNITION();
	static ::java::lang::String& fADD_VOICEMAIL();
	static ::java::lang::String& fANSWER_PHONE_CALLS();
	static ::java::lang::String& fBATTERY_STATS();
	static ::java::lang::String& fBIND_ACCESSIBILITY_SERVICE();
	static ::java::lang::String& fBIND_APPWIDGET();
	static ::java::lang::String& fBIND_AUTOFILL_SERVICE();
	static ::java::lang::String& fBIND_CALL_REDIRECTION_SERVICE();
	static ::java::lang::String& fBIND_CARRIER_MESSAGING_CLIENT_SERVICE();
	static ::java::lang::String& fBIND_CARRIER_MESSAGING_SERVICE();
	static ::java::lang::String& fBIND_CARRIER_SERVICES();
	static ::java::lang::String& fBIND_CHOOSER_TARGET_SERVICE();
	static ::java::lang::String& fBIND_COMPANION_DEVICE_SERVICE();
	static ::java::lang::String& fBIND_CONDITION_PROVIDER_SERVICE();
	static ::java::lang::String& fBIND_CONTROLS();
	static ::java::lang::String& fBIND_DEVICE_ADMIN();
	static ::java::lang::String& fBIND_DREAM_SERVICE();
	static ::java::lang::String& fBIND_INCALL_SERVICE();
	static ::java::lang::String& fBIND_INPUT_METHOD();
	static ::java::lang::String& fBIND_MIDI_DEVICE_SERVICE();
	static ::java::lang::String& fBIND_NFC_SERVICE();
	static ::java::lang::String& fBIND_NOTIFICATION_LISTENER_SERVICE();
	static ::java::lang::String& fBIND_PRINT_SERVICE();
	static ::java::lang::String& fBIND_QUICK_ACCESS_WALLET_SERVICE();
	static ::java::lang::String& fBIND_QUICK_SETTINGS_TILE();
	static ::java::lang::String& fBIND_REMOTEVIEWS();
	static ::java::lang::String& fBIND_SCREENING_SERVICE();
	static ::java::lang::String& fBIND_TELECOM_CONNECTION_SERVICE();
	static ::java::lang::String& fBIND_TEXT_SERVICE();
	static ::java::lang::String& fBIND_TV_INPUT();
	static ::java::lang::String& fBIND_VISUAL_VOICEMAIL_SERVICE();
	static ::java::lang::String& fBIND_VOICE_INTERACTION();
	static ::java::lang::String& fBIND_VPN_SERVICE();
	static ::java::lang::String& fBIND_VR_LISTENER_SERVICE();
	static ::java::lang::String& fBIND_WALLPAPER();
	static ::java::lang::String& fBLUETOOTH();
	static ::java::lang::String& fBLUETOOTH_ADMIN();
	static ::java::lang::String& fBLUETOOTH_ADVERTISE();
	static ::java::lang::String& fBLUETOOTH_CONNECT();
	static ::java::lang::String& fBLUETOOTH_PRIVILEGED();
	static ::java::lang::String& fBLUETOOTH_SCAN();
	static ::java::lang::String& fBODY_SENSORS();
	static ::java::lang::String& fBROADCAST_PACKAGE_REMOVED();
	static ::java::lang::String& fBROADCAST_SMS();
	static ::java::lang::String& fBROADCAST_STICKY();
	static ::java::lang::String& fBROADCAST_WAP_PUSH();
	static ::java::lang::String& fCALL_COMPANION_APP();
	static ::java::lang::String& fCALL_PHONE();
	static ::java::lang::String& fCALL_PRIVILEGED();
	static ::java::lang::String& fCAMERA();
	static ::java::lang::String& fCAPTURE_AUDIO_OUTPUT();
	static ::java::lang::String& fCHANGE_COMPONENT_ENABLED_STATE();
	static ::java::lang::String& fCHANGE_CONFIGURATION();
	static ::java::lang::String& fCHANGE_NETWORK_STATE();
	static ::java::lang::String& fCHANGE_WIFI_MULTICAST_STATE();
	static ::java::lang::String& fCHANGE_WIFI_STATE();
	static ::java::lang::String& fCLEAR_APP_CACHE();
	static ::java::lang::String& fCONTROL_LOCATION_UPDATES();
	static ::java::lang::String& fDELETE_CACHE_FILES();
	static ::java::lang::String& fDELETE_PACKAGES();
	static ::java::lang::String& fDIAGNOSTIC();
	static ::java::lang::String& fDISABLE_KEYGUARD();
	static ::java::lang::String& fDUMP();
	static ::java::lang::String& fEXPAND_STATUS_BAR();
	static ::java::lang::String& fFACTORY_TEST();
	static ::java::lang::String& fFOREGROUND_SERVICE();
	static ::java::lang::String& fGET_ACCOUNTS();
	static ::java::lang::String& fGET_ACCOUNTS_PRIVILEGED();
	static ::java::lang::String& fGET_PACKAGE_SIZE();
	static ::java::lang::String& fGET_TASKS();
	static ::java::lang::String& fGLOBAL_SEARCH();
	static ::java::lang::String& fHIDE_OVERLAY_WINDOWS();
	static ::java::lang::String& fHIGH_SAMPLING_RATE_SENSORS();
	static ::java::lang::String& fINSTALL_LOCATION_PROVIDER();
	static ::java::lang::String& fINSTALL_PACKAGES();
	static ::java::lang::String& fINSTALL_SHORTCUT();
	static ::java::lang::String& fINSTANT_APP_FOREGROUND_SERVICE();
	static ::java::lang::String& fINTERACT_ACROSS_PROFILES();
	static ::java::lang::String& fINTERNET();
	static ::java::lang::String& fKILL_BACKGROUND_PROCESSES();
	static ::java::lang::String& fLOADER_USAGE_STATS();
	static ::java::lang::String& fLOCATION_HARDWARE();
	static ::java::lang::String& fMANAGE_DOCUMENTS();
	static ::java::lang::String& fMANAGE_EXTERNAL_STORAGE();
	static ::java::lang::String& fMANAGE_MEDIA();
	static ::java::lang::String& fMANAGE_ONGOING_CALLS();
	static ::java::lang::String& fMANAGE_OWN_CALLS();
	static ::java::lang::String& fMASTER_CLEAR();
	static ::java::lang::String& fMEDIA_CONTENT_CONTROL();
	static ::java::lang::String& fMODIFY_AUDIO_SETTINGS();
	static ::java::lang::String& fMODIFY_PHONE_STATE();
	static ::java::lang::String& fMOUNT_FORMAT_FILESYSTEMS();
	static ::java::lang::String& fMOUNT_UNMOUNT_FILESYSTEMS();
	static ::java::lang::String& fNFC();
	static ::java::lang::String& fNFC_PREFERRED_PAYMENT_INFO();
	static ::java::lang::String& fNFC_TRANSACTION_EVENT();
	static ::java::lang::String& fPACKAGE_USAGE_STATS();
	static ::java::lang::String& fPERSISTENT_ACTIVITY();
	static ::java::lang::String& fPROCESS_OUTGOING_CALLS();
	static ::java::lang::String& fQUERY_ALL_PACKAGES();
	static ::java::lang::String& fREAD_CALENDAR();
	static ::java::lang::String& fREAD_CALL_LOG();
	static ::java::lang::String& fREAD_CONTACTS();
	static ::java::lang::String& fREAD_EXTERNAL_STORAGE();
	static ::java::lang::String& fREAD_INPUT_STATE();
	static ::java::lang::String& fREAD_LOGS();
	static ::java::lang::String& fREAD_PHONE_NUMBERS();
	static ::java::lang::String& fREAD_PHONE_STATE();
	static ::java::lang::String& fREAD_PRECISE_PHONE_STATE();
	static ::java::lang::String& fREAD_SMS();
	static ::java::lang::String& fREAD_SYNC_SETTINGS();
	static ::java::lang::String& fREAD_SYNC_STATS();
	static ::java::lang::String& fREAD_VOICEMAIL();
	static ::java::lang::String& fREBOOT();
	static ::java::lang::String& fRECEIVE_BOOT_COMPLETED();
	static ::java::lang::String& fRECEIVE_MMS();
	static ::java::lang::String& fRECEIVE_SMS();
	static ::java::lang::String& fRECEIVE_WAP_PUSH();
	static ::java::lang::String& fRECORD_AUDIO();
	static ::java::lang::String& fREORDER_TASKS();
	static ::java::lang::String& fREQUEST_COMPANION_PROFILE_WATCH();
	static ::java::lang::String& fREQUEST_COMPANION_RUN_IN_BACKGROUND();
	static ::java::lang::String& fREQUEST_COMPANION_START_FOREGROUND_SERVICES_FROM_BACKGROUND();
	static ::java::lang::String& fREQUEST_COMPANION_USE_DATA_IN_BACKGROUND();
	static ::java::lang::String& fREQUEST_DELETE_PACKAGES();
	static ::java::lang::String& fREQUEST_IGNORE_BATTERY_OPTIMIZATIONS();
	static ::java::lang::String& fREQUEST_INSTALL_PACKAGES();
	static ::java::lang::String& fREQUEST_OBSERVE_COMPANION_DEVICE_PRESENCE();
	static ::java::lang::String& fREQUEST_PASSWORD_COMPLEXITY();
	static ::java::lang::String& fRESTART_PACKAGES();
	static ::java::lang::String& fSCHEDULE_EXACT_ALARM();
	static ::java::lang::String& fSEND_RESPOND_VIA_MESSAGE();
	static ::java::lang::String& fSEND_SMS();
	static ::java::lang::String& fSET_ALARM();
	static ::java::lang::String& fSET_ALWAYS_FINISH();
	static ::java::lang::String& fSET_ANIMATION_SCALE();
	static ::java::lang::String& fSET_DEBUG_APP();
	static ::java::lang::String& fSET_PREFERRED_APPLICATIONS();
	static ::java::lang::String& fSET_PROCESS_LIMIT();
	static ::java::lang::String& fSET_TIME();
	static ::java::lang::String& fSET_TIME_ZONE();
	static ::java::lang::String& fSET_WALLPAPER();
	static ::java::lang::String& fSET_WALLPAPER_HINTS();
	static ::java::lang::String& fSIGNAL_PERSISTENT_PROCESSES();
	static ::java::lang::String& fSMS_FINANCIAL_TRANSACTIONS();
	static ::java::lang::String& fSTART_FOREGROUND_SERVICES_FROM_BACKGROUND();
	static ::java::lang::String& fSTART_VIEW_PERMISSION_USAGE();
	static ::java::lang::String& fSTATUS_BAR();
	static ::java::lang::String& fSYSTEM_ALERT_WINDOW();
	static ::java::lang::String& fTRANSMIT_IR();
	static ::java::lang::String& fUNINSTALL_SHORTCUT();
	static ::java::lang::String& fUPDATE_DEVICE_STATS();
	static ::java::lang::String& fUPDATE_PACKAGES_WITHOUT_USER_ACTION();
	static ::java::lang::String& fUSE_BIOMETRIC();
	static ::java::lang::String& fUSE_FINGERPRINT();
	static ::java::lang::String& fUSE_FULL_SCREEN_INTENT();
	static ::java::lang::String& fUSE_ICC_AUTH_WITH_DEVICE_IDENTIFIER();
	static ::java::lang::String& fUSE_SIP();
	static ::java::lang::String& fUWB_RANGING();
	static ::java::lang::String& fVIBRATE();
	static ::java::lang::String& fWAKE_LOCK();
	static ::java::lang::String& fWRITE_APN_SETTINGS();
	static ::java::lang::String& fWRITE_CALENDAR();
	static ::java::lang::String& fWRITE_CALL_LOG();
	static ::java::lang::String& fWRITE_CONTACTS();
	static ::java::lang::String& fWRITE_EXTERNAL_STORAGE();
	static ::java::lang::String& fWRITE_GSERVICES();
	static ::java::lang::String& fWRITE_SECURE_SETTINGS();
	static ::java::lang::String& fWRITE_SETTINGS();
	static ::java::lang::String& fWRITE_SYNC_SETTINGS();
	static ::java::lang::String& fWRITE_VOICEMAIL();
	static jobject __Constructor();
	Manifest_permission() : ::java::lang::Object(__Constructor()) {}
	explicit Manifest_permission(jobject o) : ::java::lang::Object(o) {}
	Manifest_permission(const Manifest_permission& o)  : ::java::lang::Object(o) {}

};

struct R_attr : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fAbsListViewStyle();
	static ::jint& fAccessibilityEventTypes();
	static ::jint& fAccessibilityFeedbackType();
	static ::jint& fAccessibilityFlags();
	static ::jint& fAccessibilityHeading();
	static ::jint& fAccessibilityLiveRegion();
	static ::jint& fAccessibilityPaneTitle();
	static ::jint& fAccessibilityTraversalAfter();
	static ::jint& fAccessibilityTraversalBefore();
	static ::jint& fAccountPreferences();
	static ::jint& fAccountType();
	static ::jint& fAction();
	static ::jint& fActionBarDivider();
	static ::jint& fActionBarItemBackground();
	static ::jint& fActionBarPopupTheme();
	static ::jint& fActionBarSize();
	static ::jint& fActionBarSplitStyle();
	static ::jint& fActionBarStyle();
	static ::jint& fActionBarTabBarStyle();
	static ::jint& fActionBarTabStyle();
	static ::jint& fActionBarTabTextStyle();
	static ::jint& fActionBarTheme();
	static ::jint& fActionBarWidgetTheme();
	static ::jint& fActionButtonStyle();
	static ::jint& fActionDropDownStyle();
	static ::jint& fActionLayout();
	static ::jint& fActionMenuTextAppearance();
	static ::jint& fActionMenuTextColor();
	static ::jint& fActionModeBackground();
	static ::jint& fActionModeCloseButtonStyle();
	static ::jint& fActionModeCloseDrawable();
	static ::jint& fActionModeCopyDrawable();
	static ::jint& fActionModeCutDrawable();
	static ::jint& fActionModeFindDrawable();
	static ::jint& fActionModePasteDrawable();
	static ::jint& fActionModeSelectAllDrawable();
	static ::jint& fActionModeShareDrawable();
	static ::jint& fActionModeSplitBackground();
	static ::jint& fActionModeStyle();
	static ::jint& fActionModeWebSearchDrawable();
	static ::jint& fActionOverflowButtonStyle();
	static ::jint& fActionOverflowMenuStyle();
	static ::jint& fActionProviderClass();
	static ::jint& fActionViewClass();
	static ::jint& fActivatedBackgroundIndicator();
	static ::jint& fActivityCloseEnterAnimation();
	static ::jint& fActivityCloseExitAnimation();
	static ::jint& fActivityOpenEnterAnimation();
	static ::jint& fActivityOpenExitAnimation();
	static ::jint& fAddPrintersActivity();
	static ::jint& fAddStatesFromChildren();
	static ::jint& fAdjustViewBounds();
	static ::jint& fAdvancedPrintOptionsActivity();
	static ::jint& fAlertDialogIcon();
	static ::jint& fAlertDialogStyle();
	static ::jint& fAlertDialogTheme();
	static ::jint& fAlignmentMode();
	static ::jint& fAllContactsName();
	static ::jint& fAllowAudioPlaybackCapture();
	static ::jint& fAllowBackup();
	static ::jint& fAllowClearUserData();
	static ::jint& fAllowClickWhenDisabled();
	static ::jint& fAllowEmbedded();
	static ::jint& fAllowNativeHeapPointerTagging();
	static ::jint& fAllowParallelSyncs();
	static ::jint& fAllowSingleTap();
	static ::jint& fAllowTaskReparenting();
	static ::jint& fAllowUndo();
	static ::jint& fAlpha();
	static ::jint& fAlphabeticModifiers();
	static ::jint& fAlphabeticShortcut();
	static ::jint& fAlwaysDrawnWithCache();
	static ::jint& fAlwaysRetainTaskState();
	static ::jint& fAmPmBackgroundColor();
	static ::jint& fAmPmTextColor();
	static ::jint& fAmbientShadowAlpha();
	static ::jint& fAngle();
	static ::jint& fAnimateFirstView();
	static ::jint& fAnimateLayoutChanges();
	static ::jint& fAnimateOnClick();
	static ::jint& fAnimatedImageDrawable();
	static ::jint& fAnimation();
	static ::jint& fAnimationCache();
	static ::jint& fAnimationDuration();
	static ::jint& fAnimationOrder();
	static ::jint& fAnimationResolution();
	static ::jint& fAntialias();
	static ::jint& fAnyDensity();
	static ::jint& fApduServiceBanner();
	static ::jint& fApiKey();
	static ::jint& fAppCategory();
	static ::jint& fAppComponentFactory();
	static ::jint& fAttributionTags();
	static ::jint& fAttributionsAreUserVisible();
	static ::jint& fAuthor();
	static ::jint& fAuthorities();
	static ::jint& fAutoAdvanceViewId();
	static ::jint& fAutoCompleteTextViewStyle();
	static ::jint& fAutoLink();
	static ::jint& fAutoMirrored();
	static ::jint& fAutoRemoveFromRecents();
	static ::jint& fAutoRevokePermissions();
	static ::jint& fAutoSizeMaxTextSize();
	static ::jint& fAutoSizeMinTextSize();
	static ::jint& fAutoSizePresetSizes();
	static ::jint& fAutoSizeStepGranularity();
	static ::jint& fAutoSizeTextType();
	static ::jint& fAutoStart();
	static ::jint& fAutoText();
	static ::jint& fAutoUrlDetect();
	static ::jint& fAutoVerify();
	static ::jint& fAutofillHints();
	static ::jint& fAutofilledHighlight();
	static ::jint& fBackground();
	static ::jint& fBackgroundDimAmount();
	static ::jint& fBackgroundDimEnabled();
	static ::jint& fBackgroundSplit();
	static ::jint& fBackgroundStacked();
	static ::jint& fBackgroundTint();
	static ::jint& fBackgroundTintMode();
	static ::jint& fBackupAgent();
	static ::jint& fBackupInForeground();
	static ::jint& fBanner();
	static ::jint& fBaseline();
	static ::jint& fBaselineAlignBottom();
	static ::jint& fBaselineAligned();
	static ::jint& fBaselineAlignedChildIndex();
	static ::jint& fBitmap();
	static ::jint& fBorderlessButtonStyle();
	static ::jint& fBottom();
	static ::jint& fBottomBright();
	static ::jint& fBottomDark();
	static ::jint& fBottomLeftRadius();
	static ::jint& fBottomMedium();
	static ::jint& fBottomOffset();
	static ::jint& fBottomRightRadius();
	static ::jint& fBreadCrumbShortTitle();
	static ::jint& fBreadCrumbTitle();
	static ::jint& fBreakStrategy();
	static ::jint& fBufferType();
	static ::jint& fButton();
	static ::jint& fButtonBarButtonStyle();
	static ::jint& fButtonBarNegativeButtonStyle();
	static ::jint& fButtonBarNeutralButtonStyle();
	static ::jint& fButtonBarPositiveButtonStyle();
	static ::jint& fButtonBarStyle();
	static ::jint& fButtonCornerRadius();
	static ::jint& fButtonGravity();
	static ::jint& fButtonStyle();
	static ::jint& fButtonStyleInset();
	static ::jint& fButtonStyleSmall();
	static ::jint& fButtonStyleToggle();
	static ::jint& fButtonTint();
	static ::jint& fButtonTintMode();
	static ::jint& fCacheColorHint();
	static ::jint& fCalendarTextColor();
	static ::jint& fCalendarViewShown();
	static ::jint& fCalendarViewStyle();
	static ::jint& fCanControlMagnification();
	static ::jint& fCanPauseRecording();
	static ::jint& fCanPerformGestures();
	static ::jint& fCanRecord();
	static ::jint& fCanRequestEnhancedWebAccessibility();
	static ::jint& fCanRequestFilterKeyEvents();
	static ::jint& fCanRequestFingerprintGestures();
	static ::jint& fCanRequestTouchExplorationMode();
	static ::jint& fCanRetrieveWindowContent();
	static ::jint& fCanTakeScreenshot();
	static ::jint& fCandidatesTextStyleSpans();
	static ::jint& fCantSaveState();
	static ::jint& fCapitalize();
	static ::jint& fCategory();
	static ::jint& fCenterBright();
	static ::jint& fCenterColor();
	static ::jint& fCenterDark();
	static ::jint& fCenterMedium();
	static ::jint& fCenterX();
	static ::jint& fCenterY();
	static ::jint& fCertDigest();
	static ::jint& fCheckBoxPreferenceStyle();
	static ::jint& fCheckMark();
	static ::jint& fCheckMarkTint();
	static ::jint& fCheckMarkTintMode();
	static ::jint& fCheckable();
	static ::jint& fCheckableBehavior();
	static ::jint& fCheckboxStyle();
	static ::jint& fChecked();
	static ::jint& fCheckedButton();
	static ::jint& fCheckedTextViewStyle();
	static ::jint& fChildDivider();
	static ::jint& fChildIndicator();
	static ::jint& fChildIndicatorEnd();
	static ::jint& fChildIndicatorLeft();
	static ::jint& fChildIndicatorRight();
	static ::jint& fChildIndicatorStart();
	static ::jint& fChoiceMode();
	static ::jint& fClassLoader();
	static ::jint& fClearTaskOnLaunch();
	static ::jint& fClickable();
	static ::jint& fClipChildren();
	static ::jint& fClipOrientation();
	static ::jint& fClipToOutline();
	static ::jint& fClipToPadding();
	static ::jint& fCloseIcon();
	static ::jint& fCodes();
	static ::jint& fCollapseColumns();
	static ::jint& fCollapseContentDescription();
	static ::jint& fCollapseIcon();
	static ::jint& fColor();
	static ::jint& fColorAccent();
	static ::jint& fColorActivatedHighlight();
	static ::jint& fColorBackground();
	static ::jint& fColorBackgroundCacheHint();
	static ::jint& fColorBackgroundFloating();
	static ::jint& fColorButtonNormal();
	static ::jint& fColorControlActivated();
	static ::jint& fColorControlHighlight();
	static ::jint& fColorControlNormal();
	static ::jint& fColorEdgeEffect();
	static ::jint& fColorError();
	static ::jint& fColorFocusedHighlight();
	static ::jint& fColorForeground();
	static ::jint& fColorForegroundInverse();
	static ::jint& fColorLongPressedHighlight();
	static ::jint& fColorMode();
	static ::jint& fColorMultiSelectHighlight();
	static ::jint& fColorPressedHighlight();
	static ::jint& fColorPrimary();
	static ::jint& fColorPrimaryDark();
	static ::jint& fColorSecondary();
	static ::jint& fColumnCount();
	static ::jint& fColumnDelay();
	static ::jint& fColumnOrderPreserved();
	static ::jint& fColumnWidth();
	static ::jint& fCommitIcon();
	static ::jint& fCompatibleWidthLimitDp();
	static ::jint& fCompletionHint();
	static ::jint& fCompletionHintView();
	static ::jint& fCompletionThreshold();
	static ::jint& fConfigChanges();
	static ::jint& fConfigure();
	static ::jint& fConstantSize();
	static ::jint& fContent();
	static ::jint& fContentAgeHint();
	static ::jint& fContentAuthority();
	static ::jint& fContentDescription();
	static ::jint& fContentInsetEnd();
	static ::jint& fContentInsetEndWithActions();
	static ::jint& fContentInsetLeft();
	static ::jint& fContentInsetRight();
	static ::jint& fContentInsetStart();
	static ::jint& fContentInsetStartWithNavigation();
	static ::jint& fContextClickable();
	static ::jint& fContextDescription();
	static ::jint& fContextPopupMenuStyle();
	static ::jint& fContextUri();
	static ::jint& fControlX1();
	static ::jint& fControlX2();
	static ::jint& fControlY1();
	static ::jint& fControlY2();
	static ::jint& fCountDown();
	static ::jint& fCountry();
	static ::jint& fCropToPadding();
	static ::jint& fCrossProfile();
	static ::jint& fCursorVisible();
	static ::jint& fCustomNavigationLayout();
	static ::jint& fCustomTokens();
	static ::jint& fCycles();
	static ::jint& fDashGap();
	static ::jint& fDashWidth();
	static ::jint& fData();
	static ::jint& fDataExtractionRules();
	static ::jint& fDatePickerDialogTheme();
	static ::jint& fDatePickerMode();
	static ::jint& fDatePickerStyle();
	static ::jint& fDateTextAppearance();
	static ::jint& fDayOfWeekBackground();
	static ::jint& fDayOfWeekTextAppearance();
	static ::jint& fDebuggable();
	static ::jint& fDefaultFocusHighlightEnabled();
	static ::jint& fDefaultHeight();
	static ::jint& fDefaultToDeviceProtectedStorage();
	static ::jint& fDefaultValue();
	static ::jint& fDefaultWidth();
	static ::jint& fDelay();
	static ::jint& fDependency();
	static ::jint& fDescendantFocusability();
	static ::jint& fDescription();
	static ::jint& fDetachWallpaper();
	static ::jint& fDetailColumn();
	static ::jint& fDetailSocialSummary();
	static ::jint& fDetailsElementBackground();
	static ::jint& fDial();
	static ::jint& fDialTint();
	static ::jint& fDialTintMode();
	static ::jint& fDialogCornerRadius();
	static ::jint& fDialogIcon();
	static ::jint& fDialogLayout();
	static ::jint& fDialogMessage();
	static ::jint& fDialogPreferenceStyle();
	static ::jint& fDialogPreferredPadding();
	static ::jint& fDialogTheme();
	static ::jint& fDialogTitle();
	static ::jint& fDigits();
	static ::jint& fDirectBootAware();
	static ::jint& fDirection();
	static ::jint& fDirectionDescriptions();
	static ::jint& fDirectionPriority();
	static ::jint& fDisableDependentsState();
	static ::jint& fDisabledAlpha();
	static ::jint& fDisplayOptions();
	static ::jint& fDither();
	static ::jint& fDivider();
	static ::jint& fDividerHeight();
	static ::jint& fDividerHorizontal();
	static ::jint& fDividerPadding();
	static ::jint& fDividerVertical();
	static ::jint& fDocumentLaunchMode();
	static ::jint& fDrawSelectorOnTop();
	static ::jint& fDrawable();
	static ::jint& fDrawableBottom();
	static ::jint& fDrawableEnd();
	static ::jint& fDrawableLeft();
	static ::jint& fDrawablePadding();
	static ::jint& fDrawableRight();
	static ::jint& fDrawableStart();
	static ::jint& fDrawableTint();
	static ::jint& fDrawableTintMode();
	static ::jint& fDrawableTop();
	static ::jint& fDrawingCacheQuality();
	static ::jint& fDropDownAnchor();
	static ::jint& fDropDownHeight();
	static ::jint& fDropDownHintAppearance();
	static ::jint& fDropDownHorizontalOffset();
	static ::jint& fDropDownItemStyle();
	static ::jint& fDropDownListViewStyle();
	static ::jint& fDropDownSelector();
	static ::jint& fDropDownSpinnerStyle();
	static ::jint& fDropDownVerticalOffset();
	static ::jint& fDropDownWidth();
	static ::jint& fDuplicateParentState();
	static ::jint& fDuration();
	static ::jint& fEditTextBackground();
	static ::jint& fEditTextColor();
	static ::jint& fEditTextPreferenceStyle();
	static ::jint& fEditTextStyle();
	static ::jint& fEditable();
	static ::jint& fEditorExtras();
	static ::jint& fEffectColor();
	static ::jint& fElegantTextHeight();
	static ::jint& fElevation();
	static ::jint& fEllipsize();
	static ::jint& fEms();
	static ::jint& fEnableVrMode();
	static ::jint& fEnabled();
	static ::jint& fEnd();
	static ::jint& fEndColor();
	static ::jint& fEndX();
	static ::jint& fEndY();
	static ::jint& fEndYear();
	static ::jint& fEnforceNavigationBarContrast();
	static ::jint& fEnforceStatusBarContrast();
	static ::jint& fEnterFadeDuration();
	static ::jint& fEntries();
	static ::jint& fEntryValues();
	static ::jint& fEventsInterceptionEnabled();
	static ::jint& fExcludeClass();
	static ::jint& fExcludeFromRecents();
	static ::jint& fExcludeId();
	static ::jint& fExcludeName();
	static ::jint& fExitFadeDuration();
	static ::jint& fExpandableListPreferredChildIndicatorLeft();
	static ::jint& fExpandableListPreferredChildIndicatorRight();
	static ::jint& fExpandableListPreferredChildPaddingLeft();
	static ::jint& fExpandableListPreferredItemIndicatorLeft();
	static ::jint& fExpandableListPreferredItemIndicatorRight();
	static ::jint& fExpandableListPreferredItemPaddingLeft();
	static ::jint& fExpandableListViewStyle();
	static ::jint& fExpandableListViewWhiteStyle();
	static ::jint& fExported();
	static ::jint& fExternalService();
	static ::jint& fExtraTension();
	static ::jint& fExtractNativeLibs();
	static ::jint& fFactor();
	static ::jint& fFadeDuration();
	static ::jint& fFadeEnabled();
	static ::jint& fFadeOffset();
	static ::jint& fFadeScrollbars();
	static ::jint& fFadingEdge();
	static ::jint& fFadingEdgeLength();
	static ::jint& fFadingMode();
	static ::jint& fFallbackLineSpacing();
	static ::jint& fFastScrollAlwaysVisible();
	static ::jint& fFastScrollEnabled();
	static ::jint& fFastScrollOverlayPosition();
	static ::jint& fFastScrollPreviewBackgroundLeft();
	static ::jint& fFastScrollPreviewBackgroundRight();
	static ::jint& fFastScrollStyle();
	static ::jint& fFastScrollTextColor();
	static ::jint& fFastScrollThumbDrawable();
	static ::jint& fFastScrollTrackDrawable();
	static ::jint& fFillAfter();
	static ::jint& fFillAlpha();
	static ::jint& fFillBefore();
	static ::jint& fFillColor();
	static ::jint& fFillEnabled();
	static ::jint& fFillType();
	static ::jint& fFillViewport();
	static ::jint& fFilter();
	static ::jint& fFilterTouchesWhenObscured();
	static ::jint& fFingerprintAuthDrawable();
	static ::jint& fFinishOnCloseSystemDialogs();
	static ::jint& fFinishOnTaskLaunch();
	static ::jint& fFirstBaselineToTopHeight();
	static ::jint& fFirstDayOfWeek();
	static ::jint& fFitsSystemWindows();
	static ::jint& fFlipInterval();
	static ::jint& fFocusable();
	static ::jint& fFocusableInTouchMode();
	static ::jint& fFocusedByDefault();
	static ::jint& fFocusedMonthDateColor();
	static ::jint& fFont();
	static ::jint& fFontFamily();
	static ::jint& fFontFeatureSettings();
	static ::jint& fFontProviderAuthority();
	static ::jint& fFontProviderCerts();
	static ::jint& fFontProviderPackage();
	static ::jint& fFontProviderQuery();
	static ::jint& fFontProviderSystemFontFamily();
	static ::jint& fFontStyle();
	static ::jint& fFontVariationSettings();
	static ::jint& fFontWeight();
	static ::jint& fFooterDividersEnabled();
	static ::jint& fForceDarkAllowed();
	static ::jint& fForceHasOverlappingRendering();
	static ::jint& fForceQueryable();
	static ::jint& fForceUriPermissions();
	static ::jint& fForeground();
	static ::jint& fForegroundGravity();
	static ::jint& fForegroundServiceType();
	static ::jint& fForegroundTint();
	static ::jint& fForegroundTintMode();
	static ::jint& fFormat();
	static ::jint& fFormat12Hour();
	static ::jint& fFormat24Hour();
	static ::jint& fFraction();
	static ::jint& fFragment();
	static ::jint& fFragmentAllowEnterTransitionOverlap();
	static ::jint& fFragmentAllowReturnTransitionOverlap();
	static ::jint& fFragmentCloseEnterAnimation();
	static ::jint& fFragmentCloseExitAnimation();
	static ::jint& fFragmentEnterTransition();
	static ::jint& fFragmentExitTransition();
	static ::jint& fFragmentFadeEnterAnimation();
	static ::jint& fFragmentFadeExitAnimation();
	static ::jint& fFragmentOpenEnterAnimation();
	static ::jint& fFragmentOpenExitAnimation();
	static ::jint& fFragmentReenterTransition();
	static ::jint& fFragmentReturnTransition();
	static ::jint& fFragmentSharedElementEnterTransition();
	static ::jint& fFragmentSharedElementReturnTransition();
	static ::jint& fFreezesText();
	static ::jint& fFromAlpha();
	static ::jint& fFromDegrees();
	static ::jint& fFromId();
	static ::jint& fFromScene();
	static ::jint& fFromXDelta();
	static ::jint& fFromXScale();
	static ::jint& fFromYDelta();
	static ::jint& fFromYScale();
	static ::jint& fFullBackupContent();
	static ::jint& fFullBackupOnly();
	static ::jint& fFullBright();
	static ::jint& fFullDark();
	static ::jint& fFunctionalTest();
	static ::jint& fGalleryItemBackground();
	static ::jint& fGalleryStyle();
	static ::jint& fGestureColor();
	static ::jint& fGestureStrokeAngleThreshold();
	static ::jint& fGestureStrokeLengthThreshold();
	static ::jint& fGestureStrokeSquarenessThreshold();
	static ::jint& fGestureStrokeType();
	static ::jint& fGestureStrokeWidth();
	static ::jint& fGlEsVersion();
	static ::jint& fGoIcon();
	static ::jint& fGradientRadius();
	static ::jint& fGrantUriPermissions();
	static ::jint& fGravity();
	static ::jint& fGridViewStyle();
	static ::jint& fGroupIndicator();
	static ::jint& fGwpAsanMode();
	static ::jint& fHand_hour();
	static ::jint& fHand_hourTint();
	static ::jint& fHand_hourTintMode();
	static ::jint& fHand_minute();
	static ::jint& fHand_minuteTint();
	static ::jint& fHand_minuteTintMode();
	static ::jint& fHand_second();
	static ::jint& fHand_secondTint();
	static ::jint& fHand_secondTintMode();
	static ::jint& fHandle();
	static ::jint& fHandleProfiling();
	static ::jint& fHapticFeedbackEnabled();
	static ::jint& fHardwareAccelerated();
	static ::jint& fHasCode();
	static ::jint& fHasFragileUserData();
	static ::jint& fHeaderAmPmTextAppearance();
	static ::jint& fHeaderBackground();
	static ::jint& fHeaderDayOfMonthTextAppearance();
	static ::jint& fHeaderDividersEnabled();
	static ::jint& fHeaderMonthTextAppearance();
	static ::jint& fHeaderTimeTextAppearance();
	static ::jint& fHeaderYearTextAppearance();
	static ::jint& fHeight();
	static ::jint& fHideOnContentScroll();
	static ::jint& fHint();
	static ::jint& fHomeAsUpIndicator();
	static ::jint& fHomeLayout();
	static ::jint& fHorizontalDivider();
	static ::jint& fHorizontalGap();
	static ::jint& fHorizontalScrollViewStyle();
	static ::jint& fHorizontalSpacing();
	static ::jint& fHost();
	static ::jint& fHotSpotX();
	static ::jint& fHotSpotY();
	static ::jint& fHtmlDescription();
	static ::jint& fHyphenationFrequency();
	static ::jint& fIcon();
	static ::jint& fIconPreview();
	static ::jint& fIconSpaceReserved();
	static ::jint& fIconTint();
	static ::jint& fIconTintMode();
	static ::jint& fIconifiedByDefault();
	static ::jint& fId();
	static ::jint& fIdentifier();
	static ::jint& fIgnoreGravity();
	static ::jint& fImageButtonStyle();
	static ::jint& fImageWellStyle();
	static ::jint& fImeActionId();
	static ::jint& fImeActionLabel();
	static ::jint& fImeExtractEnterAnimation();
	static ::jint& fImeExtractExitAnimation();
	static ::jint& fImeFullscreenBackground();
	static ::jint& fImeOptions();
	static ::jint& fImeSubtypeExtraValue();
	static ::jint& fImeSubtypeLocale();
	static ::jint& fImeSubtypeMode();
	static ::jint& fImmersive();
	static ::jint& fImportantForAccessibility();
	static ::jint& fImportantForAutofill();
	static ::jint& fImportantForContentCapture();
	static ::jint& fInAnimation();
	static ::jint& fIncludeFontPadding();
	static ::jint& fIncludeInGlobalSearch();
	static ::jint& fIndeterminate();
	static ::jint& fIndeterminateBehavior();
	static ::jint& fIndeterminateDrawable();
	static ::jint& fIndeterminateDuration();
	static ::jint& fIndeterminateOnly();
	static ::jint& fIndeterminateProgressStyle();
	static ::jint& fIndeterminateTint();
	static ::jint& fIndeterminateTintMode();
	static ::jint& fIndicatorEnd();
	static ::jint& fIndicatorLeft();
	static ::jint& fIndicatorRight();
	static ::jint& fIndicatorStart();
	static ::jint& fInflatedId();
	static ::jint& fInheritShowWhenLocked();
	static ::jint& fInitOrder();
	static ::jint& fInitialKeyguardLayout();
	static ::jint& fInitialLayout();
	static ::jint& fInnerRadius();
	static ::jint& fInnerRadiusRatio();
	static ::jint& fInputMethod();
	static ::jint& fInputType();
	static ::jint& fInset();
	static ::jint& fInsetBottom();
	static ::jint& fInsetLeft();
	static ::jint& fInsetRight();
	static ::jint& fInsetTop();
	static ::jint& fInstallLocation();
	static ::jint& fInteractiveUiTimeout();
	static ::jint& fInterpolator();
	static ::jint& fIsAccessibilityTool();
	static ::jint& fIsAlwaysSyncable();
	static ::jint& fIsAsciiCapable();
	static ::jint& fIsAuxiliary();
	static ::jint& fIsDefault();
	static ::jint& fIsFeatureSplit();
	static ::jint& fIsGame();
	static ::jint& fIsIndicator();
	static ::jint& fIsLightTheme();
	static ::jint& fIsModifier();
	static ::jint& fIsRepeatable();
	static ::jint& fIsScrollContainer();
	static ::jint& fIsSplitRequired();
	static ::jint& fIsStatic();
	static ::jint& fIsSticky();
	static ::jint& fIsolatedProcess();
	static ::jint& fIsolatedSplits();
	static ::jint& fItemBackground();
	static ::jint& fItemIconDisabledAlpha();
	static ::jint& fItemPadding();
	static ::jint& fItemTextAppearance();
	static ::jint& fJustificationMode();
	static ::jint& fKeepScreenOn();
	static ::jint& fKey();
	static ::jint& fKeyBackground();
	static ::jint& fKeyEdgeFlags();
	static ::jint& fKeyHeight();
	static ::jint& fKeyIcon();
	static ::jint& fKeyLabel();
	static ::jint& fKeyOutputText();
	static ::jint& fKeyPreviewHeight();
	static ::jint& fKeyPreviewLayout();
	static ::jint& fKeyPreviewOffset();
	static ::jint& fKeySet();
	static ::jint& fKeyTextColor();
	static ::jint& fKeyTextSize();
	static ::jint& fKeyWidth();
	static ::jint& fKeyboardLayout();
	static ::jint& fKeyboardMode();
	static ::jint& fKeyboardNavigationCluster();
	static ::jint& fKeycode();
	static ::jint& fKillAfterRestore();
	static ::jint& fKnownCerts();
	static ::jint& fLStar();
	static ::jint& fLabel();
	static ::jint& fLabelFor();
	static ::jint& fLabelTextSize();
	static ::jint& fLanguageTag();
	static ::jint& fLargeHeap();
	static ::jint& fLargeScreens();
	static ::jint& fLargestWidthLimitDp();
	static ::jint& fLastBaselineToBottomHeight();
	static ::jint& fLaunchMode();
	static ::jint& fLaunchTaskBehindSourceAnimation();
	static ::jint& fLaunchTaskBehindTargetAnimation();
	static ::jint& fLayerType();
	static ::jint& fLayout();
	static ::jint& fLayoutAnimation();
	static ::jint& fLayoutDirection();
	static ::jint& fLayoutMode();
	static ::jint& fLayout_above();
	static ::jint& fLayout_alignBaseline();
	static ::jint& fLayout_alignBottom();
	static ::jint& fLayout_alignEnd();
	static ::jint& fLayout_alignLeft();
	static ::jint& fLayout_alignParentBottom();
	static ::jint& fLayout_alignParentEnd();
	static ::jint& fLayout_alignParentLeft();
	static ::jint& fLayout_alignParentRight();
	static ::jint& fLayout_alignParentStart();
	static ::jint& fLayout_alignParentTop();
	static ::jint& fLayout_alignRight();
	static ::jint& fLayout_alignStart();
	static ::jint& fLayout_alignTop();
	static ::jint& fLayout_alignWithParentIfMissing();
	static ::jint& fLayout_below();
	static ::jint& fLayout_centerHorizontal();
	static ::jint& fLayout_centerInParent();
	static ::jint& fLayout_centerVertical();
	static ::jint& fLayout_column();
	static ::jint& fLayout_columnSpan();
	static ::jint& fLayout_columnWeight();
	static ::jint& fLayout_gravity();
	static ::jint& fLayout_height();
	static ::jint& fLayout_margin();
	static ::jint& fLayout_marginBottom();
	static ::jint& fLayout_marginEnd();
	static ::jint& fLayout_marginHorizontal();
	static ::jint& fLayout_marginLeft();
	static ::jint& fLayout_marginRight();
	static ::jint& fLayout_marginStart();
	static ::jint& fLayout_marginTop();
	static ::jint& fLayout_marginVertical();
	static ::jint& fLayout_row();
	static ::jint& fLayout_rowSpan();
	static ::jint& fLayout_rowWeight();
	static ::jint& fLayout_scale();
	static ::jint& fLayout_span();
	static ::jint& fLayout_toEndOf();
	static ::jint& fLayout_toLeftOf();
	static ::jint& fLayout_toRightOf();
	static ::jint& fLayout_toStartOf();
	static ::jint& fLayout_weight();
	static ::jint& fLayout_width();
	static ::jint& fLayout_x();
	static ::jint& fLayout_y();
	static ::jint& fLeft();
	static ::jint& fLetterSpacing();
	static ::jint& fLevel();
	static ::jint& fLineHeight();
	static ::jint& fLineSpacingExtra();
	static ::jint& fLineSpacingMultiplier();
	static ::jint& fLines();
	static ::jint& fLinksClickable();
	static ::jint& fListChoiceBackgroundIndicator();
	static ::jint& fListChoiceIndicatorMultiple();
	static ::jint& fListChoiceIndicatorSingle();
	static ::jint& fListDivider();
	static ::jint& fListDividerAlertDialog();
	static ::jint& fListMenuViewStyle();
	static ::jint& fListPopupWindowStyle();
	static ::jint& fListPreferredItemHeight();
	static ::jint& fListPreferredItemHeightLarge();
	static ::jint& fListPreferredItemHeightSmall();
	static ::jint& fListPreferredItemPaddingEnd();
	static ::jint& fListPreferredItemPaddingLeft();
	static ::jint& fListPreferredItemPaddingRight();
	static ::jint& fListPreferredItemPaddingStart();
	static ::jint& fListSelector();
	static ::jint& fListSeparatorTextViewStyle();
	static ::jint& fListViewStyle();
	static ::jint& fListViewWhiteStyle();
	static ::jint& fLockTaskMode();
	static ::jint& fLogo();
	static ::jint& fLogoDescription();
	static ::jint& fLongClickable();
	static ::jint& fLoopViews();
	static ::jint& fManageSpaceActivity();
	static ::jint& fMapViewStyle();
	static ::jint& fMarqueeRepeatLimit();
	static ::jint& fMatchOrder();
	static ::jint& fMax();
	static ::jint& fMaxAspectRatio();
	static ::jint& fMaxButtonHeight();
	static ::jint& fMaxDate();
	static ::jint& fMaxEms();
	static ::jint& fMaxHeight();
	static ::jint& fMaxItemsPerRow();
	static ::jint& fMaxLength();
	static ::jint& fMaxLevel();
	static ::jint& fMaxLines();
	static ::jint& fMaxLongVersionCode();
	static ::jint& fMaxRecents();
	static ::jint& fMaxResizeHeight();
	static ::jint& fMaxResizeWidth();
	static ::jint& fMaxRows();
	static ::jint& fMaxSdkVersion();
	static ::jint& fMaxWidth();
	static ::jint& fMaximumAngle();
	static ::jint& fMeasureAllChildren();
	static ::jint& fMeasureWithLargestChild();
	static ::jint& fMediaRouteButtonStyle();
	static ::jint& fMediaRouteTypes();
	static ::jint& fMemtagMode();
	static ::jint& fMenuCategory();
	static ::jint& fMimeGroup();
	static ::jint& fMimeType();
	static ::jint& fMin();
	static ::jint& fMinAspectRatio();
	static ::jint& fMinDate();
	static ::jint& fMinEms();
	static ::jint& fMinHeight();
	static ::jint& fMinLevel();
	static ::jint& fMinLines();
	static ::jint& fMinResizeHeight();
	static ::jint& fMinResizeWidth();
	static ::jint& fMinSdkVersion();
	static ::jint& fMinWidth();
	static ::jint& fMinimumHorizontalAngle();
	static ::jint& fMinimumVerticalAngle();
	static ::jint& fMipMap();
	static ::jint& fMirrorForRtl();
	static ::jint& fMode();
	static ::jint& fMoreIcon();
	static ::jint& fMultiArch();
	static ::jint& fMultiprocess();
	static ::jint& fName();
	static ::jint& fNativeHeapZeroInitialized();
	static ::jint& fNavigationBarColor();
	static ::jint& fNavigationBarDividerColor();
	static ::jint& fNavigationContentDescription();
	static ::jint& fNavigationIcon();
	static ::jint& fNavigationMode();
	static ::jint& fNegativeButtonText();
	static ::jint& fNestedScrollingEnabled();
	static ::jint& fNetworkSecurityConfig();
	static ::jint& fNextClusterForward();
	static ::jint& fNextFocusDown();
	static ::jint& fNextFocusForward();
	static ::jint& fNextFocusLeft();
	static ::jint& fNextFocusRight();
	static ::jint& fNextFocusUp();
	static ::jint& fNoHistory();
	static ::jint& fNonInteractiveUiTimeout();
	static ::jint& fNormalScreens();
	static ::jint& fNotificationTimeout();
	static ::jint& fNumColumns();
	static ::jint& fNumStars();
	static ::jint& fNumberPickerStyle();
	static ::jint& fNumbersBackgroundColor();
	static ::jint& fNumbersInnerTextColor();
	static ::jint& fNumbersSelectorColor();
	static ::jint& fNumbersTextColor();
	static ::jint& fNumeric();
	static ::jint& fNumericModifiers();
	static ::jint& fNumericShortcut();
	static ::jint& fOffset();
	static ::jint& fOnClick();
	static ::jint& fOneshot();
	static ::jint& fOpacity();
	static ::jint& fOpticalInsetBottom();
	static ::jint& fOpticalInsetLeft();
	static ::jint& fOpticalInsetRight();
	static ::jint& fOpticalInsetTop();
	static ::jint& fOrder();
	static ::jint& fOrderInCategory();
	static ::jint& fOrdering();
	static ::jint& fOrderingFromXml();
	static ::jint& fOrientation();
	static ::jint& fOutAnimation();
	static ::jint& fOutlineAmbientShadowColor();
	static ::jint& fOutlineProvider();
	static ::jint& fOutlineSpotShadowColor();
	static ::jint& fOverScrollFooter();
	static ::jint& fOverScrollHeader();
	static ::jint& fOverScrollMode();
	static ::jint& fOverlapAnchor();
	static ::jint& fOverridesImplicitlyEnabledSubtype();
	static ::jint& fPackageNames();
	static ::jint& fPackageType();
	static ::jint& fPadding();
	static ::jint& fPaddingBottom();
	static ::jint& fPaddingEnd();
	static ::jint& fPaddingHorizontal();
	static ::jint& fPaddingLeft();
	static ::jint& fPaddingMode();
	static ::jint& fPaddingRight();
	static ::jint& fPaddingStart();
	static ::jint& fPaddingTop();
	static ::jint& fPaddingVertical();
	static ::jint& fPanelBackground();
	static ::jint& fPanelColorBackground();
	static ::jint& fPanelColorForeground();
	static ::jint& fPanelFullBackground();
	static ::jint& fPanelTextAppearance();
	static ::jint& fParentActivityName();
	static ::jint& fPassword();
	static ::jint& fPasswordsActivity();
	static ::jint& fPath();
	static ::jint& fPathAdvancedPattern();
	static ::jint& fPathData();
	static ::jint& fPathPattern();
	static ::jint& fPathPrefix();
	static ::jint& fPathSuffix();
	static ::jint& fPatternPathData();
	static ::jint& fPermission();
	static ::jint& fPermissionFlags();
	static ::jint& fPermissionGroup();
	static ::jint& fPermissionGroupFlags();
	static ::jint& fPersistableMode();
	static ::jint& fPersistent();
	static ::jint& fPersistentDrawingCache();
	static ::jint& fPersistentWhenFeatureAvailable();
	static ::jint& fPhoneNumber();
	static ::jint& fPivotX();
	static ::jint& fPivotY();
	static ::jint& fPointerIcon();
	static ::jint& fPopupAnimationStyle();
	static ::jint& fPopupBackground();
	static ::jint& fPopupCharacters();
	static ::jint& fPopupElevation();
	static ::jint& fPopupEnterTransition();
	static ::jint& fPopupExitTransition();
	static ::jint& fPopupKeyboard();
	static ::jint& fPopupLayout();
	static ::jint& fPopupMenuStyle();
	static ::jint& fPopupTheme();
	static ::jint& fPopupWindowStyle();
	static ::jint& fPort();
	static ::jint& fPositiveButtonText();
	static ::jint& fPreferMinimalPostProcessing();
	static ::jint& fPreferenceCategoryStyle();
	static ::jint& fPreferenceFragmentStyle();
	static ::jint& fPreferenceInformationStyle();
	static ::jint& fPreferenceLayoutChild();
	static ::jint& fPreferenceScreenStyle();
	static ::jint& fPreferenceStyle();
	static ::jint& fPresentationTheme();
	static ::jint& fPreserveLegacyExternalStorage();
	static ::jint& fPreviewImage();
	static ::jint& fPreviewLayout();
	static ::jint& fPrimaryContentAlpha();
	static ::jint& fPriority();
	static ::jint& fPrivateImeOptions();
	static ::jint& fProcess();
	static ::jint& fProgress();
	static ::jint& fProgressBackgroundTint();
	static ::jint& fProgressBackgroundTintMode();
	static ::jint& fProgressBarPadding();
	static ::jint& fProgressBarStyle();
	static ::jint& fProgressBarStyleHorizontal();
	static ::jint& fProgressBarStyleInverse();
	static ::jint& fProgressBarStyleLarge();
	static ::jint& fProgressBarStyleLargeInverse();
	static ::jint& fProgressBarStyleSmall();
	static ::jint& fProgressBarStyleSmallInverse();
	static ::jint& fProgressBarStyleSmallTitle();
	static ::jint& fProgressDrawable();
	static ::jint& fProgressTint();
	static ::jint& fProgressTintMode();
	static ::jint& fPrompt();
	static ::jint& fPropertyName();
	static ::jint& fPropertyXName();
	static ::jint& fPropertyYName();
	static ::jint& fProtectionLevel();
	static ::jint& fPublicKey();
	static ::jint& fQueryActionMsg();
	static ::jint& fQueryAfterZeroResults();
	static ::jint& fQueryBackground();
	static ::jint& fQueryHint();
	static ::jint& fQuickContactBadgeStyleSmallWindowLarge();
	static ::jint& fQuickContactBadgeStyleSmallWindowMedium();
	static ::jint& fQuickContactBadgeStyleSmallWindowSmall();
	static ::jint& fQuickContactBadgeStyleWindowLarge();
	static ::jint& fQuickContactBadgeStyleWindowMedium();
	static ::jint& fQuickContactBadgeStyleWindowSmall();
	static ::jint& fRadioButtonStyle();
	static ::jint& fRadius();
	static ::jint& fRating();
	static ::jint& fRatingBarStyle();
	static ::jint& fRatingBarStyleIndicator();
	static ::jint& fRatingBarStyleSmall();
	static ::jint& fReadPermission();
	static ::jint& fRecognitionService();
	static ::jint& fRecreateOnConfigChanges();
	static ::jint& fRecycleEnabled();
	static ::jint& fRelinquishTaskIdentity();
	static ::jint& fReparent();
	static ::jint& fReparentWithOverlay();
	static ::jint& fRepeatCount();
	static ::jint& fRepeatMode();
	static ::jint& fReqFiveWayNav();
	static ::jint& fReqHardKeyboard();
	static ::jint& fReqKeyboardType();
	static ::jint& fReqNavigation();
	static ::jint& fReqTouchScreen();
	static ::jint& fRequestLegacyExternalStorage();
	static ::jint& fRequestRawExternalStorageAccess();
	static ::jint& fRequireDeviceScreenOn();
	static ::jint& fRequireDeviceUnlock();
	static ::jint& fRequired();
	static ::jint& fRequiredAccountType();
	static ::jint& fRequiredFeature();
	static ::jint& fRequiredForAllUsers();
	static ::jint& fRequiredNotFeature();
	static ::jint& fRequiresFadingEdge();
	static ::jint& fRequiresSmallestWidthDp();
	static ::jint& fResizeClip();
	static ::jint& fResizeMode();
	static ::jint& fResizeable();
	static ::jint& fResizeableActivity();
	static ::jint& fResource();
	static ::jint& fResourcesMap();
	static ::jint& fRestoreAnyVersion();
	static ::jint& fRestoreNeedsApplication();
	static ::jint& fRestrictedAccountType();
	static ::jint& fRestrictionType();
	static ::jint& fResumeWhilePausing();
	static ::jint& fReversible();
	static ::jint& fRevisionCode();
	static ::jint& fRight();
	static ::jint& fRingtonePreferenceStyle();
	static ::jint& fRingtoneType();
	static ::jint& fRollbackDataPolicy();
	static ::jint& fRotation();
	static ::jint& fRotationAnimation();
	static ::jint& fRotationX();
	static ::jint& fRotationY();
	static ::jint& fRoundIcon();
	static ::jint& fRowCount();
	static ::jint& fRowDelay();
	static ::jint& fRowEdgeFlags();
	static ::jint& fRowHeight();
	static ::jint& fRowOrderPreserved();
	static ::jint& fSaveEnabled();
	static ::jint& fScaleGravity();
	static ::jint& fScaleHeight();
	static ::jint& fScaleType();
	static ::jint& fScaleWidth();
	static ::jint& fScaleX();
	static ::jint& fScaleY();
	static ::jint& fScheme();
	static ::jint& fScreenDensity();
	static ::jint& fScreenOrientation();
	static ::jint& fScreenReaderFocusable();
	static ::jint& fScreenSize();
	static ::jint& fScrollHorizontally();
	static ::jint& fScrollIndicators();
	static ::jint& fScrollViewStyle();
	static ::jint& fScrollX();
	static ::jint& fScrollY();
	static ::jint& fScrollbarAlwaysDrawHorizontalTrack();
	static ::jint& fScrollbarAlwaysDrawVerticalTrack();
	static ::jint& fScrollbarDefaultDelayBeforeFade();
	static ::jint& fScrollbarFadeDuration();
	static ::jint& fScrollbarSize();
	static ::jint& fScrollbarStyle();
	static ::jint& fScrollbarThumbHorizontal();
	static ::jint& fScrollbarThumbVertical();
	static ::jint& fScrollbarTrackHorizontal();
	static ::jint& fScrollbarTrackVertical();
	static ::jint& fScrollbars();
	static ::jint& fScrollingCache();
	static ::jint& fSearchButtonText();
	static ::jint& fSearchHintIcon();
	static ::jint& fSearchIcon();
	static ::jint& fSearchMode();
	static ::jint& fSearchSettingsDescription();
	static ::jint& fSearchSuggestAuthority();
	static ::jint& fSearchSuggestIntentAction();
	static ::jint& fSearchSuggestIntentData();
	static ::jint& fSearchSuggestPath();
	static ::jint& fSearchSuggestSelection();
	static ::jint& fSearchSuggestThreshold();
	static ::jint& fSearchViewStyle();
	static ::jint& fSecondaryContentAlpha();
	static ::jint& fSecondaryProgress();
	static ::jint& fSecondaryProgressTint();
	static ::jint& fSecondaryProgressTintMode();
	static ::jint& fSecureElementName();
	static ::jint& fSeekBarStyle();
	static ::jint& fSegmentedButtonStyle();
	static ::jint& fSelectAllOnFocus();
	static ::jint& fSelectable();
	static ::jint& fSelectableAsDefault();
	static ::jint& fSelectableItemBackground();
	static ::jint& fSelectableItemBackgroundBorderless();
	static ::jint& fSelectedDateVerticalBar();
	static ::jint& fSelectedWeekBackgroundColor();
	static ::jint& fSelectionDividerHeight();
	static ::jint& fSessionService();
	static ::jint& fSettingsActivity();
	static ::jint& fSettingsSliceUri();
	static ::jint& fSetupActivity();
	static ::jint& fShadowColor();
	static ::jint& fShadowDx();
	static ::jint& fShadowDy();
	static ::jint& fShadowRadius();
	static ::jint& fShape();
	static ::jint& fShareInterpolator();
	static ::jint& fSharedUserId();
	static ::jint& fSharedUserLabel();
	static ::jint& fShell();
	static ::jint& fShortcutDisabledMessage();
	static ::jint& fShortcutId();
	static ::jint& fShortcutLongLabel();
	static ::jint& fShortcutShortLabel();
	static ::jint& fShouldDisableView();
	static ::jint& fShowAsAction();
	static ::jint& fShowDefault();
	static ::jint& fShowDividers();
	static ::jint& fShowForAllUsers();
	static ::jint& fShowInInputMethodPicker();
	static ::jint& fShowMetadataInPreview();
	static ::jint& fShowOnLockScreen();
	static ::jint& fShowSilent();
	static ::jint& fShowText();
	static ::jint& fShowWeekNumber();
	static ::jint& fShowWhenLocked();
	static ::jint& fShownWeekCount();
	static ::jint& fShrinkColumns();
	static ::jint& fSingleLine();
	static ::jint& fSingleLineTitle();
	static ::jint& fSingleUser();
	static ::jint& fSlideEdge();
	static ::jint& fSmallIcon();
	static ::jint& fSmallScreens();
	static ::jint& fSmoothScrollbar();
	static ::jint& fSoundEffectsEnabled();
	static ::jint& fSpacing();
	static ::jint& fSpinnerDropDownItemStyle();
	static ::jint& fSpinnerItemStyle();
	static ::jint& fSpinnerMode();
	static ::jint& fSpinnerStyle();
	static ::jint& fSpinnersShown();
	static ::jint& fSplashScreenTheme();
	static ::jint& fSplitMotionEvents();
	static ::jint& fSplitName();
	static ::jint& fSplitTrack();
	static ::jint& fSpotShadowAlpha();
	static ::jint& fSrc();
	static ::jint& fSsp();
	static ::jint& fSspAdvancedPattern();
	static ::jint& fSspPattern();
	static ::jint& fSspPrefix();
	static ::jint& fSspSuffix();
	static ::jint& fStackFromBottom();
	static ::jint& fStackViewStyle();
	static ::jint& fStarStyle();
	static ::jint& fStart();
	static ::jint& fStartColor();
	static ::jint& fStartDelay();
	static ::jint& fStartOffset();
	static ::jint& fStartX();
	static ::jint& fStartY();
	static ::jint& fStartYear();
	static ::jint& fStateListAnimator();
	static ::jint& fStateNotNeeded();
	static ::jint& fState_above_anchor();
	static ::jint& fState_accelerated();
	static ::jint& fState_activated();
	static ::jint& fState_active();
	static ::jint& fState_checkable();
	static ::jint& fState_checked();
	static ::jint& fState_drag_can_accept();
	static ::jint& fState_drag_hovered();
	static ::jint& fState_empty();
	static ::jint& fState_enabled();
	static ::jint& fState_expanded();
	static ::jint& fState_first();
	static ::jint& fState_focused();
	static ::jint& fState_hovered();
	static ::jint& fState_last();
	static ::jint& fState_long_pressable();
	static ::jint& fState_middle();
	static ::jint& fState_multiline();
	static ::jint& fState_pressed();
	static ::jint& fState_selected();
	static ::jint& fState_single();
	static ::jint& fState_window_focused();
	static ::jint& fStaticWallpaperPreview();
	static ::jint& fStatusBarColor();
	static ::jint& fStepSize();
	static ::jint& fStopWithTask();
	static ::jint& fStreamType();
	static ::jint& fStretchColumns();
	static ::jint& fStretchMode();
	static ::jint& fStrokeAlpha();
	static ::jint& fStrokeColor();
	static ::jint& fStrokeLineCap();
	static ::jint& fStrokeLineJoin();
	static ::jint& fStrokeMiterLimit();
	static ::jint& fStrokeWidth();
	static ::jint& fSubMenuArrow();
	static ::jint& fSubmitBackground();
	static ::jint& fSubtitle();
	static ::jint& fSubtitleTextAppearance();
	static ::jint& fSubtitleTextColor();
	static ::jint& fSubtitleTextStyle();
	static ::jint& fSubtypeExtraValue();
	static ::jint& fSubtypeId();
	static ::jint& fSubtypeLocale();
	static ::jint& fSuggestActionMsg();
	static ::jint& fSuggestActionMsgColumn();
	static ::jint& fSuggestionRowLayout();
	static ::jint& fSummary();
	static ::jint& fSummaryColumn();
	static ::jint& fSummaryOff();
	static ::jint& fSummaryOn();
	static ::jint& fSupportsAssist();
	static ::jint& fSupportsInlineSuggestions();
	static ::jint& fSupportsLaunchVoiceAssistFromKeyguard();
	static ::jint& fSupportsLocalInteraction();
	static ::jint& fSupportsMultipleDisplays();
	static ::jint& fSupportsPictureInPicture();
	static ::jint& fSupportsRtl();
	static ::jint& fSupportsSwitchingToNextInputMethod();
	static ::jint& fSupportsUploading();
	static ::jint& fSuppressesSpellChecker();
	static ::jint& fSwitchMinWidth();
	static ::jint& fSwitchPadding();
	static ::jint& fSwitchPreferenceStyle();
	static ::jint& fSwitchStyle();
	static ::jint& fSwitchTextAppearance();
	static ::jint& fSwitchTextOff();
	static ::jint& fSwitchTextOn();
	static ::jint& fSyncable();
	static ::jint& fTabStripEnabled();
	static ::jint& fTabStripLeft();
	static ::jint& fTabStripRight();
	static ::jint& fTabWidgetStyle();
	static ::jint& fTag();
	static ::jint& fTargetActivity();
	static ::jint& fTargetCellHeight();
	static ::jint& fTargetCellWidth();
	static ::jint& fTargetClass();
	static ::jint& fTargetDescriptions();
	static ::jint& fTargetId();
	static ::jint& fTargetName();
	static ::jint& fTargetPackage();
	static ::jint& fTargetProcesses();
	static ::jint& fTargetSandboxVersion();
	static ::jint& fTargetSdkVersion();
	static ::jint& fTaskAffinity();
	static ::jint& fTaskCloseEnterAnimation();
	static ::jint& fTaskCloseExitAnimation();
	static ::jint& fTaskOpenEnterAnimation();
	static ::jint& fTaskOpenExitAnimation();
	static ::jint& fTaskToBackEnterAnimation();
	static ::jint& fTaskToBackExitAnimation();
	static ::jint& fTaskToFrontEnterAnimation();
	static ::jint& fTaskToFrontExitAnimation();
	static ::jint& fTension();
	static ::jint& fTestOnly();
	static ::jint& fText();
	static ::jint& fTextAlignment();
	static ::jint& fTextAllCaps();
	static ::jint& fTextAppearance();
	static ::jint& fTextAppearanceButton();
	static ::jint& fTextAppearanceInverse();
	static ::jint& fTextAppearanceLarge();
	static ::jint& fTextAppearanceLargeInverse();
	static ::jint& fTextAppearanceLargePopupMenu();
	static ::jint& fTextAppearanceListItem();
	static ::jint& fTextAppearanceListItemSecondary();
	static ::jint& fTextAppearanceListItemSmall();
	static ::jint& fTextAppearanceMedium();
	static ::jint& fTextAppearanceMediumInverse();
	static ::jint& fTextAppearancePopupMenuHeader();
	static ::jint& fTextAppearanceSearchResultSubtitle();
	static ::jint& fTextAppearanceSearchResultTitle();
	static ::jint& fTextAppearanceSmall();
	static ::jint& fTextAppearanceSmallInverse();
	static ::jint& fTextAppearanceSmallPopupMenu();
	static ::jint& fTextCheckMark();
	static ::jint& fTextCheckMarkInverse();
	static ::jint& fTextColor();
	static ::jint& fTextColorAlertDialogListItem();
	static ::jint& fTextColorHighlight();
	static ::jint& fTextColorHighlightInverse();
	static ::jint& fTextColorHint();
	static ::jint& fTextColorHintInverse();
	static ::jint& fTextColorLink();
	static ::jint& fTextColorLinkInverse();
	static ::jint& fTextColorPrimary();
	static ::jint& fTextColorPrimaryDisableOnly();
	static ::jint& fTextColorPrimaryInverse();
	static ::jint& fTextColorPrimaryInverseDisableOnly();
	static ::jint& fTextColorPrimaryInverseNoDisable();
	static ::jint& fTextColorPrimaryNoDisable();
	static ::jint& fTextColorSecondary();
	static ::jint& fTextColorSecondaryInverse();
	static ::jint& fTextColorSecondaryInverseNoDisable();
	static ::jint& fTextColorSecondaryNoDisable();
	static ::jint& fTextColorTertiary();
	static ::jint& fTextColorTertiaryInverse();
	static ::jint& fTextCursorDrawable();
	static ::jint& fTextDirection();
	static ::jint& fTextEditNoPasteWindowLayout();
	static ::jint& fTextEditPasteWindowLayout();
	static ::jint& fTextEditSideNoPasteWindowLayout();
	static ::jint& fTextEditSidePasteWindowLayout();
	static ::jint& fTextEditSuggestionItemLayout();
	static ::jint& fTextFilterEnabled();
	static ::jint& fTextFontWeight();
	static ::jint& fTextIsSelectable();
	static ::jint& fTextLocale();
	static ::jint& fTextOff();
	static ::jint& fTextOn();
	static ::jint& fTextScaleX();
	static ::jint& fTextSelectHandle();
	static ::jint& fTextSelectHandleLeft();
	static ::jint& fTextSelectHandleRight();
	static ::jint& fTextSelectHandleWindowStyle();
	static ::jint& fTextSize();
	static ::jint& fTextStyle();
	static ::jint& fTextSuggestionsWindowStyle();
	static ::jint& fTextViewStyle();
	static ::jint& fTheme();
	static ::jint& fThickness();
	static ::jint& fThicknessRatio();
	static ::jint& fThumb();
	static ::jint& fThumbOffset();
	static ::jint& fThumbPosition();
	static ::jint& fThumbTextPadding();
	static ::jint& fThumbTint();
	static ::jint& fThumbTintMode();
	static ::jint& fThumbnail();
	static ::jint& fTickMark();
	static ::jint& fTickMarkTint();
	static ::jint& fTickMarkTintMode();
	static ::jint& fTileMode();
	static ::jint& fTileModeX();
	static ::jint& fTileModeY();
	static ::jint& fTimePickerDialogTheme();
	static ::jint& fTimePickerMode();
	static ::jint& fTimePickerStyle();
	static ::jint& fTimeZone();
	static ::jint& fTint();
	static ::jint& fTintMode();
	static ::jint& fTitle();
	static ::jint& fTitleCondensed();
	static ::jint& fTitleMargin();
	static ::jint& fTitleMarginBottom();
	static ::jint& fTitleMarginEnd();
	static ::jint& fTitleMarginStart();
	static ::jint& fTitleMarginTop();
	static ::jint& fTitleTextAppearance();
	static ::jint& fTitleTextColor();
	static ::jint& fTitleTextStyle();
	static ::jint& fToAlpha();
	static ::jint& fToDegrees();
	static ::jint& fToId();
	static ::jint& fToScene();
	static ::jint& fToXDelta();
	static ::jint& fToXScale();
	static ::jint& fToYDelta();
	static ::jint& fToYScale();
	static ::jint& fToolbarStyle();
	static ::jint& fTooltipText();
	static ::jint& fTop();
	static ::jint& fTopBright();
	static ::jint& fTopDark();
	static ::jint& fTopLeftRadius();
	static ::jint& fTopOffset();
	static ::jint& fTopRightRadius();
	static ::jint& fTouchscreenBlocksFocus();
	static ::jint& fTrack();
	static ::jint& fTrackTint();
	static ::jint& fTrackTintMode();
	static ::jint& fTranscriptMode();
	static ::jint& fTransformPivotX();
	static ::jint& fTransformPivotY();
	static ::jint& fTransition();
	static ::jint& fTransitionGroup();
	static ::jint& fTransitionName();
	static ::jint& fTransitionOrdering();
	static ::jint& fTransitionVisibilityMode();
	static ::jint& fTranslateX();
	static ::jint& fTranslateY();
	static ::jint& fTranslationX();
	static ::jint& fTranslationY();
	static ::jint& fTranslationZ();
	static ::jint& fTrimPathEnd();
	static ::jint& fTrimPathOffset();
	static ::jint& fTrimPathStart();
	static ::jint& fTtcIndex();
	static ::jint& fTunerCount();
	static ::jint& fTurnScreenOn();
	static ::jint& fType();
	static ::jint& fTypeface();
	static ::jint& fUiOptions();
	static ::jint& fUncertainGestureColor();
	static ::jint& fUnfocusedMonthDateColor();
	static ::jint& fUnselectedAlpha();
	static ::jint& fUpdatePeriodMillis();
	static ::jint& fUse32bitAbi();
	static ::jint& fUseAppZygote();
	static ::jint& fUseDefaultMargins();
	static ::jint& fUseEmbeddedDex();
	static ::jint& fUseIntrinsicSizeAsMinimum();
	static ::jint& fUseLevel();
	static ::jint& fUserVisible();
	static ::jint& fUsesCleartextTraffic();
	static ::jint& fUsesPermissionFlags();
	static ::jint& fValue();
	static ::jint& fValueFrom();
	static ::jint& fValueTo();
	static ::jint& fValueType();
	static ::jint& fVariablePadding();
	static ::jint& fVendor();
	static ::jint& fVersion();
	static ::jint& fVersionCode();
	static ::jint& fVersionCodeMajor();
	static ::jint& fVersionMajor();
	static ::jint& fVersionName();
	static ::jint& fVerticalCorrection();
	static ::jint& fVerticalDivider();
	static ::jint& fVerticalGap();
	static ::jint& fVerticalScrollbarPosition();
	static ::jint& fVerticalSpacing();
	static ::jint& fViewportHeight();
	static ::jint& fViewportWidth();
	static ::jint& fVisibility();
	static ::jint& fVisible();
	static ::jint& fVisibleToInstantApps();
	static ::jint& fVmSafeMode();
	static ::jint& fVoiceIcon();
	static ::jint& fVoiceLanguage();
	static ::jint& fVoiceLanguageModel();
	static ::jint& fVoiceMaxResults();
	static ::jint& fVoicePromptText();
	static ::jint& fVoiceSearchMode();
	static ::jint& fWallpaperCloseEnterAnimation();
	static ::jint& fWallpaperCloseExitAnimation();
	static ::jint& fWallpaperIntraCloseEnterAnimation();
	static ::jint& fWallpaperIntraCloseExitAnimation();
	static ::jint& fWallpaperIntraOpenEnterAnimation();
	static ::jint& fWallpaperIntraOpenExitAnimation();
	static ::jint& fWallpaperOpenEnterAnimation();
	static ::jint& fWallpaperOpenExitAnimation();
	static ::jint& fWebTextViewStyle();
	static ::jint& fWebViewStyle();
	static ::jint& fWeekDayTextAppearance();
	static ::jint& fWeekNumberColor();
	static ::jint& fWeekSeparatorLineColor();
	static ::jint& fWeightSum();
	static ::jint& fWidgetCategory();
	static ::jint& fWidgetFeatures();
	static ::jint& fWidgetLayout();
	static ::jint& fWidth();
	static ::jint& fWindowActionBar();
	static ::jint& fWindowActionBarOverlay();
	static ::jint& fWindowActionModeOverlay();
	static ::jint& fWindowActivityTransitions();
	static ::jint& fWindowAllowEnterTransitionOverlap();
	static ::jint& fWindowAllowReturnTransitionOverlap();
	static ::jint& fWindowAnimationStyle();
	static ::jint& fWindowBackground();
	static ::jint& fWindowBackgroundBlurRadius();
	static ::jint& fWindowBackgroundFallback();
	static ::jint& fWindowBlurBehindEnabled();
	static ::jint& fWindowBlurBehindRadius();
	static ::jint& fWindowClipToOutline();
	static ::jint& fWindowCloseOnTouchOutside();
	static ::jint& fWindowContentOverlay();
	static ::jint& fWindowContentTransitionManager();
	static ::jint& fWindowContentTransitions();
	static ::jint& fWindowDisablePreview();
	static ::jint& fWindowDrawsSystemBarBackgrounds();
	static ::jint& fWindowElevation();
	static ::jint& fWindowEnableSplitTouch();
	static ::jint& fWindowEnterAnimation();
	static ::jint& fWindowEnterTransition();
	static ::jint& fWindowExitAnimation();
	static ::jint& fWindowExitTransition();
	static ::jint& fWindowFrame();
	static ::jint& fWindowFullscreen();
	static ::jint& fWindowHideAnimation();
	static ::jint& fWindowIsFloating();
	static ::jint& fWindowIsTranslucent();
	static ::jint& fWindowLayoutAffinity();
	static ::jint& fWindowLayoutInDisplayCutoutMode();
	static ::jint& fWindowLightNavigationBar();
	static ::jint& fWindowLightStatusBar();
	static ::jint& fWindowMinWidthMajor();
	static ::jint& fWindowMinWidthMinor();
	static ::jint& fWindowNoDisplay();
	static ::jint& fWindowNoTitle();
	static ::jint& fWindowOverscan();
	static ::jint& fWindowReenterTransition();
	static ::jint& fWindowReturnTransition();
	static ::jint& fWindowSharedElementEnterTransition();
	static ::jint& fWindowSharedElementExitTransition();
	static ::jint& fWindowSharedElementReenterTransition();
	static ::jint& fWindowSharedElementReturnTransition();
	static ::jint& fWindowSharedElementsUseOverlay();
	static ::jint& fWindowShowAnimation();
	static ::jint& fWindowShowWallpaper();
	static ::jint& fWindowSoftInputMode();
	static ::jint& fWindowSplashScreenAnimatedIcon();
	static ::jint& fWindowSplashScreenAnimationDuration();
	static ::jint& fWindowSplashScreenBackground();
	static ::jint& fWindowSplashScreenBrandingImage();
	static ::jint& fWindowSplashScreenIconBackgroundColor();
	static ::jint& fWindowSplashscreenContent();
	static ::jint& fWindowSwipeToDismiss();
	static ::jint& fWindowTitleBackgroundStyle();
	static ::jint& fWindowTitleSize();
	static ::jint& fWindowTitleStyle();
	static ::jint& fWindowTransitionBackgroundFadeDuration();
	static ::jint& fWindowTranslucentNavigation();
	static ::jint& fWindowTranslucentStatus();
	static ::jint& fWritePermission();
	static ::jint& fX();
	static ::jint& fXlargeScreens();
	static ::jint& fY();
	static ::jint& fYearListItemTextAppearance();
	static ::jint& fYearListSelectorColor();
	static ::jint& fYesNoPreferenceStyle();
	static ::jint& fZAdjustment();
	static ::jint& fZygotePreloadName();
	static jobject __Constructor();
	R_attr() : ::java::lang::Object(__Constructor()) {}
	explicit R_attr(jobject o) : ::java::lang::Object(o) {}
	R_attr(const R_attr& o)  : ::java::lang::Object(o) {}

};

}

namespace android { namespace content { 
struct Context : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::java::lang::String& fACCESSIBILITY_SERVICE();
	static ::java::lang::String& fACCOUNT_SERVICE();
	static ::java::lang::String& fACTIVITY_SERVICE();
	static ::java::lang::String& fALARM_SERVICE();
	static ::java::lang::String& fAPPWIDGET_SERVICE();
	static ::java::lang::String& fAPP_OPS_SERVICE();
	static ::java::lang::String& fAPP_SEARCH_SERVICE();
	static ::java::lang::String& fAUDIO_SERVICE();
	static ::java::lang::String& fBATTERY_SERVICE();
	static ::jint& fBIND_ABOVE_CLIENT();
	static ::jint& fBIND_ADJUST_WITH_ACTIVITY();
	static ::jint& fBIND_ALLOW_OOM_MANAGEMENT();
	static ::jint& fBIND_AUTO_CREATE();
	static ::jint& fBIND_DEBUG_UNBIND();
	static ::jint& fBIND_EXTERNAL_SERVICE();
	static ::jint& fBIND_IMPORTANT();
	static ::jint& fBIND_INCLUDE_CAPABILITIES();
	static ::jint& fBIND_NOT_FOREGROUND();
	static ::jint& fBIND_NOT_PERCEPTIBLE();
	static ::jint& fBIND_WAIVE_PRIORITY();
	static ::java::lang::String& fBIOMETRIC_SERVICE();
	static ::java::lang::String& fBLOB_STORE_SERVICE();
	static ::java::lang::String& fBLUETOOTH_SERVICE();
	static ::java::lang::String& fBUGREPORT_SERVICE();
	static ::java::lang::String& fCAMERA_SERVICE();
	static ::java::lang::String& fCAPTIONING_SERVICE();
	static ::java::lang::String& fCARRIER_CONFIG_SERVICE();
	static ::java::lang::String& fCLIPBOARD_SERVICE();
	static ::java::lang::String& fCOMPANION_DEVICE_SERVICE();
	static ::java::lang::String& fCONNECTIVITY_DIAGNOSTICS_SERVICE();
	static ::java::lang::String& fCONNECTIVITY_SERVICE();
	static ::java::lang::String& fCONSUMER_IR_SERVICE();
	static ::jint& fCONTEXT_IGNORE_SECURITY();
	static ::jint& fCONTEXT_INCLUDE_CODE();
	static ::jint& fCONTEXT_RESTRICTED();
	static ::java::lang::String& fCROSS_PROFILE_APPS_SERVICE();
	static ::java::lang::String& fDEVICE_POLICY_SERVICE();
	static ::java::lang::String& fDISPLAY_HASH_SERVICE();
	static ::java::lang::String& fDISPLAY_SERVICE();
	static ::java::lang::String& fDOMAIN_VERIFICATION_SERVICE();
	static ::java::lang::String& fDOWNLOAD_SERVICE();
	static ::java::lang::String& fDROPBOX_SERVICE();
	static ::java::lang::String& fEUICC_SERVICE();
	static ::java::lang::String& fFILE_INTEGRITY_SERVICE();
	static ::java::lang::String& fFINGERPRINT_SERVICE();
	static ::java::lang::String& fGAME_SERVICE();
	static ::java::lang::String& fHARDWARE_PROPERTIES_SERVICE();
	static ::java::lang::String& fINPUT_METHOD_SERVICE();
	static ::java::lang::String& fINPUT_SERVICE();
	static ::java::lang::String& fIPSEC_SERVICE();
	static ::java::lang::String& fJOB_SCHEDULER_SERVICE();
	static ::java::lang::String& fKEYGUARD_SERVICE();
	static ::java::lang::String& fLAUNCHER_APPS_SERVICE();
	static ::java::lang::String& fLAYOUT_INFLATER_SERVICE();
	static ::java::lang::String& fLOCATION_SERVICE();
	static ::java::lang::String& fMEDIA_COMMUNICATION_SERVICE();
	static ::java::lang::String& fMEDIA_METRICS_SERVICE();
	static ::java::lang::String& fMEDIA_PROJECTION_SERVICE();
	static ::java::lang::String& fMEDIA_ROUTER_SERVICE();
	static ::java::lang::String& fMEDIA_SESSION_SERVICE();
	static ::java::lang::String& fMIDI_SERVICE();
	static ::jint& fMODE_APPEND();
	static ::jint& fMODE_ENABLE_WRITE_AHEAD_LOGGING();
	static ::jint& fMODE_MULTI_PROCESS();
	static ::jint& fMODE_NO_LOCALIZED_COLLATORS();
	static ::jint& fMODE_PRIVATE();
	static ::jint& fMODE_WORLD_READABLE();
	static ::jint& fMODE_WORLD_WRITEABLE();
	static ::java::lang::String& fNETWORK_STATS_SERVICE();
	static ::java::lang::String& fNFC_SERVICE();
	static ::java::lang::String& fNOTIFICATION_SERVICE();
	static ::java::lang::String& fNSD_SERVICE();
	static ::java::lang::String& fPEOPLE_SERVICE();
	static ::java::lang::String& fPERFORMANCE_HINT_SERVICE();
	static ::java::lang::String& fPOWER_SERVICE();
	static ::java::lang::String& fPRINT_SERVICE();
	static ::jint& fRECEIVER_VISIBLE_TO_INSTANT_APPS();
	static ::java::lang::String& fRESTRICTIONS_SERVICE();
	static ::java::lang::String& fROLE_SERVICE();
	static ::java::lang::String& fSEARCH_SERVICE();
	static ::java::lang::String& fSENSOR_SERVICE();
	static ::java::lang::String& fSHORTCUT_SERVICE();
	static ::java::lang::String& fSTORAGE_SERVICE();
	static ::java::lang::String& fSTORAGE_STATS_SERVICE();
	static ::java::lang::String& fSYSTEM_HEALTH_SERVICE();
	static ::java::lang::String& fTELECOM_SERVICE();
	static ::java::lang::String& fTELEPHONY_IMS_SERVICE();
	static ::java::lang::String& fTELEPHONY_SERVICE();
	static ::java::lang::String& fTELEPHONY_SUBSCRIPTION_SERVICE();
	static ::java::lang::String& fTEXT_CLASSIFICATION_SERVICE();
	static ::java::lang::String& fTEXT_SERVICES_MANAGER_SERVICE();
	static ::java::lang::String& fTV_INPUT_SERVICE();
	static ::java::lang::String& fUI_MODE_SERVICE();
	static ::java::lang::String& fUSAGE_STATS_SERVICE();
	static ::java::lang::String& fUSB_SERVICE();
	static ::java::lang::String& fUSER_SERVICE();
	static ::java::lang::String& fVIBRATOR_MANAGER_SERVICE();
	static ::java::lang::String& fVIBRATOR_SERVICE();
	static ::java::lang::String& fVPN_MANAGEMENT_SERVICE();
	static ::java::lang::String& fWALLPAPER_SERVICE();
	static ::java::lang::String& fWIFI_AWARE_SERVICE();
	static ::java::lang::String& fWIFI_P2P_SERVICE();
	static ::java::lang::String& fWIFI_RTT_RANGING_SERVICE();
	static ::java::lang::String& fWIFI_SERVICE();
	static ::java::lang::String& fWINDOW_SERVICE();
	::jboolean BindIsolatedService(const ::android::content::Intent& arg0, const ::jint& arg1, const ::java::lang::String& arg2, const ::java::util::concurrent::Executor& arg3, const ::android::content::ServiceConnection& arg4) const;
	::jboolean BindService(const ::android::content::Intent& arg0, const ::jint& arg1, const ::java::util::concurrent::Executor& arg2, const ::android::content::ServiceConnection& arg3) const;
	::jboolean BindService(const ::android::content::Intent& arg0, const ::android::content::ServiceConnection& arg1, const ::jint& arg2) const;
	::jboolean BindServiceAsUser(const ::android::content::Intent& arg0, const ::android::content::ServiceConnection& arg1, const ::jint& arg2, const ::android::os::UserHandle& arg3) const;
	::jint CheckCallingOrSelfPermission(const ::java::lang::String& arg0) const;
	::jint CheckCallingOrSelfUriPermission(const ::android::net::Uri& arg0, const ::jint& arg1) const;
	jni::Array< ::jint > CheckCallingOrSelfUriPermissions(const ::java::util::List& arg0, const ::jint& arg1) const;
	::jint CheckCallingPermission(const ::java::lang::String& arg0) const;
	::jint CheckCallingUriPermission(const ::android::net::Uri& arg0, const ::jint& arg1) const;
	jni::Array< ::jint > CheckCallingUriPermissions(const ::java::util::List& arg0, const ::jint& arg1) const;
	::jint CheckPermission(const ::java::lang::String& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jint CheckSelfPermission(const ::java::lang::String& arg0) const;
	::jint CheckUriPermission(const ::android::net::Uri& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jint CheckUriPermission(const ::android::net::Uri& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5) const;
	jni::Array< ::jint > CheckUriPermissions(const ::java::util::List& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid ClearWallpaper() const;
	::android::content::Context CreateAttributionContext(const ::java::lang::String& arg0) const;
	::android::content::Context CreateConfigurationContext(const ::android::content::res::Configuration& arg0) const;
	::android::content::Context CreateContext(const ::android::content::ContextParams& arg0) const;
	::android::content::Context CreateContextForSplit(const ::java::lang::String& arg0) const;
	::android::content::Context CreateDeviceProtectedStorageContext() const;
	::android::content::Context CreateDisplayContext(const ::android::view::Display& arg0) const;
	::android::content::Context CreatePackageContext(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::android::content::Context CreateWindowContext(const ::jint& arg0, const ::android::os::Bundle& arg1) const;
	::android::content::Context CreateWindowContext(const ::android::view::Display& arg0, const ::jint& arg1, const ::android::os::Bundle& arg2) const;
	jni::Array< ::java::lang::String > DatabaseList() const;
	::jboolean DeleteDatabase(const ::java::lang::String& arg0) const;
	::jboolean DeleteFile(const ::java::lang::String& arg0) const;
	::jboolean DeleteSharedPreferences(const ::java::lang::String& arg0) const;
	::jvoid EnforceCallingOrSelfPermission(const ::java::lang::String& arg0, const ::java::lang::String& arg1) const;
	::jvoid EnforceCallingOrSelfUriPermission(const ::android::net::Uri& arg0, const ::jint& arg1, const ::java::lang::String& arg2) const;
	::jvoid EnforceCallingPermission(const ::java::lang::String& arg0, const ::java::lang::String& arg1) const;
	::jvoid EnforceCallingUriPermission(const ::android::net::Uri& arg0, const ::jint& arg1, const ::java::lang::String& arg2) const;
	::jvoid EnforcePermission(const ::java::lang::String& arg0, const ::jint& arg1, const ::jint& arg2, const ::java::lang::String& arg3) const;
	::jvoid EnforceUriPermission(const ::android::net::Uri& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::java::lang::String& arg4) const;
	::jvoid EnforceUriPermission(const ::android::net::Uri& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5, const ::java::lang::String& arg6) const;
	jni::Array< ::java::lang::String > FileList() const;
	::android::content::Context GetApplicationContext() const;
	::android::content::pm::ApplicationInfo GetApplicationInfo() const;
	::android::content::res::AssetManager GetAssets() const;
	::android::content::AttributionSource GetAttributionSource() const;
	::java::lang::String GetAttributionTag() const;
	::java::io::File GetCacheDir() const;
	::java::lang::ClassLoader GetClassLoader() const;
	::java::io::File GetCodeCacheDir() const;
	::jint GetColor(const ::jint& arg0) const;
	::android::content::res::ColorStateList GetColorStateList(const ::jint& arg0) const;
	::android::content::ContentResolver GetContentResolver() const;
	::java::io::File GetDataDir() const;
	::java::io::File GetDatabasePath(const ::java::lang::String& arg0) const;
	::java::io::File GetDir(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::android::view::Display GetDisplay() const;
	::android::graphics::drawable::Drawable GetDrawable(const ::jint& arg0) const;
	::java::io::File GetExternalCacheDir() const;
	jni::Array< ::java::io::File > GetExternalCacheDirs() const;
	::java::io::File GetExternalFilesDir(const ::java::lang::String& arg0) const;
	jni::Array< ::java::io::File > GetExternalFilesDirs(const ::java::lang::String& arg0) const;
	jni::Array< ::java::io::File > GetExternalMediaDirs() const;
	::java::io::File GetFileStreamPath(const ::java::lang::String& arg0) const;
	::java::io::File GetFilesDir() const;
	::java::util::concurrent::Executor GetMainExecutor() const;
	::android::os::Looper GetMainLooper() const;
	::java::io::File GetNoBackupFilesDir() const;
	::java::io::File GetObbDir() const;
	jni::Array< ::java::io::File > GetObbDirs() const;
	::java::lang::String GetOpPackageName() const;
	::java::lang::String GetPackageCodePath() const;
	::android::content::pm::PackageManager GetPackageManager() const;
	::java::lang::String GetPackageName() const;
	::java::lang::String GetPackageResourcePath() const;
	::android::content::ContextParams GetParams() const;
	::android::content::res::Resources GetResources() const;
	::android::content::SharedPreferences GetSharedPreferences(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::java::lang::String GetString(const ::jint& arg0) const;
	::java::lang::String GetString(const ::jint& arg0, const jni::Array< ::java::lang::Object >& arg1) const;
	::java::lang::Object GetSystemService(const ::java::lang::Class& arg0) const;
	::java::lang::Object GetSystemService(const ::java::lang::String& arg0) const;
	::java::lang::String GetSystemServiceName(const ::java::lang::Class& arg0) const;
	::java::lang::CharSequence GetText(const ::jint& arg0) const;
	::android::content::res::Resources_Theme GetTheme() const;
	::android::graphics::drawable::Drawable GetWallpaper() const;
	::jint GetWallpaperDesiredMinimumHeight() const;
	::jint GetWallpaperDesiredMinimumWidth() const;
	::jvoid GrantUriPermission(const ::java::lang::String& arg0, const ::android::net::Uri& arg1, const ::jint& arg2) const;
	::jboolean IsDeviceProtectedStorage() const;
	::jboolean IsRestricted() const;
	::jboolean IsUiContext() const;
	::jboolean MoveDatabaseFrom(const ::android::content::Context& arg0, const ::java::lang::String& arg1) const;
	::jboolean MoveSharedPreferencesFrom(const ::android::content::Context& arg0, const ::java::lang::String& arg1) const;
	::android::content::res::TypedArray ObtainStyledAttributes(const ::jint& arg0, const jni::Array< ::jint >& arg1) const;
	::android::content::res::TypedArray ObtainStyledAttributes(const ::android::util::AttributeSet& arg0, const jni::Array< ::jint >& arg1) const;
	::android::content::res::TypedArray ObtainStyledAttributes(const ::android::util::AttributeSet& arg0, const jni::Array< ::jint >& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::android::content::res::TypedArray ObtainStyledAttributes(const jni::Array< ::jint >& arg0) const;
	::java::io::FileInputStream OpenFileInput(const ::java::lang::String& arg0) const;
	::java::io::FileOutputStream OpenFileOutput(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::android::database::sqlite::SQLiteDatabase OpenOrCreateDatabase(const ::java::lang::String& arg0, const ::jint& arg1, const ::android::database::sqlite::SQLiteDatabase_CursorFactory& arg2) const;
	::android::database::sqlite::SQLiteDatabase OpenOrCreateDatabase(const ::java::lang::String& arg0, const ::jint& arg1, const ::android::database::sqlite::SQLiteDatabase_CursorFactory& arg2, const ::android::database::DatabaseErrorHandler& arg3) const;
	::android::graphics::drawable::Drawable PeekWallpaper() const;
	::jvoid RegisterComponentCallbacks(const ::android::content::ComponentCallbacks& arg0) const;
	::android::content::Intent RegisterReceiver(const ::android::content::BroadcastReceiver& arg0, const ::android::content::IntentFilter& arg1) const;
	::android::content::Intent RegisterReceiver(const ::android::content::BroadcastReceiver& arg0, const ::android::content::IntentFilter& arg1, const ::jint& arg2) const;
	::android::content::Intent RegisterReceiver(const ::android::content::BroadcastReceiver& arg0, const ::android::content::IntentFilter& arg1, const ::java::lang::String& arg2, const ::android::os::Handler& arg3) const;
	::android::content::Intent RegisterReceiver(const ::android::content::BroadcastReceiver& arg0, const ::android::content::IntentFilter& arg1, const ::java::lang::String& arg2, const ::android::os::Handler& arg3, const ::jint& arg4) const;
	::jvoid RemoveStickyBroadcast(const ::android::content::Intent& arg0) const;
	::jvoid RemoveStickyBroadcastAsUser(const ::android::content::Intent& arg0, const ::android::os::UserHandle& arg1) const;
	::jvoid RevokeUriPermission(const ::android::net::Uri& arg0, const ::jint& arg1) const;
	::jvoid RevokeUriPermission(const ::java::lang::String& arg0, const ::android::net::Uri& arg1, const ::jint& arg2) const;
	::jvoid SendBroadcast(const ::android::content::Intent& arg0) const;
	::jvoid SendBroadcast(const ::android::content::Intent& arg0, const ::java::lang::String& arg1) const;
	::jvoid SendBroadcastAsUser(const ::android::content::Intent& arg0, const ::android::os::UserHandle& arg1) const;
	::jvoid SendBroadcastAsUser(const ::android::content::Intent& arg0, const ::android::os::UserHandle& arg1, const ::java::lang::String& arg2) const;
	::jvoid SendBroadcastWithMultiplePermissions(const ::android::content::Intent& arg0, const jni::Array< ::java::lang::String >& arg1) const;
	::jvoid SendOrderedBroadcast(const ::android::content::Intent& arg0, const ::java::lang::String& arg1) const;
	::jvoid SendOrderedBroadcast(const ::android::content::Intent& arg0, const ::java::lang::String& arg1, const ::android::content::BroadcastReceiver& arg2, const ::android::os::Handler& arg3, const ::jint& arg4, const ::java::lang::String& arg5, const ::android::os::Bundle& arg6) const;
	::jvoid SendOrderedBroadcast(const ::android::content::Intent& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2, const ::android::content::BroadcastReceiver& arg3, const ::android::os::Handler& arg4, const ::jint& arg5, const ::java::lang::String& arg6, const ::android::os::Bundle& arg7) const;
	::jvoid SendOrderedBroadcastAsUser(const ::android::content::Intent& arg0, const ::android::os::UserHandle& arg1, const ::java::lang::String& arg2, const ::android::content::BroadcastReceiver& arg3, const ::android::os::Handler& arg4, const ::jint& arg5, const ::java::lang::String& arg6, const ::android::os::Bundle& arg7) const;
	::jvoid SendStickyBroadcast(const ::android::content::Intent& arg0) const;
	::jvoid SendStickyBroadcast(const ::android::content::Intent& arg0, const ::android::os::Bundle& arg1) const;
	::jvoid SendStickyBroadcastAsUser(const ::android::content::Intent& arg0, const ::android::os::UserHandle& arg1) const;
	::jvoid SendStickyOrderedBroadcast(const ::android::content::Intent& arg0, const ::android::content::BroadcastReceiver& arg1, const ::android::os::Handler& arg2, const ::jint& arg3, const ::java::lang::String& arg4, const ::android::os::Bundle& arg5) const;
	::jvoid SendStickyOrderedBroadcastAsUser(const ::android::content::Intent& arg0, const ::android::os::UserHandle& arg1, const ::android::content::BroadcastReceiver& arg2, const ::android::os::Handler& arg3, const ::jint& arg4, const ::java::lang::String& arg5, const ::android::os::Bundle& arg6) const;
	::jvoid SetTheme(const ::jint& arg0) const;
	::jvoid SetWallpaper(const ::android::graphics::Bitmap& arg0) const;
	::jvoid SetWallpaper(const ::java::io::InputStream& arg0) const;
	::jvoid StartActivities(const jni::Array< ::android::content::Intent >& arg0) const;
	::jvoid StartActivities(const jni::Array< ::android::content::Intent >& arg0, const ::android::os::Bundle& arg1) const;
	::jvoid StartActivity(const ::android::content::Intent& arg0) const;
	::jvoid StartActivity(const ::android::content::Intent& arg0, const ::android::os::Bundle& arg1) const;
	::android::content::ComponentName StartForegroundService(const ::android::content::Intent& arg0) const;
	::jboolean StartInstrumentation(const ::android::content::ComponentName& arg0, const ::java::lang::String& arg1, const ::android::os::Bundle& arg2) const;
	::jvoid StartIntentSender(const ::android::content::IntentSender& arg0, const ::android::content::Intent& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4) const;
	::jvoid StartIntentSender(const ::android::content::IntentSender& arg0, const ::android::content::Intent& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::android::os::Bundle& arg5) const;
	::android::content::ComponentName StartService(const ::android::content::Intent& arg0) const;
	::jboolean StopService(const ::android::content::Intent& arg0) const;
	::jvoid UnbindService(const ::android::content::ServiceConnection& arg0) const;
	::jvoid UnregisterComponentCallbacks(const ::android::content::ComponentCallbacks& arg0) const;
	::jvoid UnregisterReceiver(const ::android::content::BroadcastReceiver& arg0) const;
	::jvoid UpdateServiceGroup(const ::android::content::ServiceConnection& arg0, const ::jint& arg1, const ::jint& arg2) const;
	static jobject __Constructor();
	Context() : ::java::lang::Object(__Constructor()) {}
	explicit Context(jobject o) : ::java::lang::Object(o) {}
	Context(const Context& o)  : ::java::lang::Object(o) {}

};

struct ContextWrapper : ::android::content::Context
{
	static jni::Class __CLASS;

	::jvoid AttachBaseContext(const ::android::content::Context& arg0) const;
	::jboolean BindIsolatedService(const ::android::content::Intent& arg0, const ::jint& arg1, const ::java::lang::String& arg2, const ::java::util::concurrent::Executor& arg3, const ::android::content::ServiceConnection& arg4) const;
	::jboolean BindService(const ::android::content::Intent& arg0, const ::jint& arg1, const ::java::util::concurrent::Executor& arg2, const ::android::content::ServiceConnection& arg3) const;
	::jboolean BindService(const ::android::content::Intent& arg0, const ::android::content::ServiceConnection& arg1, const ::jint& arg2) const;
	::jboolean BindServiceAsUser(const ::android::content::Intent& arg0, const ::android::content::ServiceConnection& arg1, const ::jint& arg2, const ::android::os::UserHandle& arg3) const;
	::jint CheckCallingOrSelfPermission(const ::java::lang::String& arg0) const;
	::jint CheckCallingOrSelfUriPermission(const ::android::net::Uri& arg0, const ::jint& arg1) const;
	jni::Array< ::jint > CheckCallingOrSelfUriPermissions(const ::java::util::List& arg0, const ::jint& arg1) const;
	::jint CheckCallingPermission(const ::java::lang::String& arg0) const;
	::jint CheckCallingUriPermission(const ::android::net::Uri& arg0, const ::jint& arg1) const;
	jni::Array< ::jint > CheckCallingUriPermissions(const ::java::util::List& arg0, const ::jint& arg1) const;
	::jint CheckPermission(const ::java::lang::String& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jint CheckSelfPermission(const ::java::lang::String& arg0) const;
	::jint CheckUriPermission(const ::android::net::Uri& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jint CheckUriPermission(const ::android::net::Uri& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5) const;
	jni::Array< ::jint > CheckUriPermissions(const ::java::util::List& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid ClearWallpaper() const;
	::android::content::Context CreateAttributionContext(const ::java::lang::String& arg0) const;
	::android::content::Context CreateConfigurationContext(const ::android::content::res::Configuration& arg0) const;
	::android::content::Context CreateContext(const ::android::content::ContextParams& arg0) const;
	::android::content::Context CreateContextForSplit(const ::java::lang::String& arg0) const;
	::android::content::Context CreateDeviceProtectedStorageContext() const;
	::android::content::Context CreateDisplayContext(const ::android::view::Display& arg0) const;
	::android::content::Context CreatePackageContext(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::android::content::Context CreateWindowContext(const ::jint& arg0, const ::android::os::Bundle& arg1) const;
	::android::content::Context CreateWindowContext(const ::android::view::Display& arg0, const ::jint& arg1, const ::android::os::Bundle& arg2) const;
	jni::Array< ::java::lang::String > DatabaseList() const;
	::jboolean DeleteDatabase(const ::java::lang::String& arg0) const;
	::jboolean DeleteFile(const ::java::lang::String& arg0) const;
	::jboolean DeleteSharedPreferences(const ::java::lang::String& arg0) const;
	::jvoid EnforceCallingOrSelfPermission(const ::java::lang::String& arg0, const ::java::lang::String& arg1) const;
	::jvoid EnforceCallingOrSelfUriPermission(const ::android::net::Uri& arg0, const ::jint& arg1, const ::java::lang::String& arg2) const;
	::jvoid EnforceCallingPermission(const ::java::lang::String& arg0, const ::java::lang::String& arg1) const;
	::jvoid EnforceCallingUriPermission(const ::android::net::Uri& arg0, const ::jint& arg1, const ::java::lang::String& arg2) const;
	::jvoid EnforcePermission(const ::java::lang::String& arg0, const ::jint& arg1, const ::jint& arg2, const ::java::lang::String& arg3) const;
	::jvoid EnforceUriPermission(const ::android::net::Uri& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::java::lang::String& arg4) const;
	::jvoid EnforceUriPermission(const ::android::net::Uri& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5, const ::java::lang::String& arg6) const;
	jni::Array< ::java::lang::String > FileList() const;
	::android::content::Context GetApplicationContext() const;
	::android::content::pm::ApplicationInfo GetApplicationInfo() const;
	::android::content::res::AssetManager GetAssets() const;
	::android::content::AttributionSource GetAttributionSource() const;
	::java::lang::String GetAttributionTag() const;
	::android::content::Context GetBaseContext() const;
	::java::io::File GetCacheDir() const;
	::java::lang::ClassLoader GetClassLoader() const;
	::java::io::File GetCodeCacheDir() const;
	::android::content::ContentResolver GetContentResolver() const;
	::java::io::File GetDataDir() const;
	::java::io::File GetDatabasePath(const ::java::lang::String& arg0) const;
	::java::io::File GetDir(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::android::view::Display GetDisplay() const;
	::java::io::File GetExternalCacheDir() const;
	jni::Array< ::java::io::File > GetExternalCacheDirs() const;
	::java::io::File GetExternalFilesDir(const ::java::lang::String& arg0) const;
	jni::Array< ::java::io::File > GetExternalFilesDirs(const ::java::lang::String& arg0) const;
	jni::Array< ::java::io::File > GetExternalMediaDirs() const;
	::java::io::File GetFileStreamPath(const ::java::lang::String& arg0) const;
	::java::io::File GetFilesDir() const;
	::java::util::concurrent::Executor GetMainExecutor() const;
	::android::os::Looper GetMainLooper() const;
	::java::io::File GetNoBackupFilesDir() const;
	::java::io::File GetObbDir() const;
	jni::Array< ::java::io::File > GetObbDirs() const;
	::java::lang::String GetOpPackageName() const;
	::java::lang::String GetPackageCodePath() const;
	::android::content::pm::PackageManager GetPackageManager() const;
	::java::lang::String GetPackageName() const;
	::java::lang::String GetPackageResourcePath() const;
	::android::content::ContextParams GetParams() const;
	::android::content::res::Resources GetResources() const;
	::android::content::SharedPreferences GetSharedPreferences(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::java::lang::Object GetSystemService(const ::java::lang::String& arg0) const;
	::java::lang::String GetSystemServiceName(const ::java::lang::Class& arg0) const;
	::android::content::res::Resources_Theme GetTheme() const;
	::android::graphics::drawable::Drawable GetWallpaper() const;
	::jint GetWallpaperDesiredMinimumHeight() const;
	::jint GetWallpaperDesiredMinimumWidth() const;
	::jvoid GrantUriPermission(const ::java::lang::String& arg0, const ::android::net::Uri& arg1, const ::jint& arg2) const;
	::jboolean IsDeviceProtectedStorage() const;
	::jboolean IsRestricted() const;
	::jboolean IsUiContext() const;
	::jboolean MoveDatabaseFrom(const ::android::content::Context& arg0, const ::java::lang::String& arg1) const;
	::jboolean MoveSharedPreferencesFrom(const ::android::content::Context& arg0, const ::java::lang::String& arg1) const;
	::java::io::FileInputStream OpenFileInput(const ::java::lang::String& arg0) const;
	::java::io::FileOutputStream OpenFileOutput(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::android::database::sqlite::SQLiteDatabase OpenOrCreateDatabase(const ::java::lang::String& arg0, const ::jint& arg1, const ::android::database::sqlite::SQLiteDatabase_CursorFactory& arg2) const;
	::android::database::sqlite::SQLiteDatabase OpenOrCreateDatabase(const ::java::lang::String& arg0, const ::jint& arg1, const ::android::database::sqlite::SQLiteDatabase_CursorFactory& arg2, const ::android::database::DatabaseErrorHandler& arg3) const;
	::android::graphics::drawable::Drawable PeekWallpaper() const;
	::android::content::Intent RegisterReceiver(const ::android::content::BroadcastReceiver& arg0, const ::android::content::IntentFilter& arg1) const;
	::android::content::Intent RegisterReceiver(const ::android::content::BroadcastReceiver& arg0, const ::android::content::IntentFilter& arg1, const ::jint& arg2) const;
	::android::content::Intent RegisterReceiver(const ::android::content::BroadcastReceiver& arg0, const ::android::content::IntentFilter& arg1, const ::java::lang::String& arg2, const ::android::os::Handler& arg3) const;
	::android::content::Intent RegisterReceiver(const ::android::content::BroadcastReceiver& arg0, const ::android::content::IntentFilter& arg1, const ::java::lang::String& arg2, const ::android::os::Handler& arg3, const ::jint& arg4) const;
	::jvoid RemoveStickyBroadcast(const ::android::content::Intent& arg0) const;
	::jvoid RemoveStickyBroadcastAsUser(const ::android::content::Intent& arg0, const ::android::os::UserHandle& arg1) const;
	::jvoid RevokeUriPermission(const ::android::net::Uri& arg0, const ::jint& arg1) const;
	::jvoid RevokeUriPermission(const ::java::lang::String& arg0, const ::android::net::Uri& arg1, const ::jint& arg2) const;
	::jvoid SendBroadcast(const ::android::content::Intent& arg0) const;
	::jvoid SendBroadcast(const ::android::content::Intent& arg0, const ::java::lang::String& arg1) const;
	::jvoid SendBroadcastAsUser(const ::android::content::Intent& arg0, const ::android::os::UserHandle& arg1) const;
	::jvoid SendBroadcastAsUser(const ::android::content::Intent& arg0, const ::android::os::UserHandle& arg1, const ::java::lang::String& arg2) const;
	::jvoid SendOrderedBroadcast(const ::android::content::Intent& arg0, const ::jint& arg1, const ::java::lang::String& arg2, const ::java::lang::String& arg3, const ::android::content::BroadcastReceiver& arg4, const ::android::os::Handler& arg5, const ::java::lang::String& arg6, const ::android::os::Bundle& arg7, const ::android::os::Bundle& arg8) const;
	::jvoid SendOrderedBroadcast(const ::android::content::Intent& arg0, const ::java::lang::String& arg1) const;
	::jvoid SendOrderedBroadcast(const ::android::content::Intent& arg0, const ::java::lang::String& arg1, const ::android::content::BroadcastReceiver& arg2, const ::android::os::Handler& arg3, const ::jint& arg4, const ::java::lang::String& arg5, const ::android::os::Bundle& arg6) const;
	::jvoid SendOrderedBroadcast(const ::android::content::Intent& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2, const ::android::content::BroadcastReceiver& arg3, const ::android::os::Handler& arg4, const ::jint& arg5, const ::java::lang::String& arg6, const ::android::os::Bundle& arg7) const;
	::jvoid SendOrderedBroadcastAsUser(const ::android::content::Intent& arg0, const ::android::os::UserHandle& arg1, const ::java::lang::String& arg2, const ::android::content::BroadcastReceiver& arg3, const ::android::os::Handler& arg4, const ::jint& arg5, const ::java::lang::String& arg6, const ::android::os::Bundle& arg7) const;
	::jvoid SendStickyBroadcast(const ::android::content::Intent& arg0) const;
	::jvoid SendStickyBroadcast(const ::android::content::Intent& arg0, const ::android::os::Bundle& arg1) const;
	::jvoid SendStickyBroadcastAsUser(const ::android::content::Intent& arg0, const ::android::os::UserHandle& arg1) const;
	::jvoid SendStickyOrderedBroadcast(const ::android::content::Intent& arg0, const ::android::content::BroadcastReceiver& arg1, const ::android::os::Handler& arg2, const ::jint& arg3, const ::java::lang::String& arg4, const ::android::os::Bundle& arg5) const;
	::jvoid SendStickyOrderedBroadcastAsUser(const ::android::content::Intent& arg0, const ::android::os::UserHandle& arg1, const ::android::content::BroadcastReceiver& arg2, const ::android::os::Handler& arg3, const ::jint& arg4, const ::java::lang::String& arg5, const ::android::os::Bundle& arg6) const;
	::jvoid SetTheme(const ::jint& arg0) const;
	::jvoid SetWallpaper(const ::android::graphics::Bitmap& arg0) const;
	::jvoid SetWallpaper(const ::java::io::InputStream& arg0) const;
	::jvoid StartActivities(const jni::Array< ::android::content::Intent >& arg0) const;
	::jvoid StartActivities(const jni::Array< ::android::content::Intent >& arg0, const ::android::os::Bundle& arg1) const;
	::jvoid StartActivity(const ::android::content::Intent& arg0) const;
	::jvoid StartActivity(const ::android::content::Intent& arg0, const ::android::os::Bundle& arg1) const;
	::android::content::ComponentName StartForegroundService(const ::android::content::Intent& arg0) const;
	::jboolean StartInstrumentation(const ::android::content::ComponentName& arg0, const ::java::lang::String& arg1, const ::android::os::Bundle& arg2) const;
	::jvoid StartIntentSender(const ::android::content::IntentSender& arg0, const ::android::content::Intent& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4) const;
	::jvoid StartIntentSender(const ::android::content::IntentSender& arg0, const ::android::content::Intent& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::android::os::Bundle& arg5) const;
	::android::content::ComponentName StartService(const ::android::content::Intent& arg0) const;
	::jboolean StopService(const ::android::content::Intent& arg0) const;
	::jvoid UnbindService(const ::android::content::ServiceConnection& arg0) const;
	::jvoid UnregisterReceiver(const ::android::content::BroadcastReceiver& arg0) const;
	::jvoid UpdateServiceGroup(const ::android::content::ServiceConnection& arg0, const ::jint& arg1, const ::jint& arg2) const;
	static jobject __Constructor(const ::android::content::Context& arg0);
	ContextWrapper(const ::android::content::Context& arg0) : ::android::content::Context(__Constructor(arg0)) {}
	explicit ContextWrapper(jobject o) : ::android::content::Context(o) {}
	ContextWrapper(const ContextWrapper& o)  : ::android::content::Context(o) {}

};

}}

namespace android { namespace view { 
struct ContextThemeWrapper : ::android::content::ContextWrapper
{
	static jni::Class __CLASS;

	::jvoid ApplyOverrideConfiguration(const ::android::content::res::Configuration& arg0) const;
	::jvoid AttachBaseContext(const ::android::content::Context& arg0) const;
	::android::content::res::AssetManager GetAssets() const;
	::android::content::res::Resources GetResources() const;
	::java::lang::Object GetSystemService(const ::java::lang::String& arg0) const;
	::android::content::res::Resources_Theme GetTheme() const;
	::jvoid OnApplyThemeResource(const ::android::content::res::Resources_Theme& arg0, const ::jint& arg1, const ::jboolean& arg2) const;
	::jvoid SetTheme(const ::jint& arg0) const;
	::jvoid SetTheme(const ::android::content::res::Resources_Theme& arg0) const;
	static jobject __Constructor();
	ContextThemeWrapper() : ::android::content::ContextWrapper(__Constructor()) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::jint& arg1);
	ContextThemeWrapper(const ::android::content::Context& arg0, const ::jint& arg1) : ::android::content::ContextWrapper(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::content::res::Resources_Theme& arg1);
	ContextThemeWrapper(const ::android::content::Context& arg0, const ::android::content::res::Resources_Theme& arg1) : ::android::content::ContextWrapper(__Constructor(arg0, arg1)) {}
	explicit ContextThemeWrapper(jobject o) : ::android::content::ContextWrapper(o) {}
	ContextThemeWrapper(const ContextThemeWrapper& o)  : ::android::content::ContextWrapper(o) {}

};

}}

namespace android { namespace app { 
struct Activity : ::android::view::ContextThemeWrapper
{
	static jni::Class __CLASS;

	operator ::android::view::LayoutInflater_Factory2();
	operator ::android::view::Window_Callback();
	operator ::android::view::KeyEvent_Callback();
	operator ::android::view::View_OnCreateContextMenuListener();
	operator ::android::content::ComponentCallbacks2();
	static ::jint& fDEFAULT_KEYS_DIALER();
	static ::jint& fDEFAULT_KEYS_DISABLE();
	static ::jint& fDEFAULT_KEYS_SEARCH_GLOBAL();
	static ::jint& fDEFAULT_KEYS_SEARCH_LOCAL();
	static ::jint& fDEFAULT_KEYS_SHORTCUT();
	static jni::Array< ::jint >& fFOCUSED_STATE_SET();
	static ::jint& fRESULT_CANCELED();
	static ::jint& fRESULT_FIRST_USER();
	static ::jint& fRESULT_OK();
	::jvoid AddContentView(const ::android::view::View& arg0, const ::android::view::ViewGroup_LayoutParams& arg1) const;
	::jvoid AttachBaseContext(const ::android::content::Context& arg0) const;
	::jvoid CloseContextMenu() const;
	::jvoid CloseOptionsMenu() const;
	::android::app::PendingIntent CreatePendingResult(const ::jint& arg0, const ::android::content::Intent& arg1, const ::jint& arg2) const;
	::jvoid DismissDialog(const ::jint& arg0) const;
	::jvoid DismissKeyboardShortcutsHelper() const;
	::jboolean DispatchGenericMotionEvent(const ::android::view::MotionEvent& arg0) const;
	::jboolean DispatchKeyEvent(const ::android::view::KeyEvent& arg0) const;
	::jboolean DispatchKeyShortcutEvent(const ::android::view::KeyEvent& arg0) const;
	::jboolean DispatchPopulateAccessibilityEvent(const ::android::view::accessibility::AccessibilityEvent& arg0) const;
	::jboolean DispatchTouchEvent(const ::android::view::MotionEvent& arg0) const;
	::jboolean DispatchTrackballEvent(const ::android::view::MotionEvent& arg0) const;
	::jvoid Dump(const ::java::lang::String& arg0, const ::java::io::FileDescriptor& arg1, const ::java::io::PrintWriter& arg2, const jni::Array< ::java::lang::String >& arg3) const;
	::jvoid EnterPictureInPictureMode() const;
	::jboolean EnterPictureInPictureMode(const ::android::app::PictureInPictureParams& arg0) const;
	::android::view::View FindViewById(const ::jint& arg0) const;
	::jvoid Finish() const;
	::jvoid FinishActivity(const ::jint& arg0) const;
	::jvoid FinishActivityFromChild(const ::android::app::Activity& arg0, const ::jint& arg1) const;
	::jvoid FinishAffinity() const;
	::jvoid FinishAfterTransition() const;
	::jvoid FinishAndRemoveTask() const;
	::jvoid FinishFromChild(const ::android::app::Activity& arg0) const;
	::android::app::ActionBar GetActionBar() const;
	::android::app::Application GetApplication() const;
	::android::content::ComponentName GetCallingActivity() const;
	::java::lang::String GetCallingPackage() const;
	::jint GetChangingConfigurations() const;
	::android::content::ComponentName GetComponentName() const;
	::android::transition::Scene GetContentScene() const;
	::android::transition::TransitionManager GetContentTransitionManager() const;
	::android::view::View GetCurrentFocus() const;
	::android::app::FragmentManager GetFragmentManager() const;
	::android::content::Intent GetIntent() const;
	::java::lang::Object GetLastNonConfigurationInstance() const;
	::android::view::LayoutInflater GetLayoutInflater() const;
	::android::app::LoaderManager GetLoaderManager() const;
	::java::lang::String GetLocalClassName() const;
	::jint GetMaxNumPictureInPictureActions() const;
	::android::media::session::MediaController GetMediaController() const;
	::android::view::MenuInflater GetMenuInflater() const;
	::android::app::Activity GetParent() const;
	::android::content::Intent GetParentActivityIntent() const;
	::android::content::SharedPreferences GetPreferences(const ::jint& arg0) const;
	::android::net::Uri GetReferrer() const;
	::jint GetRequestedOrientation() const;
	::android::view::SearchEvent GetSearchEvent() const;
	::android::window::SplashScreen GetSplashScreen() const;
	::java::lang::Object GetSystemService(const ::java::lang::String& arg0) const;
	::jint GetTaskId() const;
	::java::lang::CharSequence GetTitle() const;
	::jint GetTitleColor() const;
	::android::app::VoiceInteractor GetVoiceInteractor() const;
	::jint GetVolumeControlStream() const;
	::android::view::Window GetWindow() const;
	::android::view::WindowManager GetWindowManager() const;
	::jboolean HasWindowFocus() const;
	::jvoid InvalidateOptionsMenu() const;
	::jboolean IsActivityTransitionRunning() const;
	::jboolean IsChangingConfigurations() const;
	::jboolean IsChild() const;
	::jboolean IsDestroyed() const;
	::jboolean IsFinishing() const;
	::jboolean IsImmersive() const;
	::jboolean IsInMultiWindowMode() const;
	::jboolean IsInPictureInPictureMode() const;
	::jboolean IsLaunchedFromBubble() const;
	::jboolean IsLocalVoiceInteractionSupported() const;
	::jboolean IsTaskRoot() const;
	::jboolean IsVoiceInteraction() const;
	::jboolean IsVoiceInteractionRoot() const;
	::android::database::Cursor ManagedQuery(const ::android::net::Uri& arg0, const jni::Array< ::java::lang::String >& arg1, const ::java::lang::String& arg2, const jni::Array< ::java::lang::String >& arg3, const ::java::lang::String& arg4) const;
	::jboolean MoveTaskToBack(const ::jboolean& arg0) const;
	::jboolean NavigateUpTo(const ::android::content::Intent& arg0) const;
	::jboolean NavigateUpToFromChild(const ::android::app::Activity& arg0, const ::android::content::Intent& arg1) const;
	::jvoid OnActionModeFinished(const ::android::view::ActionMode& arg0) const;
	::jvoid OnActionModeStarted(const ::android::view::ActionMode& arg0) const;
	::jvoid OnActivityReenter(const ::jint& arg0, const ::android::content::Intent& arg1) const;
	::jvoid OnActivityResult(const ::jint& arg0, const ::jint& arg1, const ::android::content::Intent& arg2) const;
	::jvoid OnApplyThemeResource(const ::android::content::res::Resources_Theme& arg0, const ::jint& arg1, const ::jboolean& arg2) const;
	::jvoid OnAttachFragment(const ::android::app::Fragment& arg0) const;
	::jvoid OnAttachedToWindow() const;
	::jvoid OnBackPressed() const;
	::jvoid OnChildTitleChanged(const ::android::app::Activity& arg0, const ::java::lang::CharSequence& arg1) const;
	::jvoid OnConfigurationChanged(const ::android::content::res::Configuration& arg0) const;
	::jvoid OnContentChanged() const;
	::jboolean OnContextItemSelected(const ::android::view::MenuItem& arg0) const;
	::jvoid OnContextMenuClosed(const ::android::view::Menu& arg0) const;
	::jvoid OnCreate(const ::android::os::Bundle& arg0) const;
	::jvoid OnCreate(const ::android::os::Bundle& arg0, const ::android::os::PersistableBundle& arg1) const;
	::jvoid OnCreateContextMenu(const ::android::view::ContextMenu& arg0, const ::android::view::View& arg1, const ::android::view::ContextMenu_ContextMenuInfo& arg2) const;
	::java::lang::CharSequence OnCreateDescription() const;
	::android::app::Dialog OnCreateDialog(const ::jint& arg0) const;
	::android::app::Dialog OnCreateDialog(const ::jint& arg0, const ::android::os::Bundle& arg1) const;
	::jvoid OnCreateNavigateUpTaskStack(const ::android::app::TaskStackBuilder& arg0) const;
	::jboolean OnCreateOptionsMenu(const ::android::view::Menu& arg0) const;
	::jboolean OnCreatePanelMenu(const ::jint& arg0, const ::android::view::Menu& arg1) const;
	::android::view::View OnCreatePanelView(const ::jint& arg0) const;
	::jboolean OnCreateThumbnail(const ::android::graphics::Bitmap& arg0, const ::android::graphics::Canvas& arg1) const;
	::android::view::View OnCreateView(const ::android::view::View& arg0, const ::java::lang::String& arg1, const ::android::content::Context& arg2, const ::android::util::AttributeSet& arg3) const;
	::android::view::View OnCreateView(const ::java::lang::String& arg0, const ::android::content::Context& arg1, const ::android::util::AttributeSet& arg2) const;
	::jvoid OnDestroy() const;
	::jvoid OnDetachedFromWindow() const;
	::jvoid OnEnterAnimationComplete() const;
	::jboolean OnGenericMotionEvent(const ::android::view::MotionEvent& arg0) const;
	::jvoid OnGetDirectActions(const ::android::os::CancellationSignal& arg0, const ::java::util::function::Consumer& arg1) const;
	::jboolean OnKeyDown(const ::jint& arg0, const ::android::view::KeyEvent& arg1) const;
	::jboolean OnKeyLongPress(const ::jint& arg0, const ::android::view::KeyEvent& arg1) const;
	::jboolean OnKeyMultiple(const ::jint& arg0, const ::jint& arg1, const ::android::view::KeyEvent& arg2) const;
	::jboolean OnKeyShortcut(const ::jint& arg0, const ::android::view::KeyEvent& arg1) const;
	::jboolean OnKeyUp(const ::jint& arg0, const ::android::view::KeyEvent& arg1) const;
	::jvoid OnLocalVoiceInteractionStarted() const;
	::jvoid OnLocalVoiceInteractionStopped() const;
	::jvoid OnLowMemory() const;
	::jboolean OnMenuItemSelected(const ::jint& arg0, const ::android::view::MenuItem& arg1) const;
	::jboolean OnMenuOpened(const ::jint& arg0, const ::android::view::Menu& arg1) const;
	::jvoid OnMultiWindowModeChanged(const ::jboolean& arg0) const;
	::jvoid OnMultiWindowModeChanged(const ::jboolean& arg0, const ::android::content::res::Configuration& arg1) const;
	::jboolean OnNavigateUp() const;
	::jboolean OnNavigateUpFromChild(const ::android::app::Activity& arg0) const;
	::jvoid OnNewIntent(const ::android::content::Intent& arg0) const;
	::jboolean OnOptionsItemSelected(const ::android::view::MenuItem& arg0) const;
	::jvoid OnOptionsMenuClosed(const ::android::view::Menu& arg0) const;
	::jvoid OnPanelClosed(const ::jint& arg0, const ::android::view::Menu& arg1) const;
	::jvoid OnPause() const;
	::jvoid OnPerformDirectAction(const ::java::lang::String& arg0, const ::android::os::Bundle& arg1, const ::android::os::CancellationSignal& arg2, const ::java::util::function::Consumer& arg3) const;
	::jvoid OnPictureInPictureModeChanged(const ::jboolean& arg0) const;
	::jvoid OnPictureInPictureModeChanged(const ::jboolean& arg0, const ::android::content::res::Configuration& arg1) const;
	::jboolean OnPictureInPictureRequested() const;
	::jvoid OnPictureInPictureUiStateChanged(const ::android::app::PictureInPictureUiState& arg0) const;
	::jvoid OnPostCreate(const ::android::os::Bundle& arg0) const;
	::jvoid OnPostCreate(const ::android::os::Bundle& arg0, const ::android::os::PersistableBundle& arg1) const;
	::jvoid OnPostResume() const;
	::jvoid OnPrepareDialog(const ::jint& arg0, const ::android::app::Dialog& arg1) const;
	::jvoid OnPrepareDialog(const ::jint& arg0, const ::android::app::Dialog& arg1, const ::android::os::Bundle& arg2) const;
	::jvoid OnPrepareNavigateUpTaskStack(const ::android::app::TaskStackBuilder& arg0) const;
	::jboolean OnPrepareOptionsMenu(const ::android::view::Menu& arg0) const;
	::jboolean OnPreparePanel(const ::jint& arg0, const ::android::view::View& arg1, const ::android::view::Menu& arg2) const;
	::jvoid OnProvideAssistContent(const ::android::app::assist::AssistContent& arg0) const;
	::jvoid OnProvideAssistData(const ::android::os::Bundle& arg0) const;
	::jvoid OnProvideKeyboardShortcuts(const ::java::util::List& arg0, const ::android::view::Menu& arg1, const ::jint& arg2) const;
	::android::net::Uri OnProvideReferrer() const;
	::jvoid OnRequestPermissionsResult(const ::jint& arg0, const jni::Array< ::java::lang::String >& arg1, const jni::Array< ::jint >& arg2) const;
	::jvoid OnRestart() const;
	::jvoid OnRestoreInstanceState(const ::android::os::Bundle& arg0) const;
	::jvoid OnRestoreInstanceState(const ::android::os::Bundle& arg0, const ::android::os::PersistableBundle& arg1) const;
	::jvoid OnResume() const;
	::java::lang::Object OnRetainNonConfigurationInstance() const;
	::jvoid OnSaveInstanceState(const ::android::os::Bundle& arg0) const;
	::jvoid OnSaveInstanceState(const ::android::os::Bundle& arg0, const ::android::os::PersistableBundle& arg1) const;
	::jboolean OnSearchRequested() const;
	::jboolean OnSearchRequested(const ::android::view::SearchEvent& arg0) const;
	::jvoid OnStart() const;
	::jvoid OnStateNotSaved() const;
	::jvoid OnStop() const;
	::jvoid OnTitleChanged(const ::java::lang::CharSequence& arg0, const ::jint& arg1) const;
	::jvoid OnTopResumedActivityChanged(const ::jboolean& arg0) const;
	::jboolean OnTouchEvent(const ::android::view::MotionEvent& arg0) const;
	::jboolean OnTrackballEvent(const ::android::view::MotionEvent& arg0) const;
	::jvoid OnTrimMemory(const ::jint& arg0) const;
	::jvoid OnUserInteraction() const;
	::jvoid OnUserLeaveHint() const;
	::jvoid OnVisibleBehindCanceled() const;
	::jvoid OnWindowAttributesChanged(const ::android::view::WindowManager_LayoutParams& arg0) const;
	::jvoid OnWindowFocusChanged(const ::jboolean& arg0) const;
	::android::view::ActionMode OnWindowStartingActionMode(const ::android::view::ActionMode_Callback& arg0) const;
	::android::view::ActionMode OnWindowStartingActionMode(const ::android::view::ActionMode_Callback& arg0, const ::jint& arg1) const;
	::jvoid OpenContextMenu(const ::android::view::View& arg0) const;
	::jvoid OpenOptionsMenu() const;
	::jvoid OverridePendingTransition(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid PostponeEnterTransition() const;
	::jvoid Recreate() const;
	::jvoid RegisterActivityLifecycleCallbacks(const ::android::app::Application_ActivityLifecycleCallbacks& arg0) const;
	::jvoid RegisterForContextMenu(const ::android::view::View& arg0) const;
	::jboolean ReleaseInstance() const;
	::jvoid RemoveDialog(const ::jint& arg0) const;
	::jvoid ReportFullyDrawn() const;
	::android::view::DragAndDropPermissions RequestDragAndDropPermissions(const ::android::view::DragEvent& arg0) const;
	::jvoid RequestPermissions(const jni::Array< ::java::lang::String >& arg0, const ::jint& arg1) const;
	::jvoid RequestShowKeyboardShortcuts() const;
	::jboolean RequestVisibleBehind(const ::jboolean& arg0) const;
	::jboolean RequestWindowFeature(const ::jint& arg0) const;
	::android::view::View RequireViewById(const ::jint& arg0) const;
	::jvoid RunOnUiThread(const ::java::lang::Runnable& arg0) const;
	::jvoid SetActionBar(const ::android::widget::Toolbar& arg0) const;
	::jvoid SetContentTransitionManager(const ::android::transition::TransitionManager& arg0) const;
	::jvoid SetContentView(const ::jint& arg0) const;
	::jvoid SetContentView(const ::android::view::View& arg0) const;
	::jvoid SetContentView(const ::android::view::View& arg0, const ::android::view::ViewGroup_LayoutParams& arg1) const;
	::jvoid SetDefaultKeyMode(const ::jint& arg0) const;
	::jvoid SetEnterSharedElementCallback(const ::android::app::SharedElementCallback& arg0) const;
	::jvoid SetExitSharedElementCallback(const ::android::app::SharedElementCallback& arg0) const;
	::jvoid SetFeatureDrawable(const ::jint& arg0, const ::android::graphics::drawable::Drawable& arg1) const;
	::jvoid SetFeatureDrawableAlpha(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid SetFeatureDrawableResource(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid SetFeatureDrawableUri(const ::jint& arg0, const ::android::net::Uri& arg1) const;
	::jvoid SetFinishOnTouchOutside(const ::jboolean& arg0) const;
	::jvoid SetImmersive(const ::jboolean& arg0) const;
	::jvoid SetInheritShowWhenLocked(const ::jboolean& arg0) const;
	::jvoid SetIntent(const ::android::content::Intent& arg0) const;
	::jvoid SetLocusContext(const ::android::content::LocusId& arg0, const ::android::os::Bundle& arg1) const;
	::jvoid SetMediaController(const ::android::media::session::MediaController& arg0) const;
	::jvoid SetPictureInPictureParams(const ::android::app::PictureInPictureParams& arg0) const;
	::jvoid SetProgress(const ::jint& arg0) const;
	::jvoid SetProgressBarIndeterminate(const ::jboolean& arg0) const;
	::jvoid SetProgressBarIndeterminateVisibility(const ::jboolean& arg0) const;
	::jvoid SetProgressBarVisibility(const ::jboolean& arg0) const;
	::jvoid SetRequestedOrientation(const ::jint& arg0) const;
	::jvoid SetResult(const ::jint& arg0) const;
	::jvoid SetResult(const ::jint& arg0, const ::android::content::Intent& arg1) const;
	::jvoid SetSecondaryProgress(const ::jint& arg0) const;
	::jvoid SetShowWhenLocked(const ::jboolean& arg0) const;
	::jvoid SetTaskDescription(const ::android::app::ActivityManager_TaskDescription& arg0) const;
	::jvoid SetTheme(const ::jint& arg0) const;
	::jvoid SetTitle(const ::jint& arg0) const;
	::jvoid SetTitle(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetTitleColor(const ::jint& arg0) const;
	::jboolean SetTranslucent(const ::jboolean& arg0) const;
	::jvoid SetTurnScreenOn(const ::jboolean& arg0) const;
	::jvoid SetVisible(const ::jboolean& arg0) const;
	::jvoid SetVolumeControlStream(const ::jint& arg0) const;
	::jvoid SetVrModeEnabled(const ::jboolean& arg0, const ::android::content::ComponentName& arg1) const;
	::jboolean ShouldShowRequestPermissionRationale(const ::java::lang::String& arg0) const;
	::jboolean ShouldUpRecreateTask(const ::android::content::Intent& arg0) const;
	::jboolean ShowAssist(const ::android::os::Bundle& arg0) const;
	::jvoid ShowDialog(const ::jint& arg0) const;
	::jboolean ShowDialog(const ::jint& arg0, const ::android::os::Bundle& arg1) const;
	::jvoid ShowLockTaskEscapeMessage() const;
	::android::view::ActionMode StartActionMode(const ::android::view::ActionMode_Callback& arg0) const;
	::android::view::ActionMode StartActionMode(const ::android::view::ActionMode_Callback& arg0, const ::jint& arg1) const;
	::jvoid StartActivities(const jni::Array< ::android::content::Intent >& arg0) const;
	::jvoid StartActivities(const jni::Array< ::android::content::Intent >& arg0, const ::android::os::Bundle& arg1) const;
	::jvoid StartActivity(const ::android::content::Intent& arg0) const;
	::jvoid StartActivity(const ::android::content::Intent& arg0, const ::android::os::Bundle& arg1) const;
	::jvoid StartActivityForResult(const ::android::content::Intent& arg0, const ::jint& arg1) const;
	::jvoid StartActivityForResult(const ::android::content::Intent& arg0, const ::jint& arg1, const ::android::os::Bundle& arg2) const;
	::jvoid StartActivityFromChild(const ::android::app::Activity& arg0, const ::android::content::Intent& arg1, const ::jint& arg2) const;
	::jvoid StartActivityFromChild(const ::android::app::Activity& arg0, const ::android::content::Intent& arg1, const ::jint& arg2, const ::android::os::Bundle& arg3) const;
	::jvoid StartActivityFromFragment(const ::android::app::Fragment& arg0, const ::android::content::Intent& arg1, const ::jint& arg2) const;
	::jvoid StartActivityFromFragment(const ::android::app::Fragment& arg0, const ::android::content::Intent& arg1, const ::jint& arg2, const ::android::os::Bundle& arg3) const;
	::jboolean StartActivityIfNeeded(const ::android::content::Intent& arg0, const ::jint& arg1) const;
	::jboolean StartActivityIfNeeded(const ::android::content::Intent& arg0, const ::jint& arg1, const ::android::os::Bundle& arg2) const;
	::jvoid StartIntentSender(const ::android::content::IntentSender& arg0, const ::android::content::Intent& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4) const;
	::jvoid StartIntentSender(const ::android::content::IntentSender& arg0, const ::android::content::Intent& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::android::os::Bundle& arg5) const;
	::jvoid StartIntentSenderForResult(const ::android::content::IntentSender& arg0, const ::jint& arg1, const ::android::content::Intent& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5) const;
	::jvoid StartIntentSenderForResult(const ::android::content::IntentSender& arg0, const ::jint& arg1, const ::android::content::Intent& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5, const ::android::os::Bundle& arg6) const;
	::jvoid StartIntentSenderFromChild(const ::android::app::Activity& arg0, const ::android::content::IntentSender& arg1, const ::jint& arg2, const ::android::content::Intent& arg3, const ::jint& arg4, const ::jint& arg5, const ::jint& arg6) const;
	::jvoid StartIntentSenderFromChild(const ::android::app::Activity& arg0, const ::android::content::IntentSender& arg1, const ::jint& arg2, const ::android::content::Intent& arg3, const ::jint& arg4, const ::jint& arg5, const ::jint& arg6, const ::android::os::Bundle& arg7) const;
	::jvoid StartLocalVoiceInteraction(const ::android::os::Bundle& arg0) const;
	::jvoid StartLockTask() const;
	::jvoid StartManagingCursor(const ::android::database::Cursor& arg0) const;
	::jboolean StartNextMatchingActivity(const ::android::content::Intent& arg0) const;
	::jboolean StartNextMatchingActivity(const ::android::content::Intent& arg0, const ::android::os::Bundle& arg1) const;
	::jvoid StartPostponedEnterTransition() const;
	::jvoid StartSearch(const ::java::lang::String& arg0, const ::jboolean& arg1, const ::android::os::Bundle& arg2, const ::jboolean& arg3) const;
	::jvoid StopLocalVoiceInteraction() const;
	::jvoid StopLockTask() const;
	::jvoid StopManagingCursor(const ::android::database::Cursor& arg0) const;
	::jvoid TakeKeyEvents(const ::jboolean& arg0) const;
	::jvoid TriggerSearch(const ::java::lang::String& arg0, const ::android::os::Bundle& arg1) const;
	::jvoid UnregisterActivityLifecycleCallbacks(const ::android::app::Application_ActivityLifecycleCallbacks& arg0) const;
	::jvoid UnregisterForContextMenu(const ::android::view::View& arg0) const;
	static jobject __Constructor();
	Activity() : ::android::view::ContextThemeWrapper(__Constructor()) {}
	explicit Activity(jobject o) : ::android::view::ContextThemeWrapper(o) {}
	Activity(const Activity& o)  : ::android::view::ContextThemeWrapper(o) {}

};

}}

namespace android { namespace content { 
struct Intent : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	operator ::java::lang::Cloneable();
	static ::java::lang::String& fACTION_AIRPLANE_MODE_CHANGED();
	static ::java::lang::String& fACTION_ALL_APPS();
	static ::java::lang::String& fACTION_ANSWER();
	static ::java::lang::String& fACTION_APPLICATION_PREFERENCES();
	static ::java::lang::String& fACTION_APPLICATION_RESTRICTIONS_CHANGED();
	static ::java::lang::String& fACTION_APP_ERROR();
	static ::java::lang::String& fACTION_ASSIST();
	static ::java::lang::String& fACTION_ATTACH_DATA();
	static ::java::lang::String& fACTION_AUTO_REVOKE_PERMISSIONS();
	static ::java::lang::String& fACTION_BATTERY_CHANGED();
	static ::java::lang::String& fACTION_BATTERY_LOW();
	static ::java::lang::String& fACTION_BATTERY_OKAY();
	static ::java::lang::String& fACTION_BOOT_COMPLETED();
	static ::java::lang::String& fACTION_BUG_REPORT();
	static ::java::lang::String& fACTION_CALL();
	static ::java::lang::String& fACTION_CALL_BUTTON();
	static ::java::lang::String& fACTION_CAMERA_BUTTON();
	static ::java::lang::String& fACTION_CARRIER_SETUP();
	static ::java::lang::String& fACTION_CHOOSER();
	static ::java::lang::String& fACTION_CLOSE_SYSTEM_DIALOGS();
	static ::java::lang::String& fACTION_CONFIGURATION_CHANGED();
	static ::java::lang::String& fACTION_CREATE_DOCUMENT();
	static ::java::lang::String& fACTION_CREATE_REMINDER();
	static ::java::lang::String& fACTION_CREATE_SHORTCUT();
	static ::java::lang::String& fACTION_DATE_CHANGED();
	static ::java::lang::String& fACTION_DEFAULT();
	static ::java::lang::String& fACTION_DEFINE();
	static ::java::lang::String& fACTION_DELETE();
	static ::java::lang::String& fACTION_DEVICE_STORAGE_LOW();
	static ::java::lang::String& fACTION_DEVICE_STORAGE_OK();
	static ::java::lang::String& fACTION_DIAL();
	static ::java::lang::String& fACTION_DOCK_EVENT();
	static ::java::lang::String& fACTION_DREAMING_STARTED();
	static ::java::lang::String& fACTION_DREAMING_STOPPED();
	static ::java::lang::String& fACTION_EDIT();
	static ::java::lang::String& fACTION_EXTERNAL_APPLICATIONS_AVAILABLE();
	static ::java::lang::String& fACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE();
	static ::java::lang::String& fACTION_FACTORY_TEST();
	static ::java::lang::String& fACTION_GET_CONTENT();
	static ::java::lang::String& fACTION_GET_RESTRICTION_ENTRIES();
	static ::java::lang::String& fACTION_GTALK_SERVICE_CONNECTED();
	static ::java::lang::String& fACTION_GTALK_SERVICE_DISCONNECTED();
	static ::java::lang::String& fACTION_HEADSET_PLUG();
	static ::java::lang::String& fACTION_INPUT_METHOD_CHANGED();
	static ::java::lang::String& fACTION_INSERT();
	static ::java::lang::String& fACTION_INSERT_OR_EDIT();
	static ::java::lang::String& fACTION_INSTALL_FAILURE();
	static ::java::lang::String& fACTION_INSTALL_PACKAGE();
	static ::java::lang::String& fACTION_LOCALE_CHANGED();
	static ::java::lang::String& fACTION_LOCKED_BOOT_COMPLETED();
	static ::java::lang::String& fACTION_MAIN();
	static ::java::lang::String& fACTION_MANAGED_PROFILE_ADDED();
	static ::java::lang::String& fACTION_MANAGED_PROFILE_AVAILABLE();
	static ::java::lang::String& fACTION_MANAGED_PROFILE_REMOVED();
	static ::java::lang::String& fACTION_MANAGED_PROFILE_UNAVAILABLE();
	static ::java::lang::String& fACTION_MANAGED_PROFILE_UNLOCKED();
	static ::java::lang::String& fACTION_MANAGE_NETWORK_USAGE();
	static ::java::lang::String& fACTION_MANAGE_PACKAGE_STORAGE();
	static ::java::lang::String& fACTION_MANAGE_UNUSED_APPS();
	static ::java::lang::String& fACTION_MEDIA_BAD_REMOVAL();
	static ::java::lang::String& fACTION_MEDIA_BUTTON();
	static ::java::lang::String& fACTION_MEDIA_CHECKING();
	static ::java::lang::String& fACTION_MEDIA_EJECT();
	static ::java::lang::String& fACTION_MEDIA_MOUNTED();
	static ::java::lang::String& fACTION_MEDIA_NOFS();
	static ::java::lang::String& fACTION_MEDIA_REMOVED();
	static ::java::lang::String& fACTION_MEDIA_SCANNER_FINISHED();
	static ::java::lang::String& fACTION_MEDIA_SCANNER_SCAN_FILE();
	static ::java::lang::String& fACTION_MEDIA_SCANNER_STARTED();
	static ::java::lang::String& fACTION_MEDIA_SHARED();
	static ::java::lang::String& fACTION_MEDIA_UNMOUNTABLE();
	static ::java::lang::String& fACTION_MEDIA_UNMOUNTED();
	static ::java::lang::String& fACTION_MY_PACKAGE_REPLACED();
	static ::java::lang::String& fACTION_MY_PACKAGE_SUSPENDED();
	static ::java::lang::String& fACTION_MY_PACKAGE_UNSUSPENDED();
	static ::java::lang::String& fACTION_NEW_OUTGOING_CALL();
	static ::java::lang::String& fACTION_OPEN_DOCUMENT();
	static ::java::lang::String& fACTION_OPEN_DOCUMENT_TREE();
	static ::java::lang::String& fACTION_PACKAGES_SUSPENDED();
	static ::java::lang::String& fACTION_PACKAGES_UNSUSPENDED();
	static ::java::lang::String& fACTION_PACKAGE_ADDED();
	static ::java::lang::String& fACTION_PACKAGE_CHANGED();
	static ::java::lang::String& fACTION_PACKAGE_DATA_CLEARED();
	static ::java::lang::String& fACTION_PACKAGE_FIRST_LAUNCH();
	static ::java::lang::String& fACTION_PACKAGE_FULLY_REMOVED();
	static ::java::lang::String& fACTION_PACKAGE_INSTALL();
	static ::java::lang::String& fACTION_PACKAGE_NEEDS_VERIFICATION();
	static ::java::lang::String& fACTION_PACKAGE_REMOVED();
	static ::java::lang::String& fACTION_PACKAGE_REPLACED();
	static ::java::lang::String& fACTION_PACKAGE_RESTARTED();
	static ::java::lang::String& fACTION_PACKAGE_VERIFIED();
	static ::java::lang::String& fACTION_PASTE();
	static ::java::lang::String& fACTION_PICK();
	static ::java::lang::String& fACTION_PICK_ACTIVITY();
	static ::java::lang::String& fACTION_POWER_CONNECTED();
	static ::java::lang::String& fACTION_POWER_DISCONNECTED();
	static ::java::lang::String& fACTION_POWER_USAGE_SUMMARY();
	static ::java::lang::String& fACTION_PROCESS_TEXT();
	static ::java::lang::String& fACTION_PROFILE_ACCESSIBLE();
	static ::java::lang::String& fACTION_PROFILE_INACCESSIBLE();
	static ::java::lang::String& fACTION_PROVIDER_CHANGED();
	static ::java::lang::String& fACTION_QUICK_CLOCK();
	static ::java::lang::String& fACTION_QUICK_VIEW();
	static ::java::lang::String& fACTION_REBOOT();
	static ::java::lang::String& fACTION_RUN();
	static ::java::lang::String& fACTION_SCREEN_OFF();
	static ::java::lang::String& fACTION_SCREEN_ON();
	static ::java::lang::String& fACTION_SEARCH();
	static ::java::lang::String& fACTION_SEARCH_LONG_PRESS();
	static ::java::lang::String& fACTION_SEND();
	static ::java::lang::String& fACTION_SENDTO();
	static ::java::lang::String& fACTION_SEND_MULTIPLE();
	static ::java::lang::String& fACTION_SET_WALLPAPER();
	static ::java::lang::String& fACTION_SHOW_APP_INFO();
	static ::java::lang::String& fACTION_SHUTDOWN();
	static ::java::lang::String& fACTION_SYNC();
	static ::java::lang::String& fACTION_SYSTEM_TUTORIAL();
	static ::java::lang::String& fACTION_TIMEZONE_CHANGED();
	static ::java::lang::String& fACTION_TIME_CHANGED();
	static ::java::lang::String& fACTION_TIME_TICK();
	static ::java::lang::String& fACTION_TRANSLATE();
	static ::java::lang::String& fACTION_UID_REMOVED();
	static ::java::lang::String& fACTION_UMS_CONNECTED();
	static ::java::lang::String& fACTION_UMS_DISCONNECTED();
	static ::java::lang::String& fACTION_UNINSTALL_PACKAGE();
	static ::java::lang::String& fACTION_USER_BACKGROUND();
	static ::java::lang::String& fACTION_USER_FOREGROUND();
	static ::java::lang::String& fACTION_USER_INITIALIZE();
	static ::java::lang::String& fACTION_USER_PRESENT();
	static ::java::lang::String& fACTION_USER_UNLOCKED();
	static ::java::lang::String& fACTION_VIEW();
	static ::java::lang::String& fACTION_VIEW_LOCUS();
	static ::java::lang::String& fACTION_VIEW_PERMISSION_USAGE();
	static ::java::lang::String& fACTION_VIEW_PERMISSION_USAGE_FOR_PERIOD();
	static ::java::lang::String& fACTION_VOICE_COMMAND();
	static ::java::lang::String& fACTION_WALLPAPER_CHANGED();
	static ::java::lang::String& fACTION_WEB_SEARCH();
	static ::java::lang::String& fCATEGORY_ACCESSIBILITY_SHORTCUT_TARGET();
	static ::java::lang::String& fCATEGORY_ALTERNATIVE();
	static ::java::lang::String& fCATEGORY_APP_BROWSER();
	static ::java::lang::String& fCATEGORY_APP_CALCULATOR();
	static ::java::lang::String& fCATEGORY_APP_CALENDAR();
	static ::java::lang::String& fCATEGORY_APP_CONTACTS();
	static ::java::lang::String& fCATEGORY_APP_EMAIL();
	static ::java::lang::String& fCATEGORY_APP_FILES();
	static ::java::lang::String& fCATEGORY_APP_GALLERY();
	static ::java::lang::String& fCATEGORY_APP_MAPS();
	static ::java::lang::String& fCATEGORY_APP_MARKET();
	static ::java::lang::String& fCATEGORY_APP_MESSAGING();
	static ::java::lang::String& fCATEGORY_APP_MUSIC();
	static ::java::lang::String& fCATEGORY_BROWSABLE();
	static ::java::lang::String& fCATEGORY_CAR_DOCK();
	static ::java::lang::String& fCATEGORY_CAR_MODE();
	static ::java::lang::String& fCATEGORY_DEFAULT();
	static ::java::lang::String& fCATEGORY_DESK_DOCK();
	static ::java::lang::String& fCATEGORY_DEVELOPMENT_PREFERENCE();
	static ::java::lang::String& fCATEGORY_EMBED();
	static ::java::lang::String& fCATEGORY_FRAMEWORK_INSTRUMENTATION_TEST();
	static ::java::lang::String& fCATEGORY_HE_DESK_DOCK();
	static ::java::lang::String& fCATEGORY_HOME();
	static ::java::lang::String& fCATEGORY_INFO();
	static ::java::lang::String& fCATEGORY_LAUNCHER();
	static ::java::lang::String& fCATEGORY_LEANBACK_LAUNCHER();
	static ::java::lang::String& fCATEGORY_LE_DESK_DOCK();
	static ::java::lang::String& fCATEGORY_MONKEY();
	static ::java::lang::String& fCATEGORY_OPENABLE();
	static ::java::lang::String& fCATEGORY_PREFERENCE();
	static ::java::lang::String& fCATEGORY_SAMPLE_CODE();
	static ::java::lang::String& fCATEGORY_SECONDARY_HOME();
	static ::java::lang::String& fCATEGORY_SELECTED_ALTERNATIVE();
	static ::java::lang::String& fCATEGORY_TAB();
	static ::java::lang::String& fCATEGORY_TEST();
	static ::java::lang::String& fCATEGORY_TYPED_OPENABLE();
	static ::java::lang::String& fCATEGORY_UNIT_TEST();
	static ::java::lang::String& fCATEGORY_VOICE();
	static ::java::lang::String& fCATEGORY_VR_HOME();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::java::lang::String& fEXTRA_ALARM_COUNT();
	static ::java::lang::String& fEXTRA_ALLOW_MULTIPLE();
	static ::java::lang::String& fEXTRA_ALLOW_REPLACE();
	static ::java::lang::String& fEXTRA_ALTERNATE_INTENTS();
	static ::java::lang::String& fEXTRA_ASSIST_CONTEXT();
	static ::java::lang::String& fEXTRA_ASSIST_INPUT_DEVICE_ID();
	static ::java::lang::String& fEXTRA_ASSIST_INPUT_HINT_KEYBOARD();
	static ::java::lang::String& fEXTRA_ASSIST_PACKAGE();
	static ::java::lang::String& fEXTRA_ASSIST_UID();
	static ::java::lang::String& fEXTRA_ATTRIBUTION_TAGS();
	static ::java::lang::String& fEXTRA_AUTO_LAUNCH_SINGLE_CHOICE();
	static ::java::lang::String& fEXTRA_BCC();
	static ::java::lang::String& fEXTRA_BUG_REPORT();
	static ::java::lang::String& fEXTRA_CC();
	static ::java::lang::String& fEXTRA_CHANGED_COMPONENT_NAME();
	static ::java::lang::String& fEXTRA_CHANGED_COMPONENT_NAME_LIST();
	static ::java::lang::String& fEXTRA_CHANGED_PACKAGE_LIST();
	static ::java::lang::String& fEXTRA_CHANGED_UID_LIST();
	static ::java::lang::String& fEXTRA_CHOOSER_REFINEMENT_INTENT_SENDER();
	static ::java::lang::String& fEXTRA_CHOOSER_TARGETS();
	static ::java::lang::String& fEXTRA_CHOSEN_COMPONENT();
	static ::java::lang::String& fEXTRA_CHOSEN_COMPONENT_INTENT_SENDER();
	static ::java::lang::String& fEXTRA_COMPONENT_NAME();
	static ::java::lang::String& fEXTRA_CONTENT_ANNOTATIONS();
	static ::java::lang::String& fEXTRA_CONTENT_QUERY();
	static ::java::lang::String& fEXTRA_DATA_REMOVED();
	static ::java::lang::String& fEXTRA_DOCK_STATE();
	static ::jint& fEXTRA_DOCK_STATE_CAR();
	static ::jint& fEXTRA_DOCK_STATE_DESK();
	static ::jint& fEXTRA_DOCK_STATE_HE_DESK();
	static ::jint& fEXTRA_DOCK_STATE_LE_DESK();
	static ::jint& fEXTRA_DOCK_STATE_UNDOCKED();
	static ::java::lang::String& fEXTRA_DONT_KILL_APP();
	static ::java::lang::String& fEXTRA_DURATION_MILLIS();
	static ::java::lang::String& fEXTRA_EMAIL();
	static ::java::lang::String& fEXTRA_END_TIME();
	static ::java::lang::String& fEXTRA_EXCLUDE_COMPONENTS();
	static ::java::lang::String& fEXTRA_FROM_STORAGE();
	static ::java::lang::String& fEXTRA_HTML_TEXT();
	static ::java::lang::String& fEXTRA_INDEX();
	static ::java::lang::String& fEXTRA_INITIAL_INTENTS();
	static ::java::lang::String& fEXTRA_INSTALLER_PACKAGE_NAME();
	static ::java::lang::String& fEXTRA_INTENT();
	static ::java::lang::String& fEXTRA_KEY_EVENT();
	static ::java::lang::String& fEXTRA_LOCAL_ONLY();
	static ::java::lang::String& fEXTRA_LOCUS_ID();
	static ::java::lang::String& fEXTRA_MIME_TYPES();
	static ::java::lang::String& fEXTRA_NOT_UNKNOWN_SOURCE();
	static ::java::lang::String& fEXTRA_ORIGINATING_URI();
	static ::java::lang::String& fEXTRA_PACKAGE_NAME();
	static ::java::lang::String& fEXTRA_PERMISSION_GROUP_NAME();
	static ::java::lang::String& fEXTRA_PHONE_NUMBER();
	static ::java::lang::String& fEXTRA_PROCESS_TEXT();
	static ::java::lang::String& fEXTRA_PROCESS_TEXT_READONLY();
	static ::java::lang::String& fEXTRA_QUICK_VIEW_FEATURES();
	static ::java::lang::String& fEXTRA_QUIET_MODE();
	static ::java::lang::String& fEXTRA_REFERRER();
	static ::java::lang::String& fEXTRA_REFERRER_NAME();
	static ::java::lang::String& fEXTRA_REMOTE_INTENT_TOKEN();
	static ::java::lang::String& fEXTRA_REPLACEMENT_EXTRAS();
	static ::java::lang::String& fEXTRA_REPLACING();
	static ::java::lang::String& fEXTRA_RESTRICTIONS_BUNDLE();
	static ::java::lang::String& fEXTRA_RESTRICTIONS_INTENT();
	static ::java::lang::String& fEXTRA_RESTRICTIONS_LIST();
	static ::java::lang::String& fEXTRA_RESULT_RECEIVER();
	static ::java::lang::String& fEXTRA_RETURN_RESULT();
	static ::java::lang::String& fEXTRA_SHORTCUT_ICON();
	static ::java::lang::String& fEXTRA_SHORTCUT_ICON_RESOURCE();
	static ::java::lang::String& fEXTRA_SHORTCUT_ID();
	static ::java::lang::String& fEXTRA_SHORTCUT_INTENT();
	static ::java::lang::String& fEXTRA_SHORTCUT_NAME();
	static ::java::lang::String& fEXTRA_SHUTDOWN_USERSPACE_ONLY();
	static ::java::lang::String& fEXTRA_SPLIT_NAME();
	static ::java::lang::String& fEXTRA_START_TIME();
	static ::java::lang::String& fEXTRA_STREAM();
	static ::java::lang::String& fEXTRA_SUBJECT();
	static ::java::lang::String& fEXTRA_SUSPENDED_PACKAGE_EXTRAS();
	static ::java::lang::String& fEXTRA_TEMPLATE();
	static ::java::lang::String& fEXTRA_TEXT();
	static ::java::lang::String& fEXTRA_TIME();
	static ::java::lang::String& fEXTRA_TIMEZONE();
	static ::java::lang::String& fEXTRA_TITLE();
	static ::java::lang::String& fEXTRA_UID();
	static ::java::lang::String& fEXTRA_USER();
	static ::java::lang::String& fEXTRA_USER_INITIATED();
	static ::jint& fFILL_IN_ACTION();
	static ::jint& fFILL_IN_CATEGORIES();
	static ::jint& fFILL_IN_CLIP_DATA();
	static ::jint& fFILL_IN_COMPONENT();
	static ::jint& fFILL_IN_DATA();
	static ::jint& fFILL_IN_IDENTIFIER();
	static ::jint& fFILL_IN_PACKAGE();
	static ::jint& fFILL_IN_SELECTOR();
	static ::jint& fFILL_IN_SOURCE_BOUNDS();
	static ::jint& fFLAG_ACTIVITY_BROUGHT_TO_FRONT();
	static ::jint& fFLAG_ACTIVITY_CLEAR_TASK();
	static ::jint& fFLAG_ACTIVITY_CLEAR_TOP();
	static ::jint& fFLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET();
	static ::jint& fFLAG_ACTIVITY_EXCLUDE_FROM_RECENTS();
	static ::jint& fFLAG_ACTIVITY_FORWARD_RESULT();
	static ::jint& fFLAG_ACTIVITY_LAUNCHED_FROM_HISTORY();
	static ::jint& fFLAG_ACTIVITY_LAUNCH_ADJACENT();
	static ::jint& fFLAG_ACTIVITY_MATCH_EXTERNAL();
	static ::jint& fFLAG_ACTIVITY_MULTIPLE_TASK();
	static ::jint& fFLAG_ACTIVITY_NEW_DOCUMENT();
	static ::jint& fFLAG_ACTIVITY_NEW_TASK();
	static ::jint& fFLAG_ACTIVITY_NO_ANIMATION();
	static ::jint& fFLAG_ACTIVITY_NO_HISTORY();
	static ::jint& fFLAG_ACTIVITY_NO_USER_ACTION();
	static ::jint& fFLAG_ACTIVITY_PREVIOUS_IS_TOP();
	static ::jint& fFLAG_ACTIVITY_REORDER_TO_FRONT();
	static ::jint& fFLAG_ACTIVITY_REQUIRE_DEFAULT();
	static ::jint& fFLAG_ACTIVITY_REQUIRE_NON_BROWSER();
	static ::jint& fFLAG_ACTIVITY_RESET_TASK_IF_NEEDED();
	static ::jint& fFLAG_ACTIVITY_RETAIN_IN_RECENTS();
	static ::jint& fFLAG_ACTIVITY_SINGLE_TOP();
	static ::jint& fFLAG_ACTIVITY_TASK_ON_HOME();
	static ::jint& fFLAG_DEBUG_LOG_RESOLUTION();
	static ::jint& fFLAG_DIRECT_BOOT_AUTO();
	static ::jint& fFLAG_EXCLUDE_STOPPED_PACKAGES();
	static ::jint& fFLAG_FROM_BACKGROUND();
	static ::jint& fFLAG_GRANT_PERSISTABLE_URI_PERMISSION();
	static ::jint& fFLAG_GRANT_PREFIX_URI_PERMISSION();
	static ::jint& fFLAG_GRANT_READ_URI_PERMISSION();
	static ::jint& fFLAG_GRANT_WRITE_URI_PERMISSION();
	static ::jint& fFLAG_INCLUDE_STOPPED_PACKAGES();
	static ::jint& fFLAG_RECEIVER_FOREGROUND();
	static ::jint& fFLAG_RECEIVER_NO_ABORT();
	static ::jint& fFLAG_RECEIVER_REGISTERED_ONLY();
	static ::jint& fFLAG_RECEIVER_REPLACE_PENDING();
	static ::jint& fFLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS();
	static ::java::lang::String& fMETADATA_DOCK_HOME();
	static ::jint& fURI_ALLOW_UNSAFE();
	static ::jint& fURI_ANDROID_APP_SCHEME();
	static ::jint& fURI_INTENT_SCHEME();
	::android::content::Intent AddCategory(const ::java::lang::String& arg0) const;
	::android::content::Intent AddFlags(const ::jint& arg0) const;
	::java::lang::Object Clone() const;
	::android::content::Intent CloneFilter() const;
	static ::android::content::Intent CreateChooser(const ::android::content::Intent& arg0, const ::java::lang::CharSequence& arg1);
	static ::android::content::Intent CreateChooser(const ::android::content::Intent& arg0, const ::java::lang::CharSequence& arg1, const ::android::content::IntentSender& arg2);
	::jint DescribeContents() const;
	::jint FillIn(const ::android::content::Intent& arg0, const ::jint& arg1) const;
	::jboolean FilterEquals(const ::android::content::Intent& arg0) const;
	::jint FilterHashCode() const;
	::java::lang::String GetAction() const;
	jni::Array< ::jboolean > GetBooleanArrayExtra(const ::java::lang::String& arg0) const;
	::jboolean GetBooleanExtra(const ::java::lang::String& arg0, const ::jboolean& arg1) const;
	::android::os::Bundle GetBundleExtra(const ::java::lang::String& arg0) const;
	jni::Array< ::jbyte > GetByteArrayExtra(const ::java::lang::String& arg0) const;
	::jbyte GetByteExtra(const ::java::lang::String& arg0, const ::jbyte& arg1) const;
	::java::util::Set GetCategories() const;
	jni::Array< ::jchar > GetCharArrayExtra(const ::java::lang::String& arg0) const;
	::jchar GetCharExtra(const ::java::lang::String& arg0, const ::jchar& arg1) const;
	jni::Array< ::java::lang::CharSequence > GetCharSequenceArrayExtra(const ::java::lang::String& arg0) const;
	::java::util::ArrayList GetCharSequenceArrayListExtra(const ::java::lang::String& arg0) const;
	::java::lang::CharSequence GetCharSequenceExtra(const ::java::lang::String& arg0) const;
	::android::content::ClipData GetClipData() const;
	::android::content::ComponentName GetComponent() const;
	::android::net::Uri GetData() const;
	::java::lang::String GetDataString() const;
	jni::Array< ::jdouble > GetDoubleArrayExtra(const ::java::lang::String& arg0) const;
	::jdouble GetDoubleExtra(const ::java::lang::String& arg0, const ::jdouble& arg1) const;
	::android::os::Bundle GetExtras() const;
	::jint GetFlags() const;
	jni::Array< ::jfloat > GetFloatArrayExtra(const ::java::lang::String& arg0) const;
	::jfloat GetFloatExtra(const ::java::lang::String& arg0, const ::jfloat& arg1) const;
	::java::lang::String GetIdentifier() const;
	jni::Array< ::jint > GetIntArrayExtra(const ::java::lang::String& arg0) const;
	::jint GetIntExtra(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::java::util::ArrayList GetIntegerArrayListExtra(const ::java::lang::String& arg0) const;
	static ::android::content::Intent GetIntent(const ::java::lang::String& arg0);
	static ::android::content::Intent GetIntentOld(const ::java::lang::String& arg0);
	jni::Array< ::jlong > GetLongArrayExtra(const ::java::lang::String& arg0) const;
	::jlong GetLongExtra(const ::java::lang::String& arg0, const ::jlong& arg1) const;
	::java::lang::String GetPackage() const;
	jni::Array< ::android::os::Parcelable > GetParcelableArrayExtra(const ::java::lang::String& arg0) const;
	::java::util::ArrayList GetParcelableArrayListExtra(const ::java::lang::String& arg0) const;
	::android::os::Parcelable GetParcelableExtra(const ::java::lang::String& arg0) const;
	::java::lang::String GetScheme() const;
	::android::content::Intent GetSelector() const;
	::java::io::Serializable GetSerializableExtra(const ::java::lang::String& arg0) const;
	jni::Array< ::jshort > GetShortArrayExtra(const ::java::lang::String& arg0) const;
	::jshort GetShortExtra(const ::java::lang::String& arg0, const ::jshort& arg1) const;
	::android::graphics::Rect GetSourceBounds() const;
	jni::Array< ::java::lang::String > GetStringArrayExtra(const ::java::lang::String& arg0) const;
	::java::util::ArrayList GetStringArrayListExtra(const ::java::lang::String& arg0) const;
	::java::lang::String GetStringExtra(const ::java::lang::String& arg0) const;
	::java::lang::String GetType() const;
	::jboolean HasCategory(const ::java::lang::String& arg0) const;
	::jboolean HasExtra(const ::java::lang::String& arg0) const;
	::jboolean HasFileDescriptors() const;
	static ::android::content::Intent MakeMainActivity(const ::android::content::ComponentName& arg0);
	static ::android::content::Intent MakeMainSelectorActivity(const ::java::lang::String& arg0, const ::java::lang::String& arg1);
	static ::android::content::Intent MakeRestartActivityTask(const ::android::content::ComponentName& arg0);
	static ::java::lang::String NormalizeMimeType(const ::java::lang::String& arg0);
	static ::android::content::Intent ParseIntent(const ::android::content::res::Resources& arg0, const ::org::xmlpull::v1::XmlPullParser& arg1, const ::android::util::AttributeSet& arg2);
	static ::android::content::Intent ParseUri(const ::java::lang::String& arg0, const ::jint& arg1);
	::android::content::Intent PutCharSequenceArrayListExtra(const ::java::lang::String& arg0, const ::java::util::ArrayList& arg1) const;
	::android::content::Intent PutExtra(const ::java::lang::String& arg0, const ::jbyte& arg1) const;
	::android::content::Intent PutExtra(const ::java::lang::String& arg0, const ::jchar& arg1) const;
	::android::content::Intent PutExtra(const ::java::lang::String& arg0, const ::jdouble& arg1) const;
	::android::content::Intent PutExtra(const ::java::lang::String& arg0, const ::jfloat& arg1) const;
	::android::content::Intent PutExtra(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::android::content::Intent PutExtra(const ::java::lang::String& arg0, const ::jlong& arg1) const;
	::android::content::Intent PutExtra(const ::java::lang::String& arg0, const ::android::os::Bundle& arg1) const;
	::android::content::Intent PutExtra(const ::java::lang::String& arg0, const ::android::os::Parcelable& arg1) const;
	::android::content::Intent PutExtra(const ::java::lang::String& arg0, const ::java::io::Serializable& arg1) const;
	::android::content::Intent PutExtra(const ::java::lang::String& arg0, const ::java::lang::CharSequence& arg1) const;
	::android::content::Intent PutExtra(const ::java::lang::String& arg0, const ::java::lang::String& arg1) const;
	::android::content::Intent PutExtra(const ::java::lang::String& arg0, const ::jshort& arg1) const;
	::android::content::Intent PutExtra(const ::java::lang::String& arg0, const ::jboolean& arg1) const;
	::android::content::Intent PutExtra(const ::java::lang::String& arg0, const jni::Array< ::jbyte >& arg1) const;
	::android::content::Intent PutExtra(const ::java::lang::String& arg0, const jni::Array< ::jchar >& arg1) const;
	::android::content::Intent PutExtra(const ::java::lang::String& arg0, const jni::Array< ::jdouble >& arg1) const;
	::android::content::Intent PutExtra(const ::java::lang::String& arg0, const jni::Array< ::jfloat >& arg1) const;
	::android::content::Intent PutExtra(const ::java::lang::String& arg0, const jni::Array< ::jint >& arg1) const;
	::android::content::Intent PutExtra(const ::java::lang::String& arg0, const jni::Array< ::jlong >& arg1) const;
	::android::content::Intent PutExtra(const ::java::lang::String& arg0, const jni::Array< ::android::os::Parcelable >& arg1) const;
	::android::content::Intent PutExtra(const ::java::lang::String& arg0, const jni::Array< ::java::lang::CharSequence >& arg1) const;
	::android::content::Intent PutExtra(const ::java::lang::String& arg0, const jni::Array< ::java::lang::String >& arg1) const;
	::android::content::Intent PutExtra(const ::java::lang::String& arg0, const jni::Array< ::jshort >& arg1) const;
	::android::content::Intent PutExtra(const ::java::lang::String& arg0, const jni::Array< ::jboolean >& arg1) const;
	::android::content::Intent PutExtras(const ::android::content::Intent& arg0) const;
	::android::content::Intent PutExtras(const ::android::os::Bundle& arg0) const;
	::android::content::Intent PutIntegerArrayListExtra(const ::java::lang::String& arg0, const ::java::util::ArrayList& arg1) const;
	::android::content::Intent PutParcelableArrayListExtra(const ::java::lang::String& arg0, const ::java::util::ArrayList& arg1) const;
	::android::content::Intent PutStringArrayListExtra(const ::java::lang::String& arg0, const ::java::util::ArrayList& arg1) const;
	::jvoid ReadFromParcel(const ::android::os::Parcel& arg0) const;
	::jvoid RemoveCategory(const ::java::lang::String& arg0) const;
	::jvoid RemoveExtra(const ::java::lang::String& arg0) const;
	::jvoid RemoveFlags(const ::jint& arg0) const;
	::android::content::Intent ReplaceExtras(const ::android::content::Intent& arg0) const;
	::android::content::Intent ReplaceExtras(const ::android::os::Bundle& arg0) const;
	::android::content::ComponentName ResolveActivity(const ::android::content::pm::PackageManager& arg0) const;
	::android::content::pm::ActivityInfo ResolveActivityInfo(const ::android::content::pm::PackageManager& arg0, const ::jint& arg1) const;
	::java::lang::String ResolveType(const ::android::content::ContentResolver& arg0) const;
	::java::lang::String ResolveType(const ::android::content::Context& arg0) const;
	::java::lang::String ResolveTypeIfNeeded(const ::android::content::ContentResolver& arg0) const;
	::android::content::Intent SetAction(const ::java::lang::String& arg0) const;
	::android::content::Intent SetClass(const ::android::content::Context& arg0, const ::java::lang::Class& arg1) const;
	::android::content::Intent SetClassName(const ::android::content::Context& arg0, const ::java::lang::String& arg1) const;
	::android::content::Intent SetClassName(const ::java::lang::String& arg0, const ::java::lang::String& arg1) const;
	::jvoid SetClipData(const ::android::content::ClipData& arg0) const;
	::android::content::Intent SetComponent(const ::android::content::ComponentName& arg0) const;
	::android::content::Intent SetData(const ::android::net::Uri& arg0) const;
	::android::content::Intent SetDataAndNormalize(const ::android::net::Uri& arg0) const;
	::android::content::Intent SetDataAndType(const ::android::net::Uri& arg0, const ::java::lang::String& arg1) const;
	::android::content::Intent SetDataAndTypeAndNormalize(const ::android::net::Uri& arg0, const ::java::lang::String& arg1) const;
	::jvoid SetExtrasClassLoader(const ::java::lang::ClassLoader& arg0) const;
	::android::content::Intent SetFlags(const ::jint& arg0) const;
	::android::content::Intent SetIdentifier(const ::java::lang::String& arg0) const;
	::android::content::Intent SetPackage(const ::java::lang::String& arg0) const;
	::jvoid SetSelector(const ::android::content::Intent& arg0) const;
	::jvoid SetSourceBounds(const ::android::graphics::Rect& arg0) const;
	::android::content::Intent SetType(const ::java::lang::String& arg0) const;
	::android::content::Intent SetTypeAndNormalize(const ::java::lang::String& arg0) const;
	::java::lang::String ToString() const;
	::java::lang::String ToURI() const;
	::java::lang::String ToUri(const ::jint& arg0) const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor();
	Intent() : ::java::lang::Object(__Constructor()) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::java::lang::Class& arg1);
	Intent(const ::android::content::Context& arg0, const ::java::lang::Class& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::lang::String& arg0);
	Intent(const ::java::lang::String& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::android::net::Uri& arg1);
	Intent(const ::java::lang::String& arg0, const ::android::net::Uri& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::android::net::Uri& arg1, const ::android::content::Context& arg2, const ::java::lang::Class& arg3);
	Intent(const ::java::lang::String& arg0, const ::android::net::Uri& arg1, const ::android::content::Context& arg2, const ::java::lang::Class& arg3) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3)) {}
	explicit Intent(jobject o) : ::java::lang::Object(o) {}
	Intent(const Intent& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace os { 
struct Parcelable : java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fCONTENTS_FILE_DESCRIPTOR();
	static ::jint& fPARCELABLE_WRITE_RETURN_VALUE();
	::jint DescribeContents() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit Parcelable(jobject o) : java::lang::Object(o) {}
	Parcelable(const Parcelable& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::os::Parcelable();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jint DescribeContents() = 0;
		virtual void WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) = 0;
	};
};

struct Parcel : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::android::os::Parcelable_Creator& fSTRING_CREATOR();
	::jvoid AppendFrom(const ::android::os::Parcel& arg0, const ::jint& arg1, const ::jint& arg2) const;
	jni::Array< ::android::os::IBinder > CreateBinderArray() const;
	::java::util::ArrayList CreateBinderArrayList() const;
	jni::Array< ::jboolean > CreateBooleanArray() const;
	jni::Array< ::jbyte > CreateByteArray() const;
	jni::Array< ::jchar > CreateCharArray() const;
	jni::Array< ::jdouble > CreateDoubleArray() const;
	jni::Array< ::jfloat > CreateFloatArray() const;
	jni::Array< ::jint > CreateIntArray() const;
	jni::Array< ::jlong > CreateLongArray() const;
	jni::Array< ::java::lang::String > CreateStringArray() const;
	::java::util::ArrayList CreateStringArrayList() const;
	jni::Array< ::java::lang::Object > CreateTypedArray(const ::android::os::Parcelable_Creator& arg0) const;
	::java::util::ArrayList CreateTypedArrayList(const ::android::os::Parcelable_Creator& arg0) const;
	::android::util::ArrayMap CreateTypedArrayMap(const ::android::os::Parcelable_Creator& arg0) const;
	::android::util::SparseArray CreateTypedSparseArray(const ::android::os::Parcelable_Creator& arg0) const;
	::jint DataAvail() const;
	::jint DataCapacity() const;
	::jint DataPosition() const;
	::jint DataSize() const;
	::jvoid EnforceInterface(const ::java::lang::String& arg0) const;
	::jvoid Finalize() const;
	::jboolean HasFileDescriptors() const;
	jni::Array< ::jbyte > Marshall() const;
	static ::android::os::Parcel Obtain();
	jni::Array< ::java::lang::Object > ReadArray(const ::java::lang::ClassLoader& arg0) const;
	::java::util::ArrayList ReadArrayList(const ::java::lang::ClassLoader& arg0) const;
	::jvoid ReadBinderArray(const jni::Array< ::android::os::IBinder >& arg0) const;
	::jvoid ReadBinderList(const ::java::util::List& arg0) const;
	::jboolean ReadBoolean() const;
	::jvoid ReadBooleanArray(const jni::Array< ::jboolean >& arg0) const;
	::android::os::Bundle ReadBundle() const;
	::android::os::Bundle ReadBundle(const ::java::lang::ClassLoader& arg0) const;
	::jbyte ReadByte() const;
	::jvoid ReadByteArray(const jni::Array< ::jbyte >& arg0) const;
	::jvoid ReadCharArray(const jni::Array< ::jchar >& arg0) const;
	::jdouble ReadDouble() const;
	::jvoid ReadDoubleArray(const jni::Array< ::jdouble >& arg0) const;
	::jvoid ReadException() const;
	::jvoid ReadException(const ::jint& arg0, const ::java::lang::String& arg1) const;
	::android::os::ParcelFileDescriptor ReadFileDescriptor() const;
	::jfloat ReadFloat() const;
	::jvoid ReadFloatArray(const jni::Array< ::jfloat >& arg0) const;
	::java::util::HashMap ReadHashMap(const ::java::lang::ClassLoader& arg0) const;
	::jint ReadInt() const;
	::jvoid ReadIntArray(const jni::Array< ::jint >& arg0) const;
	::jvoid ReadList(const ::java::util::List& arg0, const ::java::lang::ClassLoader& arg1) const;
	::jlong ReadLong() const;
	::jvoid ReadLongArray(const jni::Array< ::jlong >& arg0) const;
	::jvoid ReadMap(const ::java::util::Map& arg0, const ::java::lang::ClassLoader& arg1) const;
	::android::os::Parcelable ReadParcelable(const ::java::lang::ClassLoader& arg0) const;
	jni::Array< ::android::os::Parcelable > ReadParcelableArray(const ::java::lang::ClassLoader& arg0) const;
	::android::os::Parcelable_Creator ReadParcelableCreator(const ::java::lang::ClassLoader& arg0) const;
	::java::util::List ReadParcelableList(const ::java::util::List& arg0, const ::java::lang::ClassLoader& arg1) const;
	::android::os::PersistableBundle ReadPersistableBundle() const;
	::android::os::PersistableBundle ReadPersistableBundle(const ::java::lang::ClassLoader& arg0) const;
	::java::io::Serializable ReadSerializable() const;
	::android::util::Size ReadSize() const;
	::android::util::SizeF ReadSizeF() const;
	::android::util::SparseArray ReadSparseArray(const ::java::lang::ClassLoader& arg0) const;
	::android::util::SparseBooleanArray ReadSparseBooleanArray() const;
	::java::lang::String ReadString() const;
	::jvoid ReadStringArray(const jni::Array< ::java::lang::String >& arg0) const;
	::jvoid ReadStringList(const ::java::util::List& arg0) const;
	::android::os::IBinder ReadStrongBinder() const;
	::jvoid ReadTypedArray(const jni::Array< ::java::lang::Object >& arg0, const ::android::os::Parcelable_Creator& arg1) const;
	::jvoid ReadTypedList(const ::java::util::List& arg0, const ::android::os::Parcelable_Creator& arg1) const;
	::java::lang::Object ReadTypedObject(const ::android::os::Parcelable_Creator& arg0) const;
	::java::lang::Object ReadValue(const ::java::lang::ClassLoader& arg0) const;
	::jvoid Recycle() const;
	::jvoid SetDataCapacity(const ::jint& arg0) const;
	::jvoid SetDataPosition(const ::jint& arg0) const;
	::jvoid SetDataSize(const ::jint& arg0) const;
	::jvoid Unmarshall(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jvoid WriteArray(const jni::Array< ::java::lang::Object >& arg0) const;
	::jvoid WriteBinderArray(const jni::Array< ::android::os::IBinder >& arg0) const;
	::jvoid WriteBinderList(const ::java::util::List& arg0) const;
	::jvoid WriteBoolean(const ::jboolean& arg0) const;
	::jvoid WriteBooleanArray(const jni::Array< ::jboolean >& arg0) const;
	::jvoid WriteBundle(const ::android::os::Bundle& arg0) const;
	::jvoid WriteByte(const ::jbyte& arg0) const;
	::jvoid WriteByteArray(const jni::Array< ::jbyte >& arg0) const;
	::jvoid WriteByteArray(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jvoid WriteCharArray(const jni::Array< ::jchar >& arg0) const;
	::jvoid WriteDouble(const ::jdouble& arg0) const;
	::jvoid WriteDoubleArray(const jni::Array< ::jdouble >& arg0) const;
	::jvoid WriteException(const ::java::lang::Exception& arg0) const;
	::jvoid WriteFileDescriptor(const ::java::io::FileDescriptor& arg0) const;
	::jvoid WriteFloat(const ::jfloat& arg0) const;
	::jvoid WriteFloatArray(const jni::Array< ::jfloat >& arg0) const;
	::jvoid WriteInt(const ::jint& arg0) const;
	::jvoid WriteIntArray(const jni::Array< ::jint >& arg0) const;
	::jvoid WriteInterfaceToken(const ::java::lang::String& arg0) const;
	::jvoid WriteList(const ::java::util::List& arg0) const;
	::jvoid WriteLong(const ::jlong& arg0) const;
	::jvoid WriteLongArray(const jni::Array< ::jlong >& arg0) const;
	::jvoid WriteMap(const ::java::util::Map& arg0) const;
	::jvoid WriteNoException() const;
	::jvoid WriteParcelable(const ::android::os::Parcelable& arg0, const ::jint& arg1) const;
	::jvoid WriteParcelableArray(const jni::Array< ::android::os::Parcelable >& arg0, const ::jint& arg1) const;
	::jvoid WriteParcelableCreator(const ::android::os::Parcelable& arg0) const;
	::jvoid WriteParcelableList(const ::java::util::List& arg0, const ::jint& arg1) const;
	::jvoid WritePersistableBundle(const ::android::os::PersistableBundle& arg0) const;
	::jvoid WriteSerializable(const ::java::io::Serializable& arg0) const;
	::jvoid WriteSize(const ::android::util::Size& arg0) const;
	::jvoid WriteSizeF(const ::android::util::SizeF& arg0) const;
	::jvoid WriteSparseArray(const ::android::util::SparseArray& arg0) const;
	::jvoid WriteSparseBooleanArray(const ::android::util::SparseBooleanArray& arg0) const;
	::jvoid WriteString(const ::java::lang::String& arg0) const;
	::jvoid WriteStringArray(const jni::Array< ::java::lang::String >& arg0) const;
	::jvoid WriteStringList(const ::java::util::List& arg0) const;
	::jvoid WriteStrongBinder(const ::android::os::IBinder& arg0) const;
	::jvoid WriteStrongInterface(const ::android::os::IInterface& arg0) const;
	::jvoid WriteTypedArray(const jni::Array< ::android::os::Parcelable >& arg0, const ::jint& arg1) const;
	::jvoid WriteTypedArrayMap(const ::android::util::ArrayMap& arg0, const ::jint& arg1) const;
	::jvoid WriteTypedList(const ::java::util::List& arg0) const;
	::jvoid WriteTypedObject(const ::android::os::Parcelable& arg0, const ::jint& arg1) const;
	::jvoid WriteTypedSparseArray(const ::android::util::SparseArray& arg0, const ::jint& arg1) const;
	::jvoid WriteValue(const ::java::lang::Object& arg0) const;
	explicit Parcel(jobject o) : ::java::lang::Object(o) {}
	Parcel(const Parcel& o)  : ::java::lang::Object(o) {}

};

struct Parcelable_Creator : java::lang::Object
{
	static jni::Class __CLASS;

	::java::lang::Object CreateFromParcel(const ::android::os::Parcel& arg0) const;
	jni::Array< ::java::lang::Object > NewArray(const ::jint& arg0) const;
	explicit Parcelable_Creator(jobject o) : java::lang::Object(o) {}
	Parcelable_Creator(const Parcelable_Creator& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::os::Parcelable_Creator();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::lang::Object CreateFromParcel(const ::android::os::Parcel& arg0) = 0;
		virtual jni::Array< ::java::lang::Object > NewArray(const ::jint& arg0) = 0;
	};
};

struct IBinder : java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fDUMP_TRANSACTION();
	static ::jint& fFIRST_CALL_TRANSACTION();
	static ::jint& fFLAG_ONEWAY();
	static ::jint& fINTERFACE_TRANSACTION();
	static ::jint& fLAST_CALL_TRANSACTION();
	static ::jint& fLIKE_TRANSACTION();
	static ::jint& fPING_TRANSACTION();
	static ::jint& fTWEET_TRANSACTION();
	::jvoid Dump(const ::java::io::FileDescriptor& arg0, const jni::Array< ::java::lang::String >& arg1) const;
	::jvoid DumpAsync(const ::java::io::FileDescriptor& arg0, const jni::Array< ::java::lang::String >& arg1) const;
	::java::lang::String GetInterfaceDescriptor() const;
	static ::jint GetSuggestedMaxIpcSizeBytes();
	::jboolean IsBinderAlive() const;
	::jvoid LinkToDeath(const ::android::os::IBinder_DeathRecipient& arg0, const ::jint& arg1) const;
	::jboolean PingBinder() const;
	::android::os::IInterface QueryLocalInterface(const ::java::lang::String& arg0) const;
	::jboolean Transact(const ::jint& arg0, const ::android::os::Parcel& arg1, const ::android::os::Parcel& arg2, const ::jint& arg3) const;
	::jboolean UnlinkToDeath(const ::android::os::IBinder_DeathRecipient& arg0, const ::jint& arg1) const;
	explicit IBinder(jobject o) : java::lang::Object(o) {}
	IBinder(const IBinder& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::os::IBinder();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void Dump(const ::java::io::FileDescriptor& arg0, const jni::Array< ::java::lang::String >& arg1) = 0;
		virtual void DumpAsync(const ::java::io::FileDescriptor& arg0, const jni::Array< ::java::lang::String >& arg1) = 0;
		virtual ::java::lang::String GetInterfaceDescriptor() = 0;
		virtual ::jboolean IsBinderAlive() = 0;
		virtual void LinkToDeath(const ::android::os::IBinder_DeathRecipient& arg0, const ::jint& arg1) = 0;
		virtual ::jboolean PingBinder() = 0;
		virtual ::android::os::IInterface QueryLocalInterface(const ::java::lang::String& arg0) = 0;
		virtual ::jboolean Transact(const ::jint& arg0, const ::android::os::Parcel& arg1, const ::android::os::Parcel& arg2, const ::jint& arg3) = 0;
		virtual ::jboolean UnlinkToDeath(const ::android::os::IBinder_DeathRecipient& arg0, const ::jint& arg1) = 0;
	};
};

}}

namespace java { namespace io { 
struct FileDescriptor : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::java::io::FileDescriptor& fErr();
	static ::java::io::FileDescriptor& fIn();
	static ::java::io::FileDescriptor& fOut();
	::jvoid Sync() const;
	::jboolean Valid() const;
	static jobject __Constructor();
	FileDescriptor() : ::java::lang::Object(__Constructor()) {}
	explicit FileDescriptor(jobject o) : ::java::lang::Object(o) {}
	FileDescriptor(const FileDescriptor& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace os { 
struct IBinder_DeathRecipient : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid BinderDied() const;
	explicit IBinder_DeathRecipient(jobject o) : java::lang::Object(o) {}
	IBinder_DeathRecipient(const IBinder_DeathRecipient& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::os::IBinder_DeathRecipient();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void BinderDied() = 0;
	};
};

struct IInterface : java::lang::Object
{
	static jni::Class __CLASS;

	::android::os::IBinder AsBinder() const;
	explicit IInterface(jobject o) : java::lang::Object(o) {}
	IInterface(const IInterface& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::os::IInterface();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::android::os::IBinder AsBinder() = 0;
	};
};

}}

namespace java { namespace util { 
struct AbstractCollection : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::util::Collection();
	::jboolean Add(const ::java::lang::Object& arg0) const;
	::jboolean AddAll(const ::java::util::Collection& arg0) const;
	::jvoid Clear() const;
	::jboolean Contains(const ::java::lang::Object& arg0) const;
	::jboolean ContainsAll(const ::java::util::Collection& arg0) const;
	::jboolean IsEmpty() const;
	::java::util::Iterator Iterator() const;
	::jboolean Remove(const ::java::lang::Object& arg0) const;
	::jboolean RemoveAll(const ::java::util::Collection& arg0) const;
	::jboolean RetainAll(const ::java::util::Collection& arg0) const;
	::jint Size() const;
	jni::Array< ::java::lang::Object > ToArray() const;
	jni::Array< ::java::lang::Object > ToArray(const jni::Array< ::java::lang::Object >& arg0) const;
	::java::lang::String ToString() const;
	static jobject __Constructor();
	AbstractCollection() : ::java::lang::Object(__Constructor()) {}
	explicit AbstractCollection(jobject o) : ::java::lang::Object(o) {}
	AbstractCollection(const AbstractCollection& o)  : ::java::lang::Object(o) {}

};

struct AbstractList : ::java::util::AbstractCollection
{
	static jni::Class __CLASS;

	operator ::java::util::List();
	::jint fModCount() const;
	void fModCount(const ::jint& arg0) const;
	::jvoid Add(const ::jint& arg0, const ::java::lang::Object& arg1) const;
	::jboolean Add(const ::java::lang::Object& arg0) const;
	::jboolean AddAll(const ::jint& arg0, const ::java::util::Collection& arg1) const;
	::jvoid Clear() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::lang::Object Get(const ::jint& arg0) const;
	::jint HashCode() const;
	::jint IndexOf(const ::java::lang::Object& arg0) const;
	::java::util::Iterator Iterator() const;
	::jint LastIndexOf(const ::java::lang::Object& arg0) const;
	::java::util::ListIterator ListIterator() const;
	::java::util::ListIterator ListIterator(const ::jint& arg0) const;
	::java::lang::Object Remove(const ::jint& arg0) const;
	::jvoid RemoveRange(const ::jint& arg0, const ::jint& arg1) const;
	::java::lang::Object Set(const ::jint& arg0, const ::java::lang::Object& arg1) const;
	::java::util::List SubList(const ::jint& arg0, const ::jint& arg1) const;
	static jobject __Constructor();
	AbstractList() : ::java::util::AbstractCollection(__Constructor()) {}
	explicit AbstractList(jobject o) : ::java::util::AbstractCollection(o) {}
	AbstractList(const AbstractList& o)  : ::java::util::AbstractCollection(o) {}

};

struct ArrayList : ::java::util::AbstractList
{
	static jni::Class __CLASS;

	operator ::java::util::List();
	operator ::java::util::RandomAccess();
	operator ::java::lang::Cloneable();
	operator ::java::io::Serializable();
	::jvoid Add(const ::jint& arg0, const ::java::lang::Object& arg1) const;
	::jboolean Add(const ::java::lang::Object& arg0) const;
	::jboolean AddAll(const ::jint& arg0, const ::java::util::Collection& arg1) const;
	::jboolean AddAll(const ::java::util::Collection& arg0) const;
	::jvoid Clear() const;
	::java::lang::Object Clone() const;
	::jboolean Contains(const ::java::lang::Object& arg0) const;
	::jvoid EnsureCapacity(const ::jint& arg0) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jvoid ForEach(const ::java::util::function::Consumer& arg0) const;
	::java::lang::Object Get(const ::jint& arg0) const;
	::jint HashCode() const;
	::jint IndexOf(const ::java::lang::Object& arg0) const;
	::jboolean IsEmpty() const;
	::java::util::Iterator Iterator() const;
	::jint LastIndexOf(const ::java::lang::Object& arg0) const;
	::java::util::ListIterator ListIterator() const;
	::java::util::ListIterator ListIterator(const ::jint& arg0) const;
	::java::lang::Object Remove(const ::jint& arg0) const;
	::jboolean Remove(const ::java::lang::Object& arg0) const;
	::jboolean RemoveAll(const ::java::util::Collection& arg0) const;
	::jboolean RemoveIf(const ::java::util::function::Predicate& arg0) const;
	::jvoid RemoveRange(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid ReplaceAll(const ::java::util::function::UnaryOperator& arg0) const;
	::jboolean RetainAll(const ::java::util::Collection& arg0) const;
	::java::lang::Object Set(const ::jint& arg0, const ::java::lang::Object& arg1) const;
	::jint Size() const;
	::jvoid Sort(const ::java::util::Comparator& arg0) const;
	::java::util::Spliterator Spliterator() const;
	::java::util::List SubList(const ::jint& arg0, const ::jint& arg1) const;
	jni::Array< ::java::lang::Object > ToArray() const;
	jni::Array< ::java::lang::Object > ToArray(const jni::Array< ::java::lang::Object >& arg0) const;
	::jvoid TrimToSize() const;
	static jobject __Constructor();
	ArrayList() : ::java::util::AbstractList(__Constructor()) {}
	static jobject __Constructor(const ::jint& arg0);
	ArrayList(const ::jint& arg0) : ::java::util::AbstractList(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::util::Collection& arg0);
	ArrayList(const ::java::util::Collection& arg0) : ::java::util::AbstractList(__Constructor(arg0)) {}
	explicit ArrayList(jobject o) : ::java::util::AbstractList(o) {}
	ArrayList(const ArrayList& o)  : ::java::util::AbstractList(o) {}

};

struct RandomAccess : java::lang::Object
{
	static jni::Class __CLASS;

	explicit RandomAccess(jobject o) : java::lang::Object(o) {}
	RandomAccess(const RandomAccess& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::RandomAccess();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
	};
};

}}

namespace android { namespace util { 
struct ArrayMap : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::util::Map();
	::jvoid Clear() const;
	::jboolean ContainsAll(const ::java::util::Collection& arg0) const;
	::jboolean ContainsKey(const ::java::lang::Object& arg0) const;
	::jboolean ContainsValue(const ::java::lang::Object& arg0) const;
	::jvoid EnsureCapacity(const ::jint& arg0) const;
	::java::util::Set EntrySet() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::lang::Object Get(const ::java::lang::Object& arg0) const;
	::jint HashCode() const;
	::jint IndexOfKey(const ::java::lang::Object& arg0) const;
	::jint IndexOfValue(const ::java::lang::Object& arg0) const;
	::jboolean IsEmpty() const;
	::java::lang::Object KeyAt(const ::jint& arg0) const;
	::java::util::Set KeySet() const;
	::java::lang::Object Put(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) const;
	::jvoid PutAll(const ::android::util::ArrayMap& arg0) const;
	::jvoid PutAll(const ::java::util::Map& arg0) const;
	::java::lang::Object Remove(const ::java::lang::Object& arg0) const;
	::jboolean RemoveAll(const ::java::util::Collection& arg0) const;
	::java::lang::Object RemoveAt(const ::jint& arg0) const;
	::jboolean RetainAll(const ::java::util::Collection& arg0) const;
	::java::lang::Object SetValueAt(const ::jint& arg0, const ::java::lang::Object& arg1) const;
	::jint Size() const;
	::java::lang::String ToString() const;
	::java::lang::Object ValueAt(const ::jint& arg0) const;
	::java::util::Collection Values() const;
	static jobject __Constructor();
	ArrayMap() : ::java::lang::Object(__Constructor()) {}
	static jobject __Constructor(const ::jint& arg0);
	ArrayMap(const ::jint& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit ArrayMap(jobject o) : ::java::lang::Object(o) {}
	ArrayMap(const ArrayMap& o)  : ::java::lang::Object(o) {}

};

struct SparseArray : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::Cloneable();
	::jvoid Append(const ::jint& arg0, const ::java::lang::Object& arg1) const;
	::jvoid Clear() const;
	::android::util::SparseArray Clone() const;
	::jboolean Contains(const ::jint& arg0) const;
	::jboolean ContentEquals(const ::android::util::SparseArray& arg0) const;
	::jint ContentHashCode() const;
	::jvoid Delete(const ::jint& arg0) const;
	::java::lang::Object Get(const ::jint& arg0) const;
	::java::lang::Object Get(const ::jint& arg0, const ::java::lang::Object& arg1) const;
	::jint IndexOfKey(const ::jint& arg0) const;
	::jint IndexOfValue(const ::java::lang::Object& arg0) const;
	::jint KeyAt(const ::jint& arg0) const;
	::jvoid Put(const ::jint& arg0, const ::java::lang::Object& arg1) const;
	::jvoid Remove(const ::jint& arg0) const;
	::jvoid RemoveAt(const ::jint& arg0) const;
	::jvoid RemoveAtRange(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid Set(const ::jint& arg0, const ::java::lang::Object& arg1) const;
	::jvoid SetValueAt(const ::jint& arg0, const ::java::lang::Object& arg1) const;
	::jint Size() const;
	::java::lang::String ToString() const;
	::java::lang::Object ValueAt(const ::jint& arg0) const;
	static jobject __Constructor();
	SparseArray() : ::java::lang::Object(__Constructor()) {}
	static jobject __Constructor(const ::jint& arg0);
	SparseArray(const ::jint& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit SparseArray(jobject o) : ::java::lang::Object(o) {}
	SparseArray(const SparseArray& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace os { 
struct BaseBundle : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid Clear() const;
	::jboolean ContainsKey(const ::java::lang::String& arg0) const;
	::java::lang::Object Get(const ::java::lang::String& arg0) const;
	::jboolean GetBoolean(const ::java::lang::String& arg0) const;
	::jboolean GetBoolean(const ::java::lang::String& arg0, const ::jboolean& arg1) const;
	jni::Array< ::jboolean > GetBooleanArray(const ::java::lang::String& arg0) const;
	::jdouble GetDouble(const ::java::lang::String& arg0) const;
	::jdouble GetDouble(const ::java::lang::String& arg0, const ::jdouble& arg1) const;
	jni::Array< ::jdouble > GetDoubleArray(const ::java::lang::String& arg0) const;
	::jint GetInt(const ::java::lang::String& arg0) const;
	::jint GetInt(const ::java::lang::String& arg0, const ::jint& arg1) const;
	jni::Array< ::jint > GetIntArray(const ::java::lang::String& arg0) const;
	::jlong GetLong(const ::java::lang::String& arg0) const;
	::jlong GetLong(const ::java::lang::String& arg0, const ::jlong& arg1) const;
	jni::Array< ::jlong > GetLongArray(const ::java::lang::String& arg0) const;
	::java::lang::String GetString(const ::java::lang::String& arg0) const;
	::java::lang::String GetString(const ::java::lang::String& arg0, const ::java::lang::String& arg1) const;
	jni::Array< ::java::lang::String > GetStringArray(const ::java::lang::String& arg0) const;
	::jboolean IsEmpty() const;
	::java::util::Set KeySet() const;
	::jvoid PutAll(const ::android::os::PersistableBundle& arg0) const;
	::jvoid PutBoolean(const ::java::lang::String& arg0, const ::jboolean& arg1) const;
	::jvoid PutBooleanArray(const ::java::lang::String& arg0, const jni::Array< ::jboolean >& arg1) const;
	::jvoid PutDouble(const ::java::lang::String& arg0, const ::jdouble& arg1) const;
	::jvoid PutDoubleArray(const ::java::lang::String& arg0, const jni::Array< ::jdouble >& arg1) const;
	::jvoid PutInt(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::jvoid PutIntArray(const ::java::lang::String& arg0, const jni::Array< ::jint >& arg1) const;
	::jvoid PutLong(const ::java::lang::String& arg0, const ::jlong& arg1) const;
	::jvoid PutLongArray(const ::java::lang::String& arg0, const jni::Array< ::jlong >& arg1) const;
	::jvoid PutString(const ::java::lang::String& arg0, const ::java::lang::String& arg1) const;
	::jvoid PutStringArray(const ::java::lang::String& arg0, const jni::Array< ::java::lang::String >& arg1) const;
	::jvoid Remove(const ::java::lang::String& arg0) const;
	::jint Size() const;
	explicit BaseBundle(jobject o) : ::java::lang::Object(o) {}
	BaseBundle(const BaseBundle& o)  : ::java::lang::Object(o) {}

};

struct Bundle : ::android::os::BaseBundle
{
	static jni::Class __CLASS;

	operator ::java::lang::Cloneable();
	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::android::os::Bundle& fEMPTY();
	::jvoid Clear() const;
	::java::lang::Object Clone() const;
	::android::os::Bundle DeepCopy() const;
	::jint DescribeContents() const;
	::android::os::IBinder GetBinder(const ::java::lang::String& arg0) const;
	::android::os::Bundle GetBundle(const ::java::lang::String& arg0) const;
	::jbyte GetByte(const ::java::lang::String& arg0) const;
	::java::lang::Byte GetByte(const ::java::lang::String& arg0, const ::jbyte& arg1) const;
	jni::Array< ::jbyte > GetByteArray(const ::java::lang::String& arg0) const;
	::jchar GetChar(const ::java::lang::String& arg0) const;
	::jchar GetChar(const ::java::lang::String& arg0, const ::jchar& arg1) const;
	jni::Array< ::jchar > GetCharArray(const ::java::lang::String& arg0) const;
	::java::lang::CharSequence GetCharSequence(const ::java::lang::String& arg0) const;
	::java::lang::CharSequence GetCharSequence(const ::java::lang::String& arg0, const ::java::lang::CharSequence& arg1) const;
	jni::Array< ::java::lang::CharSequence > GetCharSequenceArray(const ::java::lang::String& arg0) const;
	::java::util::ArrayList GetCharSequenceArrayList(const ::java::lang::String& arg0) const;
	::java::lang::ClassLoader GetClassLoader() const;
	::jfloat GetFloat(const ::java::lang::String& arg0) const;
	::jfloat GetFloat(const ::java::lang::String& arg0, const ::jfloat& arg1) const;
	jni::Array< ::jfloat > GetFloatArray(const ::java::lang::String& arg0) const;
	::java::util::ArrayList GetIntegerArrayList(const ::java::lang::String& arg0) const;
	::android::os::Parcelable GetParcelable(const ::java::lang::String& arg0) const;
	jni::Array< ::android::os::Parcelable > GetParcelableArray(const ::java::lang::String& arg0) const;
	::java::util::ArrayList GetParcelableArrayList(const ::java::lang::String& arg0) const;
	::java::io::Serializable GetSerializable(const ::java::lang::String& arg0) const;
	::jshort GetShort(const ::java::lang::String& arg0) const;
	::jshort GetShort(const ::java::lang::String& arg0, const ::jshort& arg1) const;
	jni::Array< ::jshort > GetShortArray(const ::java::lang::String& arg0) const;
	::android::util::Size GetSize(const ::java::lang::String& arg0) const;
	::android::util::SizeF GetSizeF(const ::java::lang::String& arg0) const;
	::android::util::SparseArray GetSparseParcelableArray(const ::java::lang::String& arg0) const;
	::java::util::ArrayList GetStringArrayList(const ::java::lang::String& arg0) const;
	::jboolean HasFileDescriptors() const;
	::jvoid PutAll(const ::android::os::Bundle& arg0) const;
	::jvoid PutBinder(const ::java::lang::String& arg0, const ::android::os::IBinder& arg1) const;
	::jvoid PutBundle(const ::java::lang::String& arg0, const ::android::os::Bundle& arg1) const;
	::jvoid PutByte(const ::java::lang::String& arg0, const ::jbyte& arg1) const;
	::jvoid PutByteArray(const ::java::lang::String& arg0, const jni::Array< ::jbyte >& arg1) const;
	::jvoid PutChar(const ::java::lang::String& arg0, const ::jchar& arg1) const;
	::jvoid PutCharArray(const ::java::lang::String& arg0, const jni::Array< ::jchar >& arg1) const;
	::jvoid PutCharSequence(const ::java::lang::String& arg0, const ::java::lang::CharSequence& arg1) const;
	::jvoid PutCharSequenceArray(const ::java::lang::String& arg0, const jni::Array< ::java::lang::CharSequence >& arg1) const;
	::jvoid PutCharSequenceArrayList(const ::java::lang::String& arg0, const ::java::util::ArrayList& arg1) const;
	::jvoid PutFloat(const ::java::lang::String& arg0, const ::jfloat& arg1) const;
	::jvoid PutFloatArray(const ::java::lang::String& arg0, const jni::Array< ::jfloat >& arg1) const;
	::jvoid PutIntegerArrayList(const ::java::lang::String& arg0, const ::java::util::ArrayList& arg1) const;
	::jvoid PutParcelable(const ::java::lang::String& arg0, const ::android::os::Parcelable& arg1) const;
	::jvoid PutParcelableArray(const ::java::lang::String& arg0, const jni::Array< ::android::os::Parcelable >& arg1) const;
	::jvoid PutParcelableArrayList(const ::java::lang::String& arg0, const ::java::util::ArrayList& arg1) const;
	::jvoid PutSerializable(const ::java::lang::String& arg0, const ::java::io::Serializable& arg1) const;
	::jvoid PutShort(const ::java::lang::String& arg0, const ::jshort& arg1) const;
	::jvoid PutShortArray(const ::java::lang::String& arg0, const jni::Array< ::jshort >& arg1) const;
	::jvoid PutSize(const ::java::lang::String& arg0, const ::android::util::Size& arg1) const;
	::jvoid PutSizeF(const ::java::lang::String& arg0, const ::android::util::SizeF& arg1) const;
	::jvoid PutSparseParcelableArray(const ::java::lang::String& arg0, const ::android::util::SparseArray& arg1) const;
	::jvoid PutStringArrayList(const ::java::lang::String& arg0, const ::java::util::ArrayList& arg1) const;
	::jvoid ReadFromParcel(const ::android::os::Parcel& arg0) const;
	::jvoid Remove(const ::java::lang::String& arg0) const;
	::jvoid SetClassLoader(const ::java::lang::ClassLoader& arg0) const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor();
	Bundle() : ::android::os::BaseBundle(__Constructor()) { __Initialize(); }
	static jobject __Constructor(const ::jint& arg0);
	Bundle(const ::jint& arg0) : ::android::os::BaseBundle(__Constructor(arg0)) { __Initialize(); }
	static jobject __Constructor(const ::android::os::PersistableBundle& arg0);
	Bundle(const ::android::os::PersistableBundle& arg0) : ::android::os::BaseBundle(__Constructor(arg0)) { __Initialize(); }
	static jobject __Constructor(const ::java::lang::ClassLoader& arg0);
	Bundle(const ::java::lang::ClassLoader& arg0) : ::android::os::BaseBundle(__Constructor(arg0)) { __Initialize(); }
	explicit Bundle(jobject o) : ::android::os::BaseBundle(o) { __Initialize(); }
	Bundle(const Bundle& o)  : ::android::os::BaseBundle(o) { __Initialize(); }
// --------------------------------------------------------
// API-21 moved these functions to BaseBundle but that
// class is not available in earlier versions of android
// --------------------------------------------------------
// Copied from android::os::BaseBundle
// --------------------------------------------------------
::java::lang::Object Get(const ::java::lang::String& arg0) const;
::jboolean GetBoolean(const ::java::lang::String& arg0) const;
::jboolean GetBoolean(const ::java::lang::String& arg0, const ::jboolean& arg1) const;
::jvoid PutBoolean(const ::java::lang::String& arg0, const ::jboolean& arg1) const;
::jint GetInt(const ::java::lang::String& arg0) const;
::jint GetInt(const ::java::lang::String& arg0, const ::jint& arg1) const;
::jvoid PutInt(const ::java::lang::String& arg0, const ::jint& arg1) const;
::jlong GetLong(const ::java::lang::String& arg0, const ::jlong& arg1) const;
::jlong GetLong(const ::java::lang::String& arg0) const;
::jvoid PutLong(const ::java::lang::String& arg0, const ::jlong& arg1) const;
::jdouble GetDouble(const ::java::lang::String& arg0) const;
::jdouble GetDouble(const ::java::lang::String& arg0, const ::jdouble& arg1) const;
::jvoid PutDouble(const ::java::lang::String& arg0, const ::jdouble& arg1) const;
::jboolean IsEmpty() const;
::jint Size() const;
::jvoid PutAll(const ::android::os::PersistableBundle& arg0) const;
::java::util::Set KeySet() const;
::jboolean ContainsKey(const ::java::lang::String& arg0) const;
::java::lang::String GetString(const ::java::lang::String& arg0, const ::java::lang::String& arg1) const;
::java::lang::String GetString(const ::java::lang::String& arg0) const;
jni::Array< ::jlong > GetLongArray(const ::java::lang::String& arg0) const;
::jvoid PutString(const ::java::lang::String& arg0, const ::java::lang::String& arg1) const;
::jvoid PutLongArray(const ::java::lang::String& arg0, const jni::Array< ::jlong >& arg1) const;
::jvoid PutStringArray(const ::java::lang::String& arg0, const jni::Array< ::java::lang::String >& arg1) const;
jni::Array< ::jint > GetIntArray(const ::java::lang::String& arg0) const;
::jvoid PutIntArray(const ::java::lang::String& arg0, const jni::Array< ::jint >& arg1) const;
::jvoid PutBooleanArray(const ::java::lang::String& arg0, const jni::Array< ::jboolean >& arg1) const;
::jvoid PutDoubleArray(const ::java::lang::String& arg0, const jni::Array< ::jdouble >& arg1) const;
jni::Array< ::jboolean > GetBooleanArray(const ::java::lang::String& arg0) const;
jni::Array< ::jdouble > GetDoubleArray(const ::java::lang::String& arg0) const;
jni::Array< ::java::lang::String > GetStringArray(const ::java::lang::String& arg0) const;
private:
	void __Initialize();

};

struct PersistableBundle : ::android::os::BaseBundle
{
	static jni::Class __CLASS;

	operator ::java::lang::Cloneable();
	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::android::os::PersistableBundle& fEMPTY();
	::java::lang::Object Clone() const;
	::android::os::PersistableBundle DeepCopy() const;
	::jint DescribeContents() const;
	::android::os::PersistableBundle GetPersistableBundle(const ::java::lang::String& arg0) const;
	::jvoid PutPersistableBundle(const ::java::lang::String& arg0, const ::android::os::PersistableBundle& arg1) const;
	static ::android::os::PersistableBundle ReadFromStream(const ::java::io::InputStream& arg0);
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	::jvoid WriteToStream(const ::java::io::OutputStream& arg0) const;
	static jobject __Constructor();
	PersistableBundle() : ::android::os::BaseBundle(__Constructor()) {}
	static jobject __Constructor(const ::jint& arg0);
	PersistableBundle(const ::jint& arg0) : ::android::os::BaseBundle(__Constructor(arg0)) {}
	explicit PersistableBundle(jobject o) : ::android::os::BaseBundle(o) {}
	PersistableBundle(const PersistableBundle& o)  : ::android::os::BaseBundle(o) {}

};

}}

namespace java { namespace lang { 
struct Byte : ::java::lang::Number
{
	static jni::Class __CLASS;

	operator ::java::lang::Comparable();
	static ::jint& fBYTES();
	static ::jbyte& fMAX_VALUE();
	static ::jbyte& fMIN_VALUE();
	static ::jint& fSIZE();
	static ::java::lang::Class& fTYPE();
	::jbyte ByteValue() const;
	static ::jint Compare(const ::jbyte& arg0, const ::jbyte& arg1);
	::jint CompareTo(const ::java::lang::Byte& arg0) const;
	static ::jint CompareUnsigned(const ::jbyte& arg0, const ::jbyte& arg1);
	static ::java::lang::Byte Decode(const ::java::lang::String& arg0);
	::jdouble DoubleValue() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jfloat FloatValue() const;
	::jint HashCode() const;
	static ::jint HashCode(const ::jbyte& arg0);
	::jint IntValue() const;
	::jlong LongValue() const;
	static ::jbyte ParseByte(const ::java::lang::String& arg0);
	static ::jbyte ParseByte(const ::java::lang::String& arg0, const ::jint& arg1);
	::jshort ShortValue() const;
	::java::lang::String ToString() const;
	static ::java::lang::String ToString(const ::jbyte& arg0);
	static ::jint ToUnsignedInt(const ::jbyte& arg0);
	static ::jlong ToUnsignedLong(const ::jbyte& arg0);
	static ::java::lang::Byte ValueOf(const ::jbyte& arg0);
	static ::java::lang::Byte ValueOf(const ::java::lang::String& arg0);
	static ::java::lang::Byte ValueOf(const ::java::lang::String& arg0, const ::jint& arg1);
	static jobject __Constructor(const ::jbyte& arg0);
	Byte(const ::jbyte& arg0) : ::java::lang::Number(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::String& arg0);
	Byte(const ::java::lang::String& arg0) : ::java::lang::Number(__Constructor(arg0)) {}
	explicit Byte(jobject o) : ::java::lang::Number(o) {}
	Byte(const Byte& o)  : ::java::lang::Number(o) {}

};

}}

namespace android { namespace util { 
struct Size : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint GetHeight() const;
	::jint GetWidth() const;
	::jint HashCode() const;
	static ::android::util::Size ParseSize(const ::java::lang::String& arg0);
	::java::lang::String ToString() const;
	static jobject __Constructor(const ::jint& arg0, const ::jint& arg1);
	Size(const ::jint& arg0, const ::jint& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit Size(jobject o) : ::java::lang::Object(o) {}
	Size(const Size& o)  : ::java::lang::Object(o) {}

};

struct SizeF : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jfloat GetHeight() const;
	::jfloat GetWidth() const;
	::jint HashCode() const;
	static ::android::util::SizeF ParseSizeF(const ::java::lang::String& arg0);
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor(const ::jfloat& arg0, const ::jfloat& arg1);
	SizeF(const ::jfloat& arg0, const ::jfloat& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit SizeF(jobject o) : ::java::lang::Object(o) {}
	SizeF(const SizeF& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace os { 
struct ParcelFileDescriptor : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	operator ::java::io::Closeable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fMODE_APPEND();
	static ::jint& fMODE_CREATE();
	static ::jint& fMODE_READ_ONLY();
	static ::jint& fMODE_READ_WRITE();
	static ::jint& fMODE_TRUNCATE();
	static ::jint& fMODE_WORLD_READABLE();
	static ::jint& fMODE_WORLD_WRITEABLE();
	static ::jint& fMODE_WRITE_ONLY();
	static ::android::os::ParcelFileDescriptor AdoptFd(const ::jint& arg0);
	::jboolean CanDetectErrors() const;
	::jvoid CheckError() const;
	::jvoid Close() const;
	::jvoid CloseWithError(const ::java::lang::String& arg0) const;
	static jni::Array< ::android::os::ParcelFileDescriptor > CreatePipe();
	static jni::Array< ::android::os::ParcelFileDescriptor > CreateReliablePipe();
	static jni::Array< ::android::os::ParcelFileDescriptor > CreateReliableSocketPair();
	static jni::Array< ::android::os::ParcelFileDescriptor > CreateSocketPair();
	::jint DescribeContents() const;
	::jint DetachFd() const;
	::android::os::ParcelFileDescriptor Dup() const;
	static ::android::os::ParcelFileDescriptor Dup(const ::java::io::FileDescriptor& arg0);
	::jvoid Finalize() const;
	static ::android::os::ParcelFileDescriptor FromDatagramSocket(const ::java::net::DatagramSocket& arg0);
	static ::android::os::ParcelFileDescriptor FromFd(const ::jint& arg0);
	static ::android::os::ParcelFileDescriptor FromSocket(const ::java::net::Socket& arg0);
	::jint GetFd() const;
	::java::io::FileDescriptor GetFileDescriptor() const;
	::jlong GetStatSize() const;
	static ::android::os::ParcelFileDescriptor Open(const ::java::io::File& arg0, const ::jint& arg1);
	static ::android::os::ParcelFileDescriptor Open(const ::java::io::File& arg0, const ::jint& arg1, const ::android::os::Handler& arg2, const ::android::os::ParcelFileDescriptor_OnCloseListener& arg3);
	static ::jint ParseMode(const ::java::lang::String& arg0);
	::java::lang::String ToString() const;
	static ::android::os::ParcelFileDescriptor Wrap(const ::android::os::ParcelFileDescriptor& arg0, const ::android::os::Handler& arg1, const ::android::os::ParcelFileDescriptor_OnCloseListener& arg2);
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit ParcelFileDescriptor(jobject o) : ::java::lang::Object(o) {}
	ParcelFileDescriptor(const ParcelFileDescriptor& o)  : ::java::lang::Object(o) {}

};

}}

namespace java { namespace net { 
struct DatagramSocket : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Closeable();
	::jvoid Bind(const ::java::net::SocketAddress& arg0) const;
	::jvoid Close() const;
	::jvoid Connect(const ::java::net::InetAddress& arg0, const ::jint& arg1) const;
	::jvoid Connect(const ::java::net::SocketAddress& arg0) const;
	::jvoid Disconnect() const;
	::jboolean GetBroadcast() const;
	::java::nio::channels::DatagramChannel GetChannel() const;
	::java::net::InetAddress GetInetAddress() const;
	::java::net::InetAddress GetLocalAddress() const;
	::jint GetLocalPort() const;
	::java::net::SocketAddress GetLocalSocketAddress() const;
	::java::lang::Object GetOption(const ::java::net::SocketOption& arg0) const;
	::jint GetPort() const;
	::jint GetReceiveBufferSize() const;
	::java::net::SocketAddress GetRemoteSocketAddress() const;
	::jboolean GetReuseAddress() const;
	::jint GetSendBufferSize() const;
	::jint GetSoTimeout() const;
	::jint GetTrafficClass() const;
	::jboolean IsBound() const;
	::jboolean IsClosed() const;
	::jboolean IsConnected() const;
	::jvoid Receive(const ::java::net::DatagramPacket& arg0) const;
	::jvoid Send(const ::java::net::DatagramPacket& arg0) const;
	::jvoid SetBroadcast(const ::jboolean& arg0) const;
	static ::jvoid SetDatagramSocketImplFactory(const ::java::net::DatagramSocketImplFactory& arg0);
	::java::net::DatagramSocket SetOption(const ::java::net::SocketOption& arg0, const ::java::lang::Object& arg1) const;
	::jvoid SetReceiveBufferSize(const ::jint& arg0) const;
	::jvoid SetReuseAddress(const ::jboolean& arg0) const;
	::jvoid SetSendBufferSize(const ::jint& arg0) const;
	::jvoid SetSoTimeout(const ::jint& arg0) const;
	::jvoid SetTrafficClass(const ::jint& arg0) const;
	::java::util::Set SupportedOptions() const;
	static jobject __Constructor();
	DatagramSocket() : ::java::lang::Object(__Constructor()) {}
	static jobject __Constructor(const ::jint& arg0);
	DatagramSocket(const ::jint& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::jint& arg0, const ::java::net::InetAddress& arg1);
	DatagramSocket(const ::jint& arg0, const ::java::net::InetAddress& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::net::DatagramSocketImpl& arg0);
	DatagramSocket(const ::java::net::DatagramSocketImpl& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::net::SocketAddress& arg0);
	DatagramSocket(const ::java::net::SocketAddress& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit DatagramSocket(jobject o) : ::java::lang::Object(o) {}
	DatagramSocket(const DatagramSocket& o)  : ::java::lang::Object(o) {}

};

}}

namespace java { namespace nio { namespace channels { 
struct SelectableChannel : ::java::nio::channels::spi::AbstractInterruptibleChannel
{
	static jni::Class __CLASS;

	operator ::java::nio::channels::Channel();
	::java::lang::Object BlockingLock() const;
	::java::nio::channels::SelectableChannel ConfigureBlocking(const ::jboolean& arg0) const;
	::jboolean IsBlocking() const;
	::jboolean IsRegistered() const;
	::java::nio::channels::SelectionKey KeyFor(const ::java::nio::channels::Selector& arg0) const;
	::java::nio::channels::spi::SelectorProvider Provider() const;
	::java::nio::channels::SelectionKey Register(const ::java::nio::channels::Selector& arg0, const ::jint& arg1) const;
	::java::nio::channels::SelectionKey Register(const ::java::nio::channels::Selector& arg0, const ::jint& arg1, const ::java::lang::Object& arg2) const;
	::jint ValidOps() const;
	static jobject __Constructor();
	SelectableChannel() : ::java::nio::channels::spi::AbstractInterruptibleChannel(__Constructor()) {}
	explicit SelectableChannel(jobject o) : ::java::nio::channels::spi::AbstractInterruptibleChannel(o) {}
	SelectableChannel(const SelectableChannel& o)  : ::java::nio::channels::spi::AbstractInterruptibleChannel(o) {}

};

}}}

namespace java { namespace nio { namespace channels { namespace spi { 
struct AbstractSelectableChannel : ::java::nio::channels::SelectableChannel
{
	static jni::Class __CLASS;

	::java::lang::Object BlockingLock() const;
	::java::nio::channels::SelectableChannel ConfigureBlocking(const ::jboolean& arg0) const;
	::jvoid ImplCloseChannel() const;
	::jvoid ImplCloseSelectableChannel() const;
	::jvoid ImplConfigureBlocking(const ::jboolean& arg0) const;
	::jboolean IsBlocking() const;
	::jboolean IsRegistered() const;
	::java::nio::channels::SelectionKey KeyFor(const ::java::nio::channels::Selector& arg0) const;
	::java::nio::channels::spi::SelectorProvider Provider() const;
	::java::nio::channels::SelectionKey Register(const ::java::nio::channels::Selector& arg0, const ::jint& arg1, const ::java::lang::Object& arg2) const;
	static jobject __Constructor(const ::java::nio::channels::spi::SelectorProvider& arg0);
	AbstractSelectableChannel(const ::java::nio::channels::spi::SelectorProvider& arg0) : ::java::nio::channels::SelectableChannel(__Constructor(arg0)) {}
	explicit AbstractSelectableChannel(jobject o) : ::java::nio::channels::SelectableChannel(o) {}
	AbstractSelectableChannel(const AbstractSelectableChannel& o)  : ::java::nio::channels::SelectableChannel(o) {}

};

}}}}

namespace java { namespace nio { namespace channels { 
struct DatagramChannel : ::java::nio::channels::spi::AbstractSelectableChannel
{
	static jni::Class __CLASS;

	operator ::java::nio::channels::ByteChannel();
	operator ::java::nio::channels::ScatteringByteChannel();
	operator ::java::nio::channels::GatheringByteChannel();
	operator ::java::nio::channels::MulticastChannel();
	::java::nio::channels::DatagramChannel Bind(const ::java::net::SocketAddress& arg0) const;
	::java::nio::channels::DatagramChannel Connect(const ::java::net::SocketAddress& arg0) const;
	::java::nio::channels::DatagramChannel Disconnect() const;
	::java::net::SocketAddress GetLocalAddress() const;
	::java::net::SocketAddress GetRemoteAddress() const;
	::jboolean IsConnected() const;
	static ::java::nio::channels::DatagramChannel Open();
	static ::java::nio::channels::DatagramChannel Open(const ::java::net::ProtocolFamily& arg0);
	::jint Read(const ::java::nio::ByteBuffer& arg0) const;
	::jlong Read(const jni::Array< ::java::nio::ByteBuffer >& arg0) const;
	::jlong Read(const jni::Array< ::java::nio::ByteBuffer >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::java::net::SocketAddress Receive(const ::java::nio::ByteBuffer& arg0) const;
	::jint Send(const ::java::nio::ByteBuffer& arg0, const ::java::net::SocketAddress& arg1) const;
	::java::nio::channels::DatagramChannel SetOption(const ::java::net::SocketOption& arg0, const ::java::lang::Object& arg1) const;
	::java::net::DatagramSocket Socket() const;
	::jint ValidOps() const;
	::jint Write(const ::java::nio::ByteBuffer& arg0) const;
	::jlong Write(const jni::Array< ::java::nio::ByteBuffer >& arg0) const;
	::jlong Write(const jni::Array< ::java::nio::ByteBuffer >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	static jobject __Constructor(const ::java::nio::channels::spi::SelectorProvider& arg0);
	DatagramChannel(const ::java::nio::channels::spi::SelectorProvider& arg0) : ::java::nio::channels::spi::AbstractSelectableChannel(__Constructor(arg0)) {}
	explicit DatagramChannel(jobject o) : ::java::nio::channels::spi::AbstractSelectableChannel(o) {}
	DatagramChannel(const DatagramChannel& o)  : ::java::nio::channels::spi::AbstractSelectableChannel(o) {}

};

struct Selector : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Closeable();
	::jvoid Close() const;
	::jboolean IsOpen() const;
	::java::util::Set Keys() const;
	static ::java::nio::channels::Selector Open();
	::java::nio::channels::spi::SelectorProvider Provider() const;
	::jint Select() const;
	::jint Select(const ::jlong& arg0) const;
	::jint Select(const ::java::util::function::Consumer& arg0) const;
	::jint Select(const ::java::util::function::Consumer& arg0, const ::jlong& arg1) const;
	::jint SelectNow() const;
	::jint SelectNow(const ::java::util::function::Consumer& arg0) const;
	::java::util::Set SelectedKeys() const;
	::java::nio::channels::Selector Wakeup() const;
	static jobject __Constructor();
	Selector() : ::java::lang::Object(__Constructor()) {}
	explicit Selector(jobject o) : ::java::lang::Object(o) {}
	Selector(const Selector& o)  : ::java::lang::Object(o) {}

};

}}}

namespace java { namespace nio { namespace channels { namespace spi { 
struct SelectorProvider : ::java::lang::Object
{
	static jni::Class __CLASS;

	::java::nio::channels::Channel InheritedChannel() const;
	::java::nio::channels::DatagramChannel OpenDatagramChannel() const;
	::java::nio::channels::DatagramChannel OpenDatagramChannel(const ::java::net::ProtocolFamily& arg0) const;
	::java::nio::channels::Pipe OpenPipe() const;
	::java::nio::channels::spi::AbstractSelector OpenSelector() const;
	::java::nio::channels::ServerSocketChannel OpenServerSocketChannel() const;
	::java::nio::channels::SocketChannel OpenSocketChannel() const;
	static ::java::nio::channels::spi::SelectorProvider Provider();
	static jobject __Constructor();
	SelectorProvider() : ::java::lang::Object(__Constructor()) {}
	explicit SelectorProvider(jobject o) : ::java::lang::Object(o) {}
	SelectorProvider(const SelectorProvider& o)  : ::java::lang::Object(o) {}

};

}}}}

namespace java { namespace net { 
struct ProtocolFamily : java::lang::Object
{
	static jni::Class __CLASS;

	::java::lang::String Name() const;
	explicit ProtocolFamily(jobject o) : java::lang::Object(o) {}
	ProtocolFamily(const ProtocolFamily& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::net::ProtocolFamily();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::lang::String Name() = 0;
	};
};

}}

namespace java { namespace nio { namespace channels { 
struct Pipe : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::java::nio::channels::Pipe Open();
	::java::nio::channels::Pipe_SinkChannel Sink() const;
	::java::nio::channels::Pipe_SourceChannel Source() const;
	static jobject __Constructor();
	Pipe() : ::java::lang::Object(__Constructor()) {}
	explicit Pipe(jobject o) : ::java::lang::Object(o) {}
	Pipe(const Pipe& o)  : ::java::lang::Object(o) {}

};

struct Pipe_SinkChannel : ::java::nio::channels::spi::AbstractSelectableChannel
{
	static jni::Class __CLASS;

	operator ::java::nio::channels::WritableByteChannel();
	operator ::java::nio::channels::GatheringByteChannel();
	::jint ValidOps() const;
	static jobject __Constructor(const ::java::nio::channels::spi::SelectorProvider& arg0);
	Pipe_SinkChannel(const ::java::nio::channels::spi::SelectorProvider& arg0) : ::java::nio::channels::spi::AbstractSelectableChannel(__Constructor(arg0)) {}
	explicit Pipe_SinkChannel(jobject o) : ::java::nio::channels::spi::AbstractSelectableChannel(o) {}
	Pipe_SinkChannel(const Pipe_SinkChannel& o)  : ::java::nio::channels::spi::AbstractSelectableChannel(o) {}

};

struct Pipe_SourceChannel : ::java::nio::channels::spi::AbstractSelectableChannel
{
	static jni::Class __CLASS;

	operator ::java::nio::channels::ReadableByteChannel();
	operator ::java::nio::channels::ScatteringByteChannel();
	::jint ValidOps() const;
	static jobject __Constructor(const ::java::nio::channels::spi::SelectorProvider& arg0);
	Pipe_SourceChannel(const ::java::nio::channels::spi::SelectorProvider& arg0) : ::java::nio::channels::spi::AbstractSelectableChannel(__Constructor(arg0)) {}
	explicit Pipe_SourceChannel(jobject o) : ::java::nio::channels::spi::AbstractSelectableChannel(o) {}
	Pipe_SourceChannel(const Pipe_SourceChannel& o)  : ::java::nio::channels::spi::AbstractSelectableChannel(o) {}

};

}}}

namespace java { namespace nio { namespace channels { namespace spi { 
struct AbstractSelector : ::java::nio::channels::Selector
{
	static jni::Class __CLASS;

	::jvoid Begin() const;
	::java::util::Set CancelledKeys() const;
	::jvoid Close() const;
	::jvoid Deregister(const ::java::nio::channels::spi::AbstractSelectionKey& arg0) const;
	::jvoid End() const;
	::jvoid ImplCloseSelector() const;
	::jboolean IsOpen() const;
	::java::nio::channels::spi::SelectorProvider Provider() const;
	::java::nio::channels::SelectionKey Register(const ::java::nio::channels::spi::AbstractSelectableChannel& arg0, const ::jint& arg1, const ::java::lang::Object& arg2) const;
	static jobject __Constructor(const ::java::nio::channels::spi::SelectorProvider& arg0);
	AbstractSelector(const ::java::nio::channels::spi::SelectorProvider& arg0) : ::java::nio::channels::Selector(__Constructor(arg0)) {}
	explicit AbstractSelector(jobject o) : ::java::nio::channels::Selector(o) {}
	AbstractSelector(const AbstractSelector& o)  : ::java::nio::channels::Selector(o) {}

};

}}}}

namespace java { namespace nio { namespace channels { 
struct SelectionKey : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fOP_ACCEPT();
	static ::jint& fOP_CONNECT();
	static ::jint& fOP_READ();
	static ::jint& fOP_WRITE();
	::java::lang::Object Attach(const ::java::lang::Object& arg0) const;
	::java::lang::Object Attachment() const;
	::jvoid Cancel() const;
	::java::nio::channels::SelectableChannel Channel() const;
	::jint InterestOps() const;
	::java::nio::channels::SelectionKey InterestOps(const ::jint& arg0) const;
	::jint InterestOpsAnd(const ::jint& arg0) const;
	::jint InterestOpsOr(const ::jint& arg0) const;
	::jboolean IsAcceptable() const;
	::jboolean IsConnectable() const;
	::jboolean IsReadable() const;
	::jboolean IsValid() const;
	::jboolean IsWritable() const;
	::jint ReadyOps() const;
	::java::nio::channels::Selector Selector() const;
	static jobject __Constructor();
	SelectionKey() : ::java::lang::Object(__Constructor()) {}
	explicit SelectionKey(jobject o) : ::java::lang::Object(o) {}
	SelectionKey(const SelectionKey& o)  : ::java::lang::Object(o) {}

};

}}}

namespace java { namespace nio { namespace channels { namespace spi { 
struct AbstractSelectionKey : ::java::nio::channels::SelectionKey
{
	static jni::Class __CLASS;

	::jvoid Cancel() const;
	::jboolean IsValid() const;
	static jobject __Constructor();
	AbstractSelectionKey() : ::java::nio::channels::SelectionKey(__Constructor()) {}
	explicit AbstractSelectionKey(jobject o) : ::java::nio::channels::SelectionKey(o) {}
	AbstractSelectionKey(const AbstractSelectionKey& o)  : ::java::nio::channels::SelectionKey(o) {}

};

}}}}

namespace java { namespace nio { namespace channels { 
struct ServerSocketChannel : ::java::nio::channels::spi::AbstractSelectableChannel
{
	static jni::Class __CLASS;

	operator ::java::nio::channels::NetworkChannel();
	::java::nio::channels::SocketChannel Accept() const;
	::java::nio::channels::ServerSocketChannel Bind(const ::java::net::SocketAddress& arg0) const;
	::java::nio::channels::ServerSocketChannel Bind(const ::java::net::SocketAddress& arg0, const ::jint& arg1) const;
	::java::net::SocketAddress GetLocalAddress() const;
	static ::java::nio::channels::ServerSocketChannel Open();
	::java::nio::channels::ServerSocketChannel SetOption(const ::java::net::SocketOption& arg0, const ::java::lang::Object& arg1) const;
	::java::net::ServerSocket Socket() const;
	::jint ValidOps() const;
	static jobject __Constructor(const ::java::nio::channels::spi::SelectorProvider& arg0);
	ServerSocketChannel(const ::java::nio::channels::spi::SelectorProvider& arg0) : ::java::nio::channels::spi::AbstractSelectableChannel(__Constructor(arg0)) {}
	explicit ServerSocketChannel(jobject o) : ::java::nio::channels::spi::AbstractSelectableChannel(o) {}
	ServerSocketChannel(const ServerSocketChannel& o)  : ::java::nio::channels::spi::AbstractSelectableChannel(o) {}

};

struct NetworkChannel : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::nio::channels::Channel();
	::java::nio::channels::NetworkChannel Bind(const ::java::net::SocketAddress& arg0) const;
	::java::net::SocketAddress GetLocalAddress() const;
	::java::lang::Object GetOption(const ::java::net::SocketOption& arg0) const;
	::java::nio::channels::NetworkChannel SetOption(const ::java::net::SocketOption& arg0, const ::java::lang::Object& arg1) const;
	::java::util::Set SupportedOptions() const;
	explicit NetworkChannel(jobject o) : java::lang::Object(o) {}
	NetworkChannel(const NetworkChannel& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::nio::channels::NetworkChannel();
		operator ::java::nio::channels::Channel();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::nio::channels::NetworkChannel Bind(const ::java::net::SocketAddress& arg0) = 0;
		virtual ::java::net::SocketAddress GetLocalAddress() = 0;
		virtual ::java::lang::Object GetOption(const ::java::net::SocketOption& arg0) = 0;
		virtual ::java::nio::channels::NetworkChannel SetOption(const ::java::net::SocketOption& arg0, const ::java::lang::Object& arg1) = 0;
		virtual ::java::util::Set SupportedOptions() = 0;
	};
};

}}}

namespace java { namespace net { 
struct SocketOption : java::lang::Object
{
	static jni::Class __CLASS;

	::java::lang::String Name() const;
	::java::lang::Class Type() const;
	explicit SocketOption(jobject o) : java::lang::Object(o) {}
	SocketOption(const SocketOption& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::net::SocketOption();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::lang::String Name() = 0;
		virtual ::java::lang::Class Type() = 0;
	};
};

}}

namespace java { namespace nio { namespace channels { 
struct SocketChannel : ::java::nio::channels::spi::AbstractSelectableChannel
{
	static jni::Class __CLASS;

	operator ::java::nio::channels::ByteChannel();
	operator ::java::nio::channels::ScatteringByteChannel();
	operator ::java::nio::channels::GatheringByteChannel();
	operator ::java::nio::channels::NetworkChannel();
	::java::nio::channels::SocketChannel Bind(const ::java::net::SocketAddress& arg0) const;
	::jboolean Connect(const ::java::net::SocketAddress& arg0) const;
	::jboolean FinishConnect() const;
	::java::net::SocketAddress GetLocalAddress() const;
	::java::net::SocketAddress GetRemoteAddress() const;
	::jboolean IsConnected() const;
	::jboolean IsConnectionPending() const;
	static ::java::nio::channels::SocketChannel Open();
	static ::java::nio::channels::SocketChannel Open(const ::java::net::SocketAddress& arg0);
	::jint Read(const ::java::nio::ByteBuffer& arg0) const;
	::jlong Read(const jni::Array< ::java::nio::ByteBuffer >& arg0) const;
	::jlong Read(const jni::Array< ::java::nio::ByteBuffer >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::java::nio::channels::SocketChannel SetOption(const ::java::net::SocketOption& arg0, const ::java::lang::Object& arg1) const;
	::java::nio::channels::SocketChannel ShutdownInput() const;
	::java::nio::channels::SocketChannel ShutdownOutput() const;
	::java::net::Socket Socket() const;
	::jint ValidOps() const;
	::jint Write(const ::java::nio::ByteBuffer& arg0) const;
	::jlong Write(const jni::Array< ::java::nio::ByteBuffer >& arg0) const;
	::jlong Write(const jni::Array< ::java::nio::ByteBuffer >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	static jobject __Constructor(const ::java::nio::channels::spi::SelectorProvider& arg0);
	SocketChannel(const ::java::nio::channels::spi::SelectorProvider& arg0) : ::java::nio::channels::spi::AbstractSelectableChannel(__Constructor(arg0)) {}
	explicit SocketChannel(jobject o) : ::java::nio::channels::spi::AbstractSelectableChannel(o) {}
	SocketChannel(const SocketChannel& o)  : ::java::nio::channels::spi::AbstractSelectableChannel(o) {}

};

}}}

namespace java { namespace net { 
struct Socket : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Closeable();
	::jvoid Bind(const ::java::net::SocketAddress& arg0) const;
	::jvoid Close() const;
	::jvoid Connect(const ::java::net::SocketAddress& arg0) const;
	::jvoid Connect(const ::java::net::SocketAddress& arg0, const ::jint& arg1) const;
	::java::nio::channels::SocketChannel GetChannel() const;
	::java::net::InetAddress GetInetAddress() const;
	::java::io::InputStream GetInputStream() const;
	::jboolean GetKeepAlive() const;
	::java::net::InetAddress GetLocalAddress() const;
	::jint GetLocalPort() const;
	::java::net::SocketAddress GetLocalSocketAddress() const;
	::jboolean GetOOBInline() const;
	::java::lang::Object GetOption(const ::java::net::SocketOption& arg0) const;
	::java::io::OutputStream GetOutputStream() const;
	::jint GetPort() const;
	::jint GetReceiveBufferSize() const;
	::java::net::SocketAddress GetRemoteSocketAddress() const;
	::jboolean GetReuseAddress() const;
	::jint GetSendBufferSize() const;
	::jint GetSoLinger() const;
	::jint GetSoTimeout() const;
	::jboolean GetTcpNoDelay() const;
	::jint GetTrafficClass() const;
	::jboolean IsBound() const;
	::jboolean IsClosed() const;
	::jboolean IsConnected() const;
	::jboolean IsInputShutdown() const;
	::jboolean IsOutputShutdown() const;
	::jvoid SendUrgentData(const ::jint& arg0) const;
	::jvoid SetKeepAlive(const ::jboolean& arg0) const;
	::jvoid SetOOBInline(const ::jboolean& arg0) const;
	::java::net::Socket SetOption(const ::java::net::SocketOption& arg0, const ::java::lang::Object& arg1) const;
	::jvoid SetPerformancePreferences(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jvoid SetReceiveBufferSize(const ::jint& arg0) const;
	::jvoid SetReuseAddress(const ::jboolean& arg0) const;
	::jvoid SetSendBufferSize(const ::jint& arg0) const;
	::jvoid SetSoLinger(const ::jboolean& arg0, const ::jint& arg1) const;
	::jvoid SetSoTimeout(const ::jint& arg0) const;
	static ::jvoid SetSocketImplFactory(const ::java::net::SocketImplFactory& arg0);
	::jvoid SetTcpNoDelay(const ::jboolean& arg0) const;
	::jvoid SetTrafficClass(const ::jint& arg0) const;
	::jvoid ShutdownInput() const;
	::jvoid ShutdownOutput() const;
	::java::util::Set SupportedOptions() const;
	::java::lang::String ToString() const;
	static jobject __Constructor();
	Socket() : ::java::lang::Object(__Constructor()) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::jint& arg1);
	Socket(const ::java::lang::String& arg0, const ::jint& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::jint& arg1, const ::java::net::InetAddress& arg2, const ::jint& arg3);
	Socket(const ::java::lang::String& arg0, const ::jint& arg1, const ::java::net::InetAddress& arg2, const ::jint& arg3) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::jint& arg1, const ::jboolean& arg2);
	Socket(const ::java::lang::String& arg0, const ::jint& arg1, const ::jboolean& arg2) : ::java::lang::Object(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::java::net::InetAddress& arg0, const ::jint& arg1);
	Socket(const ::java::net::InetAddress& arg0, const ::jint& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::net::InetAddress& arg0, const ::jint& arg1, const ::java::net::InetAddress& arg2, const ::jint& arg3);
	Socket(const ::java::net::InetAddress& arg0, const ::jint& arg1, const ::java::net::InetAddress& arg2, const ::jint& arg3) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3)) {}
	static jobject __Constructor(const ::java::net::InetAddress& arg0, const ::jint& arg1, const ::jboolean& arg2);
	Socket(const ::java::net::InetAddress& arg0, const ::jint& arg1, const ::jboolean& arg2) : ::java::lang::Object(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::java::net::Proxy& arg0);
	Socket(const ::java::net::Proxy& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::net::SocketImpl& arg0);
	Socket(const ::java::net::SocketImpl& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit Socket(jobject o) : ::java::lang::Object(o) {}
	Socket(const Socket& o)  : ::java::lang::Object(o) {}

};

struct SocketImplFactory : java::lang::Object
{
	static jni::Class __CLASS;

	::java::net::SocketImpl CreateSocketImpl() const;
	explicit SocketImplFactory(jobject o) : java::lang::Object(o) {}
	SocketImplFactory(const SocketImplFactory& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::net::SocketImplFactory();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::net::SocketImpl CreateSocketImpl() = 0;
	};
};

struct SocketImpl : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::net::SocketOptions();
	::java::net::InetAddress fAddress() const;
	void fAddress(const ::java::net::InetAddress& arg0) const;
	::java::io::FileDescriptor fFd() const;
	void fFd(const ::java::io::FileDescriptor& arg0) const;
	::jint fLocalport() const;
	void fLocalport(const ::jint& arg0) const;
	::jint fPort() const;
	void fPort(const ::jint& arg0) const;
	::jvoid Accept(const ::java::net::SocketImpl& arg0) const;
	::jint Available() const;
	::jvoid Bind(const ::java::net::InetAddress& arg0, const ::jint& arg1) const;
	::jvoid Close() const;
	::jvoid Connect(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::jvoid Connect(const ::java::net::InetAddress& arg0, const ::jint& arg1) const;
	::jvoid Connect(const ::java::net::SocketAddress& arg0, const ::jint& arg1) const;
	::jvoid Create(const ::jboolean& arg0) const;
	::java::io::FileDescriptor GetFileDescriptor() const;
	::java::net::InetAddress GetInetAddress() const;
	::java::io::InputStream GetInputStream() const;
	::jint GetLocalPort() const;
	::java::lang::Object GetOption(const ::java::net::SocketOption& arg0) const;
	::java::io::OutputStream GetOutputStream() const;
	::jint GetPort() const;
	::jvoid Listen(const ::jint& arg0) const;
	::jvoid SendUrgentData(const ::jint& arg0) const;
	::jvoid SetOption(const ::java::net::SocketOption& arg0, const ::java::lang::Object& arg1) const;
	::jvoid SetPerformancePreferences(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jvoid ShutdownInput() const;
	::jvoid ShutdownOutput() const;
	::java::util::Set SupportedOptions() const;
	::jboolean SupportsUrgentData() const;
	::java::lang::String ToString() const;
	static jobject __Constructor();
	SocketImpl() : ::java::lang::Object(__Constructor()) {}
	explicit SocketImpl(jobject o) : ::java::lang::Object(o) {}
	SocketImpl(const SocketImpl& o)  : ::java::lang::Object(o) {}

};

struct SocketOptions : java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fIP_MULTICAST_IF();
	static ::jint& fIP_MULTICAST_IF2();
	static ::jint& fIP_MULTICAST_LOOP();
	static ::jint& fIP_TOS();
	static ::jint& fSO_BINDADDR();
	static ::jint& fSO_BROADCAST();
	static ::jint& fSO_KEEPALIVE();
	static ::jint& fSO_LINGER();
	static ::jint& fSO_OOBINLINE();
	static ::jint& fSO_RCVBUF();
	static ::jint& fSO_REUSEADDR();
	static ::jint& fSO_REUSEPORT();
	static ::jint& fSO_SNDBUF();
	static ::jint& fSO_TIMEOUT();
	static ::jint& fTCP_NODELAY();
	::java::lang::Object GetOption(const ::jint& arg0) const;
	::jvoid SetOption(const ::jint& arg0, const ::java::lang::Object& arg1) const;
	explicit SocketOptions(jobject o) : java::lang::Object(o) {}
	SocketOptions(const SocketOptions& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::net::SocketOptions();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::lang::Object GetOption(const ::jint& arg0) = 0;
		virtual void SetOption(const ::jint& arg0, const ::java::lang::Object& arg1) = 0;
	};
};

struct ServerSocket : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Closeable();
	::java::net::Socket Accept() const;
	::jvoid Bind(const ::java::net::SocketAddress& arg0) const;
	::jvoid Bind(const ::java::net::SocketAddress& arg0, const ::jint& arg1) const;
	::jvoid Close() const;
	::java::nio::channels::ServerSocketChannel GetChannel() const;
	::java::net::InetAddress GetInetAddress() const;
	::jint GetLocalPort() const;
	::java::net::SocketAddress GetLocalSocketAddress() const;
	::java::lang::Object GetOption(const ::java::net::SocketOption& arg0) const;
	::jint GetReceiveBufferSize() const;
	::jboolean GetReuseAddress() const;
	::jint GetSoTimeout() const;
	::jvoid ImplAccept(const ::java::net::Socket& arg0) const;
	::jboolean IsBound() const;
	::jboolean IsClosed() const;
	::java::net::ServerSocket SetOption(const ::java::net::SocketOption& arg0, const ::java::lang::Object& arg1) const;
	::jvoid SetPerformancePreferences(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jvoid SetReceiveBufferSize(const ::jint& arg0) const;
	::jvoid SetReuseAddress(const ::jboolean& arg0) const;
	::jvoid SetSoTimeout(const ::jint& arg0) const;
	static ::jvoid SetSocketFactory(const ::java::net::SocketImplFactory& arg0);
	::java::util::Set SupportedOptions() const;
	::java::lang::String ToString() const;
	static jobject __Constructor();
	ServerSocket() : ::java::lang::Object(__Constructor()) {}
	static jobject __Constructor(const ::jint& arg0);
	ServerSocket(const ::jint& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::jint& arg0, const ::jint& arg1);
	ServerSocket(const ::jint& arg0, const ::jint& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::jint& arg0, const ::jint& arg1, const ::java::net::InetAddress& arg2);
	ServerSocket(const ::jint& arg0, const ::jint& arg1, const ::java::net::InetAddress& arg2) : ::java::lang::Object(__Constructor(arg0, arg1, arg2)) {}
	explicit ServerSocket(jobject o) : ::java::lang::Object(o) {}
	ServerSocket(const ServerSocket& o)  : ::java::lang::Object(o) {}

};

}}

namespace java { namespace nio { namespace channels { 
struct MulticastChannel : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::nio::channels::NetworkChannel();
	::jvoid Close() const;
	::java::nio::channels::MembershipKey Join(const ::java::net::InetAddress& arg0, const ::java::net::NetworkInterface& arg1) const;
	::java::nio::channels::MembershipKey Join(const ::java::net::InetAddress& arg0, const ::java::net::NetworkInterface& arg1, const ::java::net::InetAddress& arg2) const;
	explicit MulticastChannel(jobject o) : java::lang::Object(o) {}
	MulticastChannel(const MulticastChannel& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::nio::channels::MulticastChannel();
		operator ::java::nio::channels::NetworkChannel();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void Close() = 0;
		virtual ::java::nio::channels::MembershipKey Join(const ::java::net::InetAddress& arg0, const ::java::net::NetworkInterface& arg1) = 0;
		virtual ::java::nio::channels::MembershipKey Join(const ::java::net::InetAddress& arg0, const ::java::net::NetworkInterface& arg1, const ::java::net::InetAddress& arg2) = 0;
	};
};

struct MembershipKey : ::java::lang::Object
{
	static jni::Class __CLASS;

	::java::nio::channels::MembershipKey Block(const ::java::net::InetAddress& arg0) const;
	::java::nio::channels::MulticastChannel Channel() const;
	::jvoid Drop() const;
	::java::net::InetAddress Group() const;
	::jboolean IsValid() const;
	::java::net::NetworkInterface NetworkInterface() const;
	::java::net::InetAddress SourceAddress() const;
	::java::nio::channels::MembershipKey Unblock(const ::java::net::InetAddress& arg0) const;
	static jobject __Constructor();
	MembershipKey() : ::java::lang::Object(__Constructor()) {}
	explicit MembershipKey(jobject o) : ::java::lang::Object(o) {}
	MembershipKey(const MembershipKey& o)  : ::java::lang::Object(o) {}

};

}}}

namespace java { namespace net { 
struct DatagramPacket : ::java::lang::Object
{
	static jni::Class __CLASS;

	::java::net::InetAddress GetAddress() const;
	jni::Array< ::jbyte > GetData() const;
	::jint GetLength() const;
	::jint GetOffset() const;
	::jint GetPort() const;
	::java::net::SocketAddress GetSocketAddress() const;
	::jvoid SetAddress(const ::java::net::InetAddress& arg0) const;
	::jvoid SetData(const jni::Array< ::jbyte >& arg0) const;
	::jvoid SetData(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jvoid SetLength(const ::jint& arg0) const;
	::jvoid SetPort(const ::jint& arg0) const;
	::jvoid SetSocketAddress(const ::java::net::SocketAddress& arg0) const;
	static jobject __Constructor(const jni::Array< ::jbyte >& arg0, const ::jint& arg1);
	DatagramPacket(const jni::Array< ::jbyte >& arg0, const ::jint& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::jint& arg2);
	DatagramPacket(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::jint& arg2) : ::java::lang::Object(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::jint& arg2, const ::java::net::InetAddress& arg3, const ::jint& arg4);
	DatagramPacket(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::jint& arg2, const ::java::net::InetAddress& arg3, const ::jint& arg4) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3, arg4)) {}
	static jobject __Constructor(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::jint& arg2, const ::java::net::SocketAddress& arg3);
	DatagramPacket(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::jint& arg2, const ::java::net::SocketAddress& arg3) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3)) {}
	static jobject __Constructor(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::java::net::InetAddress& arg2, const ::jint& arg3);
	DatagramPacket(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::java::net::InetAddress& arg2, const ::jint& arg3) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3)) {}
	static jobject __Constructor(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::java::net::SocketAddress& arg2);
	DatagramPacket(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::java::net::SocketAddress& arg2) : ::java::lang::Object(__Constructor(arg0, arg1, arg2)) {}
	explicit DatagramPacket(jobject o) : ::java::lang::Object(o) {}
	DatagramPacket(const DatagramPacket& o)  : ::java::lang::Object(o) {}

};

struct DatagramSocketImplFactory : java::lang::Object
{
	static jni::Class __CLASS;

	::java::net::DatagramSocketImpl CreateDatagramSocketImpl() const;
	explicit DatagramSocketImplFactory(jobject o) : java::lang::Object(o) {}
	DatagramSocketImplFactory(const DatagramSocketImplFactory& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::net::DatagramSocketImplFactory();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::net::DatagramSocketImpl CreateDatagramSocketImpl() = 0;
	};
};

struct DatagramSocketImpl : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::net::SocketOptions();
	::java::io::FileDescriptor fFd() const;
	void fFd(const ::java::io::FileDescriptor& arg0) const;
	::jint fLocalPort() const;
	void fLocalPort(const ::jint& arg0) const;
	::jvoid Bind(const ::jint& arg0, const ::java::net::InetAddress& arg1) const;
	::jvoid Close() const;
	::jvoid Connect(const ::java::net::InetAddress& arg0, const ::jint& arg1) const;
	::jvoid Create() const;
	::jvoid Disconnect() const;
	::java::io::FileDescriptor GetFileDescriptor() const;
	::jint GetLocalPort() const;
	::java::lang::Object GetOption(const ::java::net::SocketOption& arg0) const;
	::jbyte GetTTL() const;
	::jint GetTimeToLive() const;
	::jvoid Join(const ::java::net::InetAddress& arg0) const;
	::jvoid JoinGroup(const ::java::net::SocketAddress& arg0, const ::java::net::NetworkInterface& arg1) const;
	::jvoid Leave(const ::java::net::InetAddress& arg0) const;
	::jvoid LeaveGroup(const ::java::net::SocketAddress& arg0, const ::java::net::NetworkInterface& arg1) const;
	::jint Peek(const ::java::net::InetAddress& arg0) const;
	::jint PeekData(const ::java::net::DatagramPacket& arg0) const;
	::jvoid Receive(const ::java::net::DatagramPacket& arg0) const;
	::jvoid Send(const ::java::net::DatagramPacket& arg0) const;
	::jvoid SetOption(const ::java::net::SocketOption& arg0, const ::java::lang::Object& arg1) const;
	::jvoid SetTTL(const ::jbyte& arg0) const;
	::jvoid SetTimeToLive(const ::jint& arg0) const;
	::java::util::Set SupportedOptions() const;
	static jobject __Constructor();
	DatagramSocketImpl() : ::java::lang::Object(__Constructor()) {}
	explicit DatagramSocketImpl(jobject o) : ::java::lang::Object(o) {}
	DatagramSocketImpl(const DatagramSocketImpl& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace os { 
struct Handler : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::android::os::Handler CreateAsync(const ::android::os::Looper& arg0);
	static ::android::os::Handler CreateAsync(const ::android::os::Looper& arg0, const ::android::os::Handler_Callback& arg1);
	::jvoid DispatchMessage(const ::android::os::Message& arg0) const;
	::jvoid Dump(const ::android::util::Printer& arg0, const ::java::lang::String& arg1) const;
	::android::os::Looper GetLooper() const;
	::java::lang::String GetMessageName(const ::android::os::Message& arg0) const;
	::jvoid HandleMessage(const ::android::os::Message& arg0) const;
	::jboolean HasCallbacks(const ::java::lang::Runnable& arg0) const;
	::jboolean HasMessages(const ::jint& arg0) const;
	::jboolean HasMessages(const ::jint& arg0, const ::java::lang::Object& arg1) const;
	::android::os::Message ObtainMessage() const;
	::android::os::Message ObtainMessage(const ::jint& arg0) const;
	::android::os::Message ObtainMessage(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::android::os::Message ObtainMessage(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::java::lang::Object& arg3) const;
	::android::os::Message ObtainMessage(const ::jint& arg0, const ::java::lang::Object& arg1) const;
	::jboolean Post(const ::java::lang::Runnable& arg0) const;
	::jboolean PostAtFrontOfQueue(const ::java::lang::Runnable& arg0) const;
	::jboolean PostAtTime(const ::java::lang::Runnable& arg0, const ::jlong& arg1) const;
	::jboolean PostAtTime(const ::java::lang::Runnable& arg0, const ::java::lang::Object& arg1, const ::jlong& arg2) const;
	::jboolean PostDelayed(const ::java::lang::Runnable& arg0, const ::jlong& arg1) const;
	::jboolean PostDelayed(const ::java::lang::Runnable& arg0, const ::java::lang::Object& arg1, const ::jlong& arg2) const;
	::jvoid RemoveCallbacks(const ::java::lang::Runnable& arg0) const;
	::jvoid RemoveCallbacks(const ::java::lang::Runnable& arg0, const ::java::lang::Object& arg1) const;
	::jvoid RemoveCallbacksAndMessages(const ::java::lang::Object& arg0) const;
	::jvoid RemoveMessages(const ::jint& arg0) const;
	::jvoid RemoveMessages(const ::jint& arg0, const ::java::lang::Object& arg1) const;
	::jboolean SendEmptyMessage(const ::jint& arg0) const;
	::jboolean SendEmptyMessageAtTime(const ::jint& arg0, const ::jlong& arg1) const;
	::jboolean SendEmptyMessageDelayed(const ::jint& arg0, const ::jlong& arg1) const;
	::jboolean SendMessage(const ::android::os::Message& arg0) const;
	::jboolean SendMessageAtFrontOfQueue(const ::android::os::Message& arg0) const;
	::jboolean SendMessageAtTime(const ::android::os::Message& arg0, const ::jlong& arg1) const;
	::jboolean SendMessageDelayed(const ::android::os::Message& arg0, const ::jlong& arg1) const;
	::java::lang::String ToString() const;
	static jobject __Constructor();
	Handler() : ::java::lang::Object(__Constructor()) {}
	static jobject __Constructor(const ::android::os::Handler_Callback& arg0);
	Handler(const ::android::os::Handler_Callback& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::os::Looper& arg0);
	Handler(const ::android::os::Looper& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::os::Looper& arg0, const ::android::os::Handler_Callback& arg1);
	Handler(const ::android::os::Looper& arg0, const ::android::os::Handler_Callback& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit Handler(jobject o) : ::java::lang::Object(o) {}
	Handler(const Handler& o)  : ::java::lang::Object(o) {}

};

struct Looper : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid Dump(const ::android::util::Printer& arg0, const ::java::lang::String& arg1) const;
	static ::android::os::Looper GetMainLooper();
	::android::os::MessageQueue GetQueue() const;
	::java::lang::Thread GetThread() const;
	::jboolean IsCurrentThread() const;
	static ::jvoid Loop();
	static ::android::os::Looper MyLooper();
	static ::android::os::MessageQueue MyQueue();
	static ::jvoid Prepare();
	static ::jvoid PrepareMainLooper();
	::jvoid Quit() const;
	::jvoid QuitSafely() const;
	::jvoid SetMessageLogging(const ::android::util::Printer& arg0) const;
	::java::lang::String ToString() const;
	explicit Looper(jobject o) : ::java::lang::Object(o) {}
	Looper(const Looper& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace util { 
struct Printer : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid Println(const ::java::lang::String& arg0) const;
	explicit Printer(jobject o) : java::lang::Object(o) {}
	Printer(const Printer& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::util::Printer();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void Println(const ::java::lang::String& arg0) = 0;
	};
};

}}

namespace android { namespace os { 
struct MessageQueue : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid AddIdleHandler(const ::android::os::MessageQueue_IdleHandler& arg0) const;
	::jvoid AddOnFileDescriptorEventListener(const ::java::io::FileDescriptor& arg0, const ::jint& arg1, const ::android::os::MessageQueue_OnFileDescriptorEventListener& arg2) const;
	::jvoid Finalize() const;
	::jboolean IsIdle() const;
	::jvoid RemoveIdleHandler(const ::android::os::MessageQueue_IdleHandler& arg0) const;
	::jvoid RemoveOnFileDescriptorEventListener(const ::java::io::FileDescriptor& arg0) const;
	explicit MessageQueue(jobject o) : ::java::lang::Object(o) {}
	MessageQueue(const MessageQueue& o)  : ::java::lang::Object(o) {}

};

struct MessageQueue_IdleHandler : java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean QueueIdle() const;
	explicit MessageQueue_IdleHandler(jobject o) : java::lang::Object(o) {}
	MessageQueue_IdleHandler(const MessageQueue_IdleHandler& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::os::MessageQueue_IdleHandler();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean QueueIdle() = 0;
	};
};

struct MessageQueue_OnFileDescriptorEventListener : java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fEVENT_ERROR();
	static ::jint& fEVENT_INPUT();
	static ::jint& fEVENT_OUTPUT();
	::jint OnFileDescriptorEvents(const ::java::io::FileDescriptor& arg0, const ::jint& arg1) const;
	explicit MessageQueue_OnFileDescriptorEventListener(jobject o) : java::lang::Object(o) {}
	MessageQueue_OnFileDescriptorEventListener(const MessageQueue_OnFileDescriptorEventListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::os::MessageQueue_OnFileDescriptorEventListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jint OnFileDescriptorEvents(const ::java::io::FileDescriptor& arg0, const ::jint& arg1) = 0;
	};
};

struct Handler_Callback : java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean HandleMessage(const ::android::os::Message& arg0) const;
	explicit Handler_Callback(jobject o) : java::lang::Object(o) {}
	Handler_Callback(const Handler_Callback& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::os::Handler_Callback();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean HandleMessage(const ::android::os::Message& arg0) = 0;
	};
};

struct Message : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint fArg1() const;
	void fArg1(const ::jint& arg0) const;
	::jint fArg2() const;
	void fArg2(const ::jint& arg0) const;
	::java::lang::Object fObj() const;
	void fObj(const ::java::lang::Object& arg0) const;
	::android::os::Messenger fReplyTo() const;
	void fReplyTo(const ::android::os::Messenger& arg0) const;
	::jint fSendingUid() const;
	void fSendingUid(const ::jint& arg0) const;
	::jint fWhat() const;
	void fWhat(const ::jint& arg0) const;
	::jvoid CopyFrom(const ::android::os::Message& arg0) const;
	::jint DescribeContents() const;
	::java::lang::Runnable GetCallback() const;
	::android::os::Bundle GetData() const;
	::android::os::Handler GetTarget() const;
	::jlong GetWhen() const;
	::jboolean IsAsynchronous() const;
	static ::android::os::Message Obtain();
	static ::android::os::Message Obtain(const ::android::os::Handler& arg0);
	static ::android::os::Message Obtain(const ::android::os::Handler& arg0, const ::jint& arg1);
	static ::android::os::Message Obtain(const ::android::os::Handler& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3);
	static ::android::os::Message Obtain(const ::android::os::Handler& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::java::lang::Object& arg4);
	static ::android::os::Message Obtain(const ::android::os::Handler& arg0, const ::jint& arg1, const ::java::lang::Object& arg2);
	static ::android::os::Message Obtain(const ::android::os::Handler& arg0, const ::java::lang::Runnable& arg1);
	static ::android::os::Message Obtain(const ::android::os::Message& arg0);
	::android::os::Bundle PeekData() const;
	::jvoid Recycle() const;
	::jvoid SendToTarget() const;
	::jvoid SetAsynchronous(const ::jboolean& arg0) const;
	::jvoid SetData(const ::android::os::Bundle& arg0) const;
	::jvoid SetTarget(const ::android::os::Handler& arg0) const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor();
	Message() : ::java::lang::Object(__Constructor()) {}
	explicit Message(jobject o) : ::java::lang::Object(o) {}
	Message(const Message& o)  : ::java::lang::Object(o) {}

};

struct Messenger : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::android::os::IBinder GetBinder() const;
	::jint HashCode() const;
	static ::android::os::Messenger ReadMessengerOrNullFromParcel(const ::android::os::Parcel& arg0);
	::jvoid Send(const ::android::os::Message& arg0) const;
	static ::jvoid WriteMessengerOrNullToParcel(const ::android::os::Messenger& arg0, const ::android::os::Parcel& arg1);
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor(const ::android::os::Handler& arg0);
	Messenger(const ::android::os::Handler& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::os::IBinder& arg0);
	Messenger(const ::android::os::IBinder& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit Messenger(jobject o) : ::java::lang::Object(o) {}
	Messenger(const Messenger& o)  : ::java::lang::Object(o) {}

};

struct ParcelFileDescriptor_OnCloseListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnClose(const ::java::io::IOException& arg0) const;
	explicit ParcelFileDescriptor_OnCloseListener(jobject o) : java::lang::Object(o) {}
	ParcelFileDescriptor_OnCloseListener(const ParcelFileDescriptor_OnCloseListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::os::ParcelFileDescriptor_OnCloseListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnClose(const ::java::io::IOException& arg0) = 0;
	};
};

}}

namespace java { namespace lang { 
struct Exception : ::java::lang::Throwable
{
	static jni::Class __CLASS;

	static jobject __Constructor();
	Exception() : ::java::lang::Throwable(__Constructor()) {}
	static jobject __Constructor(const ::java::lang::String& arg0);
	Exception(const ::java::lang::String& arg0) : ::java::lang::Throwable(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::java::lang::Throwable& arg1);
	Exception(const ::java::lang::String& arg0, const ::java::lang::Throwable& arg1) : ::java::lang::Throwable(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::java::lang::Throwable& arg1, const ::jboolean& arg2, const ::jboolean& arg3);
	Exception(const ::java::lang::String& arg0, const ::java::lang::Throwable& arg1, const ::jboolean& arg2, const ::jboolean& arg3) : ::java::lang::Throwable(__Constructor(arg0, arg1, arg2, arg3)) {}
	static jobject __Constructor(const ::java::lang::Throwable& arg0);
	Exception(const ::java::lang::Throwable& arg0) : ::java::lang::Throwable(__Constructor(arg0)) {}
	explicit Exception(jobject o) : ::java::lang::Throwable(o) {}
	Exception(const Exception& o)  : ::java::lang::Throwable(o) {}

};

}}

namespace java { namespace io { 
struct IOException : ::java::lang::Exception
{
	static jni::Class __CLASS;

	static jobject __Constructor();
	IOException() : ::java::lang::Exception(__Constructor()) {}
	static jobject __Constructor(const ::java::lang::String& arg0);
	IOException(const ::java::lang::String& arg0) : ::java::lang::Exception(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::java::lang::Throwable& arg1);
	IOException(const ::java::lang::String& arg0, const ::java::lang::Throwable& arg1) : ::java::lang::Exception(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::lang::Throwable& arg0);
	IOException(const ::java::lang::Throwable& arg0) : ::java::lang::Exception(__Constructor(arg0)) {}
	explicit IOException(jobject o) : ::java::lang::Exception(o) {}
	IOException(const IOException& o)  : ::java::lang::Exception(o) {}

};

}}

namespace java { namespace util { 
struct AbstractMap : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::util::Map();
	::jvoid Clear() const;
	::java::lang::Object Clone() const;
	::jboolean ContainsKey(const ::java::lang::Object& arg0) const;
	::jboolean ContainsValue(const ::java::lang::Object& arg0) const;
	::java::util::Set EntrySet() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::lang::Object Get(const ::java::lang::Object& arg0) const;
	::jint HashCode() const;
	::jboolean IsEmpty() const;
	::java::util::Set KeySet() const;
	::java::lang::Object Put(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) const;
	::jvoid PutAll(const ::java::util::Map& arg0) const;
	::java::lang::Object Remove(const ::java::lang::Object& arg0) const;
	::jint Size() const;
	::java::lang::String ToString() const;
	::java::util::Collection Values() const;
	static jobject __Constructor();
	AbstractMap() : ::java::lang::Object(__Constructor()) {}
	explicit AbstractMap(jobject o) : ::java::lang::Object(o) {}
	AbstractMap(const AbstractMap& o)  : ::java::lang::Object(o) {}

};

struct HashMap : ::java::util::AbstractMap
{
	static jni::Class __CLASS;

	operator ::java::util::Map();
	operator ::java::lang::Cloneable();
	operator ::java::io::Serializable();
	::jvoid Clear() const;
	::java::lang::Object Clone() const;
	::java::lang::Object Compute(const ::java::lang::Object& arg0, const ::java::util::function::BiFunction& arg1) const;
	::java::lang::Object ComputeIfAbsent(const ::java::lang::Object& arg0, const ::java::util::function::Function& arg1) const;
	::java::lang::Object ComputeIfPresent(const ::java::lang::Object& arg0, const ::java::util::function::BiFunction& arg1) const;
	::jboolean ContainsKey(const ::java::lang::Object& arg0) const;
	::jboolean ContainsValue(const ::java::lang::Object& arg0) const;
	::java::util::Set EntrySet() const;
	::jvoid ForEach(const ::java::util::function::BiConsumer& arg0) const;
	::java::lang::Object Get(const ::java::lang::Object& arg0) const;
	::java::lang::Object GetOrDefault(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) const;
	::jboolean IsEmpty() const;
	::java::util::Set KeySet() const;
	::java::lang::Object Merge(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1, const ::java::util::function::BiFunction& arg2) const;
	::java::lang::Object Put(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) const;
	::jvoid PutAll(const ::java::util::Map& arg0) const;
	::java::lang::Object PutIfAbsent(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) const;
	::java::lang::Object Remove(const ::java::lang::Object& arg0) const;
	::jboolean Remove(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) const;
	::java::lang::Object Replace(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) const;
	::jboolean Replace(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1, const ::java::lang::Object& arg2) const;
	::jvoid ReplaceAll(const ::java::util::function::BiFunction& arg0) const;
	::jint Size() const;
	::java::util::Collection Values() const;
	static jobject __Constructor();
	HashMap() : ::java::util::AbstractMap(__Constructor()) {}
	static jobject __Constructor(const ::jint& arg0);
	HashMap(const ::jint& arg0) : ::java::util::AbstractMap(__Constructor(arg0)) {}
	static jobject __Constructor(const ::jint& arg0, const ::jfloat& arg1);
	HashMap(const ::jint& arg0, const ::jfloat& arg1) : ::java::util::AbstractMap(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::util::Map& arg0);
	HashMap(const ::java::util::Map& arg0) : ::java::util::AbstractMap(__Constructor(arg0)) {}
	explicit HashMap(jobject o) : ::java::util::AbstractMap(o) {}
	HashMap(const HashMap& o)  : ::java::util::AbstractMap(o) {}

};

}}

namespace android { namespace util { 
struct SparseBooleanArray : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::Cloneable();
	::jvoid Append(const ::jint& arg0, const ::jboolean& arg1) const;
	::jvoid Clear() const;
	::android::util::SparseBooleanArray Clone() const;
	::jvoid Delete(const ::jint& arg0) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jboolean Get(const ::jint& arg0) const;
	::jboolean Get(const ::jint& arg0, const ::jboolean& arg1) const;
	::jint HashCode() const;
	::jint IndexOfKey(const ::jint& arg0) const;
	::jint IndexOfValue(const ::jboolean& arg0) const;
	::jint KeyAt(const ::jint& arg0) const;
	::jvoid Put(const ::jint& arg0, const ::jboolean& arg1) const;
	::jvoid RemoveAt(const ::jint& arg0) const;
	::jvoid SetValueAt(const ::jint& arg0, const ::jboolean& arg1) const;
	::jint Size() const;
	::java::lang::String ToString() const;
	::jboolean ValueAt(const ::jint& arg0) const;
	static jobject __Constructor();
	SparseBooleanArray() : ::java::lang::Object(__Constructor()) {}
	static jobject __Constructor(const ::jint& arg0);
	SparseBooleanArray(const ::jint& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit SparseBooleanArray(jobject o) : ::java::lang::Object(o) {}
	SparseBooleanArray(const SparseBooleanArray& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace content { 
struct IntentSender : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::lang::String GetCreatorPackage() const;
	::jint GetCreatorUid() const;
	::android::os::UserHandle GetCreatorUserHandle() const;
	::java::lang::String GetTargetPackage() const;
	::jint HashCode() const;
	static ::android::content::IntentSender ReadIntentSenderOrNullFromParcel(const ::android::os::Parcel& arg0);
	::jvoid SendIntent(const ::android::content::Context& arg0, const ::jint& arg1, const ::android::content::Intent& arg2, const ::android::content::IntentSender_OnFinished& arg3, const ::android::os::Handler& arg4) const;
	::jvoid SendIntent(const ::android::content::Context& arg0, const ::jint& arg1, const ::android::content::Intent& arg2, const ::android::content::IntentSender_OnFinished& arg3, const ::android::os::Handler& arg4, const ::java::lang::String& arg5) const;
	::java::lang::String ToString() const;
	static ::jvoid WriteIntentSenderOrNullToParcel(const ::android::content::IntentSender& arg0, const ::android::os::Parcel& arg1);
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit IntentSender(jobject o) : ::java::lang::Object(o) {}
	IntentSender(const IntentSender& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace os { 
struct UserHandle : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	static ::android::os::UserHandle GetUserHandleForUid(const ::jint& arg0);
	::jint HashCode() const;
	static ::android::os::UserHandle ReadFromParcel(const ::android::os::Parcel& arg0);
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static ::jvoid WriteToParcel(const ::android::os::UserHandle& arg0, const ::android::os::Parcel& arg1);
	static jobject __Constructor(const ::android::os::Parcel& arg0);
	UserHandle(const ::android::os::Parcel& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit UserHandle(jobject o) : ::java::lang::Object(o) {}
	UserHandle(const UserHandle& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace content { 
struct IntentSender_OnFinished : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnSendFinished(const ::android::content::IntentSender& arg0, const ::android::content::Intent& arg1, const ::jint& arg2, const ::java::lang::String& arg3, const ::android::os::Bundle& arg4) const;
	explicit IntentSender_OnFinished(jobject o) : java::lang::Object(o) {}
	IntentSender_OnFinished(const IntentSender_OnFinished& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::content::IntentSender_OnFinished();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnSendFinished(const ::android::content::IntentSender& arg0, const ::android::content::Intent& arg1, const ::jint& arg2, const ::java::lang::String& arg3, const ::android::os::Bundle& arg4) = 0;
	};
};

struct ClipData : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jvoid AddItem(const ::android::content::ClipData_Item& arg0) const;
	::jvoid AddItem(const ::android::content::ContentResolver& arg0, const ::android::content::ClipData_Item& arg1) const;
	::jint DescribeContents() const;
	::android::content::ClipDescription GetDescription() const;
	::android::content::ClipData_Item GetItemAt(const ::jint& arg0) const;
	::jint GetItemCount() const;
	static ::android::content::ClipData NewHtmlText(const ::java::lang::CharSequence& arg0, const ::java::lang::CharSequence& arg1, const ::java::lang::String& arg2);
	static ::android::content::ClipData NewIntent(const ::java::lang::CharSequence& arg0, const ::android::content::Intent& arg1);
	static ::android::content::ClipData NewPlainText(const ::java::lang::CharSequence& arg0, const ::java::lang::CharSequence& arg1);
	static ::android::content::ClipData NewRawUri(const ::java::lang::CharSequence& arg0, const ::android::net::Uri& arg1);
	static ::android::content::ClipData NewUri(const ::android::content::ContentResolver& arg0, const ::java::lang::CharSequence& arg1, const ::android::net::Uri& arg2);
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor(const ::android::content::ClipDescription& arg0, const ::android::content::ClipData_Item& arg1);
	ClipData(const ::android::content::ClipDescription& arg0, const ::android::content::ClipData_Item& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::lang::CharSequence& arg0, const jni::Array< ::java::lang::String >& arg1, const ::android::content::ClipData_Item& arg2);
	ClipData(const ::java::lang::CharSequence& arg0, const jni::Array< ::java::lang::String >& arg1, const ::android::content::ClipData_Item& arg2) : ::java::lang::Object(__Constructor(arg0, arg1, arg2)) {}
	explicit ClipData(jobject o) : ::java::lang::Object(o) {}
	ClipData(const ClipData& o)  : ::java::lang::Object(o) {}

};

struct ClipData_Item : ::java::lang::Object
{
	static jni::Class __CLASS;

	::java::lang::String CoerceToHtmlText(const ::android::content::Context& arg0) const;
	::java::lang::CharSequence CoerceToStyledText(const ::android::content::Context& arg0) const;
	::java::lang::CharSequence CoerceToText(const ::android::content::Context& arg0) const;
	::java::lang::String GetHtmlText() const;
	::android::content::Intent GetIntent() const;
	::java::lang::CharSequence GetText() const;
	::android::view::textclassifier::TextLinks GetTextLinks() const;
	::android::net::Uri GetUri() const;
	::java::lang::String ToString() const;
	static jobject __Constructor(const ::android::content::Intent& arg0);
	ClipData_Item(const ::android::content::Intent& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::net::Uri& arg0);
	ClipData_Item(const ::android::net::Uri& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::CharSequence& arg0);
	ClipData_Item(const ::java::lang::CharSequence& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::CharSequence& arg0, const ::android::content::Intent& arg1, const ::android::net::Uri& arg2);
	ClipData_Item(const ::java::lang::CharSequence& arg0, const ::android::content::Intent& arg1, const ::android::net::Uri& arg2) : ::java::lang::Object(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::java::lang::CharSequence& arg0, const ::java::lang::String& arg1);
	ClipData_Item(const ::java::lang::CharSequence& arg0, const ::java::lang::String& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::lang::CharSequence& arg0, const ::java::lang::String& arg1, const ::android::content::Intent& arg2, const ::android::net::Uri& arg3);
	ClipData_Item(const ::java::lang::CharSequence& arg0, const ::java::lang::String& arg1, const ::android::content::Intent& arg2, const ::android::net::Uri& arg3) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3)) {}
	explicit ClipData_Item(jobject o) : ::java::lang::Object(o) {}
	ClipData_Item(const ClipData_Item& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace view { namespace textclassifier { 
struct TextLinks : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::jint& fAPPLY_STRATEGY_IGNORE();
	static ::jint& fAPPLY_STRATEGY_REPLACE();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fSTATUS_DIFFERENT_TEXT();
	static ::jint& fSTATUS_LINKS_APPLIED();
	static ::jint& fSTATUS_NO_LINKS_APPLIED();
	static ::jint& fSTATUS_NO_LINKS_FOUND();
	static ::jint& fSTATUS_UNSUPPORTED_CHARACTER();
	::jint Apply(const ::android::text::Spannable& arg0, const ::jint& arg1, const ::java::util::function::Function& arg2) const;
	::jint DescribeContents() const;
	::android::os::Bundle GetExtras() const;
	::java::util::Collection GetLinks() const;
	::java::lang::CharSequence GetText() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit TextLinks(jobject o) : ::java::lang::Object(o) {}
	TextLinks(const TextLinks& o)  : ::java::lang::Object(o) {}

};

}}}

namespace android { namespace text { 
struct Spannable : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::text::Spanned();
	::jvoid RemoveSpan(const ::java::lang::Object& arg0) const;
	::jvoid SetSpan(const ::java::lang::Object& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	explicit Spannable(jobject o) : java::lang::Object(o) {}
	Spannable(const Spannable& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::text::Spannable();
		operator ::android::text::Spanned();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void RemoveSpan(const ::java::lang::Object& arg0) = 0;
		virtual void SetSpan(const ::java::lang::Object& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) = 0;
	};
};

struct Spanned : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::CharSequence();
	static ::jint& fSPAN_COMPOSING();
	static ::jint& fSPAN_EXCLUSIVE_EXCLUSIVE();
	static ::jint& fSPAN_EXCLUSIVE_INCLUSIVE();
	static ::jint& fSPAN_INCLUSIVE_EXCLUSIVE();
	static ::jint& fSPAN_INCLUSIVE_INCLUSIVE();
	static ::jint& fSPAN_INTERMEDIATE();
	static ::jint& fSPAN_MARK_MARK();
	static ::jint& fSPAN_MARK_POINT();
	static ::jint& fSPAN_PARAGRAPH();
	static ::jint& fSPAN_POINT_MARK();
	static ::jint& fSPAN_POINT_MARK_MASK();
	static ::jint& fSPAN_POINT_POINT();
	static ::jint& fSPAN_PRIORITY();
	static ::jint& fSPAN_PRIORITY_SHIFT();
	static ::jint& fSPAN_USER();
	static ::jint& fSPAN_USER_SHIFT();
	::jint GetSpanEnd(const ::java::lang::Object& arg0) const;
	::jint GetSpanFlags(const ::java::lang::Object& arg0) const;
	::jint GetSpanStart(const ::java::lang::Object& arg0) const;
	jni::Array< ::java::lang::Object > GetSpans(const ::jint& arg0, const ::jint& arg1, const ::java::lang::Class& arg2) const;
	::jint NextSpanTransition(const ::jint& arg0, const ::jint& arg1, const ::java::lang::Class& arg2) const;
	explicit Spanned(jobject o) : java::lang::Object(o) {}
	Spanned(const Spanned& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::text::Spanned();
		operator ::java::lang::CharSequence();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jint GetSpanEnd(const ::java::lang::Object& arg0) = 0;
		virtual ::jint GetSpanFlags(const ::java::lang::Object& arg0) = 0;
		virtual ::jint GetSpanStart(const ::java::lang::Object& arg0) = 0;
		virtual jni::Array< ::java::lang::Object > GetSpans(const ::jint& arg0, const ::jint& arg1, const ::java::lang::Class& arg2) = 0;
		virtual ::jint NextSpanTransition(const ::jint& arg0, const ::jint& arg1, const ::java::lang::Class& arg2) = 0;
	};
};

}}

namespace android { namespace net { 
struct Uri : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	operator ::java::lang::Comparable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::android::net::Uri& fEMPTY();
	::android::net::Uri_Builder BuildUpon() const;
	::jint CompareTo(const ::android::net::Uri& arg0) const;
	static ::java::lang::String Decode(const ::java::lang::String& arg0);
	static ::java::lang::String Encode(const ::java::lang::String& arg0);
	static ::java::lang::String Encode(const ::java::lang::String& arg0, const ::java::lang::String& arg1);
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	static ::android::net::Uri FromFile(const ::java::io::File& arg0);
	static ::android::net::Uri FromParts(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2);
	::java::lang::String GetAuthority() const;
	::jboolean GetBooleanQueryParameter(const ::java::lang::String& arg0, const ::jboolean& arg1) const;
	::java::lang::String GetEncodedAuthority() const;
	::java::lang::String GetEncodedFragment() const;
	::java::lang::String GetEncodedPath() const;
	::java::lang::String GetEncodedQuery() const;
	::java::lang::String GetEncodedSchemeSpecificPart() const;
	::java::lang::String GetEncodedUserInfo() const;
	::java::lang::String GetFragment() const;
	::java::lang::String GetHost() const;
	::java::lang::String GetLastPathSegment() const;
	::java::lang::String GetPath() const;
	::java::util::List GetPathSegments() const;
	::jint GetPort() const;
	::java::lang::String GetQuery() const;
	::java::lang::String GetQueryParameter(const ::java::lang::String& arg0) const;
	::java::util::Set GetQueryParameterNames() const;
	::java::util::List GetQueryParameters(const ::java::lang::String& arg0) const;
	::java::lang::String GetScheme() const;
	::java::lang::String GetSchemeSpecificPart() const;
	::java::lang::String GetUserInfo() const;
	::jint HashCode() const;
	::jboolean IsAbsolute() const;
	::jboolean IsHierarchical() const;
	::jboolean IsOpaque() const;
	::jboolean IsRelative() const;
	::android::net::Uri NormalizeScheme() const;
	static ::android::net::Uri Parse(const ::java::lang::String& arg0);
	::java::lang::String ToString() const;
	static ::android::net::Uri WithAppendedPath(const ::android::net::Uri& arg0, const ::java::lang::String& arg1);
	static ::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::android::net::Uri& arg1);
	explicit Uri(jobject o) : ::java::lang::Object(o) {}
	Uri(const Uri& o)  : ::java::lang::Object(o) {}

};

struct Uri_Builder : ::java::lang::Object
{
	static jni::Class __CLASS;

	::android::net::Uri_Builder AppendEncodedPath(const ::java::lang::String& arg0) const;
	::android::net::Uri_Builder AppendPath(const ::java::lang::String& arg0) const;
	::android::net::Uri_Builder AppendQueryParameter(const ::java::lang::String& arg0, const ::java::lang::String& arg1) const;
	::android::net::Uri_Builder Authority(const ::java::lang::String& arg0) const;
	::android::net::Uri Build() const;
	::android::net::Uri_Builder ClearQuery() const;
	::android::net::Uri_Builder EncodedAuthority(const ::java::lang::String& arg0) const;
	::android::net::Uri_Builder EncodedFragment(const ::java::lang::String& arg0) const;
	::android::net::Uri_Builder EncodedOpaquePart(const ::java::lang::String& arg0) const;
	::android::net::Uri_Builder EncodedPath(const ::java::lang::String& arg0) const;
	::android::net::Uri_Builder EncodedQuery(const ::java::lang::String& arg0) const;
	::android::net::Uri_Builder Fragment(const ::java::lang::String& arg0) const;
	::android::net::Uri_Builder OpaquePart(const ::java::lang::String& arg0) const;
	::android::net::Uri_Builder Path(const ::java::lang::String& arg0) const;
	::android::net::Uri_Builder Query(const ::java::lang::String& arg0) const;
	::android::net::Uri_Builder Scheme(const ::java::lang::String& arg0) const;
	::java::lang::String ToString() const;
	static jobject __Constructor();
	Uri_Builder() : ::java::lang::Object(__Constructor()) {}
	explicit Uri_Builder(jobject o) : ::java::lang::Object(o) {}
	Uri_Builder(const Uri_Builder& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace content { 
struct ContentResolver : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::java::lang::String& fANY_CURSOR_ITEM_TYPE();
	static ::java::lang::String& fCURSOR_DIR_BASE_TYPE();
	static ::java::lang::String& fCURSOR_ITEM_BASE_TYPE();
	static ::java::lang::String& fEXTRA_HONORED_ARGS();
	static ::java::lang::String& fEXTRA_REFRESH_SUPPORTED();
	static ::java::lang::String& fEXTRA_SIZE();
	static ::java::lang::String& fEXTRA_TOTAL_COUNT();
	static ::jint& fNOTIFY_DELETE();
	static ::jint& fNOTIFY_INSERT();
	static ::jint& fNOTIFY_SKIP_NOTIFY_FOR_DESCENDANTS();
	static ::jint& fNOTIFY_SYNC_TO_NETWORK();
	static ::jint& fNOTIFY_UPDATE();
	static ::java::lang::String& fQUERY_ARG_GROUP_COLUMNS();
	static ::java::lang::String& fQUERY_ARG_LIMIT();
	static ::java::lang::String& fQUERY_ARG_OFFSET();
	static ::java::lang::String& fQUERY_ARG_SORT_COLLATION();
	static ::java::lang::String& fQUERY_ARG_SORT_COLUMNS();
	static ::java::lang::String& fQUERY_ARG_SORT_DIRECTION();
	static ::java::lang::String& fQUERY_ARG_SORT_LOCALE();
	static ::java::lang::String& fQUERY_ARG_SQL_GROUP_BY();
	static ::java::lang::String& fQUERY_ARG_SQL_HAVING();
	static ::java::lang::String& fQUERY_ARG_SQL_LIMIT();
	static ::java::lang::String& fQUERY_ARG_SQL_SELECTION();
	static ::java::lang::String& fQUERY_ARG_SQL_SELECTION_ARGS();
	static ::java::lang::String& fQUERY_ARG_SQL_SORT_ORDER();
	static ::jint& fQUERY_SORT_DIRECTION_ASCENDING();
	static ::jint& fQUERY_SORT_DIRECTION_DESCENDING();
	static ::java::lang::String& fSCHEME_ANDROID_RESOURCE();
	static ::java::lang::String& fSCHEME_CONTENT();
	static ::java::lang::String& fSCHEME_FILE();
	static ::java::lang::String& fSYNC_EXTRAS_ACCOUNT();
	static ::java::lang::String& fSYNC_EXTRAS_DISCARD_LOCAL_DELETIONS();
	static ::java::lang::String& fSYNC_EXTRAS_DO_NOT_RETRY();
	static ::java::lang::String& fSYNC_EXTRAS_EXPEDITED();
	static ::java::lang::String& fSYNC_EXTRAS_FORCE();
	static ::java::lang::String& fSYNC_EXTRAS_IGNORE_BACKOFF();
	static ::java::lang::String& fSYNC_EXTRAS_IGNORE_SETTINGS();
	static ::java::lang::String& fSYNC_EXTRAS_INITIALIZE();
	static ::java::lang::String& fSYNC_EXTRAS_MANUAL();
	static ::java::lang::String& fSYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS();
	static ::java::lang::String& fSYNC_EXTRAS_REQUIRE_CHARGING();
	static ::java::lang::String& fSYNC_EXTRAS_SCHEDULE_AS_EXPEDITED_JOB();
	static ::java::lang::String& fSYNC_EXTRAS_UPLOAD();
	static ::jint& fSYNC_OBSERVER_TYPE_ACTIVE();
	static ::jint& fSYNC_OBSERVER_TYPE_PENDING();
	static ::jint& fSYNC_OBSERVER_TYPE_SETTINGS();
	::android::content::ContentProviderClient AcquireContentProviderClient(const ::android::net::Uri& arg0) const;
	::android::content::ContentProviderClient AcquireContentProviderClient(const ::java::lang::String& arg0) const;
	::android::content::ContentProviderClient AcquireUnstableContentProviderClient(const ::android::net::Uri& arg0) const;
	::android::content::ContentProviderClient AcquireUnstableContentProviderClient(const ::java::lang::String& arg0) const;
	static ::jvoid AddPeriodicSync(const ::android::accounts::Account& arg0, const ::java::lang::String& arg1, const ::android::os::Bundle& arg2, const ::jlong& arg3);
	static ::java::lang::Object AddStatusChangeListener(const ::jint& arg0, const ::android::content::SyncStatusObserver& arg1);
	jni::Array< ::android::content::ContentProviderResult > ApplyBatch(const ::java::lang::String& arg0, const ::java::util::ArrayList& arg1) const;
	::jint BulkInsert(const ::android::net::Uri& arg0, const jni::Array< ::android::content::ContentValues >& arg1) const;
	::android::os::Bundle Call(const ::android::net::Uri& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2, const ::android::os::Bundle& arg3) const;
	::android::os::Bundle Call(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2, const ::android::os::Bundle& arg3) const;
	static ::jvoid CancelSync(const ::android::accounts::Account& arg0, const ::java::lang::String& arg1);
	static ::jvoid CancelSync(const ::android::content::SyncRequest& arg0);
	::jvoid CancelSync(const ::android::net::Uri& arg0) const;
	::android::net::Uri Canonicalize(const ::android::net::Uri& arg0) const;
	::jint Delete(const ::android::net::Uri& arg0, const ::android::os::Bundle& arg1) const;
	::jint Delete(const ::android::net::Uri& arg0, const ::java::lang::String& arg1, const jni::Array< ::java::lang::String >& arg2) const;
	static ::android::content::SyncInfo GetCurrentSync();
	static ::java::util::List GetCurrentSyncs();
	static ::jint GetIsSyncable(const ::android::accounts::Account& arg0, const ::java::lang::String& arg1);
	static ::jboolean GetMasterSyncAutomatically();
	::java::util::List GetOutgoingPersistedUriPermissions() const;
	static ::java::util::List GetPeriodicSyncs(const ::android::accounts::Account& arg0, const ::java::lang::String& arg1);
	::java::util::List GetPersistedUriPermissions() const;
	jni::Array< ::java::lang::String > GetStreamTypes(const ::android::net::Uri& arg0, const ::java::lang::String& arg1) const;
	static jni::Array< ::android::content::SyncAdapterType > GetSyncAdapterTypes();
	static ::jboolean GetSyncAutomatically(const ::android::accounts::Account& arg0, const ::java::lang::String& arg1);
	::java::lang::String GetType(const ::android::net::Uri& arg0) const;
	::android::content::ContentResolver_MimeTypeInfo GetTypeInfo(const ::java::lang::String& arg0) const;
	::android::net::Uri Insert(const ::android::net::Uri& arg0, const ::android::content::ContentValues& arg1) const;
	::android::net::Uri Insert(const ::android::net::Uri& arg0, const ::android::content::ContentValues& arg1, const ::android::os::Bundle& arg2) const;
	static ::jboolean IsSyncActive(const ::android::accounts::Account& arg0, const ::java::lang::String& arg1);
	static ::jboolean IsSyncPending(const ::android::accounts::Account& arg0, const ::java::lang::String& arg1);
	::android::graphics::Bitmap LoadThumbnail(const ::android::net::Uri& arg0, const ::android::util::Size& arg1, const ::android::os::CancellationSignal& arg2) const;
	::jvoid NotifyChange(const ::android::net::Uri& arg0, const ::android::database::ContentObserver& arg1) const;
	::jvoid NotifyChange(const ::android::net::Uri& arg0, const ::android::database::ContentObserver& arg1, const ::jint& arg2) const;
	::jvoid NotifyChange(const ::android::net::Uri& arg0, const ::android::database::ContentObserver& arg1, const ::jboolean& arg2) const;
	::jvoid NotifyChange(const ::java::util::Collection& arg0, const ::android::database::ContentObserver& arg1, const ::jint& arg2) const;
	::android::content::res::AssetFileDescriptor OpenAssetFile(const ::android::net::Uri& arg0, const ::java::lang::String& arg1, const ::android::os::CancellationSignal& arg2) const;
	::android::content::res::AssetFileDescriptor OpenAssetFileDescriptor(const ::android::net::Uri& arg0, const ::java::lang::String& arg1) const;
	::android::content::res::AssetFileDescriptor OpenAssetFileDescriptor(const ::android::net::Uri& arg0, const ::java::lang::String& arg1, const ::android::os::CancellationSignal& arg2) const;
	::android::os::ParcelFileDescriptor OpenFile(const ::android::net::Uri& arg0, const ::java::lang::String& arg1, const ::android::os::CancellationSignal& arg2) const;
	::android::os::ParcelFileDescriptor OpenFileDescriptor(const ::android::net::Uri& arg0, const ::java::lang::String& arg1) const;
	::android::os::ParcelFileDescriptor OpenFileDescriptor(const ::android::net::Uri& arg0, const ::java::lang::String& arg1, const ::android::os::CancellationSignal& arg2) const;
	::java::io::InputStream OpenInputStream(const ::android::net::Uri& arg0) const;
	::java::io::OutputStream OpenOutputStream(const ::android::net::Uri& arg0) const;
	::java::io::OutputStream OpenOutputStream(const ::android::net::Uri& arg0, const ::java::lang::String& arg1) const;
	::android::content::res::AssetFileDescriptor OpenTypedAssetFile(const ::android::net::Uri& arg0, const ::java::lang::String& arg1, const ::android::os::Bundle& arg2, const ::android::os::CancellationSignal& arg3) const;
	::android::content::res::AssetFileDescriptor OpenTypedAssetFileDescriptor(const ::android::net::Uri& arg0, const ::java::lang::String& arg1, const ::android::os::Bundle& arg2) const;
	::android::content::res::AssetFileDescriptor OpenTypedAssetFileDescriptor(const ::android::net::Uri& arg0, const ::java::lang::String& arg1, const ::android::os::Bundle& arg2, const ::android::os::CancellationSignal& arg3) const;
	::android::database::Cursor Query(const ::android::net::Uri& arg0, const jni::Array< ::java::lang::String >& arg1, const ::android::os::Bundle& arg2, const ::android::os::CancellationSignal& arg3) const;
	::android::database::Cursor Query(const ::android::net::Uri& arg0, const jni::Array< ::java::lang::String >& arg1, const ::java::lang::String& arg2, const jni::Array< ::java::lang::String >& arg3, const ::java::lang::String& arg4) const;
	::android::database::Cursor Query(const ::android::net::Uri& arg0, const jni::Array< ::java::lang::String >& arg1, const ::java::lang::String& arg2, const jni::Array< ::java::lang::String >& arg3, const ::java::lang::String& arg4, const ::android::os::CancellationSignal& arg5) const;
	::jboolean Refresh(const ::android::net::Uri& arg0, const ::android::os::Bundle& arg1, const ::android::os::CancellationSignal& arg2) const;
	::jvoid RegisterContentObserver(const ::android::net::Uri& arg0, const ::jboolean& arg1, const ::android::database::ContentObserver& arg2) const;
	::jvoid ReleasePersistableUriPermission(const ::android::net::Uri& arg0, const ::jint& arg1) const;
	static ::jvoid RemovePeriodicSync(const ::android::accounts::Account& arg0, const ::java::lang::String& arg1, const ::android::os::Bundle& arg2);
	static ::jvoid RemoveStatusChangeListener(const ::java::lang::Object& arg0);
	static ::jvoid RequestSync(const ::android::accounts::Account& arg0, const ::java::lang::String& arg1, const ::android::os::Bundle& arg2);
	static ::jvoid RequestSync(const ::android::content::SyncRequest& arg0);
	static ::jvoid SetIsSyncable(const ::android::accounts::Account& arg0, const ::java::lang::String& arg1, const ::jint& arg2);
	static ::jvoid SetMasterSyncAutomatically(const ::jboolean& arg0);
	static ::jvoid SetSyncAutomatically(const ::android::accounts::Account& arg0, const ::java::lang::String& arg1, const ::jboolean& arg2);
	::jvoid StartSync(const ::android::net::Uri& arg0, const ::android::os::Bundle& arg1) const;
	::jvoid TakePersistableUriPermission(const ::android::net::Uri& arg0, const ::jint& arg1) const;
	::android::net::Uri Uncanonicalize(const ::android::net::Uri& arg0) const;
	::jvoid UnregisterContentObserver(const ::android::database::ContentObserver& arg0) const;
	::jint Update(const ::android::net::Uri& arg0, const ::android::content::ContentValues& arg1, const ::android::os::Bundle& arg2) const;
	::jint Update(const ::android::net::Uri& arg0, const ::android::content::ContentValues& arg1, const ::java::lang::String& arg2, const jni::Array< ::java::lang::String >& arg3) const;
	static ::jvoid ValidateSyncExtrasBundle(const ::android::os::Bundle& arg0);
	static ::android::content::ContentResolver Wrap(const ::android::content::ContentProvider& arg0);
	static ::android::content::ContentResolver Wrap(const ::android::content::ContentProviderClient& arg0);
	static jobject __Constructor(const ::android::content::Context& arg0);
	ContentResolver(const ::android::content::Context& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit ContentResolver(jobject o) : ::java::lang::Object(o) {}
	ContentResolver(const ContentResolver& o)  : ::java::lang::Object(o) {}

};

struct ContentProviderClient : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::AutoCloseable();
	jni::Array< ::android::content::ContentProviderResult > ApplyBatch(const ::java::lang::String& arg0, const ::java::util::ArrayList& arg1) const;
	jni::Array< ::android::content::ContentProviderResult > ApplyBatch(const ::java::util::ArrayList& arg0) const;
	::jint BulkInsert(const ::android::net::Uri& arg0, const jni::Array< ::android::content::ContentValues >& arg1) const;
	::android::os::Bundle Call(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::android::os::Bundle& arg2) const;
	::android::os::Bundle Call(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2, const ::android::os::Bundle& arg3) const;
	::android::net::Uri Canonicalize(const ::android::net::Uri& arg0) const;
	::jvoid Close() const;
	::jint Delete(const ::android::net::Uri& arg0, const ::android::os::Bundle& arg1) const;
	::jint Delete(const ::android::net::Uri& arg0, const ::java::lang::String& arg1, const jni::Array< ::java::lang::String >& arg2) const;
	::jvoid Finalize() const;
	::android::content::ContentProvider GetLocalContentProvider() const;
	jni::Array< ::java::lang::String > GetStreamTypes(const ::android::net::Uri& arg0, const ::java::lang::String& arg1) const;
	::java::lang::String GetType(const ::android::net::Uri& arg0) const;
	::android::net::Uri Insert(const ::android::net::Uri& arg0, const ::android::content::ContentValues& arg1) const;
	::android::net::Uri Insert(const ::android::net::Uri& arg0, const ::android::content::ContentValues& arg1, const ::android::os::Bundle& arg2) const;
	::android::content::res::AssetFileDescriptor OpenAssetFile(const ::android::net::Uri& arg0, const ::java::lang::String& arg1) const;
	::android::content::res::AssetFileDescriptor OpenAssetFile(const ::android::net::Uri& arg0, const ::java::lang::String& arg1, const ::android::os::CancellationSignal& arg2) const;
	::android::os::ParcelFileDescriptor OpenFile(const ::android::net::Uri& arg0, const ::java::lang::String& arg1) const;
	::android::os::ParcelFileDescriptor OpenFile(const ::android::net::Uri& arg0, const ::java::lang::String& arg1, const ::android::os::CancellationSignal& arg2) const;
	::android::content::res::AssetFileDescriptor OpenTypedAssetFile(const ::android::net::Uri& arg0, const ::java::lang::String& arg1, const ::android::os::Bundle& arg2, const ::android::os::CancellationSignal& arg3) const;
	::android::content::res::AssetFileDescriptor OpenTypedAssetFileDescriptor(const ::android::net::Uri& arg0, const ::java::lang::String& arg1, const ::android::os::Bundle& arg2) const;
	::android::content::res::AssetFileDescriptor OpenTypedAssetFileDescriptor(const ::android::net::Uri& arg0, const ::java::lang::String& arg1, const ::android::os::Bundle& arg2, const ::android::os::CancellationSignal& arg3) const;
	::android::database::Cursor Query(const ::android::net::Uri& arg0, const jni::Array< ::java::lang::String >& arg1, const ::android::os::Bundle& arg2, const ::android::os::CancellationSignal& arg3) const;
	::android::database::Cursor Query(const ::android::net::Uri& arg0, const jni::Array< ::java::lang::String >& arg1, const ::java::lang::String& arg2, const jni::Array< ::java::lang::String >& arg3, const ::java::lang::String& arg4) const;
	::android::database::Cursor Query(const ::android::net::Uri& arg0, const jni::Array< ::java::lang::String >& arg1, const ::java::lang::String& arg2, const jni::Array< ::java::lang::String >& arg3, const ::java::lang::String& arg4, const ::android::os::CancellationSignal& arg5) const;
	::jboolean Refresh(const ::android::net::Uri& arg0, const ::android::os::Bundle& arg1, const ::android::os::CancellationSignal& arg2) const;
	::jboolean Release() const;
	::android::net::Uri Uncanonicalize(const ::android::net::Uri& arg0) const;
	::jint Update(const ::android::net::Uri& arg0, const ::android::content::ContentValues& arg1, const ::android::os::Bundle& arg2) const;
	::jint Update(const ::android::net::Uri& arg0, const ::android::content::ContentValues& arg1, const ::java::lang::String& arg2, const jni::Array< ::java::lang::String >& arg3) const;
	explicit ContentProviderClient(jobject o) : ::java::lang::Object(o) {}
	ContentProviderClient(const ContentProviderClient& o)  : ::java::lang::Object(o) {}

};

struct ContentProviderResult : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::java::lang::Integer fCount() const;
	::java::lang::Throwable fException() const;
	::android::os::Bundle fExtras() const;
	::android::net::Uri fUri() const;
	::jint DescribeContents() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor(const ::jint& arg0);
	ContentProviderResult(const ::jint& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::net::Uri& arg0);
	ContentProviderResult(const ::android::net::Uri& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::os::Bundle& arg0);
	ContentProviderResult(const ::android::os::Bundle& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::os::Parcel& arg0);
	ContentProviderResult(const ::android::os::Parcel& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::Throwable& arg0);
	ContentProviderResult(const ::java::lang::Throwable& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit ContentProviderResult(jobject o) : ::java::lang::Object(o) {}
	ContentProviderResult(const ContentProviderResult& o)  : ::java::lang::Object(o) {}

};

struct ContentValues : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::java::lang::String& fTAG();
	::jvoid Clear() const;
	::jboolean ContainsKey(const ::java::lang::String& arg0) const;
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::lang::Object Get(const ::java::lang::String& arg0) const;
	::java::lang::Boolean GetAsBoolean(const ::java::lang::String& arg0) const;
	::java::lang::Byte GetAsByte(const ::java::lang::String& arg0) const;
	jni::Array< ::jbyte > GetAsByteArray(const ::java::lang::String& arg0) const;
	::java::lang::Double GetAsDouble(const ::java::lang::String& arg0) const;
	::java::lang::Float GetAsFloat(const ::java::lang::String& arg0) const;
	::java::lang::Integer GetAsInteger(const ::java::lang::String& arg0) const;
	::java::lang::Long GetAsLong(const ::java::lang::String& arg0) const;
	::java::lang::Short GetAsShort(const ::java::lang::String& arg0) const;
	::java::lang::String GetAsString(const ::java::lang::String& arg0) const;
	::jint HashCode() const;
	::jboolean IsEmpty() const;
	::java::util::Set KeySet() const;
	::jvoid Put(const ::java::lang::String& arg0, const ::java::lang::Boolean& arg1) const;
	::jvoid Put(const ::java::lang::String& arg0, const ::java::lang::Byte& arg1) const;
	::jvoid Put(const ::java::lang::String& arg0, const ::java::lang::Double& arg1) const;
	::jvoid Put(const ::java::lang::String& arg0, const ::java::lang::Float& arg1) const;
	::jvoid Put(const ::java::lang::String& arg0, const ::java::lang::Integer& arg1) const;
	::jvoid Put(const ::java::lang::String& arg0, const ::java::lang::Long& arg1) const;
	::jvoid Put(const ::java::lang::String& arg0, const ::java::lang::Short& arg1) const;
	::jvoid Put(const ::java::lang::String& arg0, const ::java::lang::String& arg1) const;
	::jvoid Put(const ::java::lang::String& arg0, const jni::Array< ::jbyte >& arg1) const;
	::jvoid PutAll(const ::android::content::ContentValues& arg0) const;
	::jvoid PutNull(const ::java::lang::String& arg0) const;
	::jvoid Remove(const ::java::lang::String& arg0) const;
	::jint Size() const;
	::java::lang::String ToString() const;
	::java::util::Set ValueSet() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor();
	ContentValues() : ::java::lang::Object(__Constructor()) {}
	static jobject __Constructor(const ::jint& arg0);
	ContentValues(const ::jint& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit ContentValues(jobject o) : ::java::lang::Object(o) {}
	ContentValues(const ContentValues& o)  : ::java::lang::Object(o) {}

};

}}

namespace java { namespace lang { 
struct Boolean : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Serializable();
	operator ::java::lang::Comparable();
	static ::java::lang::Boolean& fFALSE();
	static ::java::lang::Boolean& fTRUE();
	static ::java::lang::Class& fTYPE();
	::jboolean BooleanValue() const;
	static ::jint Compare(const ::jboolean& arg0, const ::jboolean& arg1);
	::jint CompareTo(const ::java::lang::Boolean& arg0) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	static ::jboolean GetBoolean(const ::java::lang::String& arg0);
	::jint HashCode() const;
	static ::jint HashCode(const ::jboolean& arg0);
	static ::jboolean LogicalAnd(const ::jboolean& arg0, const ::jboolean& arg1);
	static ::jboolean LogicalOr(const ::jboolean& arg0, const ::jboolean& arg1);
	static ::jboolean LogicalXor(const ::jboolean& arg0, const ::jboolean& arg1);
	static ::jboolean ParseBoolean(const ::java::lang::String& arg0);
	::java::lang::String ToString() const;
	static ::java::lang::String ToString(const ::jboolean& arg0);
	static ::java::lang::Boolean ValueOf(const ::java::lang::String& arg0);
	static ::java::lang::Boolean ValueOf(const ::jboolean& arg0);
	static jobject __Constructor(const ::java::lang::String& arg0);
	Boolean(const ::java::lang::String& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::jboolean& arg0);
	Boolean(const ::jboolean& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit Boolean(jobject o) : ::java::lang::Object(o) {}
	Boolean(const Boolean& o)  : ::java::lang::Object(o) {}

};

struct Float : ::java::lang::Number
{
	static jni::Class __CLASS;

	operator ::java::lang::Comparable();
	static ::jint& fBYTES();
	static ::jint& fMAX_EXPONENT();
	static ::jfloat& fMAX_VALUE();
	static ::jint& fMIN_EXPONENT();
	static ::jfloat& fMIN_NORMAL();
	static ::jfloat& fMIN_VALUE();
	static ::jfloat& fNEGATIVE_INFINITY();
	static ::jfloat& fNaN();
	static ::jfloat& fPOSITIVE_INFINITY();
	static ::jint& fSIZE();
	static ::java::lang::Class& fTYPE();
	::jbyte ByteValue() const;
	static ::jint Compare(const ::jfloat& arg0, const ::jfloat& arg1);
	::jint CompareTo(const ::java::lang::Float& arg0) const;
	::jdouble DoubleValue() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	static ::jint FloatToIntBits(const ::jfloat& arg0);
	static ::jint FloatToRawIntBits(const ::jfloat& arg0);
	::jfloat FloatValue() const;
	::jint HashCode() const;
	static ::jint HashCode(const ::jfloat& arg0);
	static ::jfloat IntBitsToFloat(const ::jint& arg0);
	::jint IntValue() const;
	static ::jboolean IsFinite(const ::jfloat& arg0);
	::jboolean IsInfinite() const;
	static ::jboolean IsInfinite(const ::jfloat& arg0);
	::jboolean IsNaN() const;
	static ::jboolean IsNaN(const ::jfloat& arg0);
	::jlong LongValue() const;
	static ::jfloat Max(const ::jfloat& arg0, const ::jfloat& arg1);
	static ::jfloat Min(const ::jfloat& arg0, const ::jfloat& arg1);
	static ::jfloat ParseFloat(const ::java::lang::String& arg0);
	::jshort ShortValue() const;
	static ::jfloat Sum(const ::jfloat& arg0, const ::jfloat& arg1);
	static ::java::lang::String ToHexString(const ::jfloat& arg0);
	::java::lang::String ToString() const;
	static ::java::lang::String ToString(const ::jfloat& arg0);
	static ::java::lang::Float ValueOf(const ::jfloat& arg0);
	static ::java::lang::Float ValueOf(const ::java::lang::String& arg0);
	static jobject __Constructor(const ::jdouble& arg0);
	Float(const ::jdouble& arg0) : ::java::lang::Number(__Constructor(arg0)) {}
	static jobject __Constructor(const ::jfloat& arg0);
	Float(const ::jfloat& arg0) : ::java::lang::Number(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::String& arg0);
	Float(const ::java::lang::String& arg0) : ::java::lang::Number(__Constructor(arg0)) {}
	explicit Float(jobject o) : ::java::lang::Number(o) {}
	Float(const Float& o)  : ::java::lang::Number(o) {}

};

struct Short : ::java::lang::Number
{
	static jni::Class __CLASS;

	operator ::java::lang::Comparable();
	static ::jint& fBYTES();
	static ::jshort& fMAX_VALUE();
	static ::jshort& fMIN_VALUE();
	static ::jint& fSIZE();
	static ::java::lang::Class& fTYPE();
	::jbyte ByteValue() const;
	static ::jint Compare(const ::jshort& arg0, const ::jshort& arg1);
	::jint CompareTo(const ::java::lang::Short& arg0) const;
	static ::jint CompareUnsigned(const ::jshort& arg0, const ::jshort& arg1);
	static ::java::lang::Short Decode(const ::java::lang::String& arg0);
	::jdouble DoubleValue() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jfloat FloatValue() const;
	::jint HashCode() const;
	static ::jint HashCode(const ::jshort& arg0);
	::jint IntValue() const;
	::jlong LongValue() const;
	static ::jshort ParseShort(const ::java::lang::String& arg0);
	static ::jshort ParseShort(const ::java::lang::String& arg0, const ::jint& arg1);
	static ::jshort ReverseBytes(const ::jshort& arg0);
	::jshort ShortValue() const;
	::java::lang::String ToString() const;
	static ::java::lang::String ToString(const ::jshort& arg0);
	static ::jint ToUnsignedInt(const ::jshort& arg0);
	static ::jlong ToUnsignedLong(const ::jshort& arg0);
	static ::java::lang::Short ValueOf(const ::java::lang::String& arg0);
	static ::java::lang::Short ValueOf(const ::java::lang::String& arg0, const ::jint& arg1);
	static ::java::lang::Short ValueOf(const ::jshort& arg0);
	static jobject __Constructor(const ::java::lang::String& arg0);
	Short(const ::java::lang::String& arg0) : ::java::lang::Number(__Constructor(arg0)) {}
	static jobject __Constructor(const ::jshort& arg0);
	Short(const ::jshort& arg0) : ::java::lang::Number(__Constructor(arg0)) {}
	explicit Short(jobject o) : ::java::lang::Number(o) {}
	Short(const Short& o)  : ::java::lang::Number(o) {}

};

}}

namespace android { namespace content { 
struct ContentProvider : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::content::ComponentCallbacks2();
	jni::Array< ::android::content::ContentProviderResult > ApplyBatch(const ::java::lang::String& arg0, const ::java::util::ArrayList& arg1) const;
	jni::Array< ::android::content::ContentProviderResult > ApplyBatch(const ::java::util::ArrayList& arg0) const;
	::jvoid AttachInfo(const ::android::content::Context& arg0, const ::android::content::pm::ProviderInfo& arg1) const;
	::jint BulkInsert(const ::android::net::Uri& arg0, const jni::Array< ::android::content::ContentValues >& arg1) const;
	::android::os::Bundle Call(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::android::os::Bundle& arg2) const;
	::android::os::Bundle Call(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2, const ::android::os::Bundle& arg3) const;
	::android::net::Uri Canonicalize(const ::android::net::Uri& arg0) const;
	::android::content::ContentProvider_CallingIdentity ClearCallingIdentity() const;
	::jint Delete(const ::android::net::Uri& arg0, const ::android::os::Bundle& arg1) const;
	::jint Delete(const ::android::net::Uri& arg0, const ::java::lang::String& arg1, const jni::Array< ::java::lang::String >& arg2) const;
	::jvoid Dump(const ::java::io::FileDescriptor& arg0, const ::java::io::PrintWriter& arg1, const jni::Array< ::java::lang::String >& arg2) const;
	::android::content::AttributionSource GetCallingAttributionSource() const;
	::java::lang::String GetCallingAttributionTag() const;
	::java::lang::String GetCallingPackage() const;
	::java::lang::String GetCallingPackageUnchecked() const;
	::android::content::Context GetContext() const;
	jni::Array< ::android::content::pm::PathPermission > GetPathPermissions() const;
	::java::lang::String GetReadPermission() const;
	jni::Array< ::java::lang::String > GetStreamTypes(const ::android::net::Uri& arg0, const ::java::lang::String& arg1) const;
	::java::lang::String GetType(const ::android::net::Uri& arg0) const;
	::java::lang::String GetWritePermission() const;
	::android::net::Uri Insert(const ::android::net::Uri& arg0, const ::android::content::ContentValues& arg1) const;
	::android::net::Uri Insert(const ::android::net::Uri& arg0, const ::android::content::ContentValues& arg1, const ::android::os::Bundle& arg2) const;
	::jboolean IsTemporary() const;
	::jvoid OnCallingPackageChanged() const;
	::jvoid OnConfigurationChanged(const ::android::content::res::Configuration& arg0) const;
	::jboolean OnCreate() const;
	::jvoid OnLowMemory() const;
	::jvoid OnTrimMemory(const ::jint& arg0) const;
	::android::content::res::AssetFileDescriptor OpenAssetFile(const ::android::net::Uri& arg0, const ::java::lang::String& arg1) const;
	::android::content::res::AssetFileDescriptor OpenAssetFile(const ::android::net::Uri& arg0, const ::java::lang::String& arg1, const ::android::os::CancellationSignal& arg2) const;
	::android::os::ParcelFileDescriptor OpenFile(const ::android::net::Uri& arg0, const ::java::lang::String& arg1) const;
	::android::os::ParcelFileDescriptor OpenFile(const ::android::net::Uri& arg0, const ::java::lang::String& arg1, const ::android::os::CancellationSignal& arg2) const;
	::android::os::ParcelFileDescriptor OpenFileHelper(const ::android::net::Uri& arg0, const ::java::lang::String& arg1) const;
	::android::os::ParcelFileDescriptor OpenPipeHelper(const ::android::net::Uri& arg0, const ::java::lang::String& arg1, const ::android::os::Bundle& arg2, const ::java::lang::Object& arg3, const ::android::content::ContentProvider_PipeDataWriter& arg4) const;
	::android::content::res::AssetFileDescriptor OpenTypedAssetFile(const ::android::net::Uri& arg0, const ::java::lang::String& arg1, const ::android::os::Bundle& arg2) const;
	::android::content::res::AssetFileDescriptor OpenTypedAssetFile(const ::android::net::Uri& arg0, const ::java::lang::String& arg1, const ::android::os::Bundle& arg2, const ::android::os::CancellationSignal& arg3) const;
	::android::database::Cursor Query(const ::android::net::Uri& arg0, const jni::Array< ::java::lang::String >& arg1, const ::android::os::Bundle& arg2, const ::android::os::CancellationSignal& arg3) const;
	::android::database::Cursor Query(const ::android::net::Uri& arg0, const jni::Array< ::java::lang::String >& arg1, const ::java::lang::String& arg2, const jni::Array< ::java::lang::String >& arg3, const ::java::lang::String& arg4) const;
	::android::database::Cursor Query(const ::android::net::Uri& arg0, const jni::Array< ::java::lang::String >& arg1, const ::java::lang::String& arg2, const jni::Array< ::java::lang::String >& arg3, const ::java::lang::String& arg4, const ::android::os::CancellationSignal& arg5) const;
	::jboolean Refresh(const ::android::net::Uri& arg0, const ::android::os::Bundle& arg1, const ::android::os::CancellationSignal& arg2) const;
	::android::content::Context RequireContext() const;
	::jvoid RestoreCallingIdentity(const ::android::content::ContentProvider_CallingIdentity& arg0) const;
	::jvoid SetPathPermissions(const jni::Array< ::android::content::pm::PathPermission >& arg0) const;
	::jvoid SetReadPermission(const ::java::lang::String& arg0) const;
	::jvoid SetWritePermission(const ::java::lang::String& arg0) const;
	::jvoid Shutdown() const;
	::android::net::Uri Uncanonicalize(const ::android::net::Uri& arg0) const;
	::jint Update(const ::android::net::Uri& arg0, const ::android::content::ContentValues& arg1, const ::android::os::Bundle& arg2) const;
	::jint Update(const ::android::net::Uri& arg0, const ::android::content::ContentValues& arg1, const ::java::lang::String& arg2, const jni::Array< ::java::lang::String >& arg3) const;
	static jobject __Constructor();
	ContentProvider() : ::java::lang::Object(__Constructor()) {}
	explicit ContentProvider(jobject o) : ::java::lang::Object(o) {}
	ContentProvider(const ContentProvider& o)  : ::java::lang::Object(o) {}

};

struct ComponentCallbacks2 : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::content::ComponentCallbacks();
	static ::jint& fTRIM_MEMORY_BACKGROUND();
	static ::jint& fTRIM_MEMORY_COMPLETE();
	static ::jint& fTRIM_MEMORY_MODERATE();
	static ::jint& fTRIM_MEMORY_RUNNING_CRITICAL();
	static ::jint& fTRIM_MEMORY_RUNNING_LOW();
	static ::jint& fTRIM_MEMORY_RUNNING_MODERATE();
	static ::jint& fTRIM_MEMORY_UI_HIDDEN();
	::jvoid OnTrimMemory(const ::jint& arg0) const;
	explicit ComponentCallbacks2(jobject o) : java::lang::Object(o) {}
	ComponentCallbacks2(const ComponentCallbacks2& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::content::ComponentCallbacks2();
		operator ::android::content::ComponentCallbacks();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnTrimMemory(const ::jint& arg0) = 0;
	};
};

struct ComponentCallbacks : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnConfigurationChanged(const ::android::content::res::Configuration& arg0) const;
	::jvoid OnLowMemory() const;
	explicit ComponentCallbacks(jobject o) : java::lang::Object(o) {}
	ComponentCallbacks(const ComponentCallbacks& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::content::ComponentCallbacks();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnConfigurationChanged(const ::android::content::res::Configuration& arg0) = 0;
		virtual void OnLowMemory() = 0;
	};
};

}}

namespace android { namespace content { namespace res { 
struct Configuration : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	operator ::java::lang::Comparable();
	static ::jint& fCOLOR_MODE_HDR_MASK();
	static ::jint& fCOLOR_MODE_HDR_NO();
	static ::jint& fCOLOR_MODE_HDR_SHIFT();
	static ::jint& fCOLOR_MODE_HDR_UNDEFINED();
	static ::jint& fCOLOR_MODE_HDR_YES();
	static ::jint& fCOLOR_MODE_UNDEFINED();
	static ::jint& fCOLOR_MODE_WIDE_COLOR_GAMUT_MASK();
	static ::jint& fCOLOR_MODE_WIDE_COLOR_GAMUT_NO();
	static ::jint& fCOLOR_MODE_WIDE_COLOR_GAMUT_UNDEFINED();
	static ::jint& fCOLOR_MODE_WIDE_COLOR_GAMUT_YES();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fDENSITY_DPI_UNDEFINED();
	static ::jint& fFONT_WEIGHT_ADJUSTMENT_UNDEFINED();
	static ::jint& fHARDKEYBOARDHIDDEN_NO();
	static ::jint& fHARDKEYBOARDHIDDEN_UNDEFINED();
	static ::jint& fHARDKEYBOARDHIDDEN_YES();
	static ::jint& fKEYBOARDHIDDEN_NO();
	static ::jint& fKEYBOARDHIDDEN_UNDEFINED();
	static ::jint& fKEYBOARDHIDDEN_YES();
	static ::jint& fKEYBOARD_12KEY();
	static ::jint& fKEYBOARD_NOKEYS();
	static ::jint& fKEYBOARD_QWERTY();
	static ::jint& fKEYBOARD_UNDEFINED();
	static ::jint& fMNC_ZERO();
	static ::jint& fNAVIGATIONHIDDEN_NO();
	static ::jint& fNAVIGATIONHIDDEN_UNDEFINED();
	static ::jint& fNAVIGATIONHIDDEN_YES();
	static ::jint& fNAVIGATION_DPAD();
	static ::jint& fNAVIGATION_NONAV();
	static ::jint& fNAVIGATION_TRACKBALL();
	static ::jint& fNAVIGATION_UNDEFINED();
	static ::jint& fNAVIGATION_WHEEL();
	static ::jint& fORIENTATION_LANDSCAPE();
	static ::jint& fORIENTATION_PORTRAIT();
	static ::jint& fORIENTATION_SQUARE();
	static ::jint& fORIENTATION_UNDEFINED();
	static ::jint& fSCREENLAYOUT_LAYOUTDIR_LTR();
	static ::jint& fSCREENLAYOUT_LAYOUTDIR_MASK();
	static ::jint& fSCREENLAYOUT_LAYOUTDIR_RTL();
	static ::jint& fSCREENLAYOUT_LAYOUTDIR_SHIFT();
	static ::jint& fSCREENLAYOUT_LAYOUTDIR_UNDEFINED();
	static ::jint& fSCREENLAYOUT_LONG_MASK();
	static ::jint& fSCREENLAYOUT_LONG_NO();
	static ::jint& fSCREENLAYOUT_LONG_UNDEFINED();
	static ::jint& fSCREENLAYOUT_LONG_YES();
	static ::jint& fSCREENLAYOUT_ROUND_MASK();
	static ::jint& fSCREENLAYOUT_ROUND_NO();
	static ::jint& fSCREENLAYOUT_ROUND_UNDEFINED();
	static ::jint& fSCREENLAYOUT_ROUND_YES();
	static ::jint& fSCREENLAYOUT_SIZE_LARGE();
	static ::jint& fSCREENLAYOUT_SIZE_MASK();
	static ::jint& fSCREENLAYOUT_SIZE_NORMAL();
	static ::jint& fSCREENLAYOUT_SIZE_SMALL();
	static ::jint& fSCREENLAYOUT_SIZE_UNDEFINED();
	static ::jint& fSCREENLAYOUT_SIZE_XLARGE();
	static ::jint& fSCREENLAYOUT_UNDEFINED();
	static ::jint& fSCREEN_HEIGHT_DP_UNDEFINED();
	static ::jint& fSCREEN_WIDTH_DP_UNDEFINED();
	static ::jint& fSMALLEST_SCREEN_WIDTH_DP_UNDEFINED();
	static ::jint& fTOUCHSCREEN_FINGER();
	static ::jint& fTOUCHSCREEN_NOTOUCH();
	static ::jint& fTOUCHSCREEN_STYLUS();
	static ::jint& fTOUCHSCREEN_UNDEFINED();
	static ::jint& fUI_MODE_NIGHT_MASK();
	static ::jint& fUI_MODE_NIGHT_NO();
	static ::jint& fUI_MODE_NIGHT_UNDEFINED();
	static ::jint& fUI_MODE_NIGHT_YES();
	static ::jint& fUI_MODE_TYPE_APPLIANCE();
	static ::jint& fUI_MODE_TYPE_CAR();
	static ::jint& fUI_MODE_TYPE_DESK();
	static ::jint& fUI_MODE_TYPE_MASK();
	static ::jint& fUI_MODE_TYPE_NORMAL();
	static ::jint& fUI_MODE_TYPE_TELEVISION();
	static ::jint& fUI_MODE_TYPE_UNDEFINED();
	static ::jint& fUI_MODE_TYPE_VR_HEADSET();
	static ::jint& fUI_MODE_TYPE_WATCH();
	::jint fColorMode() const;
	void fColorMode(const ::jint& arg0) const;
	::jint fDensityDpi() const;
	void fDensityDpi(const ::jint& arg0) const;
	::jfloat fFontScale() const;
	void fFontScale(const ::jfloat& arg0) const;
	::jint fFontWeightAdjustment() const;
	void fFontWeightAdjustment(const ::jint& arg0) const;
	::jint fHardKeyboardHidden() const;
	void fHardKeyboardHidden(const ::jint& arg0) const;
	::jint fKeyboard() const;
	void fKeyboard(const ::jint& arg0) const;
	::jint fKeyboardHidden() const;
	void fKeyboardHidden(const ::jint& arg0) const;
	::java::util::Locale fLocale() const;
	void fLocale(const ::java::util::Locale& arg0) const;
	::jint fMcc() const;
	void fMcc(const ::jint& arg0) const;
	::jint fMnc() const;
	void fMnc(const ::jint& arg0) const;
	::jint fNavigation() const;
	void fNavigation(const ::jint& arg0) const;
	::jint fNavigationHidden() const;
	void fNavigationHidden(const ::jint& arg0) const;
	::jint fOrientation() const;
	void fOrientation(const ::jint& arg0) const;
	::jint fScreenHeightDp() const;
	void fScreenHeightDp(const ::jint& arg0) const;
	::jint fScreenLayout() const;
	void fScreenLayout(const ::jint& arg0) const;
	::jint fScreenWidthDp() const;
	void fScreenWidthDp(const ::jint& arg0) const;
	::jint fSmallestScreenWidthDp() const;
	void fSmallestScreenWidthDp(const ::jint& arg0) const;
	::jint fTouchscreen() const;
	void fTouchscreen(const ::jint& arg0) const;
	::jint fUiMode() const;
	void fUiMode(const ::jint& arg0) const;
	::jint CompareTo(const ::android::content::res::Configuration& arg0) const;
	::jint DescribeContents() const;
	::jint Diff(const ::android::content::res::Configuration& arg0) const;
	::jboolean Equals(const ::android::content::res::Configuration& arg0) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint GetLayoutDirection() const;
	::android::os::LocaleList GetLocales() const;
	::jint HashCode() const;
	::jboolean IsLayoutSizeAtLeast(const ::jint& arg0) const;
	::jboolean IsNightModeActive() const;
	::jboolean IsScreenHdr() const;
	::jboolean IsScreenRound() const;
	::jboolean IsScreenWideColorGamut() const;
	static ::jboolean NeedNewResources(const ::jint& arg0, const ::jint& arg1);
	::jvoid ReadFromParcel(const ::android::os::Parcel& arg0) const;
	::jvoid SetLayoutDirection(const ::java::util::Locale& arg0) const;
	::jvoid SetLocale(const ::java::util::Locale& arg0) const;
	::jvoid SetLocales(const ::android::os::LocaleList& arg0) const;
	::jvoid SetTo(const ::android::content::res::Configuration& arg0) const;
	::jvoid SetToDefaults() const;
	::java::lang::String ToString() const;
	::jint UpdateFrom(const ::android::content::res::Configuration& arg0) const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor();
	Configuration() : ::java::lang::Object(__Constructor()) {}
	explicit Configuration(jobject o) : ::java::lang::Object(o) {}
	Configuration(const Configuration& o)  : ::java::lang::Object(o) {}

};

}}}

namespace android { namespace os { 
struct LocaleList : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	static ::android::os::LocaleList ForLanguageTags(const ::java::lang::String& arg0);
	::java::util::Locale Get(const ::jint& arg0) const;
	static ::android::os::LocaleList GetAdjustedDefault();
	static ::android::os::LocaleList GetDefault();
	static ::android::os::LocaleList GetEmptyLocaleList();
	::java::util::Locale GetFirstMatch(const jni::Array< ::java::lang::String >& arg0) const;
	::jint HashCode() const;
	::jint IndexOf(const ::java::util::Locale& arg0) const;
	::jboolean IsEmpty() const;
	static ::jboolean IsPseudoLocale(const ::android::icu::util::ULocale& arg0);
	static ::jvoid SetDefault(const ::android::os::LocaleList& arg0);
	::jint Size() const;
	::java::lang::String ToLanguageTags() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor(const jni::Array< ::java::util::Locale >& arg0);
	LocaleList(const jni::Array< ::java::util::Locale >& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit LocaleList(jobject o) : ::java::lang::Object(o) {}
	LocaleList(const LocaleList& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace icu { namespace util { 
struct ULocale : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Serializable();
	operator ::java::lang::Comparable();
	static ::android::icu::util::ULocale& fCANADA();
	static ::android::icu::util::ULocale& fCANADA_FRENCH();
	static ::android::icu::util::ULocale& fCHINA();
	static ::android::icu::util::ULocale& fCHINESE();
	static ::android::icu::util::ULocale& fENGLISH();
	static ::android::icu::util::ULocale& fFRANCE();
	static ::android::icu::util::ULocale& fFRENCH();
	static ::android::icu::util::ULocale& fGERMAN();
	static ::android::icu::util::ULocale& fGERMANY();
	static ::android::icu::util::ULocale& fITALIAN();
	static ::android::icu::util::ULocale& fITALY();
	static ::android::icu::util::ULocale& fJAPAN();
	static ::android::icu::util::ULocale& fJAPANESE();
	static ::android::icu::util::ULocale& fKOREA();
	static ::android::icu::util::ULocale& fKOREAN();
	static ::android::icu::util::ULocale& fPRC();
	static ::jchar& fPRIVATE_USE_EXTENSION();
	static ::android::icu::util::ULocale& fROOT();
	static ::android::icu::util::ULocale& fSIMPLIFIED_CHINESE();
	static ::android::icu::util::ULocale& fTAIWAN();
	static ::android::icu::util::ULocale& fTRADITIONAL_CHINESE();
	static ::android::icu::util::ULocale& fUK();
	static ::jchar& fUNICODE_LOCALE_EXTENSION();
	static ::android::icu::util::ULocale& fUS();
	static ::android::icu::util::ULocale AcceptLanguage(const ::java::lang::String& arg0, const jni::Array< ::android::icu::util::ULocale >& arg1, const jni::Array< ::jboolean >& arg2);
	static ::android::icu::util::ULocale AcceptLanguage(const ::java::lang::String& arg0, const jni::Array< ::jboolean >& arg1);
	static ::android::icu::util::ULocale AcceptLanguage(const jni::Array< ::android::icu::util::ULocale >& arg0, const jni::Array< ::android::icu::util::ULocale >& arg1, const jni::Array< ::jboolean >& arg2);
	static ::android::icu::util::ULocale AcceptLanguage(const jni::Array< ::android::icu::util::ULocale >& arg0, const jni::Array< ::jboolean >& arg1);
	static ::android::icu::util::ULocale AddLikelySubtags(const ::android::icu::util::ULocale& arg0);
	static ::java::lang::String Canonicalize(const ::java::lang::String& arg0);
	::java::lang::Object Clone() const;
	::jint CompareTo(const ::android::icu::util::ULocale& arg0) const;
	static ::android::icu::util::ULocale CreateCanonical(const ::java::lang::String& arg0);
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	static ::android::icu::util::ULocale ForLanguageTag(const ::java::lang::String& arg0);
	static ::android::icu::util::ULocale ForLocale(const ::java::util::Locale& arg0);
	static jni::Array< ::android::icu::util::ULocale > GetAvailableLocales();
	static ::java::util::Collection GetAvailableLocalesByType(const ::android::icu::util::ULocale_AvailableType& arg0);
	::java::lang::String GetBaseName() const;
	static ::java::lang::String GetBaseName(const ::java::lang::String& arg0);
	::java::lang::String GetCharacterOrientation() const;
	::java::lang::String GetCountry() const;
	static ::java::lang::String GetCountry(const ::java::lang::String& arg0);
	static ::android::icu::util::ULocale GetDefault();
	static ::android::icu::util::ULocale GetDefault(const ::android::icu::util::ULocale_Category& arg0);
	::java::lang::String GetDisplayCountry() const;
	::java::lang::String GetDisplayCountry(const ::android::icu::util::ULocale& arg0) const;
	static ::java::lang::String GetDisplayCountry(const ::java::lang::String& arg0, const ::android::icu::util::ULocale& arg1);
	static ::java::lang::String GetDisplayCountry(const ::java::lang::String& arg0, const ::java::lang::String& arg1);
	static ::java::lang::String GetDisplayKeyword(const ::java::lang::String& arg0);
	static ::java::lang::String GetDisplayKeyword(const ::java::lang::String& arg0, const ::android::icu::util::ULocale& arg1);
	static ::java::lang::String GetDisplayKeyword(const ::java::lang::String& arg0, const ::java::lang::String& arg1);
	::java::lang::String GetDisplayKeywordValue(const ::java::lang::String& arg0) const;
	::java::lang::String GetDisplayKeywordValue(const ::java::lang::String& arg0, const ::android::icu::util::ULocale& arg1) const;
	static ::java::lang::String GetDisplayKeywordValue(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::android::icu::util::ULocale& arg2);
	static ::java::lang::String GetDisplayKeywordValue(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2);
	::java::lang::String GetDisplayLanguage() const;
	::java::lang::String GetDisplayLanguage(const ::android::icu::util::ULocale& arg0) const;
	static ::java::lang::String GetDisplayLanguage(const ::java::lang::String& arg0, const ::android::icu::util::ULocale& arg1);
	static ::java::lang::String GetDisplayLanguage(const ::java::lang::String& arg0, const ::java::lang::String& arg1);
	::java::lang::String GetDisplayLanguageWithDialect() const;
	::java::lang::String GetDisplayLanguageWithDialect(const ::android::icu::util::ULocale& arg0) const;
	static ::java::lang::String GetDisplayLanguageWithDialect(const ::java::lang::String& arg0, const ::android::icu::util::ULocale& arg1);
	static ::java::lang::String GetDisplayLanguageWithDialect(const ::java::lang::String& arg0, const ::java::lang::String& arg1);
	::java::lang::String GetDisplayName() const;
	::java::lang::String GetDisplayName(const ::android::icu::util::ULocale& arg0) const;
	static ::java::lang::String GetDisplayName(const ::java::lang::String& arg0, const ::android::icu::util::ULocale& arg1);
	static ::java::lang::String GetDisplayName(const ::java::lang::String& arg0, const ::java::lang::String& arg1);
	::java::lang::String GetDisplayNameWithDialect() const;
	::java::lang::String GetDisplayNameWithDialect(const ::android::icu::util::ULocale& arg0) const;
	static ::java::lang::String GetDisplayNameWithDialect(const ::java::lang::String& arg0, const ::android::icu::util::ULocale& arg1);
	static ::java::lang::String GetDisplayNameWithDialect(const ::java::lang::String& arg0, const ::java::lang::String& arg1);
	::java::lang::String GetDisplayScript() const;
	::java::lang::String GetDisplayScript(const ::android::icu::util::ULocale& arg0) const;
	static ::java::lang::String GetDisplayScript(const ::java::lang::String& arg0, const ::android::icu::util::ULocale& arg1);
	static ::java::lang::String GetDisplayScript(const ::java::lang::String& arg0, const ::java::lang::String& arg1);
	::java::lang::String GetDisplayVariant() const;
	::java::lang::String GetDisplayVariant(const ::android::icu::util::ULocale& arg0) const;
	static ::java::lang::String GetDisplayVariant(const ::java::lang::String& arg0, const ::android::icu::util::ULocale& arg1);
	static ::java::lang::String GetDisplayVariant(const ::java::lang::String& arg0, const ::java::lang::String& arg1);
	::java::lang::String GetExtension(const ::jchar& arg0) const;
	::java::util::Set GetExtensionKeys() const;
	::android::icu::util::ULocale GetFallback() const;
	static ::java::lang::String GetFallback(const ::java::lang::String& arg0);
	::java::lang::String GetISO3Country() const;
	static ::java::lang::String GetISO3Country(const ::java::lang::String& arg0);
	::java::lang::String GetISO3Language() const;
	static ::java::lang::String GetISO3Language(const ::java::lang::String& arg0);
	static jni::Array< ::java::lang::String > GetISOCountries();
	static jni::Array< ::java::lang::String > GetISOLanguages();
	::java::lang::String GetKeywordValue(const ::java::lang::String& arg0) const;
	static ::java::lang::String GetKeywordValue(const ::java::lang::String& arg0, const ::java::lang::String& arg1);
	::java::util::Iterator GetKeywords() const;
	static ::java::util::Iterator GetKeywords(const ::java::lang::String& arg0);
	::java::lang::String GetLanguage() const;
	static ::java::lang::String GetLanguage(const ::java::lang::String& arg0);
	::java::lang::String GetLineOrientation() const;
	::java::lang::String GetName() const;
	static ::java::lang::String GetName(const ::java::lang::String& arg0);
	::java::lang::String GetScript() const;
	static ::java::lang::String GetScript(const ::java::lang::String& arg0);
	::java::util::Set GetUnicodeLocaleAttributes() const;
	::java::util::Set GetUnicodeLocaleKeys() const;
	::java::lang::String GetUnicodeLocaleType(const ::java::lang::String& arg0) const;
	::java::lang::String GetVariant() const;
	static ::java::lang::String GetVariant(const ::java::lang::String& arg0);
	::jint HashCode() const;
	::jboolean IsRightToLeft() const;
	static ::android::icu::util::ULocale MinimizeSubtags(const ::android::icu::util::ULocale& arg0);
	::android::icu::util::ULocale SetKeywordValue(const ::java::lang::String& arg0, const ::java::lang::String& arg1) const;
	static ::java::lang::String SetKeywordValue(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2);
	::java::lang::String ToLanguageTag() const;
	static ::java::lang::String ToLegacyKey(const ::java::lang::String& arg0);
	static ::java::lang::String ToLegacyType(const ::java::lang::String& arg0, const ::java::lang::String& arg1);
	::java::util::Locale ToLocale() const;
	::java::lang::String ToString() const;
	static ::java::lang::String ToUnicodeLocaleKey(const ::java::lang::String& arg0);
	static ::java::lang::String ToUnicodeLocaleType(const ::java::lang::String& arg0, const ::java::lang::String& arg1);
	static jobject __Constructor(const ::java::lang::String& arg0);
	ULocale(const ::java::lang::String& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::java::lang::String& arg1);
	ULocale(const ::java::lang::String& arg0, const ::java::lang::String& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2);
	ULocale(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2) : ::java::lang::Object(__Constructor(arg0, arg1, arg2)) {}
	explicit ULocale(jobject o) : ::java::lang::Object(o) {}
	ULocale(const ULocale& o)  : ::java::lang::Object(o) {}

};

struct ULocale_AvailableType : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::android::icu::util::ULocale_AvailableType& fDEFAULT();
	static ::android::icu::util::ULocale_AvailableType& fONLY_LEGACY_ALIASES();
	static ::android::icu::util::ULocale_AvailableType& fWITH_LEGACY_ALIASES();
	static ::android::icu::util::ULocale_AvailableType ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::android::icu::util::ULocale_AvailableType > Values();
	explicit ULocale_AvailableType(jobject o) : ::java::lang::Enum(o) {}
	ULocale_AvailableType(const ULocale_AvailableType& o)  : ::java::lang::Enum(o) {}

};

struct ULocale_Category : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::android::icu::util::ULocale_Category& fDISPLAY();
	static ::android::icu::util::ULocale_Category& fFORMAT();
	static ::android::icu::util::ULocale_Category ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::android::icu::util::ULocale_Category > Values();
	explicit ULocale_Category(jobject o) : ::java::lang::Enum(o) {}
	ULocale_Category(const ULocale_Category& o)  : ::java::lang::Enum(o) {}

};

}}}

namespace android { namespace content { namespace pm { 
struct PackageItemInfo : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jint fBanner() const;
	void fBanner(const ::jint& arg0) const;
	::jint fIcon() const;
	void fIcon(const ::jint& arg0) const;
	::jint fLabelRes() const;
	void fLabelRes(const ::jint& arg0) const;
	::jint fLogo() const;
	void fLogo(const ::jint& arg0) const;
	::android::os::Bundle fMetaData() const;
	void fMetaData(const ::android::os::Bundle& arg0) const;
	::java::lang::String fName() const;
	void fName(const ::java::lang::String& arg0) const;
	::java::lang::CharSequence fNonLocalizedLabel() const;
	void fNonLocalizedLabel(const ::java::lang::CharSequence& arg0) const;
	::java::lang::String fPackageName() const;
	void fPackageName(const ::java::lang::String& arg0) const;
	::jvoid DumpBack(const ::android::util::Printer& arg0, const ::java::lang::String& arg1) const;
	::jvoid DumpFront(const ::android::util::Printer& arg0, const ::java::lang::String& arg1) const;
	::android::graphics::drawable::Drawable LoadBanner(const ::android::content::pm::PackageManager& arg0) const;
	::android::graphics::drawable::Drawable LoadIcon(const ::android::content::pm::PackageManager& arg0) const;
	::java::lang::CharSequence LoadLabel(const ::android::content::pm::PackageManager& arg0) const;
	::android::graphics::drawable::Drawable LoadLogo(const ::android::content::pm::PackageManager& arg0) const;
	::android::graphics::drawable::Drawable LoadUnbadgedIcon(const ::android::content::pm::PackageManager& arg0) const;
	::android::content::res::XmlResourceParser LoadXmlMetaData(const ::android::content::pm::PackageManager& arg0, const ::java::lang::String& arg1) const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor();
	PackageItemInfo() : ::java::lang::Object(__Constructor()) {}
	static jobject __Constructor(const ::android::os::Parcel& arg0);
	PackageItemInfo(const ::android::os::Parcel& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit PackageItemInfo(jobject o) : ::java::lang::Object(o) {}
	PackageItemInfo(const PackageItemInfo& o)  : ::java::lang::Object(o) {}

};

struct ComponentInfo : ::android::content::pm::PackageItemInfo
{
	static jni::Class __CLASS;

	::android::content::pm::ApplicationInfo fApplicationInfo() const;
	void fApplicationInfo(const ::android::content::pm::ApplicationInfo& arg0) const;
	jni::Array< ::java::lang::String > fAttributionTags() const;
	void fAttributionTags(const jni::Array< ::java::lang::String >& arg0) const;
	::jint fDescriptionRes() const;
	void fDescriptionRes(const ::jint& arg0) const;
	::jboolean fDirectBootAware() const;
	void fDirectBootAware(const ::jboolean& arg0) const;
	::jboolean fEnabled() const;
	void fEnabled(const ::jboolean& arg0) const;
	::jboolean fExported() const;
	void fExported(const ::jboolean& arg0) const;
	::java::lang::String fProcessName() const;
	void fProcessName(const ::java::lang::String& arg0) const;
	::java::lang::String fSplitName() const;
	void fSplitName(const ::java::lang::String& arg0) const;
	::jvoid DumpBack(const ::android::util::Printer& arg0, const ::java::lang::String& arg1) const;
	::jvoid DumpFront(const ::android::util::Printer& arg0, const ::java::lang::String& arg1) const;
	::jint GetBannerResource() const;
	::jint GetIconResource() const;
	::jint GetLogoResource() const;
	::jboolean IsEnabled() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor();
	ComponentInfo() : ::android::content::pm::PackageItemInfo(__Constructor()) {}
	static jobject __Constructor(const ::android::os::Parcel& arg0);
	ComponentInfo(const ::android::os::Parcel& arg0) : ::android::content::pm::PackageItemInfo(__Constructor(arg0)) {}
	explicit ComponentInfo(jobject o) : ::android::content::pm::PackageItemInfo(o) {}
	ComponentInfo(const ComponentInfo& o)  : ::android::content::pm::PackageItemInfo(o) {}

};

struct ProviderInfo : ::android::content::pm::ComponentInfo
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fFLAG_SINGLE_USER();
	::java::lang::String fAuthority() const;
	void fAuthority(const ::java::lang::String& arg0) const;
	::jint fFlags() const;
	void fFlags(const ::jint& arg0) const;
	::jboolean fForceUriPermissions() const;
	void fForceUriPermissions(const ::jboolean& arg0) const;
	::jboolean fGrantUriPermissions() const;
	void fGrantUriPermissions(const ::jboolean& arg0) const;
	::jint fInitOrder() const;
	void fInitOrder(const ::jint& arg0) const;
	::jboolean fIsSyncable() const;
	void fIsSyncable(const ::jboolean& arg0) const;
	::jboolean fMultiprocess() const;
	void fMultiprocess(const ::jboolean& arg0) const;
	jni::Array< ::android::content::pm::PathPermission > fPathPermissions() const;
	void fPathPermissions(const jni::Array< ::android::content::pm::PathPermission >& arg0) const;
	::java::lang::String fReadPermission() const;
	void fReadPermission(const ::java::lang::String& arg0) const;
	jni::Array< ::android::os::PatternMatcher > fUriPermissionPatterns() const;
	void fUriPermissionPatterns(const jni::Array< ::android::os::PatternMatcher >& arg0) const;
	::java::lang::String fWritePermission() const;
	void fWritePermission(const ::java::lang::String& arg0) const;
	::jint DescribeContents() const;
	::jvoid Dump(const ::android::util::Printer& arg0, const ::java::lang::String& arg1) const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor();
	ProviderInfo() : ::android::content::pm::ComponentInfo(__Constructor()) {}
	explicit ProviderInfo(jobject o) : ::android::content::pm::ComponentInfo(o) {}
	ProviderInfo(const ProviderInfo& o)  : ::android::content::pm::ComponentInfo(o) {}

};

struct PackageManager : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fCERT_INPUT_RAW_X509();
	static ::jint& fCERT_INPUT_SHA256();
	static ::jint& fCOMPONENT_ENABLED_STATE_DEFAULT();
	static ::jint& fCOMPONENT_ENABLED_STATE_DISABLED();
	static ::jint& fCOMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED();
	static ::jint& fCOMPONENT_ENABLED_STATE_DISABLED_USER();
	static ::jint& fCOMPONENT_ENABLED_STATE_ENABLED();
	static ::jint& fDONT_KILL_APP();
	static ::java::lang::String& fEXTRA_VERIFICATION_ID();
	static ::java::lang::String& fEXTRA_VERIFICATION_RESULT();
	static ::java::lang::String& fFEATURE_ACTIVITIES_ON_SECONDARY_DISPLAYS();
	static ::java::lang::String& fFEATURE_APP_WIDGETS();
	static ::java::lang::String& fFEATURE_AUDIO_LOW_LATENCY();
	static ::java::lang::String& fFEATURE_AUDIO_OUTPUT();
	static ::java::lang::String& fFEATURE_AUDIO_PRO();
	static ::java::lang::String& fFEATURE_AUTOFILL();
	static ::java::lang::String& fFEATURE_AUTOMOTIVE();
	static ::java::lang::String& fFEATURE_BACKUP();
	static ::java::lang::String& fFEATURE_BLUETOOTH();
	static ::java::lang::String& fFEATURE_BLUETOOTH_LE();
	static ::java::lang::String& fFEATURE_CAMERA();
	static ::java::lang::String& fFEATURE_CAMERA_ANY();
	static ::java::lang::String& fFEATURE_CAMERA_AR();
	static ::java::lang::String& fFEATURE_CAMERA_AUTOFOCUS();
	static ::java::lang::String& fFEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSING();
	static ::java::lang::String& fFEATURE_CAMERA_CAPABILITY_MANUAL_SENSOR();
	static ::java::lang::String& fFEATURE_CAMERA_CAPABILITY_RAW();
	static ::java::lang::String& fFEATURE_CAMERA_CONCURRENT();
	static ::java::lang::String& fFEATURE_CAMERA_EXTERNAL();
	static ::java::lang::String& fFEATURE_CAMERA_FLASH();
	static ::java::lang::String& fFEATURE_CAMERA_FRONT();
	static ::java::lang::String& fFEATURE_CAMERA_LEVEL_FULL();
	static ::java::lang::String& fFEATURE_CANT_SAVE_STATE();
	static ::java::lang::String& fFEATURE_COMPANION_DEVICE_SETUP();
	static ::java::lang::String& fFEATURE_CONNECTION_SERVICE();
	static ::java::lang::String& fFEATURE_CONSUMER_IR();
	static ::java::lang::String& fFEATURE_CONTROLS();
	static ::java::lang::String& fFEATURE_DEVICE_ADMIN();
	static ::java::lang::String& fFEATURE_EMBEDDED();
	static ::java::lang::String& fFEATURE_ETHERNET();
	static ::java::lang::String& fFEATURE_FACE();
	static ::java::lang::String& fFEATURE_FAKETOUCH();
	static ::java::lang::String& fFEATURE_FAKETOUCH_MULTITOUCH_DISTINCT();
	static ::java::lang::String& fFEATURE_FAKETOUCH_MULTITOUCH_JAZZHAND();
	static ::java::lang::String& fFEATURE_FINGERPRINT();
	static ::java::lang::String& fFEATURE_FREEFORM_WINDOW_MANAGEMENT();
	static ::java::lang::String& fFEATURE_GAMEPAD();
	static ::java::lang::String& fFEATURE_HARDWARE_KEYSTORE();
	static ::java::lang::String& fFEATURE_HIFI_SENSORS();
	static ::java::lang::String& fFEATURE_HOME_SCREEN();
	static ::java::lang::String& fFEATURE_IDENTITY_CREDENTIAL_HARDWARE();
	static ::java::lang::String& fFEATURE_IDENTITY_CREDENTIAL_HARDWARE_DIRECT_ACCESS();
	static ::java::lang::String& fFEATURE_INPUT_METHODS();
	static ::java::lang::String& fFEATURE_IPSEC_TUNNELS();
	static ::java::lang::String& fFEATURE_IRIS();
	static ::java::lang::String& fFEATURE_KEYSTORE_APP_ATTEST_KEY();
	static ::java::lang::String& fFEATURE_KEYSTORE_LIMITED_USE_KEY();
	static ::java::lang::String& fFEATURE_KEYSTORE_SINGLE_USE_KEY();
	static ::java::lang::String& fFEATURE_LEANBACK();
	static ::java::lang::String& fFEATURE_LEANBACK_ONLY();
	static ::java::lang::String& fFEATURE_LIVE_TV();
	static ::java::lang::String& fFEATURE_LIVE_WALLPAPER();
	static ::java::lang::String& fFEATURE_LOCATION();
	static ::java::lang::String& fFEATURE_LOCATION_GPS();
	static ::java::lang::String& fFEATURE_LOCATION_NETWORK();
	static ::java::lang::String& fFEATURE_MANAGED_USERS();
	static ::java::lang::String& fFEATURE_MICROPHONE();
	static ::java::lang::String& fFEATURE_MIDI();
	static ::java::lang::String& fFEATURE_NFC();
	static ::java::lang::String& fFEATURE_NFC_BEAM();
	static ::java::lang::String& fFEATURE_NFC_HOST_CARD_EMULATION();
	static ::java::lang::String& fFEATURE_NFC_HOST_CARD_EMULATION_NFCF();
	static ::java::lang::String& fFEATURE_NFC_OFF_HOST_CARD_EMULATION_ESE();
	static ::java::lang::String& fFEATURE_NFC_OFF_HOST_CARD_EMULATION_UICC();
	static ::java::lang::String& fFEATURE_OPENGLES_DEQP_LEVEL();
	static ::java::lang::String& fFEATURE_OPENGLES_EXTENSION_PACK();
	static ::java::lang::String& fFEATURE_PC();
	static ::java::lang::String& fFEATURE_PICTURE_IN_PICTURE();
	static ::java::lang::String& fFEATURE_PRINTING();
	static ::java::lang::String& fFEATURE_RAM_LOW();
	static ::java::lang::String& fFEATURE_RAM_NORMAL();
	static ::java::lang::String& fFEATURE_SCREEN_LANDSCAPE();
	static ::java::lang::String& fFEATURE_SCREEN_PORTRAIT();
	static ::java::lang::String& fFEATURE_SECURELY_REMOVES_USERS();
	static ::java::lang::String& fFEATURE_SECURE_LOCK_SCREEN();
	static ::java::lang::String& fFEATURE_SECURITY_MODEL_COMPATIBLE();
	static ::java::lang::String& fFEATURE_SENSOR_ACCELEROMETER();
	static ::java::lang::String& fFEATURE_SENSOR_AMBIENT_TEMPERATURE();
	static ::java::lang::String& fFEATURE_SENSOR_BAROMETER();
	static ::java::lang::String& fFEATURE_SENSOR_COMPASS();
	static ::java::lang::String& fFEATURE_SENSOR_GYROSCOPE();
	static ::java::lang::String& fFEATURE_SENSOR_HEART_RATE();
	static ::java::lang::String& fFEATURE_SENSOR_HEART_RATE_ECG();
	static ::java::lang::String& fFEATURE_SENSOR_HINGE_ANGLE();
	static ::java::lang::String& fFEATURE_SENSOR_LIGHT();
	static ::java::lang::String& fFEATURE_SENSOR_PROXIMITY();
	static ::java::lang::String& fFEATURE_SENSOR_RELATIVE_HUMIDITY();
	static ::java::lang::String& fFEATURE_SENSOR_STEP_COUNTER();
	static ::java::lang::String& fFEATURE_SENSOR_STEP_DETECTOR();
	static ::java::lang::String& fFEATURE_SE_OMAPI_ESE();
	static ::java::lang::String& fFEATURE_SE_OMAPI_SD();
	static ::java::lang::String& fFEATURE_SE_OMAPI_UICC();
	static ::java::lang::String& fFEATURE_SIP();
	static ::java::lang::String& fFEATURE_SIP_VOIP();
	static ::java::lang::String& fFEATURE_STRONGBOX_KEYSTORE();
	static ::java::lang::String& fFEATURE_TELEPHONY();
	static ::java::lang::String& fFEATURE_TELEPHONY_CDMA();
	static ::java::lang::String& fFEATURE_TELEPHONY_EUICC();
	static ::java::lang::String& fFEATURE_TELEPHONY_GSM();
	static ::java::lang::String& fFEATURE_TELEPHONY_IMS();
	static ::java::lang::String& fFEATURE_TELEPHONY_MBMS();
	static ::java::lang::String& fFEATURE_TELEVISION();
	static ::java::lang::String& fFEATURE_TOUCHSCREEN();
	static ::java::lang::String& fFEATURE_TOUCHSCREEN_MULTITOUCH();
	static ::java::lang::String& fFEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT();
	static ::java::lang::String& fFEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND();
	static ::java::lang::String& fFEATURE_USB_ACCESSORY();
	static ::java::lang::String& fFEATURE_USB_HOST();
	static ::java::lang::String& fFEATURE_VERIFIED_BOOT();
	static ::java::lang::String& fFEATURE_VR_HEADTRACKING();
	static ::java::lang::String& fFEATURE_VR_MODE();
	static ::java::lang::String& fFEATURE_VR_MODE_HIGH_PERFORMANCE();
	static ::java::lang::String& fFEATURE_VULKAN_DEQP_LEVEL();
	static ::java::lang::String& fFEATURE_VULKAN_HARDWARE_COMPUTE();
	static ::java::lang::String& fFEATURE_VULKAN_HARDWARE_LEVEL();
	static ::java::lang::String& fFEATURE_VULKAN_HARDWARE_VERSION();
	static ::java::lang::String& fFEATURE_WATCH();
	static ::java::lang::String& fFEATURE_WEBVIEW();
	static ::java::lang::String& fFEATURE_WIFI();
	static ::java::lang::String& fFEATURE_WIFI_AWARE();
	static ::java::lang::String& fFEATURE_WIFI_DIRECT();
	static ::java::lang::String& fFEATURE_WIFI_PASSPOINT();
	static ::java::lang::String& fFEATURE_WIFI_RTT();
	static ::jint& fFLAG_PERMISSION_WHITELIST_INSTALLER();
	static ::jint& fFLAG_PERMISSION_WHITELIST_SYSTEM();
	static ::jint& fFLAG_PERMISSION_WHITELIST_UPGRADE();
	static ::jint& fGET_ACTIVITIES();
	static ::jint& fGET_ATTRIBUTIONS();
	static ::jint& fGET_CONFIGURATIONS();
	static ::jint& fGET_DISABLED_COMPONENTS();
	static ::jint& fGET_DISABLED_UNTIL_USED_COMPONENTS();
	static ::jint& fGET_GIDS();
	static ::jint& fGET_INSTRUMENTATION();
	static ::jint& fGET_INTENT_FILTERS();
	static ::jint& fGET_META_DATA();
	static ::jint& fGET_PERMISSIONS();
	static ::jint& fGET_PROVIDERS();
	static ::jint& fGET_RECEIVERS();
	static ::jint& fGET_RESOLVED_FILTER();
	static ::jint& fGET_SERVICES();
	static ::jint& fGET_SHARED_LIBRARY_FILES();
	static ::jint& fGET_SIGNATURES();
	static ::jint& fGET_SIGNING_CERTIFICATES();
	static ::jint& fGET_UNINSTALLED_PACKAGES();
	static ::jint& fGET_URI_PERMISSION_PATTERNS();
	static ::jint& fINSTALL_REASON_DEVICE_RESTORE();
	static ::jint& fINSTALL_REASON_DEVICE_SETUP();
	static ::jint& fINSTALL_REASON_POLICY();
	static ::jint& fINSTALL_REASON_UNKNOWN();
	static ::jint& fINSTALL_REASON_USER();
	static ::jint& fINSTALL_SCENARIO_BULK();
	static ::jint& fINSTALL_SCENARIO_BULK_SECONDARY();
	static ::jint& fINSTALL_SCENARIO_DEFAULT();
	static ::jint& fINSTALL_SCENARIO_FAST();
	static ::jint& fMATCH_ALL();
	static ::jint& fMATCH_APEX();
	static ::jint& fMATCH_DEFAULT_ONLY();
	static ::jint& fMATCH_DIRECT_BOOT_AUTO();
	static ::jint& fMATCH_DIRECT_BOOT_AWARE();
	static ::jint& fMATCH_DIRECT_BOOT_UNAWARE();
	static ::jint& fMATCH_DISABLED_COMPONENTS();
	static ::jint& fMATCH_DISABLED_UNTIL_USED_COMPONENTS();
	static ::jint& fMATCH_SYSTEM_ONLY();
	static ::jint& fMATCH_UNINSTALLED_PACKAGES();
	static ::jlong& fMAXIMUM_VERIFICATION_TIMEOUT();
	static ::jint& fPERMISSION_DENIED();
	static ::jint& fPERMISSION_GRANTED();
	static ::java::lang::String& fPROPERTY_MEDIA_CAPABILITIES();
	static ::jint& fSIGNATURE_FIRST_NOT_SIGNED();
	static ::jint& fSIGNATURE_MATCH();
	static ::jint& fSIGNATURE_NEITHER_SIGNED();
	static ::jint& fSIGNATURE_NO_MATCH();
	static ::jint& fSIGNATURE_SECOND_NOT_SIGNED();
	static ::jint& fSIGNATURE_UNKNOWN_PACKAGE();
	static ::jint& fSYNCHRONOUS();
	static ::java::util::List& fTRUST_ALL();
	static ::java::util::List& fTRUST_NONE();
	static ::jint& fVERIFICATION_ALLOW();
	static ::jint& fVERIFICATION_REJECT();
	static ::jint& fVERSION_CODE_HIGHEST();
	::jvoid AddPackageToPreferred(const ::java::lang::String& arg0) const;
	::jboolean AddPermission(const ::android::content::pm::PermissionInfo& arg0) const;
	::jboolean AddPermissionAsync(const ::android::content::pm::PermissionInfo& arg0) const;
	::jvoid AddPreferredActivity(const ::android::content::IntentFilter& arg0, const ::jint& arg1, const jni::Array< ::android::content::ComponentName >& arg2, const ::android::content::ComponentName& arg3) const;
	::jboolean AddWhitelistedRestrictedPermission(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::jint& arg2) const;
	::jboolean CanRequestPackageInstalls() const;
	jni::Array< ::java::lang::String > CanonicalToCurrentPackageNames(const jni::Array< ::java::lang::String >& arg0) const;
	::jint CheckPermission(const ::java::lang::String& arg0, const ::java::lang::String& arg1) const;
	::jint CheckSignatures(const ::jint& arg0, const ::jint& arg1) const;
	::jint CheckSignatures(const ::java::lang::String& arg0, const ::java::lang::String& arg1) const;
	::jvoid ClearInstantAppCookie() const;
	::jvoid ClearPackagePreferredActivities(const ::java::lang::String& arg0) const;
	jni::Array< ::java::lang::String > CurrentToCanonicalPackageNames(const jni::Array< ::java::lang::String >& arg0) const;
	::jvoid ExtendVerificationTimeout(const ::jint& arg0, const ::jint& arg1, const ::jlong& arg2) const;
	::android::graphics::drawable::Drawable GetActivityBanner(const ::android::content::ComponentName& arg0) const;
	::android::graphics::drawable::Drawable GetActivityBanner(const ::android::content::Intent& arg0) const;
	::android::graphics::drawable::Drawable GetActivityIcon(const ::android::content::ComponentName& arg0) const;
	::android::graphics::drawable::Drawable GetActivityIcon(const ::android::content::Intent& arg0) const;
	::android::content::pm::ActivityInfo GetActivityInfo(const ::android::content::ComponentName& arg0, const ::jint& arg1) const;
	::android::graphics::drawable::Drawable GetActivityLogo(const ::android::content::ComponentName& arg0) const;
	::android::graphics::drawable::Drawable GetActivityLogo(const ::android::content::Intent& arg0) const;
	::java::util::List GetAllPermissionGroups(const ::jint& arg0) const;
	::android::graphics::drawable::Drawable GetApplicationBanner(const ::android::content::pm::ApplicationInfo& arg0) const;
	::android::graphics::drawable::Drawable GetApplicationBanner(const ::java::lang::String& arg0) const;
	::jint GetApplicationEnabledSetting(const ::java::lang::String& arg0) const;
	::android::graphics::drawable::Drawable GetApplicationIcon(const ::android::content::pm::ApplicationInfo& arg0) const;
	::android::graphics::drawable::Drawable GetApplicationIcon(const ::java::lang::String& arg0) const;
	::android::content::pm::ApplicationInfo GetApplicationInfo(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::java::lang::CharSequence GetApplicationLabel(const ::android::content::pm::ApplicationInfo& arg0) const;
	::android::graphics::drawable::Drawable GetApplicationLogo(const ::android::content::pm::ApplicationInfo& arg0) const;
	::android::graphics::drawable::Drawable GetApplicationLogo(const ::java::lang::String& arg0) const;
	::java::lang::CharSequence GetBackgroundPermissionOptionLabel() const;
	::android::content::pm::ChangedPackages GetChangedPackages(const ::jint& arg0) const;
	::jint GetComponentEnabledSetting(const ::android::content::ComponentName& arg0) const;
	::android::graphics::drawable::Drawable GetDefaultActivityIcon() const;
	::android::graphics::drawable::Drawable GetDrawable(const ::java::lang::String& arg0, const ::jint& arg1, const ::android::content::pm::ApplicationInfo& arg2) const;
	::jvoid GetGroupOfPlatformPermission(const ::java::lang::String& arg0, const ::java::util::concurrent::Executor& arg1, const ::java::util::function::Consumer& arg2) const;
	::android::content::pm::InstallSourceInfo GetInstallSourceInfo(const ::java::lang::String& arg0) const;
	::java::util::List GetInstalledApplications(const ::jint& arg0) const;
	::java::util::List GetInstalledModules(const ::jint& arg0) const;
	::java::util::List GetInstalledPackages(const ::jint& arg0) const;
	::java::lang::String GetInstallerPackageName(const ::java::lang::String& arg0) const;
	jni::Array< ::jbyte > GetInstantAppCookie() const;
	::jint GetInstantAppCookieMaxBytes() const;
	::android::content::pm::InstrumentationInfo GetInstrumentationInfo(const ::android::content::ComponentName& arg0, const ::jint& arg1) const;
	::android::content::Intent GetLaunchIntentForPackage(const ::java::lang::String& arg0) const;
	::android::content::Intent GetLeanbackLaunchIntentForPackage(const ::java::lang::String& arg0) const;
	::java::util::Set GetMimeGroup(const ::java::lang::String& arg0) const;
	::android::content::pm::ModuleInfo GetModuleInfo(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::java::lang::String GetNameForUid(const ::jint& arg0) const;
	::android::content::pm::PackageInfo GetPackageArchiveInfo(const ::java::lang::String& arg0, const ::jint& arg1) const;
	jni::Array< ::jint > GetPackageGids(const ::java::lang::String& arg0) const;
	jni::Array< ::jint > GetPackageGids(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::android::content::pm::PackageInfo GetPackageInfo(const ::android::content::pm::VersionedPackage& arg0, const ::jint& arg1) const;
	::android::content::pm::PackageInfo GetPackageInfo(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::android::content::pm::PackageInstaller GetPackageInstaller() const;
	::jint GetPackageUid(const ::java::lang::String& arg0, const ::jint& arg1) const;
	jni::Array< ::java::lang::String > GetPackagesForUid(const ::jint& arg0) const;
	::java::util::List GetPackagesHoldingPermissions(const jni::Array< ::java::lang::String >& arg0, const ::jint& arg1) const;
	::android::content::pm::PermissionGroupInfo GetPermissionGroupInfo(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::android::content::pm::PermissionInfo GetPermissionInfo(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::jvoid GetPlatformPermissionsForGroup(const ::java::lang::String& arg0, const ::java::util::concurrent::Executor& arg1, const ::java::util::function::Consumer& arg2) const;
	::jint GetPreferredActivities(const ::java::util::List& arg0, const ::java::util::List& arg1, const ::java::lang::String& arg2) const;
	::java::util::List GetPreferredPackages(const ::jint& arg0) const;
	::android::content::pm::PackageManager_Property GetProperty(const ::java::lang::String& arg0, const ::android::content::ComponentName& arg1) const;
	::android::content::pm::PackageManager_Property GetProperty(const ::java::lang::String& arg0, const ::java::lang::String& arg1) const;
	::android::content::pm::ProviderInfo GetProviderInfo(const ::android::content::ComponentName& arg0, const ::jint& arg1) const;
	::android::content::pm::ActivityInfo GetReceiverInfo(const ::android::content::ComponentName& arg0, const ::jint& arg1) const;
	::android::content::res::Resources GetResourcesForActivity(const ::android::content::ComponentName& arg0) const;
	::android::content::res::Resources GetResourcesForApplication(const ::android::content::pm::ApplicationInfo& arg0) const;
	::android::content::res::Resources GetResourcesForApplication(const ::android::content::pm::ApplicationInfo& arg0, const ::android::content::res::Configuration& arg1) const;
	::android::content::res::Resources GetResourcesForApplication(const ::java::lang::String& arg0) const;
	::android::content::pm::ServiceInfo GetServiceInfo(const ::android::content::ComponentName& arg0, const ::jint& arg1) const;
	::java::util::List GetSharedLibraries(const ::jint& arg0) const;
	::android::os::Bundle GetSuspendedPackageAppExtras() const;
	::jboolean GetSyntheticAppDetailsActivityEnabled(const ::java::lang::String& arg0) const;
	jni::Array< ::android::content::pm::FeatureInfo > GetSystemAvailableFeatures() const;
	jni::Array< ::java::lang::String > GetSystemSharedLibraryNames() const;
	::jint GetTargetSdkVersion(const ::java::lang::String& arg0) const;
	::java::lang::CharSequence GetText(const ::java::lang::String& arg0, const ::jint& arg1, const ::android::content::pm::ApplicationInfo& arg2) const;
	::android::graphics::drawable::Drawable GetUserBadgedDrawableForDensity(const ::android::graphics::drawable::Drawable& arg0, const ::android::os::UserHandle& arg1, const ::android::graphics::Rect& arg2, const ::jint& arg3) const;
	::android::graphics::drawable::Drawable GetUserBadgedIcon(const ::android::graphics::drawable::Drawable& arg0, const ::android::os::UserHandle& arg1) const;
	::java::lang::CharSequence GetUserBadgedLabel(const ::java::lang::CharSequence& arg0, const ::android::os::UserHandle& arg1) const;
	::java::util::Set GetWhitelistedRestrictedPermissions(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::android::content::res::XmlResourceParser GetXml(const ::java::lang::String& arg0, const ::jint& arg1, const ::android::content::pm::ApplicationInfo& arg2) const;
	::jboolean HasSigningCertificate(const ::jint& arg0, const jni::Array< ::jbyte >& arg1, const ::jint& arg2) const;
	::jboolean HasSigningCertificate(const ::java::lang::String& arg0, const jni::Array< ::jbyte >& arg1, const ::jint& arg2) const;
	::jboolean HasSystemFeature(const ::java::lang::String& arg0) const;
	::jboolean HasSystemFeature(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::jboolean IsAutoRevokeWhitelisted() const;
	::jboolean IsAutoRevokeWhitelisted(const ::java::lang::String& arg0) const;
	::jboolean IsDefaultApplicationIcon(const ::android::graphics::drawable::Drawable& arg0) const;
	::jboolean IsDeviceUpgrading() const;
	::jboolean IsInstantApp() const;
	::jboolean IsInstantApp(const ::java::lang::String& arg0) const;
	::jboolean IsPackageSuspended() const;
	::jboolean IsPackageSuspended(const ::java::lang::String& arg0) const;
	::jboolean IsPermissionRevokedByPolicy(const ::java::lang::String& arg0, const ::java::lang::String& arg1) const;
	::jboolean IsSafeMode() const;
	::java::util::List QueryActivityProperty(const ::java::lang::String& arg0) const;
	::java::util::List QueryApplicationProperty(const ::java::lang::String& arg0) const;
	::java::util::List QueryBroadcastReceivers(const ::android::content::Intent& arg0, const ::jint& arg1) const;
	::java::util::List QueryContentProviders(const ::java::lang::String& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::java::util::List QueryInstrumentation(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::java::util::List QueryIntentActivities(const ::android::content::Intent& arg0, const ::jint& arg1) const;
	::java::util::List QueryIntentActivityOptions(const ::android::content::ComponentName& arg0, const jni::Array< ::android::content::Intent >& arg1, const ::android::content::Intent& arg2, const ::jint& arg3) const;
	::java::util::List QueryIntentContentProviders(const ::android::content::Intent& arg0, const ::jint& arg1) const;
	::java::util::List QueryIntentServices(const ::android::content::Intent& arg0, const ::jint& arg1) const;
	::java::util::List QueryPermissionsByGroup(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::java::util::List QueryProviderProperty(const ::java::lang::String& arg0) const;
	::java::util::List QueryReceiverProperty(const ::java::lang::String& arg0) const;
	::java::util::List QueryServiceProperty(const ::java::lang::String& arg0) const;
	::jvoid RemovePackageFromPreferred(const ::java::lang::String& arg0) const;
	::jvoid RemovePermission(const ::java::lang::String& arg0) const;
	::jboolean RemoveWhitelistedRestrictedPermission(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::jint& arg2) const;
	::jvoid RequestChecksums(const ::java::lang::String& arg0, const ::jboolean& arg1, const ::jint& arg2, const ::java::util::List& arg3, const ::android::content::pm::PackageManager_OnChecksumsReadyListener& arg4) const;
	::android::content::pm::ResolveInfo ResolveActivity(const ::android::content::Intent& arg0, const ::jint& arg1) const;
	::android::content::pm::ProviderInfo ResolveContentProvider(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::android::content::pm::ResolveInfo ResolveService(const ::android::content::Intent& arg0, const ::jint& arg1) const;
	::jvoid SetApplicationCategoryHint(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::jvoid SetApplicationEnabledSetting(const ::java::lang::String& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jboolean SetAutoRevokeWhitelisted(const ::java::lang::String& arg0, const ::jboolean& arg1) const;
	::jvoid SetComponentEnabledSetting(const ::android::content::ComponentName& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jvoid SetInstallerPackageName(const ::java::lang::String& arg0, const ::java::lang::String& arg1) const;
	::jvoid SetMimeGroup(const ::java::lang::String& arg0, const ::java::util::Set& arg1) const;
	::jvoid UpdateInstantAppCookie(const jni::Array< ::jbyte >& arg0) const;
	::jvoid VerifyPendingInstall(const ::jint& arg0, const ::jint& arg1) const;
	static jobject __Constructor();
	PackageManager() : ::java::lang::Object(__Constructor()) {}
	explicit PackageManager(jobject o) : ::java::lang::Object(o) {}
	PackageManager(const PackageManager& o)  : ::java::lang::Object(o) {}

};

struct PermissionInfo : ::android::content::pm::PackageItemInfo
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fFLAG_COSTS_MONEY();
	static ::jint& fFLAG_HARD_RESTRICTED();
	static ::jint& fFLAG_IMMUTABLY_RESTRICTED();
	static ::jint& fFLAG_INSTALLED();
	static ::jint& fFLAG_SOFT_RESTRICTED();
	static ::jint& fPROTECTION_DANGEROUS();
	static ::jint& fPROTECTION_FLAG_APPOP();
	static ::jint& fPROTECTION_FLAG_DEVELOPMENT();
	static ::jint& fPROTECTION_FLAG_INSTALLER();
	static ::jint& fPROTECTION_FLAG_INSTANT();
	static ::jint& fPROTECTION_FLAG_PRE23();
	static ::jint& fPROTECTION_FLAG_PREINSTALLED();
	static ::jint& fPROTECTION_FLAG_PRIVILEGED();
	static ::jint& fPROTECTION_FLAG_RUNTIME_ONLY();
	static ::jint& fPROTECTION_FLAG_SETUP();
	static ::jint& fPROTECTION_FLAG_SYSTEM();
	static ::jint& fPROTECTION_FLAG_VERIFIER();
	static ::jint& fPROTECTION_INTERNAL();
	static ::jint& fPROTECTION_MASK_BASE();
	static ::jint& fPROTECTION_MASK_FLAGS();
	static ::jint& fPROTECTION_NORMAL();
	static ::jint& fPROTECTION_SIGNATURE();
	static ::jint& fPROTECTION_SIGNATURE_OR_SYSTEM();
	::jint fDescriptionRes() const;
	void fDescriptionRes(const ::jint& arg0) const;
	::jint fFlags() const;
	void fFlags(const ::jint& arg0) const;
	::java::lang::String fGroup() const;
	void fGroup(const ::java::lang::String& arg0) const;
	::java::lang::CharSequence fNonLocalizedDescription() const;
	void fNonLocalizedDescription(const ::java::lang::CharSequence& arg0) const;
	::jint fProtectionLevel() const;
	void fProtectionLevel(const ::jint& arg0) const;
	::jint DescribeContents() const;
	::jint GetProtection() const;
	::jint GetProtectionFlags() const;
	::java::lang::CharSequence LoadDescription(const ::android::content::pm::PackageManager& arg0) const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor();
	PermissionInfo() : ::android::content::pm::PackageItemInfo(__Constructor()) {}
	explicit PermissionInfo(jobject o) : ::android::content::pm::PackageItemInfo(o) {}
	PermissionInfo(const PermissionInfo& o)  : ::android::content::pm::PackageItemInfo(o) {}

};

}}}

namespace android { namespace content { 
struct IntentFilter : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fMATCH_ADJUSTMENT_MASK();
	static ::jint& fMATCH_ADJUSTMENT_NORMAL();
	static ::jint& fMATCH_CATEGORY_EMPTY();
	static ::jint& fMATCH_CATEGORY_HOST();
	static ::jint& fMATCH_CATEGORY_MASK();
	static ::jint& fMATCH_CATEGORY_PATH();
	static ::jint& fMATCH_CATEGORY_PORT();
	static ::jint& fMATCH_CATEGORY_SCHEME();
	static ::jint& fMATCH_CATEGORY_SCHEME_SPECIFIC_PART();
	static ::jint& fMATCH_CATEGORY_TYPE();
	static ::jint& fNO_MATCH_ACTION();
	static ::jint& fNO_MATCH_CATEGORY();
	static ::jint& fNO_MATCH_DATA();
	static ::jint& fNO_MATCH_TYPE();
	static ::jint& fSYSTEM_HIGH_PRIORITY();
	static ::jint& fSYSTEM_LOW_PRIORITY();
	::java::util::Iterator ActionsIterator() const;
	::jvoid AddAction(const ::java::lang::String& arg0) const;
	::jvoid AddCategory(const ::java::lang::String& arg0) const;
	::jvoid AddDataAuthority(const ::java::lang::String& arg0, const ::java::lang::String& arg1) const;
	::jvoid AddDataPath(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::jvoid AddDataScheme(const ::java::lang::String& arg0) const;
	::jvoid AddDataSchemeSpecificPart(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::jvoid AddDataType(const ::java::lang::String& arg0) const;
	::java::util::Iterator AuthoritiesIterator() const;
	::java::util::Iterator CategoriesIterator() const;
	::jint CountActions() const;
	::jint CountCategories() const;
	::jint CountDataAuthorities() const;
	::jint CountDataPaths() const;
	::jint CountDataSchemeSpecificParts() const;
	::jint CountDataSchemes() const;
	::jint CountDataTypes() const;
	static ::android::content::IntentFilter Create(const ::java::lang::String& arg0, const ::java::lang::String& arg1);
	::jint DescribeContents() const;
	::jvoid Dump(const ::android::util::Printer& arg0, const ::java::lang::String& arg1) const;
	::java::lang::String GetAction(const ::jint& arg0) const;
	::java::lang::String GetCategory(const ::jint& arg0) const;
	::android::content::IntentFilter_AuthorityEntry GetDataAuthority(const ::jint& arg0) const;
	::android::os::PatternMatcher GetDataPath(const ::jint& arg0) const;
	::java::lang::String GetDataScheme(const ::jint& arg0) const;
	::android::os::PatternMatcher GetDataSchemeSpecificPart(const ::jint& arg0) const;
	::java::lang::String GetDataType(const ::jint& arg0) const;
	::jint GetPriority() const;
	::jboolean HasAction(const ::java::lang::String& arg0) const;
	::jboolean HasCategory(const ::java::lang::String& arg0) const;
	::jboolean HasDataAuthority(const ::android::net::Uri& arg0) const;
	::jboolean HasDataPath(const ::java::lang::String& arg0) const;
	::jboolean HasDataScheme(const ::java::lang::String& arg0) const;
	::jboolean HasDataSchemeSpecificPart(const ::java::lang::String& arg0) const;
	::jboolean HasDataType(const ::java::lang::String& arg0) const;
	::jint Match(const ::android::content::ContentResolver& arg0, const ::android::content::Intent& arg1, const ::jboolean& arg2, const ::java::lang::String& arg3) const;
	::jint Match(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2, const ::android::net::Uri& arg3, const ::java::util::Set& arg4, const ::java::lang::String& arg5) const;
	::jboolean MatchAction(const ::java::lang::String& arg0) const;
	::java::lang::String MatchCategories(const ::java::util::Set& arg0) const;
	::jint MatchData(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::android::net::Uri& arg2) const;
	::jint MatchDataAuthority(const ::android::net::Uri& arg0) const;
	::java::util::Iterator PathsIterator() const;
	::jvoid ReadFromXml(const ::org::xmlpull::v1::XmlPullParser& arg0) const;
	::java::util::Iterator SchemeSpecificPartsIterator() const;
	::java::util::Iterator SchemesIterator() const;
	::jvoid SetPriority(const ::jint& arg0) const;
	::java::util::Iterator TypesIterator() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	::jvoid WriteToXml(const ::org::xmlpull::v1::XmlSerializer& arg0) const;
	static jobject __Constructor();
	IntentFilter() : ::java::lang::Object(__Constructor()) {}
	static jobject __Constructor(const ::java::lang::String& arg0);
	IntentFilter(const ::java::lang::String& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::java::lang::String& arg1);
	IntentFilter(const ::java::lang::String& arg0, const ::java::lang::String& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit IntentFilter(jobject o) : ::java::lang::Object(o) {}
	IntentFilter(const IntentFilter& o)  : ::java::lang::Object(o) {}

};

struct IntentFilter_AuthorityEntry : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::lang::String GetHost() const;
	::jint GetPort() const;
	::jint Match(const ::android::net::Uri& arg0) const;
	static jobject __Constructor(const ::java::lang::String& arg0, const ::java::lang::String& arg1);
	IntentFilter_AuthorityEntry(const ::java::lang::String& arg0, const ::java::lang::String& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit IntentFilter_AuthorityEntry(jobject o) : ::java::lang::Object(o) {}
	IntentFilter_AuthorityEntry(const IntentFilter_AuthorityEntry& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace os { 
struct PatternMatcher : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fPATTERN_ADVANCED_GLOB();
	static ::jint& fPATTERN_LITERAL();
	static ::jint& fPATTERN_PREFIX();
	static ::jint& fPATTERN_SIMPLE_GLOB();
	static ::jint& fPATTERN_SUFFIX();
	::jint DescribeContents() const;
	::java::lang::String GetPath() const;
	::jint GetType() const;
	::jboolean Match(const ::java::lang::String& arg0) const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor(const ::android::os::Parcel& arg0);
	PatternMatcher(const ::android::os::Parcel& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::jint& arg1);
	PatternMatcher(const ::java::lang::String& arg0, const ::jint& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit PatternMatcher(jobject o) : ::java::lang::Object(o) {}
	PatternMatcher(const PatternMatcher& o)  : ::java::lang::Object(o) {}

};

}}

namespace org { namespace xmlpull { namespace v1 { 
struct XmlPullParser : java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fCDSECT();
	static ::jint& fCOMMENT();
	static ::jint& fDOCDECL();
	static ::jint& fEND_DOCUMENT();
	static ::jint& fEND_TAG();
	static ::jint& fENTITY_REF();
	static ::java::lang::String& fFEATURE_PROCESS_DOCDECL();
	static ::java::lang::String& fFEATURE_PROCESS_NAMESPACES();
	static ::java::lang::String& fFEATURE_REPORT_NAMESPACE_ATTRIBUTES();
	static ::java::lang::String& fFEATURE_VALIDATION();
	static ::jint& fIGNORABLE_WHITESPACE();
	static ::java::lang::String& fNO_NAMESPACE();
	static ::jint& fPROCESSING_INSTRUCTION();
	static ::jint& fSTART_DOCUMENT();
	static ::jint& fSTART_TAG();
	static ::jint& fTEXT();
	static jni::Array< ::java::lang::String >& fTYPES();
	::jvoid DefineEntityReplacementText(const ::java::lang::String& arg0, const ::java::lang::String& arg1) const;
	::jint GetAttributeCount() const;
	::java::lang::String GetAttributeName(const ::jint& arg0) const;
	::java::lang::String GetAttributeNamespace(const ::jint& arg0) const;
	::java::lang::String GetAttributePrefix(const ::jint& arg0) const;
	::java::lang::String GetAttributeType(const ::jint& arg0) const;
	::java::lang::String GetAttributeValue(const ::jint& arg0) const;
	::java::lang::String GetAttributeValue(const ::java::lang::String& arg0, const ::java::lang::String& arg1) const;
	::jint GetColumnNumber() const;
	::jint GetDepth() const;
	::jint GetEventType() const;
	::jboolean GetFeature(const ::java::lang::String& arg0) const;
	::java::lang::String GetInputEncoding() const;
	::jint GetLineNumber() const;
	::java::lang::String GetName() const;
	::java::lang::String GetNamespace() const;
	::java::lang::String GetNamespace(const ::java::lang::String& arg0) const;
	::jint GetNamespaceCount(const ::jint& arg0) const;
	::java::lang::String GetNamespacePrefix(const ::jint& arg0) const;
	::java::lang::String GetNamespaceUri(const ::jint& arg0) const;
	::java::lang::String GetPositionDescription() const;
	::java::lang::String GetPrefix() const;
	::java::lang::Object GetProperty(const ::java::lang::String& arg0) const;
	::java::lang::String GetText() const;
	jni::Array< ::jchar > GetTextCharacters(const jni::Array< ::jint >& arg0) const;
	::jboolean IsAttributeDefault(const ::jint& arg0) const;
	::jboolean IsEmptyElementTag() const;
	::jboolean IsWhitespace() const;
	::jint Next() const;
	::jint NextTag() const;
	::java::lang::String NextText() const;
	::jint NextToken() const;
	::jvoid Require(const ::jint& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2) const;
	::jvoid SetFeature(const ::java::lang::String& arg0, const ::jboolean& arg1) const;
	::jvoid SetInput(const ::java::io::InputStream& arg0, const ::java::lang::String& arg1) const;
	::jvoid SetInput(const ::java::io::Reader& arg0) const;
	::jvoid SetProperty(const ::java::lang::String& arg0, const ::java::lang::Object& arg1) const;
	explicit XmlPullParser(jobject o) : java::lang::Object(o) {}
	XmlPullParser(const XmlPullParser& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::org::xmlpull::v1::XmlPullParser();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void DefineEntityReplacementText(const ::java::lang::String& arg0, const ::java::lang::String& arg1) = 0;
		virtual ::jint GetAttributeCount() = 0;
		virtual ::java::lang::String GetAttributeName(const ::jint& arg0) = 0;
		virtual ::java::lang::String GetAttributeNamespace(const ::jint& arg0) = 0;
		virtual ::java::lang::String GetAttributePrefix(const ::jint& arg0) = 0;
		virtual ::java::lang::String GetAttributeType(const ::jint& arg0) = 0;
		virtual ::java::lang::String GetAttributeValue(const ::jint& arg0) = 0;
		virtual ::java::lang::String GetAttributeValue(const ::java::lang::String& arg0, const ::java::lang::String& arg1) = 0;
		virtual ::jint GetColumnNumber() = 0;
		virtual ::jint GetDepth() = 0;
		virtual ::jint GetEventType() = 0;
		virtual ::jboolean GetFeature(const ::java::lang::String& arg0) = 0;
		virtual ::java::lang::String GetInputEncoding() = 0;
		virtual ::jint GetLineNumber() = 0;
		virtual ::java::lang::String GetName() = 0;
		virtual ::java::lang::String GetNamespace() = 0;
		virtual ::java::lang::String GetNamespace(const ::java::lang::String& arg0) = 0;
		virtual ::jint GetNamespaceCount(const ::jint& arg0) = 0;
		virtual ::java::lang::String GetNamespacePrefix(const ::jint& arg0) = 0;
		virtual ::java::lang::String GetNamespaceUri(const ::jint& arg0) = 0;
		virtual ::java::lang::String GetPositionDescription() = 0;
		virtual ::java::lang::String GetPrefix() = 0;
		virtual ::java::lang::Object GetProperty(const ::java::lang::String& arg0) = 0;
		virtual ::java::lang::String GetText() = 0;
		virtual jni::Array< ::jchar > GetTextCharacters(const jni::Array< ::jint >& arg0) = 0;
		virtual ::jboolean IsAttributeDefault(const ::jint& arg0) = 0;
		virtual ::jboolean IsEmptyElementTag() = 0;
		virtual ::jboolean IsWhitespace() = 0;
		virtual ::jint Next() = 0;
		virtual ::jint NextTag() = 0;
		virtual ::java::lang::String NextText() = 0;
		virtual ::jint NextToken() = 0;
		virtual void Require(const ::jint& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2) = 0;
		virtual void SetFeature(const ::java::lang::String& arg0, const ::jboolean& arg1) = 0;
		virtual void SetInput(const ::java::io::InputStream& arg0, const ::java::lang::String& arg1) = 0;
		virtual void SetInput(const ::java::io::Reader& arg0) = 0;
		virtual void SetProperty(const ::java::lang::String& arg0, const ::java::lang::Object& arg1) = 0;
	};
};

struct XmlSerializer : java::lang::Object
{
	static jni::Class __CLASS;

	::org::xmlpull::v1::XmlSerializer Attribute(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2) const;
	::jvoid Cdsect(const ::java::lang::String& arg0) const;
	::jvoid Comment(const ::java::lang::String& arg0) const;
	::jvoid Docdecl(const ::java::lang::String& arg0) const;
	::jvoid EndDocument() const;
	::org::xmlpull::v1::XmlSerializer EndTag(const ::java::lang::String& arg0, const ::java::lang::String& arg1) const;
	::jvoid EntityRef(const ::java::lang::String& arg0) const;
	::jvoid Flush() const;
	::jint GetDepth() const;
	::jboolean GetFeature(const ::java::lang::String& arg0) const;
	::java::lang::String GetName() const;
	::java::lang::String GetNamespace() const;
	::java::lang::String GetPrefix(const ::java::lang::String& arg0, const ::jboolean& arg1) const;
	::java::lang::Object GetProperty(const ::java::lang::String& arg0) const;
	::jvoid IgnorableWhitespace(const ::java::lang::String& arg0) const;
	::jvoid ProcessingInstruction(const ::java::lang::String& arg0) const;
	::jvoid SetFeature(const ::java::lang::String& arg0, const ::jboolean& arg1) const;
	::jvoid SetOutput(const ::java::io::OutputStream& arg0, const ::java::lang::String& arg1) const;
	::jvoid SetOutput(const ::java::io::Writer& arg0) const;
	::jvoid SetPrefix(const ::java::lang::String& arg0, const ::java::lang::String& arg1) const;
	::jvoid SetProperty(const ::java::lang::String& arg0, const ::java::lang::Object& arg1) const;
	::jvoid StartDocument(const ::java::lang::String& arg0, const ::java::lang::Boolean& arg1) const;
	::org::xmlpull::v1::XmlSerializer StartTag(const ::java::lang::String& arg0, const ::java::lang::String& arg1) const;
	::org::xmlpull::v1::XmlSerializer Text(const ::java::lang::String& arg0) const;
	::org::xmlpull::v1::XmlSerializer Text(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	explicit XmlSerializer(jobject o) : java::lang::Object(o) {}
	XmlSerializer(const XmlSerializer& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::org::xmlpull::v1::XmlSerializer();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::org::xmlpull::v1::XmlSerializer Attribute(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2) = 0;
		virtual void Cdsect(const ::java::lang::String& arg0) = 0;
		virtual void Comment(const ::java::lang::String& arg0) = 0;
		virtual void Docdecl(const ::java::lang::String& arg0) = 0;
		virtual void EndDocument() = 0;
		virtual ::org::xmlpull::v1::XmlSerializer EndTag(const ::java::lang::String& arg0, const ::java::lang::String& arg1) = 0;
		virtual void EntityRef(const ::java::lang::String& arg0) = 0;
		virtual void Flush() = 0;
		virtual ::jint GetDepth() = 0;
		virtual ::jboolean GetFeature(const ::java::lang::String& arg0) = 0;
		virtual ::java::lang::String GetName() = 0;
		virtual ::java::lang::String GetNamespace() = 0;
		virtual ::java::lang::String GetPrefix(const ::java::lang::String& arg0, const ::jboolean& arg1) = 0;
		virtual ::java::lang::Object GetProperty(const ::java::lang::String& arg0) = 0;
		virtual void IgnorableWhitespace(const ::java::lang::String& arg0) = 0;
		virtual void ProcessingInstruction(const ::java::lang::String& arg0) = 0;
		virtual void SetFeature(const ::java::lang::String& arg0, const ::jboolean& arg1) = 0;
		virtual void SetOutput(const ::java::io::OutputStream& arg0, const ::java::lang::String& arg1) = 0;
		virtual void SetOutput(const ::java::io::Writer& arg0) = 0;
		virtual void SetPrefix(const ::java::lang::String& arg0, const ::java::lang::String& arg1) = 0;
		virtual void SetProperty(const ::java::lang::String& arg0, const ::java::lang::Object& arg1) = 0;
		virtual void StartDocument(const ::java::lang::String& arg0, const ::java::lang::Boolean& arg1) = 0;
		virtual ::org::xmlpull::v1::XmlSerializer StartTag(const ::java::lang::String& arg0, const ::java::lang::String& arg1) = 0;
		virtual ::org::xmlpull::v1::XmlSerializer Text(const ::java::lang::String& arg0) = 0;
		virtual ::org::xmlpull::v1::XmlSerializer Text(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2) = 0;
	};
};

}}}

namespace android { namespace content { 
struct ComponentName : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	operator ::java::lang::Cloneable();
	operator ::java::lang::Comparable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::android::content::ComponentName Clone() const;
	::jint CompareTo(const ::android::content::ComponentName& arg0) const;
	static ::android::content::ComponentName CreateRelative(const ::android::content::Context& arg0, const ::java::lang::String& arg1);
	static ::android::content::ComponentName CreateRelative(const ::java::lang::String& arg0, const ::java::lang::String& arg1);
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::lang::String FlattenToShortString() const;
	::java::lang::String FlattenToString() const;
	::java::lang::String GetClassName() const;
	::java::lang::String GetPackageName() const;
	::java::lang::String GetShortClassName() const;
	::jint HashCode() const;
	static ::android::content::ComponentName ReadFromParcel(const ::android::os::Parcel& arg0);
	::java::lang::String ToShortString() const;
	::java::lang::String ToString() const;
	static ::android::content::ComponentName UnflattenFromString(const ::java::lang::String& arg0);
	static ::jvoid WriteToParcel(const ::android::content::ComponentName& arg0, const ::android::os::Parcel& arg1);
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor(const ::android::content::Context& arg0, const ::java::lang::Class& arg1);
	ComponentName(const ::android::content::Context& arg0, const ::java::lang::Class& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::java::lang::String& arg1);
	ComponentName(const ::android::content::Context& arg0, const ::java::lang::String& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::os::Parcel& arg0);
	ComponentName(const ::android::os::Parcel& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::java::lang::String& arg1);
	ComponentName(const ::java::lang::String& arg0, const ::java::lang::String& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit ComponentName(jobject o) : ::java::lang::Object(o) {}
	ComponentName(const ComponentName& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace graphics { namespace drawable { 
struct Drawable : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid ApplyTheme(const ::android::content::res::Resources_Theme& arg0) const;
	::jboolean CanApplyTheme() const;
	::jvoid ClearColorFilter() const;
	::android::graphics::Rect CopyBounds() const;
	::jvoid CopyBounds(const ::android::graphics::Rect& arg0) const;
	static ::android::graphics::drawable::Drawable CreateFromPath(const ::java::lang::String& arg0);
	static ::android::graphics::drawable::Drawable CreateFromResourceStream(const ::android::content::res::Resources& arg0, const ::android::util::TypedValue& arg1, const ::java::io::InputStream& arg2, const ::java::lang::String& arg3);
	static ::android::graphics::drawable::Drawable CreateFromResourceStream(const ::android::content::res::Resources& arg0, const ::android::util::TypedValue& arg1, const ::java::io::InputStream& arg2, const ::java::lang::String& arg3, const ::android::graphics::BitmapFactory_Options& arg4);
	static ::android::graphics::drawable::Drawable CreateFromStream(const ::java::io::InputStream& arg0, const ::java::lang::String& arg1);
	static ::android::graphics::drawable::Drawable CreateFromXml(const ::android::content::res::Resources& arg0, const ::org::xmlpull::v1::XmlPullParser& arg1);
	static ::android::graphics::drawable::Drawable CreateFromXml(const ::android::content::res::Resources& arg0, const ::org::xmlpull::v1::XmlPullParser& arg1, const ::android::content::res::Resources_Theme& arg2);
	static ::android::graphics::drawable::Drawable CreateFromXmlInner(const ::android::content::res::Resources& arg0, const ::org::xmlpull::v1::XmlPullParser& arg1, const ::android::util::AttributeSet& arg2);
	static ::android::graphics::drawable::Drawable CreateFromXmlInner(const ::android::content::res::Resources& arg0, const ::org::xmlpull::v1::XmlPullParser& arg1, const ::android::util::AttributeSet& arg2, const ::android::content::res::Resources_Theme& arg3);
	::jvoid Draw(const ::android::graphics::Canvas& arg0) const;
	::jint GetAlpha() const;
	::android::graphics::Rect GetBounds() const;
	::android::graphics::drawable::Drawable_Callback GetCallback() const;
	::jint GetChangingConfigurations() const;
	::android::graphics::ColorFilter GetColorFilter() const;
	::android::graphics::drawable::Drawable_ConstantState GetConstantState() const;
	::android::graphics::drawable::Drawable GetCurrent() const;
	::android::graphics::Rect GetDirtyBounds() const;
	::jvoid GetHotspotBounds(const ::android::graphics::Rect& arg0) const;
	::jint GetIntrinsicHeight() const;
	::jint GetIntrinsicWidth() const;
	::jint GetLayoutDirection() const;
	::jint GetLevel() const;
	::jint GetMinimumHeight() const;
	::jint GetMinimumWidth() const;
	::jint GetOpacity() const;
	::android::graphics::Insets GetOpticalInsets() const;
	::jvoid GetOutline(const ::android::graphics::Outline& arg0) const;
	::jboolean GetPadding(const ::android::graphics::Rect& arg0) const;
	jni::Array< ::jint > GetState() const;
	::android::graphics::Region GetTransparentRegion() const;
	::jboolean HasFocusStateSpecified() const;
	::jvoid Inflate(const ::android::content::res::Resources& arg0, const ::org::xmlpull::v1::XmlPullParser& arg1, const ::android::util::AttributeSet& arg2) const;
	::jvoid Inflate(const ::android::content::res::Resources& arg0, const ::org::xmlpull::v1::XmlPullParser& arg1, const ::android::util::AttributeSet& arg2, const ::android::content::res::Resources_Theme& arg3) const;
	::jvoid InvalidateSelf() const;
	::jboolean IsAutoMirrored() const;
	::jboolean IsFilterBitmap() const;
	::jboolean IsProjected() const;
	::jboolean IsStateful() const;
	::jboolean IsVisible() const;
	::jvoid JumpToCurrentState() const;
	::android::graphics::drawable::Drawable Mutate() const;
	::jvoid OnBoundsChange(const ::android::graphics::Rect& arg0) const;
	::jboolean OnLayoutDirectionChanged(const ::jint& arg0) const;
	::jboolean OnLevelChange(const ::jint& arg0) const;
	::jboolean OnStateChange(const jni::Array< ::jint >& arg0) const;
	static ::jint ResolveOpacity(const ::jint& arg0, const ::jint& arg1);
	::jvoid ScheduleSelf(const ::java::lang::Runnable& arg0, const ::jlong& arg1) const;
	::jvoid SetAlpha(const ::jint& arg0) const;
	::jvoid SetAutoMirrored(const ::jboolean& arg0) const;
	::jvoid SetBounds(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid SetBounds(const ::android::graphics::Rect& arg0) const;
	::jvoid SetCallback(const ::android::graphics::drawable::Drawable_Callback& arg0) const;
	::jvoid SetChangingConfigurations(const ::jint& arg0) const;
	::jvoid SetColorFilter(const ::jint& arg0, const ::android::graphics::PorterDuff_Mode& arg1) const;
	::jvoid SetColorFilter(const ::android::graphics::ColorFilter& arg0) const;
	::jvoid SetDither(const ::jboolean& arg0) const;
	::jvoid SetFilterBitmap(const ::jboolean& arg0) const;
	::jvoid SetHotspot(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jvoid SetHotspotBounds(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jboolean SetLayoutDirection(const ::jint& arg0) const;
	::jboolean SetLevel(const ::jint& arg0) const;
	::jboolean SetState(const jni::Array< ::jint >& arg0) const;
	::jvoid SetTint(const ::jint& arg0) const;
	::jvoid SetTintBlendMode(const ::android::graphics::BlendMode& arg0) const;
	::jvoid SetTintList(const ::android::content::res::ColorStateList& arg0) const;
	::jvoid SetTintMode(const ::android::graphics::PorterDuff_Mode& arg0) const;
	::jboolean SetVisible(const ::jboolean& arg0, const ::jboolean& arg1) const;
	::jvoid UnscheduleSelf(const ::java::lang::Runnable& arg0) const;
	static jobject __Constructor();
	Drawable() : ::java::lang::Object(__Constructor()) {}
	explicit Drawable(jobject o) : ::java::lang::Object(o) {}
	Drawable(const Drawable& o)  : ::java::lang::Object(o) {}

};

}}}

namespace android { namespace content { namespace res { 
struct Resources_Theme : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid ApplyStyle(const ::jint& arg0, const ::jboolean& arg1) const;
	::jvoid Dump(const ::jint& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2) const;
	jni::Array< ::jint > GetAttributeResolutionStack(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jint GetChangingConfigurations() const;
	::android::graphics::drawable::Drawable GetDrawable(const ::jint& arg0) const;
	::jint GetExplicitStyle(const ::android::util::AttributeSet& arg0) const;
	::android::content::res::Resources GetResources() const;
	::android::content::res::TypedArray ObtainStyledAttributes(const ::jint& arg0, const jni::Array< ::jint >& arg1) const;
	::android::content::res::TypedArray ObtainStyledAttributes(const ::android::util::AttributeSet& arg0, const jni::Array< ::jint >& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::android::content::res::TypedArray ObtainStyledAttributes(const jni::Array< ::jint >& arg0) const;
	::jvoid Rebase() const;
	::jboolean ResolveAttribute(const ::jint& arg0, const ::android::util::TypedValue& arg1, const ::jboolean& arg2) const;
	::jvoid SetTo(const ::android::content::res::Resources_Theme& arg0) const;
	explicit Resources_Theme(jobject o) : ::java::lang::Object(o) {}
	Resources_Theme(const Resources_Theme& o)  : ::java::lang::Object(o) {}

};

}}}

namespace android { namespace util { 
struct AttributeSet : java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean GetAttributeBooleanValue(const ::jint& arg0, const ::jboolean& arg1) const;
	::jboolean GetAttributeBooleanValue(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::jboolean& arg2) const;
	::jint GetAttributeCount() const;
	::jfloat GetAttributeFloatValue(const ::jint& arg0, const ::jfloat& arg1) const;
	::jfloat GetAttributeFloatValue(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::jfloat& arg2) const;
	::jint GetAttributeIntValue(const ::jint& arg0, const ::jint& arg1) const;
	::jint GetAttributeIntValue(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::jint& arg2) const;
	::jint GetAttributeListValue(const ::jint& arg0, const jni::Array< ::java::lang::String >& arg1, const ::jint& arg2) const;
	::jint GetAttributeListValue(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const jni::Array< ::java::lang::String >& arg2, const ::jint& arg3) const;
	::java::lang::String GetAttributeName(const ::jint& arg0) const;
	::jint GetAttributeNameResource(const ::jint& arg0) const;
	::java::lang::String GetAttributeNamespace(const ::jint& arg0) const;
	::jint GetAttributeResourceValue(const ::jint& arg0, const ::jint& arg1) const;
	::jint GetAttributeResourceValue(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::jint& arg2) const;
	::jint GetAttributeUnsignedIntValue(const ::jint& arg0, const ::jint& arg1) const;
	::jint GetAttributeUnsignedIntValue(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::jint& arg2) const;
	::java::lang::String GetAttributeValue(const ::jint& arg0) const;
	::java::lang::String GetAttributeValue(const ::java::lang::String& arg0, const ::java::lang::String& arg1) const;
	::java::lang::String GetClassAttribute() const;
	::java::lang::String GetIdAttribute() const;
	::jint GetIdAttributeResourceValue(const ::jint& arg0) const;
	::java::lang::String GetPositionDescription() const;
	::jint GetStyleAttribute() const;
	explicit AttributeSet(jobject o) : java::lang::Object(o) {}
	AttributeSet(const AttributeSet& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::util::AttributeSet();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean GetAttributeBooleanValue(const ::jint& arg0, const ::jboolean& arg1) = 0;
		virtual ::jboolean GetAttributeBooleanValue(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::jboolean& arg2) = 0;
		virtual ::jint GetAttributeCount() = 0;
		virtual ::jfloat GetAttributeFloatValue(const ::jint& arg0, const ::jfloat& arg1) = 0;
		virtual ::jfloat GetAttributeFloatValue(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::jfloat& arg2) = 0;
		virtual ::jint GetAttributeIntValue(const ::jint& arg0, const ::jint& arg1) = 0;
		virtual ::jint GetAttributeIntValue(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::jint& arg2) = 0;
		virtual ::jint GetAttributeListValue(const ::jint& arg0, const jni::Array< ::java::lang::String >& arg1, const ::jint& arg2) = 0;
		virtual ::jint GetAttributeListValue(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const jni::Array< ::java::lang::String >& arg2, const ::jint& arg3) = 0;
		virtual ::java::lang::String GetAttributeName(const ::jint& arg0) = 0;
		virtual ::jint GetAttributeNameResource(const ::jint& arg0) = 0;
		virtual ::java::lang::String GetAttributeNamespace(const ::jint& arg0) = 0;
		virtual ::jint GetAttributeResourceValue(const ::jint& arg0, const ::jint& arg1) = 0;
		virtual ::jint GetAttributeResourceValue(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::jint& arg2) = 0;
		virtual ::jint GetAttributeUnsignedIntValue(const ::jint& arg0, const ::jint& arg1) = 0;
		virtual ::jint GetAttributeUnsignedIntValue(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::jint& arg2) = 0;
		virtual ::java::lang::String GetAttributeValue(const ::jint& arg0) = 0;
		virtual ::java::lang::String GetAttributeValue(const ::java::lang::String& arg0, const ::java::lang::String& arg1) = 0;
		virtual ::java::lang::String GetClassAttribute() = 0;
		virtual ::java::lang::String GetIdAttribute() = 0;
		virtual ::jint GetIdAttributeResourceValue(const ::jint& arg0) = 0;
		virtual ::java::lang::String GetPositionDescription() = 0;
		virtual ::jint GetStyleAttribute() = 0;
	};
};

}}

namespace android { namespace content { namespace res { 
struct Resources : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fID_NULL();
	::jvoid AddLoaders(const jni::Array< ::android::content::res::loader::ResourcesLoader >& arg0) const;
	::jvoid FinishPreloading() const;
	::jvoid FlushLayoutCache() const;
	::android::content::res::XmlResourceParser GetAnimation(const ::jint& arg0) const;
	::android::content::res::AssetManager GetAssets() const;
	static ::jint GetAttributeSetSourceResId(const ::android::util::AttributeSet& arg0);
	::jboolean GetBoolean(const ::jint& arg0) const;
	::jint GetColor(const ::jint& arg0) const;
	::jint GetColor(const ::jint& arg0, const ::android::content::res::Resources_Theme& arg1) const;
	::android::content::res::ColorStateList GetColorStateList(const ::jint& arg0) const;
	::android::content::res::ColorStateList GetColorStateList(const ::jint& arg0, const ::android::content::res::Resources_Theme& arg1) const;
	::android::content::res::Configuration GetConfiguration() const;
	::jfloat GetDimension(const ::jint& arg0) const;
	::jint GetDimensionPixelOffset(const ::jint& arg0) const;
	::jint GetDimensionPixelSize(const ::jint& arg0) const;
	::android::util::DisplayMetrics GetDisplayMetrics() const;
	::android::graphics::drawable::Drawable GetDrawable(const ::jint& arg0) const;
	::android::graphics::drawable::Drawable GetDrawable(const ::jint& arg0, const ::android::content::res::Resources_Theme& arg1) const;
	::android::graphics::drawable::Drawable GetDrawableForDensity(const ::jint& arg0, const ::jint& arg1) const;
	::android::graphics::drawable::Drawable GetDrawableForDensity(const ::jint& arg0, const ::jint& arg1, const ::android::content::res::Resources_Theme& arg2) const;
	::jfloat GetFloat(const ::jint& arg0) const;
	::android::graphics::Typeface GetFont(const ::jint& arg0) const;
	::jfloat GetFraction(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jint GetIdentifier(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2) const;
	jni::Array< ::jint > GetIntArray(const ::jint& arg0) const;
	::jint GetInteger(const ::jint& arg0) const;
	::android::content::res::XmlResourceParser GetLayout(const ::jint& arg0) const;
	::android::graphics::Movie GetMovie(const ::jint& arg0) const;
	::java::lang::String GetQuantityString(const ::jint& arg0, const ::jint& arg1) const;
	::java::lang::String GetQuantityString(const ::jint& arg0, const ::jint& arg1, const jni::Array< ::java::lang::Object >& arg2) const;
	::java::lang::CharSequence GetQuantityText(const ::jint& arg0, const ::jint& arg1) const;
	::java::lang::String GetResourceEntryName(const ::jint& arg0) const;
	::java::lang::String GetResourceName(const ::jint& arg0) const;
	::java::lang::String GetResourcePackageName(const ::jint& arg0) const;
	::java::lang::String GetResourceTypeName(const ::jint& arg0) const;
	::java::lang::String GetString(const ::jint& arg0) const;
	::java::lang::String GetString(const ::jint& arg0, const jni::Array< ::java::lang::Object >& arg1) const;
	jni::Array< ::java::lang::String > GetStringArray(const ::jint& arg0) const;
	static ::android::content::res::Resources GetSystem();
	::java::lang::CharSequence GetText(const ::jint& arg0) const;
	::java::lang::CharSequence GetText(const ::jint& arg0, const ::java::lang::CharSequence& arg1) const;
	jni::Array< ::java::lang::CharSequence > GetTextArray(const ::jint& arg0) const;
	::jvoid GetValue(const ::jint& arg0, const ::android::util::TypedValue& arg1, const ::jboolean& arg2) const;
	::jvoid GetValue(const ::java::lang::String& arg0, const ::android::util::TypedValue& arg1, const ::jboolean& arg2) const;
	::jvoid GetValueForDensity(const ::jint& arg0, const ::jint& arg1, const ::android::util::TypedValue& arg2, const ::jboolean& arg3) const;
	::android::content::res::XmlResourceParser GetXml(const ::jint& arg0) const;
	::android::content::res::Resources_Theme NewTheme() const;
	::android::content::res::TypedArray ObtainAttributes(const ::android::util::AttributeSet& arg0, const jni::Array< ::jint >& arg1) const;
	::android::content::res::TypedArray ObtainTypedArray(const ::jint& arg0) const;
	::java::io::InputStream OpenRawResource(const ::jint& arg0) const;
	::java::io::InputStream OpenRawResource(const ::jint& arg0, const ::android::util::TypedValue& arg1) const;
	::android::content::res::AssetFileDescriptor OpenRawResourceFd(const ::jint& arg0) const;
	::jvoid ParseBundleExtra(const ::java::lang::String& arg0, const ::android::util::AttributeSet& arg1, const ::android::os::Bundle& arg2) const;
	::jvoid ParseBundleExtras(const ::android::content::res::XmlResourceParser& arg0, const ::android::os::Bundle& arg1) const;
	::jvoid RemoveLoaders(const jni::Array< ::android::content::res::loader::ResourcesLoader >& arg0) const;
	::jvoid UpdateConfiguration(const ::android::content::res::Configuration& arg0, const ::android::util::DisplayMetrics& arg1) const;
	static jobject __Constructor(const ::android::content::res::AssetManager& arg0, const ::android::util::DisplayMetrics& arg1, const ::android::content::res::Configuration& arg2);
	Resources(const ::android::content::res::AssetManager& arg0, const ::android::util::DisplayMetrics& arg1, const ::android::content::res::Configuration& arg2) : ::java::lang::Object(__Constructor(arg0, arg1, arg2)) {}
	explicit Resources(jobject o) : ::java::lang::Object(o) {}
	Resources(const Resources& o)  : ::java::lang::Object(o) {}

};

}}}

namespace android { namespace content { namespace res { namespace loader { 
struct ResourcesLoader : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid AddProvider(const ::android::content::res::loader::ResourcesProvider& arg0) const;
	::jvoid ClearProviders() const;
	::java::util::List GetProviders() const;
	::jvoid RemoveProvider(const ::android::content::res::loader::ResourcesProvider& arg0) const;
	::jvoid SetProviders(const ::java::util::List& arg0) const;
	static jobject __Constructor();
	ResourcesLoader() : ::java::lang::Object(__Constructor()) {}
	explicit ResourcesLoader(jobject o) : ::java::lang::Object(o) {}
	ResourcesLoader(const ResourcesLoader& o)  : ::java::lang::Object(o) {}

};

struct ResourcesProvider : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::AutoCloseable();
	operator ::java::io::Closeable();
	::jvoid Close() const;
	static ::android::content::res::loader::ResourcesProvider Empty(const ::android::content::res::loader::AssetsProvider& arg0);
	::jvoid Finalize() const;
	static ::android::content::res::loader::ResourcesProvider LoadFromApk(const ::android::os::ParcelFileDescriptor& arg0);
	static ::android::content::res::loader::ResourcesProvider LoadFromApk(const ::android::os::ParcelFileDescriptor& arg0, const ::android::content::res::loader::AssetsProvider& arg1);
	static ::android::content::res::loader::ResourcesProvider LoadFromDirectory(const ::java::lang::String& arg0, const ::android::content::res::loader::AssetsProvider& arg1);
	static ::android::content::res::loader::ResourcesProvider LoadFromSplit(const ::android::content::Context& arg0, const ::java::lang::String& arg1);
	static ::android::content::res::loader::ResourcesProvider LoadFromTable(const ::android::os::ParcelFileDescriptor& arg0, const ::android::content::res::loader::AssetsProvider& arg1);
	explicit ResourcesProvider(jobject o) : ::java::lang::Object(o) {}
	ResourcesProvider(const ResourcesProvider& o)  : ::java::lang::Object(o) {}

};

struct AssetsProvider : java::lang::Object
{
	static jni::Class __CLASS;

	::android::content::res::AssetFileDescriptor LoadAssetFd(const ::java::lang::String& arg0, const ::jint& arg1) const;
	explicit AssetsProvider(jobject o) : java::lang::Object(o) {}
	AssetsProvider(const AssetsProvider& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::content::res::loader::AssetsProvider();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::android::content::res::AssetFileDescriptor LoadAssetFd(const ::java::lang::String& arg0, const ::jint& arg1) = 0;
	};
};

}}}}

namespace android { namespace content { namespace res { 
struct AssetFileDescriptor : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	operator ::java::io::Closeable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jlong& fUNKNOWN_LENGTH();
	::jvoid Close() const;
	::java::io::FileInputStream CreateInputStream() const;
	::java::io::FileOutputStream CreateOutputStream() const;
	::jint DescribeContents() const;
	::jlong GetDeclaredLength() const;
	::android::os::Bundle GetExtras() const;
	::java::io::FileDescriptor GetFileDescriptor() const;
	::jlong GetLength() const;
	::android::os::ParcelFileDescriptor GetParcelFileDescriptor() const;
	::jlong GetStartOffset() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor(const ::android::os::ParcelFileDescriptor& arg0, const ::jlong& arg1, const ::jlong& arg2);
	AssetFileDescriptor(const ::android::os::ParcelFileDescriptor& arg0, const ::jlong& arg1, const ::jlong& arg2) : ::java::lang::Object(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::android::os::ParcelFileDescriptor& arg0, const ::jlong& arg1, const ::jlong& arg2, const ::android::os::Bundle& arg3);
	AssetFileDescriptor(const ::android::os::ParcelFileDescriptor& arg0, const ::jlong& arg1, const ::jlong& arg2, const ::android::os::Bundle& arg3) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3)) {}
	explicit AssetFileDescriptor(jobject o) : ::java::lang::Object(o) {}
	AssetFileDescriptor(const AssetFileDescriptor& o)  : ::java::lang::Object(o) {}

};

}}}

namespace java { namespace io { 
struct FileInputStream : ::java::io::InputStream
{
	static jni::Class __CLASS;

	::jint Available() const;
	::jvoid Close() const;
	::jvoid Finalize() const;
	::java::nio::channels::FileChannel GetChannel() const;
	::java::io::FileDescriptor GetFD() const;
	::jint Read() const;
	::jint Read(const jni::Array< ::jbyte >& arg0) const;
	::jint Read(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jlong Skip(const ::jlong& arg0) const;
	static jobject __Constructor(const ::java::io::File& arg0);
	FileInputStream(const ::java::io::File& arg0) : ::java::io::InputStream(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::io::FileDescriptor& arg0);
	FileInputStream(const ::java::io::FileDescriptor& arg0) : ::java::io::InputStream(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::String& arg0);
	FileInputStream(const ::java::lang::String& arg0) : ::java::io::InputStream(__Constructor(arg0)) {}
	explicit FileInputStream(jobject o) : ::java::io::InputStream(o) {}
	FileInputStream(const FileInputStream& o)  : ::java::io::InputStream(o) {}

};

struct FileOutputStream : ::java::io::OutputStream
{
	static jni::Class __CLASS;

	::jvoid Close() const;
	::jvoid Finalize() const;
	::java::nio::channels::FileChannel GetChannel() const;
	::java::io::FileDescriptor GetFD() const;
	::jvoid Write(const ::jint& arg0) const;
	::jvoid Write(const jni::Array< ::jbyte >& arg0) const;
	::jvoid Write(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	static jobject __Constructor(const ::java::io::File& arg0);
	FileOutputStream(const ::java::io::File& arg0) : ::java::io::OutputStream(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::io::File& arg0, const ::jboolean& arg1);
	FileOutputStream(const ::java::io::File& arg0, const ::jboolean& arg1) : ::java::io::OutputStream(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::io::FileDescriptor& arg0);
	FileOutputStream(const ::java::io::FileDescriptor& arg0) : ::java::io::OutputStream(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::String& arg0);
	FileOutputStream(const ::java::lang::String& arg0) : ::java::io::OutputStream(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::jboolean& arg1);
	FileOutputStream(const ::java::lang::String& arg0, const ::jboolean& arg1) : ::java::io::OutputStream(__Constructor(arg0, arg1)) {}
	explicit FileOutputStream(jobject o) : ::java::io::OutputStream(o) {}
	FileOutputStream(const FileOutputStream& o)  : ::java::io::OutputStream(o) {}

};

}}

namespace android { namespace content { namespace res { 
struct XmlResourceParser : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::org::xmlpull::v1::XmlPullParser();
	operator ::android::util::AttributeSet();
	operator ::java::lang::AutoCloseable();
	::jvoid Close() const;
	::java::lang::String GetAttributeNamespace(const ::jint& arg0) const;
	explicit XmlResourceParser(jobject o) : java::lang::Object(o) {}
	XmlResourceParser(const XmlResourceParser& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::content::res::XmlResourceParser();
		operator ::org::xmlpull::v1::XmlPullParser();
		operator ::android::util::AttributeSet();
		operator ::java::lang::AutoCloseable();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void Close() = 0;
		virtual ::java::lang::String GetAttributeNamespace(const ::jint& arg0) = 0;
	};
};

struct AssetManager : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::AutoCloseable();
	static ::jint& fACCESS_BUFFER();
	static ::jint& fACCESS_RANDOM();
	static ::jint& fACCESS_STREAMING();
	static ::jint& fACCESS_UNKNOWN();
	::jvoid Close() const;
	::jvoid Finalize() const;
	jni::Array< ::java::lang::String > GetLocales() const;
	jni::Array< ::java::lang::String > List(const ::java::lang::String& arg0) const;
	::java::io::InputStream Open(const ::java::lang::String& arg0) const;
	::java::io::InputStream Open(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::android::content::res::AssetFileDescriptor OpenFd(const ::java::lang::String& arg0) const;
	::android::content::res::AssetFileDescriptor OpenNonAssetFd(const ::jint& arg0, const ::java::lang::String& arg1) const;
	::android::content::res::AssetFileDescriptor OpenNonAssetFd(const ::java::lang::String& arg0) const;
	::android::content::res::XmlResourceParser OpenXmlResourceParser(const ::jint& arg0, const ::java::lang::String& arg1) const;
	::android::content::res::XmlResourceParser OpenXmlResourceParser(const ::java::lang::String& arg0) const;
	explicit AssetManager(jobject o) : ::java::lang::Object(o) {}
	AssetManager(const AssetManager& o)  : ::java::lang::Object(o) {}

};

struct ColorStateList : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::android::content::res::ColorStateList CreateFromXml(const ::android::content::res::Resources& arg0, const ::org::xmlpull::v1::XmlPullParser& arg1);
	static ::android::content::res::ColorStateList CreateFromXml(const ::android::content::res::Resources& arg0, const ::org::xmlpull::v1::XmlPullParser& arg1, const ::android::content::res::Resources_Theme& arg2);
	::jint DescribeContents() const;
	::jint GetChangingConfigurations() const;
	::jint GetColorForState(const jni::Array< ::jint >& arg0, const ::jint& arg1) const;
	::jint GetDefaultColor() const;
	::jboolean IsOpaque() const;
	::jboolean IsStateful() const;
	::java::lang::String ToString() const;
	static ::android::content::res::ColorStateList ValueOf(const ::jint& arg0);
	::android::content::res::ColorStateList WithAlpha(const ::jint& arg0) const;
	::android::content::res::ColorStateList WithLStar(const ::jfloat& arg0) const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor(const jni::Array< jni::Array< ::jint > >& arg0, const jni::Array< ::jint >& arg1);
	ColorStateList(const jni::Array< jni::Array< ::jint > >& arg0, const jni::Array< ::jint >& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit ColorStateList(jobject o) : ::java::lang::Object(o) {}
	ColorStateList(const ColorStateList& o)  : ::java::lang::Object(o) {}

};

}}}

namespace android { namespace util { 
struct DisplayMetrics : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fDENSITY_140();
	static ::jint& fDENSITY_180();
	static ::jint& fDENSITY_200();
	static ::jint& fDENSITY_220();
	static ::jint& fDENSITY_260();
	static ::jint& fDENSITY_280();
	static ::jint& fDENSITY_300();
	static ::jint& fDENSITY_340();
	static ::jint& fDENSITY_360();
	static ::jint& fDENSITY_400();
	static ::jint& fDENSITY_420();
	static ::jint& fDENSITY_440();
	static ::jint& fDENSITY_450();
	static ::jint& fDENSITY_560();
	static ::jint& fDENSITY_600();
	static ::jint& fDENSITY_DEFAULT();
	static ::jint& fDENSITY_DEVICE_STABLE();
	static ::jint& fDENSITY_HIGH();
	static ::jint& fDENSITY_LOW();
	static ::jint& fDENSITY_MEDIUM();
	static ::jint& fDENSITY_TV();
	static ::jint& fDENSITY_XHIGH();
	static ::jint& fDENSITY_XXHIGH();
	static ::jint& fDENSITY_XXXHIGH();
	::jfloat fDensity() const;
	void fDensity(const ::jfloat& arg0) const;
	::jint fDensityDpi() const;
	void fDensityDpi(const ::jint& arg0) const;
	::jint fHeightPixels() const;
	void fHeightPixels(const ::jint& arg0) const;
	::jfloat fScaledDensity() const;
	void fScaledDensity(const ::jfloat& arg0) const;
	::jint fWidthPixels() const;
	void fWidthPixels(const ::jint& arg0) const;
	::jfloat fXdpi() const;
	void fXdpi(const ::jfloat& arg0) const;
	::jfloat fYdpi() const;
	void fYdpi(const ::jfloat& arg0) const;
	::jboolean Equals(const ::android::util::DisplayMetrics& arg0) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint HashCode() const;
	::jvoid SetTo(const ::android::util::DisplayMetrics& arg0) const;
	::jvoid SetToDefaults() const;
	::java::lang::String ToString() const;
	static jobject __Constructor();
	DisplayMetrics() : ::java::lang::Object(__Constructor()) {}
	explicit DisplayMetrics(jobject o) : ::java::lang::Object(o) {}
	DisplayMetrics(const DisplayMetrics& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace graphics { 
struct Typeface : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fBOLD();
	static ::jint& fBOLD_ITALIC();
	static ::android::graphics::Typeface& fDEFAULT();
	static ::android::graphics::Typeface& fDEFAULT_BOLD();
	static ::jint& fITALIC();
	static ::android::graphics::Typeface& fMONOSPACE();
	static ::jint& fNORMAL();
	static ::android::graphics::Typeface& fSANS_SERIF();
	static ::android::graphics::Typeface& fSERIF();
	static ::android::graphics::Typeface Create(const ::android::graphics::Typeface& arg0, const ::jint& arg1);
	static ::android::graphics::Typeface Create(const ::android::graphics::Typeface& arg0, const ::jint& arg1, const ::jboolean& arg2);
	static ::android::graphics::Typeface Create(const ::java::lang::String& arg0, const ::jint& arg1);
	static ::android::graphics::Typeface CreateFromAsset(const ::android::content::res::AssetManager& arg0, const ::java::lang::String& arg1);
	static ::android::graphics::Typeface CreateFromFile(const ::java::io::File& arg0);
	static ::android::graphics::Typeface CreateFromFile(const ::java::lang::String& arg0);
	static ::android::graphics::Typeface DefaultFromStyle(const ::jint& arg0);
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint GetStyle() const;
	::jint GetWeight() const;
	::jint HashCode() const;
	::jboolean IsBold() const;
	::jboolean IsItalic() const;
	explicit Typeface(jobject o) : ::java::lang::Object(o) {}
	Typeface(const Typeface& o)  : ::java::lang::Object(o) {}

};

struct Movie : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::android::graphics::Movie DecodeByteArray(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::jint& arg2);
	static ::android::graphics::Movie DecodeFile(const ::java::lang::String& arg0);
	static ::android::graphics::Movie DecodeStream(const ::java::io::InputStream& arg0);
	::jvoid Draw(const ::android::graphics::Canvas& arg0, const ::jfloat& arg1, const ::jfloat& arg2) const;
	::jvoid Draw(const ::android::graphics::Canvas& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::android::graphics::Paint& arg3) const;
	::jint Duration() const;
	::jvoid Finalize() const;
	::jint Height() const;
	::jboolean IsOpaque() const;
	::jboolean SetTime(const ::jint& arg0) const;
	::jint Width() const;
	explicit Movie(jobject o) : ::java::lang::Object(o) {}
	Movie(const Movie& o)  : ::java::lang::Object(o) {}

};

struct Canvas : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fALL_SAVE_FLAG();
	::jboolean ClipOutPath(const ::android::graphics::Path& arg0) const;
	::jboolean ClipOutRect(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3) const;
	::jboolean ClipOutRect(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jboolean ClipOutRect(const ::android::graphics::Rect& arg0) const;
	::jboolean ClipOutRect(const ::android::graphics::RectF& arg0) const;
	::jboolean ClipPath(const ::android::graphics::Path& arg0) const;
	::jboolean ClipPath(const ::android::graphics::Path& arg0, const ::android::graphics::Region_Op& arg1) const;
	::jboolean ClipRect(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3) const;
	::jboolean ClipRect(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3, const ::android::graphics::Region_Op& arg4) const;
	::jboolean ClipRect(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jboolean ClipRect(const ::android::graphics::Rect& arg0) const;
	::jboolean ClipRect(const ::android::graphics::Rect& arg0, const ::android::graphics::Region_Op& arg1) const;
	::jboolean ClipRect(const ::android::graphics::RectF& arg0) const;
	::jboolean ClipRect(const ::android::graphics::RectF& arg0, const ::android::graphics::Region_Op& arg1) const;
	::jvoid Concat(const ::android::graphics::Matrix& arg0) const;
	::jvoid DisableZ() const;
	::jvoid DrawARGB(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid DrawArc(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3, const ::jfloat& arg4, const ::jfloat& arg5, const ::jboolean& arg6, const ::android::graphics::Paint& arg7) const;
	::jvoid DrawArc(const ::android::graphics::RectF& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jboolean& arg3, const ::android::graphics::Paint& arg4) const;
	::jvoid DrawBitmap(const ::android::graphics::Bitmap& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::android::graphics::Paint& arg3) const;
	::jvoid DrawBitmap(const ::android::graphics::Bitmap& arg0, const ::android::graphics::Matrix& arg1, const ::android::graphics::Paint& arg2) const;
	::jvoid DrawBitmap(const ::android::graphics::Bitmap& arg0, const ::android::graphics::Rect& arg1, const ::android::graphics::Rect& arg2, const ::android::graphics::Paint& arg3) const;
	::jvoid DrawBitmap(const ::android::graphics::Bitmap& arg0, const ::android::graphics::Rect& arg1, const ::android::graphics::RectF& arg2, const ::android::graphics::Paint& arg3) const;
	::jvoid DrawBitmap(const jni::Array< ::jint >& arg0, const ::jint& arg1, const ::jint& arg2, const ::jfloat& arg3, const ::jfloat& arg4, const ::jint& arg5, const ::jint& arg6, const ::jboolean& arg7, const ::android::graphics::Paint& arg8) const;
	::jvoid DrawBitmap(const jni::Array< ::jint >& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5, const ::jint& arg6, const ::jboolean& arg7, const ::android::graphics::Paint& arg8) const;
	::jvoid DrawBitmapMesh(const ::android::graphics::Bitmap& arg0, const ::jint& arg1, const ::jint& arg2, const jni::Array< ::jfloat >& arg3, const ::jint& arg4, const jni::Array< ::jint >& arg5, const ::jint& arg6, const ::android::graphics::Paint& arg7) const;
	::jvoid DrawCircle(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::android::graphics::Paint& arg3) const;
	::jvoid DrawColor(const ::jint& arg0) const;
	::jvoid DrawColor(const ::jint& arg0, const ::android::graphics::BlendMode& arg1) const;
	::jvoid DrawColor(const ::jint& arg0, const ::android::graphics::PorterDuff_Mode& arg1) const;
	::jvoid DrawColor(const ::jlong& arg0) const;
	::jvoid DrawColor(const ::jlong& arg0, const ::android::graphics::BlendMode& arg1) const;
	::jvoid DrawDoubleRoundRect(const ::android::graphics::RectF& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::android::graphics::RectF& arg3, const ::jfloat& arg4, const ::jfloat& arg5, const ::android::graphics::Paint& arg6) const;
	::jvoid DrawDoubleRoundRect(const ::android::graphics::RectF& arg0, const jni::Array< ::jfloat >& arg1, const ::android::graphics::RectF& arg2, const jni::Array< ::jfloat >& arg3, const ::android::graphics::Paint& arg4) const;
	::jvoid DrawGlyphs(const jni::Array< ::jint >& arg0, const ::jint& arg1, const jni::Array< ::jfloat >& arg2, const ::jint& arg3, const ::jint& arg4, const ::android::graphics::fonts::Font& arg5, const ::android::graphics::Paint& arg6) const;
	::jvoid DrawLine(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3, const ::android::graphics::Paint& arg4) const;
	::jvoid DrawLines(const jni::Array< ::jfloat >& arg0, const ::jint& arg1, const ::jint& arg2, const ::android::graphics::Paint& arg3) const;
	::jvoid DrawLines(const jni::Array< ::jfloat >& arg0, const ::android::graphics::Paint& arg1) const;
	::jvoid DrawOval(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3, const ::android::graphics::Paint& arg4) const;
	::jvoid DrawOval(const ::android::graphics::RectF& arg0, const ::android::graphics::Paint& arg1) const;
	::jvoid DrawPaint(const ::android::graphics::Paint& arg0) const;
	::jvoid DrawPatch(const ::android::graphics::NinePatch& arg0, const ::android::graphics::Rect& arg1, const ::android::graphics::Paint& arg2) const;
	::jvoid DrawPatch(const ::android::graphics::NinePatch& arg0, const ::android::graphics::RectF& arg1, const ::android::graphics::Paint& arg2) const;
	::jvoid DrawPath(const ::android::graphics::Path& arg0, const ::android::graphics::Paint& arg1) const;
	::jvoid DrawPicture(const ::android::graphics::Picture& arg0) const;
	::jvoid DrawPicture(const ::android::graphics::Picture& arg0, const ::android::graphics::Rect& arg1) const;
	::jvoid DrawPicture(const ::android::graphics::Picture& arg0, const ::android::graphics::RectF& arg1) const;
	::jvoid DrawPoint(const ::jfloat& arg0, const ::jfloat& arg1, const ::android::graphics::Paint& arg2) const;
	::jvoid DrawPoints(const jni::Array< ::jfloat >& arg0, const ::jint& arg1, const ::jint& arg2, const ::android::graphics::Paint& arg3) const;
	::jvoid DrawPoints(const jni::Array< ::jfloat >& arg0, const ::android::graphics::Paint& arg1) const;
	::jvoid DrawPosText(const ::java::lang::String& arg0, const jni::Array< ::jfloat >& arg1, const ::android::graphics::Paint& arg2) const;
	::jvoid DrawPosText(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2, const jni::Array< ::jfloat >& arg3, const ::android::graphics::Paint& arg4) const;
	::jvoid DrawRGB(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jvoid DrawRect(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3, const ::android::graphics::Paint& arg4) const;
	::jvoid DrawRect(const ::android::graphics::Rect& arg0, const ::android::graphics::Paint& arg1) const;
	::jvoid DrawRect(const ::android::graphics::RectF& arg0, const ::android::graphics::Paint& arg1) const;
	::jvoid DrawRenderNode(const ::android::graphics::RenderNode& arg0) const;
	::jvoid DrawRoundRect(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3, const ::jfloat& arg4, const ::jfloat& arg5, const ::android::graphics::Paint& arg6) const;
	::jvoid DrawRoundRect(const ::android::graphics::RectF& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::android::graphics::Paint& arg3) const;
	::jvoid DrawText(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2, const ::jfloat& arg3, const ::jfloat& arg4, const ::android::graphics::Paint& arg5) const;
	::jvoid DrawText(const ::java::lang::String& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::android::graphics::Paint& arg3) const;
	::jvoid DrawText(const ::java::lang::String& arg0, const ::jint& arg1, const ::jint& arg2, const ::jfloat& arg3, const ::jfloat& arg4, const ::android::graphics::Paint& arg5) const;
	::jvoid DrawText(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2, const ::jfloat& arg3, const ::jfloat& arg4, const ::android::graphics::Paint& arg5) const;
	::jvoid DrawTextOnPath(const ::java::lang::String& arg0, const ::android::graphics::Path& arg1, const ::jfloat& arg2, const ::jfloat& arg3, const ::android::graphics::Paint& arg4) const;
	::jvoid DrawTextOnPath(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2, const ::android::graphics::Path& arg3, const ::jfloat& arg4, const ::jfloat& arg5, const ::android::graphics::Paint& arg6) const;
	::jvoid DrawTextRun(const ::android::graphics::text::MeasuredText& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jfloat& arg5, const ::jfloat& arg6, const ::jboolean& arg7, const ::android::graphics::Paint& arg8) const;
	::jvoid DrawTextRun(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jfloat& arg5, const ::jfloat& arg6, const ::jboolean& arg7, const ::android::graphics::Paint& arg8) const;
	::jvoid DrawTextRun(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jfloat& arg5, const ::jfloat& arg6, const ::jboolean& arg7, const ::android::graphics::Paint& arg8) const;
	::jvoid DrawVertices(const ::android::graphics::Canvas_VertexMode& arg0, const ::jint& arg1, const jni::Array< ::jfloat >& arg2, const ::jint& arg3, const jni::Array< ::jfloat >& arg4, const ::jint& arg5, const jni::Array< ::jint >& arg6, const ::jint& arg7, const jni::Array< ::jshort >& arg8, const ::jint& arg9, const ::jint& arg10, const ::android::graphics::Paint& arg11) const;
	::jvoid EnableZ() const;
	::android::graphics::Rect GetClipBounds() const;
	::jboolean GetClipBounds(const ::android::graphics::Rect& arg0) const;
	::jint GetDensity() const;
	::android::graphics::DrawFilter GetDrawFilter() const;
	::jint GetHeight() const;
	::android::graphics::Matrix GetMatrix() const;
	::jvoid GetMatrix(const ::android::graphics::Matrix& arg0) const;
	::jint GetMaximumBitmapHeight() const;
	::jint GetMaximumBitmapWidth() const;
	::jint GetSaveCount() const;
	::jint GetWidth() const;
	::jboolean IsHardwareAccelerated() const;
	::jboolean IsOpaque() const;
	::jboolean QuickReject(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3) const;
	::jboolean QuickReject(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3, const ::android::graphics::Canvas_EdgeType& arg4) const;
	::jboolean QuickReject(const ::android::graphics::Path& arg0) const;
	::jboolean QuickReject(const ::android::graphics::Path& arg0, const ::android::graphics::Canvas_EdgeType& arg1) const;
	::jboolean QuickReject(const ::android::graphics::RectF& arg0) const;
	::jboolean QuickReject(const ::android::graphics::RectF& arg0, const ::android::graphics::Canvas_EdgeType& arg1) const;
	::jvoid Restore() const;
	::jvoid RestoreToCount(const ::jint& arg0) const;
	::jvoid Rotate(const ::jfloat& arg0) const;
	::jvoid Rotate(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2) const;
	::jint Save() const;
	::jint SaveLayer(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3, const ::android::graphics::Paint& arg4) const;
	::jint SaveLayer(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3, const ::android::graphics::Paint& arg4, const ::jint& arg5) const;
	::jint SaveLayer(const ::android::graphics::RectF& arg0, const ::android::graphics::Paint& arg1) const;
	::jint SaveLayer(const ::android::graphics::RectF& arg0, const ::android::graphics::Paint& arg1, const ::jint& arg2) const;
	::jint SaveLayerAlpha(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3, const ::jint& arg4) const;
	::jint SaveLayerAlpha(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3, const ::jint& arg4, const ::jint& arg5) const;
	::jint SaveLayerAlpha(const ::android::graphics::RectF& arg0, const ::jint& arg1) const;
	::jint SaveLayerAlpha(const ::android::graphics::RectF& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jvoid Scale(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jvoid Scale(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3) const;
	::jvoid SetBitmap(const ::android::graphics::Bitmap& arg0) const;
	::jvoid SetDensity(const ::jint& arg0) const;
	::jvoid SetDrawFilter(const ::android::graphics::DrawFilter& arg0) const;
	::jvoid SetMatrix(const ::android::graphics::Matrix& arg0) const;
	::jvoid Skew(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jvoid Translate(const ::jfloat& arg0, const ::jfloat& arg1) const;
	static jobject __Constructor();
	Canvas() : ::java::lang::Object(__Constructor()) {}
	static jobject __Constructor(const ::android::graphics::Bitmap& arg0);
	Canvas(const ::android::graphics::Bitmap& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit Canvas(jobject o) : ::java::lang::Object(o) {}
	Canvas(const Canvas& o)  : ::java::lang::Object(o) {}

};

struct Path : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid AddArc(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3, const ::jfloat& arg4, const ::jfloat& arg5) const;
	::jvoid AddArc(const ::android::graphics::RectF& arg0, const ::jfloat& arg1, const ::jfloat& arg2) const;
	::jvoid AddCircle(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::android::graphics::Path_Direction& arg3) const;
	::jvoid AddOval(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3, const ::android::graphics::Path_Direction& arg4) const;
	::jvoid AddOval(const ::android::graphics::RectF& arg0, const ::android::graphics::Path_Direction& arg1) const;
	::jvoid AddPath(const ::android::graphics::Path& arg0) const;
	::jvoid AddPath(const ::android::graphics::Path& arg0, const ::jfloat& arg1, const ::jfloat& arg2) const;
	::jvoid AddPath(const ::android::graphics::Path& arg0, const ::android::graphics::Matrix& arg1) const;
	::jvoid AddRect(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3, const ::android::graphics::Path_Direction& arg4) const;
	::jvoid AddRect(const ::android::graphics::RectF& arg0, const ::android::graphics::Path_Direction& arg1) const;
	::jvoid AddRoundRect(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3, const ::jfloat& arg4, const ::jfloat& arg5, const ::android::graphics::Path_Direction& arg6) const;
	::jvoid AddRoundRect(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3, const jni::Array< ::jfloat >& arg4, const ::android::graphics::Path_Direction& arg5) const;
	::jvoid AddRoundRect(const ::android::graphics::RectF& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::android::graphics::Path_Direction& arg3) const;
	::jvoid AddRoundRect(const ::android::graphics::RectF& arg0, const jni::Array< ::jfloat >& arg1, const ::android::graphics::Path_Direction& arg2) const;
	jni::Array< ::jfloat > Approximate(const ::jfloat& arg0) const;
	::jvoid ArcTo(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3, const ::jfloat& arg4, const ::jfloat& arg5, const ::jboolean& arg6) const;
	::jvoid ArcTo(const ::android::graphics::RectF& arg0, const ::jfloat& arg1, const ::jfloat& arg2) const;
	::jvoid ArcTo(const ::android::graphics::RectF& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jboolean& arg3) const;
	::jvoid Close() const;
	::jvoid ComputeBounds(const ::android::graphics::RectF& arg0, const ::jboolean& arg1) const;
	::jvoid CubicTo(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3, const ::jfloat& arg4, const ::jfloat& arg5) const;
	::android::graphics::Path_FillType GetFillType() const;
	::jvoid IncReserve(const ::jint& arg0) const;
	::jboolean IsConvex() const;
	::jboolean IsEmpty() const;
	::jboolean IsInverseFillType() const;
	::jboolean IsRect(const ::android::graphics::RectF& arg0) const;
	::jvoid LineTo(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jvoid MoveTo(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jvoid Offset(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jvoid Offset(const ::jfloat& arg0, const ::jfloat& arg1, const ::android::graphics::Path& arg2) const;
	::jboolean Op(const ::android::graphics::Path& arg0, const ::android::graphics::Path_Op& arg1) const;
	::jboolean Op(const ::android::graphics::Path& arg0, const ::android::graphics::Path& arg1, const ::android::graphics::Path_Op& arg2) const;
	::jvoid QuadTo(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3) const;
	::jvoid RCubicTo(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3, const ::jfloat& arg4, const ::jfloat& arg5) const;
	::jvoid RLineTo(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jvoid RMoveTo(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jvoid RQuadTo(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3) const;
	::jvoid Reset() const;
	::jvoid Rewind() const;
	::jvoid Set(const ::android::graphics::Path& arg0) const;
	::jvoid SetFillType(const ::android::graphics::Path_FillType& arg0) const;
	::jvoid SetLastPoint(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jvoid ToggleInverseFillType() const;
	::jvoid Transform(const ::android::graphics::Matrix& arg0) const;
	::jvoid Transform(const ::android::graphics::Matrix& arg0, const ::android::graphics::Path& arg1) const;
	static jobject __Constructor();
	Path() : ::java::lang::Object(__Constructor()) {}
	explicit Path(jobject o) : ::java::lang::Object(o) {}
	Path(const Path& o)  : ::java::lang::Object(o) {}

};

struct RectF : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jfloat fBottom() const;
	void fBottom(const ::jfloat& arg0) const;
	::jfloat fLeft() const;
	void fLeft(const ::jfloat& arg0) const;
	::jfloat fRight() const;
	void fRight(const ::jfloat& arg0) const;
	::jfloat fTop() const;
	void fTop(const ::jfloat& arg0) const;
	::jfloat CenterX() const;
	::jfloat CenterY() const;
	::jboolean Contains(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jboolean Contains(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3) const;
	::jboolean Contains(const ::android::graphics::RectF& arg0) const;
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint HashCode() const;
	::jfloat Height() const;
	::jvoid Inset(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jboolean Intersect(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3) const;
	::jboolean Intersect(const ::android::graphics::RectF& arg0) const;
	::jboolean Intersects(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3) const;
	static ::jboolean Intersects(const ::android::graphics::RectF& arg0, const ::android::graphics::RectF& arg1);
	::jboolean IsEmpty() const;
	::jvoid Offset(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jvoid OffsetTo(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jvoid ReadFromParcel(const ::android::os::Parcel& arg0) const;
	::jvoid Round(const ::android::graphics::Rect& arg0) const;
	::jvoid RoundOut(const ::android::graphics::Rect& arg0) const;
	::jvoid Set(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3) const;
	::jvoid Set(const ::android::graphics::Rect& arg0) const;
	::jvoid Set(const ::android::graphics::RectF& arg0) const;
	::jvoid SetEmpty() const;
	::jboolean SetIntersect(const ::android::graphics::RectF& arg0, const ::android::graphics::RectF& arg1) const;
	::jvoid Sort() const;
	::java::lang::String ToShortString() const;
	::java::lang::String ToString() const;
	::jvoid Union(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jvoid Union(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3) const;
	::jvoid Union(const ::android::graphics::RectF& arg0) const;
	::jfloat Width() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor();
	RectF() : ::java::lang::Object(__Constructor()) {}
	static jobject __Constructor(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3);
	RectF(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3)) {}
	static jobject __Constructor(const ::android::graphics::Rect& arg0);
	RectF(const ::android::graphics::Rect& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit RectF(jobject o) : ::java::lang::Object(o) {}
	RectF(const RectF& o)  : ::java::lang::Object(o) {}

};

struct Rect : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint fBottom() const;
	void fBottom(const ::jint& arg0) const;
	::jint fLeft() const;
	void fLeft(const ::jint& arg0) const;
	::jint fRight() const;
	void fRight(const ::jint& arg0) const;
	::jint fTop() const;
	void fTop(const ::jint& arg0) const;
	::jint CenterX() const;
	::jint CenterY() const;
	::jboolean Contains(const ::jint& arg0, const ::jint& arg1) const;
	::jboolean Contains(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jboolean Contains(const ::android::graphics::Rect& arg0) const;
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jfloat ExactCenterX() const;
	::jfloat ExactCenterY() const;
	::java::lang::String FlattenToString() const;
	::jint HashCode() const;
	::jint Height() const;
	::jvoid Inset(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid Inset(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid Inset(const ::android::graphics::Insets& arg0) const;
	::jboolean Intersect(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jboolean Intersect(const ::android::graphics::Rect& arg0) const;
	::jboolean Intersects(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	static ::jboolean Intersects(const ::android::graphics::Rect& arg0, const ::android::graphics::Rect& arg1);
	::jboolean IsEmpty() const;
	::jvoid Offset(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid OffsetTo(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid ReadFromParcel(const ::android::os::Parcel& arg0) const;
	::jvoid Set(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid Set(const ::android::graphics::Rect& arg0) const;
	::jvoid SetEmpty() const;
	::jboolean SetIntersect(const ::android::graphics::Rect& arg0, const ::android::graphics::Rect& arg1) const;
	::jvoid Sort() const;
	::java::lang::String ToShortString() const;
	::java::lang::String ToString() const;
	static ::android::graphics::Rect UnflattenFromString(const ::java::lang::String& arg0);
	::jvoid Union(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid Union(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid Union(const ::android::graphics::Rect& arg0) const;
	::jint Width() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor();
	Rect() : ::java::lang::Object(__Constructor()) {}
	static jobject __Constructor(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3);
	Rect(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3)) {}
	explicit Rect(jobject o) : ::java::lang::Object(o) {}
	Rect(const Rect& o)  : ::java::lang::Object(o) {}

};

struct Insets : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::android::graphics::Insets& fNONE();
	::jint fBottom() const;
	::jint fLeft() const;
	::jint fRight() const;
	::jint fTop() const;
	static ::android::graphics::Insets Add(const ::android::graphics::Insets& arg0, const ::android::graphics::Insets& arg1);
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint HashCode() const;
	static ::android::graphics::Insets Max(const ::android::graphics::Insets& arg0, const ::android::graphics::Insets& arg1);
	static ::android::graphics::Insets Min(const ::android::graphics::Insets& arg0, const ::android::graphics::Insets& arg1);
	static ::android::graphics::Insets Of(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3);
	static ::android::graphics::Insets Of(const ::android::graphics::Rect& arg0);
	static ::android::graphics::Insets Subtract(const ::android::graphics::Insets& arg0, const ::android::graphics::Insets& arg1);
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit Insets(jobject o) : ::java::lang::Object(o) {}
	Insets(const Insets& o)  : ::java::lang::Object(o) {}

};

struct Path_Direction : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::android::graphics::Path_Direction& fCCW();
	static ::android::graphics::Path_Direction& fCW();
	static ::android::graphics::Path_Direction ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::android::graphics::Path_Direction > Values();
	explicit Path_Direction(jobject o) : ::java::lang::Enum(o) {}
	Path_Direction(const Path_Direction& o)  : ::java::lang::Enum(o) {}

};

struct Matrix : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::android::graphics::Matrix& fIDENTITY_MATRIX();
	static ::jint& fMPERSP_0();
	static ::jint& fMPERSP_1();
	static ::jint& fMPERSP_2();
	static ::jint& fMSCALE_X();
	static ::jint& fMSCALE_Y();
	static ::jint& fMSKEW_X();
	static ::jint& fMSKEW_Y();
	static ::jint& fMTRANS_X();
	static ::jint& fMTRANS_Y();
	::jvoid Dump(const ::java::io::PrintWriter& arg0) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jvoid GetValues(const jni::Array< ::jfloat >& arg0) const;
	::jint HashCode() const;
	::jboolean Invert(const ::android::graphics::Matrix& arg0) const;
	::jboolean IsAffine() const;
	::jboolean IsIdentity() const;
	::jvoid MapPoints(const jni::Array< ::jfloat >& arg0) const;
	::jvoid MapPoints(const jni::Array< ::jfloat >& arg0, const ::jint& arg1, const jni::Array< ::jfloat >& arg2, const ::jint& arg3, const ::jint& arg4) const;
	::jvoid MapPoints(const jni::Array< ::jfloat >& arg0, const jni::Array< ::jfloat >& arg1) const;
	::jfloat MapRadius(const ::jfloat& arg0) const;
	::jboolean MapRect(const ::android::graphics::RectF& arg0) const;
	::jboolean MapRect(const ::android::graphics::RectF& arg0, const ::android::graphics::RectF& arg1) const;
	::jvoid MapVectors(const jni::Array< ::jfloat >& arg0) const;
	::jvoid MapVectors(const jni::Array< ::jfloat >& arg0, const ::jint& arg1, const jni::Array< ::jfloat >& arg2, const ::jint& arg3, const ::jint& arg4) const;
	::jvoid MapVectors(const jni::Array< ::jfloat >& arg0, const jni::Array< ::jfloat >& arg1) const;
	::jboolean PostConcat(const ::android::graphics::Matrix& arg0) const;
	::jboolean PostRotate(const ::jfloat& arg0) const;
	::jboolean PostRotate(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2) const;
	::jboolean PostScale(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jboolean PostScale(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3) const;
	::jboolean PostSkew(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jboolean PostSkew(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3) const;
	::jboolean PostTranslate(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jboolean PreConcat(const ::android::graphics::Matrix& arg0) const;
	::jboolean PreRotate(const ::jfloat& arg0) const;
	::jboolean PreRotate(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2) const;
	::jboolean PreScale(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jboolean PreScale(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3) const;
	::jboolean PreSkew(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jboolean PreSkew(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3) const;
	::jboolean PreTranslate(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jboolean RectStaysRect() const;
	::jvoid Reset() const;
	::jvoid Set(const ::android::graphics::Matrix& arg0) const;
	::jboolean SetConcat(const ::android::graphics::Matrix& arg0, const ::android::graphics::Matrix& arg1) const;
	::jboolean SetPolyToPoly(const jni::Array< ::jfloat >& arg0, const ::jint& arg1, const jni::Array< ::jfloat >& arg2, const ::jint& arg3, const ::jint& arg4) const;
	::jboolean SetRectToRect(const ::android::graphics::RectF& arg0, const ::android::graphics::RectF& arg1, const ::android::graphics::Matrix_ScaleToFit& arg2) const;
	::jvoid SetRotate(const ::jfloat& arg0) const;
	::jvoid SetRotate(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2) const;
	::jvoid SetScale(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jvoid SetScale(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3) const;
	::jvoid SetSinCos(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jvoid SetSinCos(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3) const;
	::jvoid SetSkew(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jvoid SetSkew(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3) const;
	::jvoid SetTranslate(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jvoid SetValues(const jni::Array< ::jfloat >& arg0) const;
	::java::lang::String ToShortString() const;
	::java::lang::String ToString() const;
	static jobject __Constructor();
	Matrix() : ::java::lang::Object(__Constructor()) {}
	explicit Matrix(jobject o) : ::java::lang::Object(o) {}
	Matrix(const Matrix& o)  : ::java::lang::Object(o) {}

};

struct Matrix_ScaleToFit : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::android::graphics::Matrix_ScaleToFit& fCENTER();
	static ::android::graphics::Matrix_ScaleToFit& fEND();
	static ::android::graphics::Matrix_ScaleToFit& fFILL();
	static ::android::graphics::Matrix_ScaleToFit& fSTART();
	static ::android::graphics::Matrix_ScaleToFit ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::android::graphics::Matrix_ScaleToFit > Values();
	explicit Matrix_ScaleToFit(jobject o) : ::java::lang::Enum(o) {}
	Matrix_ScaleToFit(const Matrix_ScaleToFit& o)  : ::java::lang::Enum(o) {}

};

struct Path_FillType : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::android::graphics::Path_FillType& fEVEN_ODD();
	static ::android::graphics::Path_FillType& fINVERSE_EVEN_ODD();
	static ::android::graphics::Path_FillType& fINVERSE_WINDING();
	static ::android::graphics::Path_FillType& fWINDING();
	static ::android::graphics::Path_FillType ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::android::graphics::Path_FillType > Values();
	explicit Path_FillType(jobject o) : ::java::lang::Enum(o) {}
	Path_FillType(const Path_FillType& o)  : ::java::lang::Enum(o) {}

};

struct Path_Op : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::android::graphics::Path_Op& fDIFFERENCE();
	static ::android::graphics::Path_Op& fINTERSECT();
	static ::android::graphics::Path_Op& fREVERSE_DIFFERENCE();
	static ::android::graphics::Path_Op& fUNION();
	static ::android::graphics::Path_Op& fXOR();
	static ::android::graphics::Path_Op ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::android::graphics::Path_Op > Values();
	explicit Path_Op(jobject o) : ::java::lang::Enum(o) {}
	Path_Op(const Path_Op& o)  : ::java::lang::Enum(o) {}

};

struct Region_Op : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::android::graphics::Region_Op& fDIFFERENCE();
	static ::android::graphics::Region_Op& fINTERSECT();
	static ::android::graphics::Region_Op& fREPLACE();
	static ::android::graphics::Region_Op& fREVERSE_DIFFERENCE();
	static ::android::graphics::Region_Op& fUNION();
	static ::android::graphics::Region_Op& fXOR();
	static ::android::graphics::Region_Op ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::android::graphics::Region_Op > Values();
	explicit Region_Op(jobject o) : ::java::lang::Enum(o) {}
	Region_Op(const Region_Op& o)  : ::java::lang::Enum(o) {}

};

struct Paint : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fANTI_ALIAS_FLAG();
	static ::jint& fCURSOR_AFTER();
	static ::jint& fCURSOR_AT();
	static ::jint& fCURSOR_AT_OR_AFTER();
	static ::jint& fCURSOR_AT_OR_BEFORE();
	static ::jint& fCURSOR_BEFORE();
	static ::jint& fDEV_KERN_TEXT_FLAG();
	static ::jint& fDITHER_FLAG();
	static ::jint& fEMBEDDED_BITMAP_TEXT_FLAG();
	static ::jint& fEND_HYPHEN_EDIT_INSERT_ARMENIAN_HYPHEN();
	static ::jint& fEND_HYPHEN_EDIT_INSERT_HYPHEN();
	static ::jint& fEND_HYPHEN_EDIT_INSERT_MAQAF();
	static ::jint& fEND_HYPHEN_EDIT_INSERT_UCAS_HYPHEN();
	static ::jint& fEND_HYPHEN_EDIT_INSERT_ZWJ_AND_HYPHEN();
	static ::jint& fEND_HYPHEN_EDIT_NO_EDIT();
	static ::jint& fEND_HYPHEN_EDIT_REPLACE_WITH_HYPHEN();
	static ::jint& fFAKE_BOLD_TEXT_FLAG();
	static ::jint& fFILTER_BITMAP_FLAG();
	static ::jint& fHINTING_OFF();
	static ::jint& fHINTING_ON();
	static ::jint& fLINEAR_TEXT_FLAG();
	static ::jint& fSTART_HYPHEN_EDIT_INSERT_HYPHEN();
	static ::jint& fSTART_HYPHEN_EDIT_INSERT_ZWJ();
	static ::jint& fSTART_HYPHEN_EDIT_NO_EDIT();
	static ::jint& fSTRIKE_THRU_TEXT_FLAG();
	static ::jint& fSUBPIXEL_TEXT_FLAG();
	static ::jint& fUNDERLINE_TEXT_FLAG();
	::jfloat Ascent() const;
	::jint BreakText(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2, const ::jboolean& arg3, const ::jfloat& arg4, const jni::Array< ::jfloat >& arg5) const;
	::jint BreakText(const ::java::lang::String& arg0, const ::jboolean& arg1, const ::jfloat& arg2, const jni::Array< ::jfloat >& arg3) const;
	::jint BreakText(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2, const ::jfloat& arg3, const jni::Array< ::jfloat >& arg4) const;
	::jvoid ClearShadowLayer() const;
	::jfloat Descent() const;
	::jboolean EqualsForTextMeasurement(const ::android::graphics::Paint& arg0) const;
	::jint GetAlpha() const;
	::android::graphics::BlendMode GetBlendMode() const;
	::jint GetColor() const;
	::android::graphics::ColorFilter GetColorFilter() const;
	::jlong GetColorLong() const;
	::jint GetEndHyphenEdit() const;
	::jboolean GetFillPath(const ::android::graphics::Path& arg0, const ::android::graphics::Path& arg1) const;
	::jint GetFlags() const;
	::java::lang::String GetFontFeatureSettings() const;
	::android::graphics::Paint_FontMetrics GetFontMetrics() const;
	::jfloat GetFontMetrics(const ::android::graphics::Paint_FontMetrics& arg0) const;
	::android::graphics::Paint_FontMetricsInt GetFontMetricsInt() const;
	::jint GetFontMetricsInt(const ::android::graphics::Paint_FontMetricsInt& arg0) const;
	::jfloat GetFontSpacing() const;
	::java::lang::String GetFontVariationSettings() const;
	::jint GetHinting() const;
	::jfloat GetLetterSpacing() const;
	::android::graphics::MaskFilter GetMaskFilter() const;
	::jint GetOffsetForAdvance(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jboolean& arg5, const ::jfloat& arg6) const;
	::jint GetOffsetForAdvance(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jboolean& arg5, const ::jfloat& arg6) const;
	::android::graphics::PathEffect GetPathEffect() const;
	::jfloat GetRunAdvance(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jboolean& arg5, const ::jint& arg6) const;
	::jfloat GetRunAdvance(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jboolean& arg5, const ::jint& arg6) const;
	::android::graphics::Shader GetShader() const;
	::jint GetShadowLayerColor() const;
	::jlong GetShadowLayerColorLong() const;
	::jfloat GetShadowLayerDx() const;
	::jfloat GetShadowLayerDy() const;
	::jfloat GetShadowLayerRadius() const;
	::jint GetStartHyphenEdit() const;
	::jfloat GetStrikeThruPosition() const;
	::jfloat GetStrikeThruThickness() const;
	::android::graphics::Paint_Cap GetStrokeCap() const;
	::android::graphics::Paint_Join GetStrokeJoin() const;
	::jfloat GetStrokeMiter() const;
	::jfloat GetStrokeWidth() const;
	::android::graphics::Paint_Style GetStyle() const;
	::android::graphics::Paint_Align GetTextAlign() const;
	::jvoid GetTextBounds(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2, const ::android::graphics::Rect& arg3) const;
	::jvoid GetTextBounds(const ::java::lang::String& arg0, const ::jint& arg1, const ::jint& arg2, const ::android::graphics::Rect& arg3) const;
	::jvoid GetTextBounds(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2, const ::android::graphics::Rect& arg3) const;
	::java::util::Locale GetTextLocale() const;
	::android::os::LocaleList GetTextLocales() const;
	::jvoid GetTextPath(const ::java::lang::String& arg0, const ::jint& arg1, const ::jint& arg2, const ::jfloat& arg3, const ::jfloat& arg4, const ::android::graphics::Path& arg5) const;
	::jvoid GetTextPath(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2, const ::jfloat& arg3, const ::jfloat& arg4, const ::android::graphics::Path& arg5) const;
	::jfloat GetTextRunAdvances(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jboolean& arg5, const jni::Array< ::jfloat >& arg6, const ::jint& arg7) const;
	::jint GetTextRunCursor(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2, const ::jboolean& arg3, const ::jint& arg4, const ::jint& arg5) const;
	::jint GetTextRunCursor(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2, const ::jboolean& arg3, const ::jint& arg4, const ::jint& arg5) const;
	::jfloat GetTextScaleX() const;
	::jfloat GetTextSize() const;
	::jfloat GetTextSkewX() const;
	::jint GetTextWidths(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2, const jni::Array< ::jfloat >& arg3) const;
	::jint GetTextWidths(const ::java::lang::String& arg0, const ::jint& arg1, const ::jint& arg2, const jni::Array< ::jfloat >& arg3) const;
	::jint GetTextWidths(const ::java::lang::String& arg0, const jni::Array< ::jfloat >& arg1) const;
	::jint GetTextWidths(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2, const jni::Array< ::jfloat >& arg3) const;
	::android::graphics::Typeface GetTypeface() const;
	::jfloat GetUnderlinePosition() const;
	::jfloat GetUnderlineThickness() const;
	::jfloat GetWordSpacing() const;
	::android::graphics::Xfermode GetXfermode() const;
	::jboolean HasGlyph(const ::java::lang::String& arg0) const;
	::jboolean IsAntiAlias() const;
	::jboolean IsDither() const;
	::jboolean IsElegantTextHeight() const;
	::jboolean IsFakeBoldText() const;
	::jboolean IsFilterBitmap() const;
	::jboolean IsLinearText() const;
	::jboolean IsStrikeThruText() const;
	::jboolean IsSubpixelText() const;
	::jboolean IsUnderlineText() const;
	::jfloat MeasureText(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jfloat MeasureText(const ::java::lang::String& arg0) const;
	::jfloat MeasureText(const ::java::lang::String& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jfloat MeasureText(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jvoid Reset() const;
	::jvoid Set(const ::android::graphics::Paint& arg0) const;
	::jvoid SetARGB(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid SetAlpha(const ::jint& arg0) const;
	::jvoid SetAntiAlias(const ::jboolean& arg0) const;
	::jvoid SetBlendMode(const ::android::graphics::BlendMode& arg0) const;
	::jvoid SetColor(const ::jint& arg0) const;
	::jvoid SetColor(const ::jlong& arg0) const;
	::android::graphics::ColorFilter SetColorFilter(const ::android::graphics::ColorFilter& arg0) const;
	::jvoid SetDither(const ::jboolean& arg0) const;
	::jvoid SetElegantTextHeight(const ::jboolean& arg0) const;
	::jvoid SetEndHyphenEdit(const ::jint& arg0) const;
	::jvoid SetFakeBoldText(const ::jboolean& arg0) const;
	::jvoid SetFilterBitmap(const ::jboolean& arg0) const;
	::jvoid SetFlags(const ::jint& arg0) const;
	::jvoid SetFontFeatureSettings(const ::java::lang::String& arg0) const;
	::jboolean SetFontVariationSettings(const ::java::lang::String& arg0) const;
	::jvoid SetHinting(const ::jint& arg0) const;
	::jvoid SetLetterSpacing(const ::jfloat& arg0) const;
	::jvoid SetLinearText(const ::jboolean& arg0) const;
	::android::graphics::MaskFilter SetMaskFilter(const ::android::graphics::MaskFilter& arg0) const;
	::android::graphics::PathEffect SetPathEffect(const ::android::graphics::PathEffect& arg0) const;
	::android::graphics::Shader SetShader(const ::android::graphics::Shader& arg0) const;
	::jvoid SetShadowLayer(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jint& arg3) const;
	::jvoid SetShadowLayer(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jlong& arg3) const;
	::jvoid SetStartHyphenEdit(const ::jint& arg0) const;
	::jvoid SetStrikeThruText(const ::jboolean& arg0) const;
	::jvoid SetStrokeCap(const ::android::graphics::Paint_Cap& arg0) const;
	::jvoid SetStrokeJoin(const ::android::graphics::Paint_Join& arg0) const;
	::jvoid SetStrokeMiter(const ::jfloat& arg0) const;
	::jvoid SetStrokeWidth(const ::jfloat& arg0) const;
	::jvoid SetStyle(const ::android::graphics::Paint_Style& arg0) const;
	::jvoid SetSubpixelText(const ::jboolean& arg0) const;
	::jvoid SetTextAlign(const ::android::graphics::Paint_Align& arg0) const;
	::jvoid SetTextLocale(const ::java::util::Locale& arg0) const;
	::jvoid SetTextLocales(const ::android::os::LocaleList& arg0) const;
	::jvoid SetTextScaleX(const ::jfloat& arg0) const;
	::jvoid SetTextSize(const ::jfloat& arg0) const;
	::jvoid SetTextSkewX(const ::jfloat& arg0) const;
	::android::graphics::Typeface SetTypeface(const ::android::graphics::Typeface& arg0) const;
	::jvoid SetUnderlineText(const ::jboolean& arg0) const;
	::jvoid SetWordSpacing(const ::jfloat& arg0) const;
	::android::graphics::Xfermode SetXfermode(const ::android::graphics::Xfermode& arg0) const;
	static jobject __Constructor();
	Paint() : ::java::lang::Object(__Constructor()) {}
	static jobject __Constructor(const ::jint& arg0);
	Paint(const ::jint& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit Paint(jobject o) : ::java::lang::Object(o) {}
	Paint(const Paint& o)  : ::java::lang::Object(o) {}

};

struct BlendMode : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::android::graphics::BlendMode& fCLEAR();
	static ::android::graphics::BlendMode& fCOLOR();
	static ::android::graphics::BlendMode& fCOLOR_BURN();
	static ::android::graphics::BlendMode& fCOLOR_DODGE();
	static ::android::graphics::BlendMode& fDARKEN();
	static ::android::graphics::BlendMode& fDIFFERENCE();
	static ::android::graphics::BlendMode& fDST();
	static ::android::graphics::BlendMode& fDST_ATOP();
	static ::android::graphics::BlendMode& fDST_IN();
	static ::android::graphics::BlendMode& fDST_OUT();
	static ::android::graphics::BlendMode& fDST_OVER();
	static ::android::graphics::BlendMode& fEXCLUSION();
	static ::android::graphics::BlendMode& fHARD_LIGHT();
	static ::android::graphics::BlendMode& fHUE();
	static ::android::graphics::BlendMode& fLIGHTEN();
	static ::android::graphics::BlendMode& fLUMINOSITY();
	static ::android::graphics::BlendMode& fMODULATE();
	static ::android::graphics::BlendMode& fMULTIPLY();
	static ::android::graphics::BlendMode& fOVERLAY();
	static ::android::graphics::BlendMode& fPLUS();
	static ::android::graphics::BlendMode& fSATURATION();
	static ::android::graphics::BlendMode& fSCREEN();
	static ::android::graphics::BlendMode& fSOFT_LIGHT();
	static ::android::graphics::BlendMode& fSRC();
	static ::android::graphics::BlendMode& fSRC_ATOP();
	static ::android::graphics::BlendMode& fSRC_IN();
	static ::android::graphics::BlendMode& fSRC_OUT();
	static ::android::graphics::BlendMode& fSRC_OVER();
	static ::android::graphics::BlendMode& fXOR();
	static ::android::graphics::BlendMode ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::android::graphics::BlendMode > Values();
	explicit BlendMode(jobject o) : ::java::lang::Enum(o) {}
	BlendMode(const BlendMode& o)  : ::java::lang::Enum(o) {}

};

struct ColorFilter : ::java::lang::Object
{
	static jni::Class __CLASS;

	static jobject __Constructor();
	ColorFilter() : ::java::lang::Object(__Constructor()) {}
	explicit ColorFilter(jobject o) : ::java::lang::Object(o) {}
	ColorFilter(const ColorFilter& o)  : ::java::lang::Object(o) {}

};

struct Paint_FontMetrics : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jfloat fAscent() const;
	void fAscent(const ::jfloat& arg0) const;
	::jfloat fBottom() const;
	void fBottom(const ::jfloat& arg0) const;
	::jfloat fDescent() const;
	void fDescent(const ::jfloat& arg0) const;
	::jfloat fLeading() const;
	void fLeading(const ::jfloat& arg0) const;
	::jfloat fTop() const;
	void fTop(const ::jfloat& arg0) const;
	static jobject __Constructor();
	Paint_FontMetrics() : ::java::lang::Object(__Constructor()) {}
	explicit Paint_FontMetrics(jobject o) : ::java::lang::Object(o) {}
	Paint_FontMetrics(const Paint_FontMetrics& o)  : ::java::lang::Object(o) {}

};

struct Paint_FontMetricsInt : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jint fAscent() const;
	void fAscent(const ::jint& arg0) const;
	::jint fBottom() const;
	void fBottom(const ::jint& arg0) const;
	::jint fDescent() const;
	void fDescent(const ::jint& arg0) const;
	::jint fLeading() const;
	void fLeading(const ::jint& arg0) const;
	::jint fTop() const;
	void fTop(const ::jint& arg0) const;
	::java::lang::String ToString() const;
	static jobject __Constructor();
	Paint_FontMetricsInt() : ::java::lang::Object(__Constructor()) {}
	explicit Paint_FontMetricsInt(jobject o) : ::java::lang::Object(o) {}
	Paint_FontMetricsInt(const Paint_FontMetricsInt& o)  : ::java::lang::Object(o) {}

};

struct MaskFilter : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid Finalize() const;
	static jobject __Constructor();
	MaskFilter() : ::java::lang::Object(__Constructor()) {}
	explicit MaskFilter(jobject o) : ::java::lang::Object(o) {}
	MaskFilter(const MaskFilter& o)  : ::java::lang::Object(o) {}

};

struct PathEffect : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid Finalize() const;
	static jobject __Constructor();
	PathEffect() : ::java::lang::Object(__Constructor()) {}
	explicit PathEffect(jobject o) : ::java::lang::Object(o) {}
	PathEffect(const PathEffect& o)  : ::java::lang::Object(o) {}

};

struct Shader : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean GetLocalMatrix(const ::android::graphics::Matrix& arg0) const;
	::jvoid SetLocalMatrix(const ::android::graphics::Matrix& arg0) const;
	static jobject __Constructor();
	Shader() : ::java::lang::Object(__Constructor()) {}
	explicit Shader(jobject o) : ::java::lang::Object(o) {}
	Shader(const Shader& o)  : ::java::lang::Object(o) {}

};

struct Paint_Cap : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::android::graphics::Paint_Cap& fBUTT();
	static ::android::graphics::Paint_Cap& fROUND();
	static ::android::graphics::Paint_Cap& fSQUARE();
	static ::android::graphics::Paint_Cap ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::android::graphics::Paint_Cap > Values();
	explicit Paint_Cap(jobject o) : ::java::lang::Enum(o) {}
	Paint_Cap(const Paint_Cap& o)  : ::java::lang::Enum(o) {}

};

struct Paint_Join : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::android::graphics::Paint_Join& fBEVEL();
	static ::android::graphics::Paint_Join& fMITER();
	static ::android::graphics::Paint_Join& fROUND();
	static ::android::graphics::Paint_Join ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::android::graphics::Paint_Join > Values();
	explicit Paint_Join(jobject o) : ::java::lang::Enum(o) {}
	Paint_Join(const Paint_Join& o)  : ::java::lang::Enum(o) {}

};

struct Paint_Style : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::android::graphics::Paint_Style& fFILL();
	static ::android::graphics::Paint_Style& fFILL_AND_STROKE();
	static ::android::graphics::Paint_Style& fSTROKE();
	static ::android::graphics::Paint_Style ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::android::graphics::Paint_Style > Values();
	explicit Paint_Style(jobject o) : ::java::lang::Enum(o) {}
	Paint_Style(const Paint_Style& o)  : ::java::lang::Enum(o) {}

};

struct Paint_Align : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::android::graphics::Paint_Align& fCENTER();
	static ::android::graphics::Paint_Align& fLEFT();
	static ::android::graphics::Paint_Align& fRIGHT();
	static ::android::graphics::Paint_Align ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::android::graphics::Paint_Align > Values();
	explicit Paint_Align(jobject o) : ::java::lang::Enum(o) {}
	Paint_Align(const Paint_Align& o)  : ::java::lang::Enum(o) {}

};

struct Xfermode : ::java::lang::Object
{
	static jni::Class __CLASS;

	static jobject __Constructor();
	Xfermode() : ::java::lang::Object(__Constructor()) {}
	explicit Xfermode(jobject o) : ::java::lang::Object(o) {}
	Xfermode(const Xfermode& o)  : ::java::lang::Object(o) {}

};

struct Bitmap : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fDENSITY_NONE();
	::android::graphics::Bitmap AsShared() const;
	::jboolean Compress(const ::android::graphics::Bitmap_CompressFormat& arg0, const ::jint& arg1, const ::java::io::OutputStream& arg2) const;
	::android::graphics::Bitmap Copy(const ::android::graphics::Bitmap_Config& arg0, const ::jboolean& arg1) const;
	::jvoid CopyPixelsFromBuffer(const ::java::nio::Buffer& arg0) const;
	::jvoid CopyPixelsToBuffer(const ::java::nio::Buffer& arg0) const;
	static ::android::graphics::Bitmap CreateBitmap(const ::jint& arg0, const ::jint& arg1, const ::android::graphics::Bitmap_Config& arg2);
	static ::android::graphics::Bitmap CreateBitmap(const ::jint& arg0, const ::jint& arg1, const ::android::graphics::Bitmap_Config& arg2, const ::jboolean& arg3);
	static ::android::graphics::Bitmap CreateBitmap(const ::jint& arg0, const ::jint& arg1, const ::android::graphics::Bitmap_Config& arg2, const ::jboolean& arg3, const ::android::graphics::ColorSpace& arg4);
	static ::android::graphics::Bitmap CreateBitmap(const ::android::graphics::Bitmap& arg0);
	static ::android::graphics::Bitmap CreateBitmap(const ::android::graphics::Bitmap& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4);
	static ::android::graphics::Bitmap CreateBitmap(const ::android::graphics::Bitmap& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::android::graphics::Matrix& arg5, const ::jboolean& arg6);
	static ::android::graphics::Bitmap CreateBitmap(const ::android::graphics::Picture& arg0);
	static ::android::graphics::Bitmap CreateBitmap(const ::android::graphics::Picture& arg0, const ::jint& arg1, const ::jint& arg2, const ::android::graphics::Bitmap_Config& arg3);
	static ::android::graphics::Bitmap CreateBitmap(const ::android::util::DisplayMetrics& arg0, const ::jint& arg1, const ::jint& arg2, const ::android::graphics::Bitmap_Config& arg3);
	static ::android::graphics::Bitmap CreateBitmap(const ::android::util::DisplayMetrics& arg0, const ::jint& arg1, const ::jint& arg2, const ::android::graphics::Bitmap_Config& arg3, const ::jboolean& arg4);
	static ::android::graphics::Bitmap CreateBitmap(const ::android::util::DisplayMetrics& arg0, const ::jint& arg1, const ::jint& arg2, const ::android::graphics::Bitmap_Config& arg3, const ::jboolean& arg4, const ::android::graphics::ColorSpace& arg5);
	static ::android::graphics::Bitmap CreateBitmap(const ::android::util::DisplayMetrics& arg0, const jni::Array< ::jint >& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5, const ::android::graphics::Bitmap_Config& arg6);
	static ::android::graphics::Bitmap CreateBitmap(const ::android::util::DisplayMetrics& arg0, const jni::Array< ::jint >& arg1, const ::jint& arg2, const ::jint& arg3, const ::android::graphics::Bitmap_Config& arg4);
	static ::android::graphics::Bitmap CreateBitmap(const jni::Array< ::jint >& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::android::graphics::Bitmap_Config& arg5);
	static ::android::graphics::Bitmap CreateBitmap(const jni::Array< ::jint >& arg0, const ::jint& arg1, const ::jint& arg2, const ::android::graphics::Bitmap_Config& arg3);
	static ::android::graphics::Bitmap CreateScaledBitmap(const ::android::graphics::Bitmap& arg0, const ::jint& arg1, const ::jint& arg2, const ::jboolean& arg3);
	::jint DescribeContents() const;
	::jvoid EraseColor(const ::jint& arg0) const;
	::jvoid EraseColor(const ::jlong& arg0) const;
	::android::graphics::Bitmap ExtractAlpha() const;
	::android::graphics::Bitmap ExtractAlpha(const ::android::graphics::Paint& arg0, const jni::Array< ::jint >& arg1) const;
	::jint GetAllocationByteCount() const;
	::jint GetByteCount() const;
	::android::graphics::Color GetColor(const ::jint& arg0, const ::jint& arg1) const;
	::android::graphics::ColorSpace GetColorSpace() const;
	::android::graphics::Bitmap_Config GetConfig() const;
	::jint GetDensity() const;
	::jint GetGenerationId() const;
	::android::hardware::HardwareBuffer GetHardwareBuffer() const;
	::jint GetHeight() const;
	jni::Array< ::jbyte > GetNinePatchChunk() const;
	::jint GetPixel(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid GetPixels(const jni::Array< ::jint >& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5, const ::jint& arg6) const;
	::jint GetRowBytes() const;
	::jint GetScaledHeight(const ::jint& arg0) const;
	::jint GetScaledHeight(const ::android::graphics::Canvas& arg0) const;
	::jint GetScaledHeight(const ::android::util::DisplayMetrics& arg0) const;
	::jint GetScaledWidth(const ::jint& arg0) const;
	::jint GetScaledWidth(const ::android::graphics::Canvas& arg0) const;
	::jint GetScaledWidth(const ::android::util::DisplayMetrics& arg0) const;
	::jint GetWidth() const;
	::jboolean HasAlpha() const;
	::jboolean HasMipMap() const;
	::jboolean IsMutable() const;
	::jboolean IsPremultiplied() const;
	::jboolean IsRecycled() const;
	::jvoid PrepareToDraw() const;
	::jvoid Reconfigure(const ::jint& arg0, const ::jint& arg1, const ::android::graphics::Bitmap_Config& arg2) const;
	::jvoid Recycle() const;
	::jboolean SameAs(const ::android::graphics::Bitmap& arg0) const;
	::jvoid SetColorSpace(const ::android::graphics::ColorSpace& arg0) const;
	::jvoid SetConfig(const ::android::graphics::Bitmap_Config& arg0) const;
	::jvoid SetDensity(const ::jint& arg0) const;
	::jvoid SetHasAlpha(const ::jboolean& arg0) const;
	::jvoid SetHasMipMap(const ::jboolean& arg0) const;
	::jvoid SetHeight(const ::jint& arg0) const;
	::jvoid SetPixel(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jvoid SetPixels(const jni::Array< ::jint >& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5, const ::jint& arg6) const;
	::jvoid SetPremultiplied(const ::jboolean& arg0) const;
	::jvoid SetWidth(const ::jint& arg0) const;
	static ::android::graphics::Bitmap WrapHardwareBuffer(const ::android::hardware::HardwareBuffer& arg0, const ::android::graphics::ColorSpace& arg1);
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit Bitmap(jobject o) : ::java::lang::Object(o) {}
	Bitmap(const Bitmap& o)  : ::java::lang::Object(o) {}

};

struct Bitmap_CompressFormat : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::android::graphics::Bitmap_CompressFormat& fJPEG();
	static ::android::graphics::Bitmap_CompressFormat& fPNG();
	static ::android::graphics::Bitmap_CompressFormat& fWEBP();
	static ::android::graphics::Bitmap_CompressFormat& fWEBP_LOSSLESS();
	static ::android::graphics::Bitmap_CompressFormat& fWEBP_LOSSY();
	static ::android::graphics::Bitmap_CompressFormat ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::android::graphics::Bitmap_CompressFormat > Values();
	explicit Bitmap_CompressFormat(jobject o) : ::java::lang::Enum(o) {}
	Bitmap_CompressFormat(const Bitmap_CompressFormat& o)  : ::java::lang::Enum(o) {}

};

struct Bitmap_Config : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::android::graphics::Bitmap_Config& fALPHA_8();
	static ::android::graphics::Bitmap_Config& fARGB_4444();
	static ::android::graphics::Bitmap_Config& fARGB_8888();
	static ::android::graphics::Bitmap_Config& fHARDWARE();
	static ::android::graphics::Bitmap_Config& fRGBA_F16();
	static ::android::graphics::Bitmap_Config& fRGB_565();
	static ::android::graphics::Bitmap_Config ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::android::graphics::Bitmap_Config > Values();
	explicit Bitmap_Config(jobject o) : ::java::lang::Enum(o) {}
	Bitmap_Config(const Bitmap_Config& o)  : ::java::lang::Enum(o) {}

};

struct ColorSpace : ::java::lang::Object
{
	static jni::Class __CLASS;

	static jni::Array< ::jfloat >& fILLUMINANT_A();
	static jni::Array< ::jfloat >& fILLUMINANT_B();
	static jni::Array< ::jfloat >& fILLUMINANT_C();
	static jni::Array< ::jfloat >& fILLUMINANT_D50();
	static jni::Array< ::jfloat >& fILLUMINANT_D55();
	static jni::Array< ::jfloat >& fILLUMINANT_D60();
	static jni::Array< ::jfloat >& fILLUMINANT_D65();
	static jni::Array< ::jfloat >& fILLUMINANT_D75();
	static jni::Array< ::jfloat >& fILLUMINANT_E();
	static ::jint& fMAX_ID();
	static ::jint& fMIN_ID();
	static ::android::graphics::ColorSpace Adapt(const ::android::graphics::ColorSpace& arg0, const jni::Array< ::jfloat >& arg1);
	static ::android::graphics::ColorSpace Adapt(const ::android::graphics::ColorSpace& arg0, const jni::Array< ::jfloat >& arg1, const ::android::graphics::ColorSpace_Adaptation& arg2);
	static jni::Array< ::jfloat > CctToXyz(const ::jint& arg0);
	static jni::Array< ::jfloat > ChromaticAdaptation(const ::android::graphics::ColorSpace_Adaptation& arg0, const jni::Array< ::jfloat >& arg1, const jni::Array< ::jfloat >& arg2);
	static ::android::graphics::ColorSpace_Connector Connect(const ::android::graphics::ColorSpace& arg0);
	static ::android::graphics::ColorSpace_Connector Connect(const ::android::graphics::ColorSpace& arg0, const ::android::graphics::ColorSpace_RenderIntent& arg1);
	static ::android::graphics::ColorSpace_Connector Connect(const ::android::graphics::ColorSpace& arg0, const ::android::graphics::ColorSpace& arg1);
	static ::android::graphics::ColorSpace_Connector Connect(const ::android::graphics::ColorSpace& arg0, const ::android::graphics::ColorSpace& arg1, const ::android::graphics::ColorSpace_RenderIntent& arg2);
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	jni::Array< ::jfloat > FromXyz(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2) const;
	jni::Array< ::jfloat > FromXyz(const jni::Array< ::jfloat >& arg0) const;
	static ::android::graphics::ColorSpace Get(const ::android::graphics::ColorSpace_Named& arg0);
	::jint GetComponentCount() const;
	::jint GetId() const;
	::jfloat GetMaxValue(const ::jint& arg0) const;
	::jfloat GetMinValue(const ::jint& arg0) const;
	::android::graphics::ColorSpace_Model GetModel() const;
	::java::lang::String GetName() const;
	::jint HashCode() const;
	::jboolean IsSrgb() const;
	::jboolean IsWideGamut() const;
	static ::android::graphics::ColorSpace Match(const jni::Array< ::jfloat >& arg0, const ::android::graphics::ColorSpace_Rgb_TransferParameters& arg1);
	::java::lang::String ToString() const;
	jni::Array< ::jfloat > ToXyz(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2) const;
	jni::Array< ::jfloat > ToXyz(const jni::Array< ::jfloat >& arg0) const;
	explicit ColorSpace(jobject o) : ::java::lang::Object(o) {}
	ColorSpace(const ColorSpace& o)  : ::java::lang::Object(o) {}

};

struct ColorSpace_Adaptation : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::android::graphics::ColorSpace_Adaptation& fBRADFORD();
	static ::android::graphics::ColorSpace_Adaptation& fCIECAT02();
	static ::android::graphics::ColorSpace_Adaptation& fVON_KRIES();
	static ::android::graphics::ColorSpace_Adaptation ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::android::graphics::ColorSpace_Adaptation > Values();
	explicit ColorSpace_Adaptation(jobject o) : ::java::lang::Enum(o) {}
	ColorSpace_Adaptation(const ColorSpace_Adaptation& o)  : ::java::lang::Enum(o) {}

};

struct ColorSpace_Connector : ::java::lang::Object
{
	static jni::Class __CLASS;

	::android::graphics::ColorSpace GetDestination() const;
	::android::graphics::ColorSpace_RenderIntent GetRenderIntent() const;
	::android::graphics::ColorSpace GetSource() const;
	jni::Array< ::jfloat > Transform(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2) const;
	jni::Array< ::jfloat > Transform(const jni::Array< ::jfloat >& arg0) const;
	explicit ColorSpace_Connector(jobject o) : ::java::lang::Object(o) {}
	ColorSpace_Connector(const ColorSpace_Connector& o)  : ::java::lang::Object(o) {}

};

struct ColorSpace_RenderIntent : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::android::graphics::ColorSpace_RenderIntent& fABSOLUTE();
	static ::android::graphics::ColorSpace_RenderIntent& fPERCEPTUAL();
	static ::android::graphics::ColorSpace_RenderIntent& fRELATIVE();
	static ::android::graphics::ColorSpace_RenderIntent& fSATURATION();
	static ::android::graphics::ColorSpace_RenderIntent ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::android::graphics::ColorSpace_RenderIntent > Values();
	explicit ColorSpace_RenderIntent(jobject o) : ::java::lang::Enum(o) {}
	ColorSpace_RenderIntent(const ColorSpace_RenderIntent& o)  : ::java::lang::Enum(o) {}

};

struct ColorSpace_Named : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::android::graphics::ColorSpace_Named& fACES();
	static ::android::graphics::ColorSpace_Named& fACESCG();
	static ::android::graphics::ColorSpace_Named& fADOBE_RGB();
	static ::android::graphics::ColorSpace_Named& fBT2020();
	static ::android::graphics::ColorSpace_Named& fBT709();
	static ::android::graphics::ColorSpace_Named& fCIE_LAB();
	static ::android::graphics::ColorSpace_Named& fCIE_XYZ();
	static ::android::graphics::ColorSpace_Named& fDCI_P3();
	static ::android::graphics::ColorSpace_Named& fDISPLAY_P3();
	static ::android::graphics::ColorSpace_Named& fEXTENDED_SRGB();
	static ::android::graphics::ColorSpace_Named& fLINEAR_EXTENDED_SRGB();
	static ::android::graphics::ColorSpace_Named& fLINEAR_SRGB();
	static ::android::graphics::ColorSpace_Named& fNTSC_1953();
	static ::android::graphics::ColorSpace_Named& fPRO_PHOTO_RGB();
	static ::android::graphics::ColorSpace_Named& fSMPTE_C();
	static ::android::graphics::ColorSpace_Named& fSRGB();
	static ::android::graphics::ColorSpace_Named ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::android::graphics::ColorSpace_Named > Values();
	explicit ColorSpace_Named(jobject o) : ::java::lang::Enum(o) {}
	ColorSpace_Named(const ColorSpace_Named& o)  : ::java::lang::Enum(o) {}

};

struct ColorSpace_Model : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::android::graphics::ColorSpace_Model& fCMYK();
	static ::android::graphics::ColorSpace_Model& fLAB();
	static ::android::graphics::ColorSpace_Model& fRGB();
	static ::android::graphics::ColorSpace_Model& fXYZ();
	::jint GetComponentCount() const;
	static ::android::graphics::ColorSpace_Model ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::android::graphics::ColorSpace_Model > Values();
	explicit ColorSpace_Model(jobject o) : ::java::lang::Enum(o) {}
	ColorSpace_Model(const ColorSpace_Model& o)  : ::java::lang::Enum(o) {}

};

struct ColorSpace_Rgb_TransferParameters : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jdouble fA() const;
	::jdouble fB() const;
	::jdouble fC() const;
	::jdouble fD() const;
	::jdouble fE() const;
	::jdouble fF() const;
	::jdouble fG() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint HashCode() const;
	static jobject __Constructor(const ::jdouble& arg0, const ::jdouble& arg1, const ::jdouble& arg2, const ::jdouble& arg3, const ::jdouble& arg4);
	ColorSpace_Rgb_TransferParameters(const ::jdouble& arg0, const ::jdouble& arg1, const ::jdouble& arg2, const ::jdouble& arg3, const ::jdouble& arg4) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3, arg4)) {}
	static jobject __Constructor(const ::jdouble& arg0, const ::jdouble& arg1, const ::jdouble& arg2, const ::jdouble& arg3, const ::jdouble& arg4, const ::jdouble& arg5, const ::jdouble& arg6);
	ColorSpace_Rgb_TransferParameters(const ::jdouble& arg0, const ::jdouble& arg1, const ::jdouble& arg2, const ::jdouble& arg3, const ::jdouble& arg4, const ::jdouble& arg5, const ::jdouble& arg6) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3, arg4, arg5, arg6)) {}
	explicit ColorSpace_Rgb_TransferParameters(jobject o) : ::java::lang::Object(o) {}
	ColorSpace_Rgb_TransferParameters(const ColorSpace_Rgb_TransferParameters& o)  : ::java::lang::Object(o) {}

};

struct Picture : ::java::lang::Object
{
	static jni::Class __CLASS;

	::android::graphics::Canvas BeginRecording(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid Draw(const ::android::graphics::Canvas& arg0) const;
	::jvoid EndRecording() const;
	::jvoid Finalize() const;
	::jint GetHeight() const;
	::jint GetWidth() const;
	::jboolean RequiresHardwareAcceleration() const;
	static jobject __Constructor();
	Picture() : ::java::lang::Object(__Constructor()) {}
	explicit Picture(jobject o) : ::java::lang::Object(o) {}
	Picture(const Picture& o)  : ::java::lang::Object(o) {}

};

struct Color : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fBLACK();
	static ::jint& fBLUE();
	static ::jint& fCYAN();
	static ::jint& fDKGRAY();
	static ::jint& fGRAY();
	static ::jint& fGREEN();
	static ::jint& fLTGRAY();
	static ::jint& fMAGENTA();
	static ::jint& fRED();
	static ::jint& fTRANSPARENT();
	static ::jint& fWHITE();
	static ::jint& fYELLOW();
	static ::jint HSVToColor(const ::jint& arg0, const jni::Array< ::jfloat >& arg1);
	static ::jint HSVToColor(const jni::Array< ::jfloat >& arg0);
	static ::jvoid RGBToHSV(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const jni::Array< ::jfloat >& arg3);
	::jfloat Alpha() const;
	static ::jint Alpha(const ::jint& arg0);
	static ::jfloat Alpha(const ::jlong& arg0);
	static ::jint Argb(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3);
	static ::jint Argb(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3);
	::jfloat Blue() const;
	static ::jint Blue(const ::jint& arg0);
	static ::jfloat Blue(const ::jlong& arg0);
	static ::android::graphics::ColorSpace ColorSpace(const ::jlong& arg0);
	static ::jvoid ColorToHSV(const ::jint& arg0, const jni::Array< ::jfloat >& arg1);
	static ::jlong Convert(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3, const ::android::graphics::ColorSpace_Connector& arg4);
	static ::jlong Convert(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3, const ::android::graphics::ColorSpace& arg4, const ::android::graphics::ColorSpace& arg5);
	static ::jlong Convert(const ::jint& arg0, const ::android::graphics::ColorSpace& arg1);
	static ::jlong Convert(const ::jlong& arg0, const ::android::graphics::ColorSpace_Connector& arg1);
	static ::jlong Convert(const ::jlong& arg0, const ::android::graphics::ColorSpace& arg1);
	::android::graphics::Color Convert(const ::android::graphics::ColorSpace& arg0) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::android::graphics::ColorSpace GetColorSpace() const;
	::jfloat GetComponent(const ::jint& arg0) const;
	::jint GetComponentCount() const;
	jni::Array< ::jfloat > GetComponents() const;
	jni::Array< ::jfloat > GetComponents(const jni::Array< ::jfloat >& arg0) const;
	::android::graphics::ColorSpace_Model GetModel() const;
	::jfloat Green() const;
	static ::jint Green(const ::jint& arg0);
	static ::jfloat Green(const ::jlong& arg0);
	::jint HashCode() const;
	static ::jboolean IsInColorSpace(const ::jlong& arg0, const ::android::graphics::ColorSpace& arg1);
	::jboolean IsSrgb() const;
	static ::jboolean IsSrgb(const ::jlong& arg0);
	::jboolean IsWideGamut() const;
	static ::jboolean IsWideGamut(const ::jlong& arg0);
	::jfloat Luminance() const;
	static ::jfloat Luminance(const ::jint& arg0);
	static ::jfloat Luminance(const ::jlong& arg0);
	::jlong Pack() const;
	static ::jlong Pack(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2);
	static ::jlong Pack(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3);
	static ::jlong Pack(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3, const ::android::graphics::ColorSpace& arg4);
	static ::jlong Pack(const ::jint& arg0);
	static ::jint ParseColor(const ::java::lang::String& arg0);
	::jfloat Red() const;
	static ::jint Red(const ::jint& arg0);
	static ::jfloat Red(const ::jlong& arg0);
	static ::jint Rgb(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2);
	static ::jint Rgb(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2);
	::jint ToArgb() const;
	static ::jint ToArgb(const ::jlong& arg0);
	::java::lang::String ToString() const;
	static ::android::graphics::Color ValueOf(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2);
	static ::android::graphics::Color ValueOf(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3);
	static ::android::graphics::Color ValueOf(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3, const ::android::graphics::ColorSpace& arg4);
	static ::android::graphics::Color ValueOf(const ::jint& arg0);
	static ::android::graphics::Color ValueOf(const ::jlong& arg0);
	static ::android::graphics::Color ValueOf(const jni::Array< ::jfloat >& arg0, const ::android::graphics::ColorSpace& arg1);
	static jobject __Constructor();
	Color() : ::java::lang::Object(__Constructor()) {}
	explicit Color(jobject o) : ::java::lang::Object(o) {}
	Color(const Color& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace hardware { 
struct HardwareBuffer : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	operator ::java::lang::AutoCloseable();
	static ::jint& fBLOB();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fDS_24UI8();
	static ::jint& fDS_FP32UI8();
	static ::jint& fD_16();
	static ::jint& fD_24();
	static ::jint& fD_FP32();
	static ::jint& fRGBA_1010102();
	static ::jint& fRGBA_8888();
	static ::jint& fRGBA_FP16();
	static ::jint& fRGBX_8888();
	static ::jint& fRGB_565();
	static ::jint& fRGB_888();
	static ::jint& fS_UI8();
	static ::jlong& fUSAGE_CPU_READ_OFTEN();
	static ::jlong& fUSAGE_CPU_READ_RARELY();
	static ::jlong& fUSAGE_CPU_WRITE_OFTEN();
	static ::jlong& fUSAGE_CPU_WRITE_RARELY();
	static ::jlong& fUSAGE_GPU_COLOR_OUTPUT();
	static ::jlong& fUSAGE_GPU_CUBE_MAP();
	static ::jlong& fUSAGE_GPU_DATA_BUFFER();
	static ::jlong& fUSAGE_GPU_MIPMAP_COMPLETE();
	static ::jlong& fUSAGE_GPU_SAMPLED_IMAGE();
	static ::jlong& fUSAGE_PROTECTED_CONTENT();
	static ::jlong& fUSAGE_SENSOR_DIRECT_DATA();
	static ::jlong& fUSAGE_VIDEO_ENCODE();
	static ::jint& fYCBCR_420_888();
	::jvoid Close() const;
	static ::android::hardware::HardwareBuffer Create(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jlong& arg4);
	::jint DescribeContents() const;
	::jvoid Finalize() const;
	::jint GetFormat() const;
	::jint GetHeight() const;
	::jint GetLayers() const;
	::jlong GetUsage() const;
	::jint GetWidth() const;
	::jboolean IsClosed() const;
	static ::jboolean IsSupported(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jlong& arg4);
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit HardwareBuffer(jobject o) : ::java::lang::Object(o) {}
	HardwareBuffer(const HardwareBuffer& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace graphics { 
struct PorterDuff_Mode : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::android::graphics::PorterDuff_Mode& fADD();
	static ::android::graphics::PorterDuff_Mode& fCLEAR();
	static ::android::graphics::PorterDuff_Mode& fDARKEN();
	static ::android::graphics::PorterDuff_Mode& fDST();
	static ::android::graphics::PorterDuff_Mode& fDST_ATOP();
	static ::android::graphics::PorterDuff_Mode& fDST_IN();
	static ::android::graphics::PorterDuff_Mode& fDST_OUT();
	static ::android::graphics::PorterDuff_Mode& fDST_OVER();
	static ::android::graphics::PorterDuff_Mode& fLIGHTEN();
	static ::android::graphics::PorterDuff_Mode& fMULTIPLY();
	static ::android::graphics::PorterDuff_Mode& fOVERLAY();
	static ::android::graphics::PorterDuff_Mode& fSCREEN();
	static ::android::graphics::PorterDuff_Mode& fSRC();
	static ::android::graphics::PorterDuff_Mode& fSRC_ATOP();
	static ::android::graphics::PorterDuff_Mode& fSRC_IN();
	static ::android::graphics::PorterDuff_Mode& fSRC_OUT();
	static ::android::graphics::PorterDuff_Mode& fSRC_OVER();
	static ::android::graphics::PorterDuff_Mode& fXOR();
	static ::android::graphics::PorterDuff_Mode ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::android::graphics::PorterDuff_Mode > Values();
	explicit PorterDuff_Mode(jobject o) : ::java::lang::Enum(o) {}
	PorterDuff_Mode(const PorterDuff_Mode& o)  : ::java::lang::Enum(o) {}

};

}}

namespace android { namespace graphics { namespace fonts { 
struct Font : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean Equals(const ::java::lang::Object& arg0) const;
	jni::Array< ::android::graphics::fonts::FontVariationAxis > GetAxes() const;
	::java::nio::ByteBuffer GetBuffer() const;
	::java::io::File GetFile() const;
	::jfloat GetGlyphBounds(const ::jint& arg0, const ::android::graphics::Paint& arg1, const ::android::graphics::RectF& arg2) const;
	::android::os::LocaleList GetLocaleList() const;
	::jvoid GetMetrics(const ::android::graphics::Paint& arg0, const ::android::graphics::Paint_FontMetrics& arg1) const;
	::jint GetSourceIdentifier() const;
	::android::graphics::fonts::FontStyle GetStyle() const;
	::jint GetTtcIndex() const;
	::jint HashCode() const;
	::java::lang::String ToString() const;
	explicit Font(jobject o) : ::java::lang::Object(o) {}
	Font(const Font& o)  : ::java::lang::Object(o) {}

};

struct FontVariationAxis : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean Equals(const ::java::lang::Object& arg0) const;
	static jni::Array< ::android::graphics::fonts::FontVariationAxis > FromFontVariationSettings(const ::java::lang::String& arg0);
	::jfloat GetStyleValue() const;
	::java::lang::String GetTag() const;
	::jint HashCode() const;
	static ::java::lang::String ToFontVariationSettings(const jni::Array< ::android::graphics::fonts::FontVariationAxis >& arg0);
	::java::lang::String ToString() const;
	static jobject __Constructor(const ::java::lang::String& arg0, const ::jfloat& arg1);
	FontVariationAxis(const ::java::lang::String& arg0, const ::jfloat& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit FontVariationAxis(jobject o) : ::java::lang::Object(o) {}
	FontVariationAxis(const FontVariationAxis& o)  : ::java::lang::Object(o) {}

};

struct FontStyle : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fFONT_SLANT_ITALIC();
	static ::jint& fFONT_SLANT_UPRIGHT();
	static ::jint& fFONT_WEIGHT_BLACK();
	static ::jint& fFONT_WEIGHT_BOLD();
	static ::jint& fFONT_WEIGHT_EXTRA_BOLD();
	static ::jint& fFONT_WEIGHT_EXTRA_LIGHT();
	static ::jint& fFONT_WEIGHT_LIGHT();
	static ::jint& fFONT_WEIGHT_MAX();
	static ::jint& fFONT_WEIGHT_MEDIUM();
	static ::jint& fFONT_WEIGHT_MIN();
	static ::jint& fFONT_WEIGHT_NORMAL();
	static ::jint& fFONT_WEIGHT_SEMI_BOLD();
	static ::jint& fFONT_WEIGHT_THIN();
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint GetSlant() const;
	::jint GetWeight() const;
	::jint HashCode() const;
	::java::lang::String ToString() const;
	static jobject __Constructor();
	FontStyle() : ::java::lang::Object(__Constructor()) {}
	static jobject __Constructor(const ::jint& arg0, const ::jint& arg1);
	FontStyle(const ::jint& arg0, const ::jint& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit FontStyle(jobject o) : ::java::lang::Object(o) {}
	FontStyle(const FontStyle& o)  : ::java::lang::Object(o) {}

};

}}}

namespace android { namespace graphics { 
struct NinePatch : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid Draw(const ::android::graphics::Canvas& arg0, const ::android::graphics::Rect& arg1) const;
	::jvoid Draw(const ::android::graphics::Canvas& arg0, const ::android::graphics::Rect& arg1, const ::android::graphics::Paint& arg2) const;
	::jvoid Draw(const ::android::graphics::Canvas& arg0, const ::android::graphics::RectF& arg1) const;
	::jvoid Finalize() const;
	::android::graphics::Bitmap GetBitmap() const;
	::jint GetDensity() const;
	::jint GetHeight() const;
	::java::lang::String GetName() const;
	::android::graphics::Paint GetPaint() const;
	::android::graphics::Region GetTransparentRegion(const ::android::graphics::Rect& arg0) const;
	::jint GetWidth() const;
	::jboolean HasAlpha() const;
	static ::jboolean IsNinePatchChunk(const jni::Array< ::jbyte >& arg0);
	::jvoid SetPaint(const ::android::graphics::Paint& arg0) const;
	static jobject __Constructor(const ::android::graphics::Bitmap& arg0, const jni::Array< ::jbyte >& arg1);
	NinePatch(const ::android::graphics::Bitmap& arg0, const jni::Array< ::jbyte >& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::graphics::Bitmap& arg0, const jni::Array< ::jbyte >& arg1, const ::java::lang::String& arg2);
	NinePatch(const ::android::graphics::Bitmap& arg0, const jni::Array< ::jbyte >& arg1, const ::java::lang::String& arg2) : ::java::lang::Object(__Constructor(arg0, arg1, arg2)) {}
	explicit NinePatch(jobject o) : ::java::lang::Object(o) {}
	NinePatch(const NinePatch& o)  : ::java::lang::Object(o) {}

};

struct Region : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jboolean Contains(const ::jint& arg0, const ::jint& arg1) const;
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jvoid Finalize() const;
	::android::graphics::Path GetBoundaryPath() const;
	::jboolean GetBoundaryPath(const ::android::graphics::Path& arg0) const;
	::android::graphics::Rect GetBounds() const;
	::jboolean GetBounds(const ::android::graphics::Rect& arg0) const;
	::jboolean IsComplex() const;
	::jboolean IsEmpty() const;
	::jboolean IsRect() const;
	::jboolean Op(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::android::graphics::Region_Op& arg4) const;
	::jboolean Op(const ::android::graphics::Rect& arg0, const ::android::graphics::Region_Op& arg1) const;
	::jboolean Op(const ::android::graphics::Rect& arg0, const ::android::graphics::Region& arg1, const ::android::graphics::Region_Op& arg2) const;
	::jboolean Op(const ::android::graphics::Region& arg0, const ::android::graphics::Region_Op& arg1) const;
	::jboolean Op(const ::android::graphics::Region& arg0, const ::android::graphics::Region& arg1, const ::android::graphics::Region_Op& arg2) const;
	::jboolean QuickContains(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jboolean QuickContains(const ::android::graphics::Rect& arg0) const;
	::jboolean QuickReject(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jboolean QuickReject(const ::android::graphics::Rect& arg0) const;
	::jboolean QuickReject(const ::android::graphics::Region& arg0) const;
	::jboolean Set(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jboolean Set(const ::android::graphics::Rect& arg0) const;
	::jboolean Set(const ::android::graphics::Region& arg0) const;
	::jvoid SetEmpty() const;
	::jboolean SetPath(const ::android::graphics::Path& arg0, const ::android::graphics::Region& arg1) const;
	::java::lang::String ToString() const;
	::jvoid Translate(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid Translate(const ::jint& arg0, const ::jint& arg1, const ::android::graphics::Region& arg2) const;
	::jboolean Union(const ::android::graphics::Rect& arg0) const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor();
	Region() : ::java::lang::Object(__Constructor()) {}
	static jobject __Constructor(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3);
	Region(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3)) {}
	static jobject __Constructor(const ::android::graphics::Rect& arg0);
	Region(const ::android::graphics::Rect& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit Region(jobject o) : ::java::lang::Object(o) {}
	Region(const Region& o)  : ::java::lang::Object(o) {}

};

struct RenderNode : ::java::lang::Object
{
	static jni::Class __CLASS;

	::android::graphics::RecordingCanvas BeginRecording() const;
	::android::graphics::RecordingCanvas BeginRecording(const ::jint& arg0, const ::jint& arg1) const;
	::jlong ComputeApproximateMemoryUsage() const;
	::jvoid DiscardDisplayList() const;
	::jvoid EndRecording() const;
	::jfloat GetAlpha() const;
	::jint GetAmbientShadowColor() const;
	::jint GetBottom() const;
	::jfloat GetCameraDistance() const;
	::jboolean GetClipToBounds() const;
	::jboolean GetClipToOutline() const;
	::jfloat GetElevation() const;
	::jint GetHeight() const;
	::jvoid GetInverseMatrix(const ::android::graphics::Matrix& arg0) const;
	::jint GetLeft() const;
	::jvoid GetMatrix(const ::android::graphics::Matrix& arg0) const;
	::jfloat GetPivotX() const;
	::jfloat GetPivotY() const;
	::jint GetRight() const;
	::jfloat GetRotationX() const;
	::jfloat GetRotationY() const;
	::jfloat GetRotationZ() const;
	::jfloat GetScaleX() const;
	::jfloat GetScaleY() const;
	::jint GetSpotShadowColor() const;
	::jint GetTop() const;
	::jfloat GetTranslationX() const;
	::jfloat GetTranslationY() const;
	::jfloat GetTranslationZ() const;
	::jlong GetUniqueId() const;
	::jboolean GetUseCompositingLayer() const;
	::jint GetWidth() const;
	::jboolean HasDisplayList() const;
	::jboolean HasIdentityMatrix() const;
	::jboolean HasOverlappingRendering() const;
	::jboolean HasShadow() const;
	::jboolean IsForceDarkAllowed() const;
	::jboolean IsPivotExplicitlySet() const;
	::jboolean OffsetLeftAndRight(const ::jint& arg0) const;
	::jboolean OffsetTopAndBottom(const ::jint& arg0) const;
	::jboolean ResetPivot() const;
	::jboolean SetAlpha(const ::jfloat& arg0) const;
	::jboolean SetAmbientShadowColor(const ::jint& arg0) const;
	::jboolean SetCameraDistance(const ::jfloat& arg0) const;
	::jboolean SetClipRect(const ::android::graphics::Rect& arg0) const;
	::jboolean SetClipToBounds(const ::jboolean& arg0) const;
	::jboolean SetClipToOutline(const ::jboolean& arg0) const;
	::jboolean SetElevation(const ::jfloat& arg0) const;
	::jboolean SetForceDarkAllowed(const ::jboolean& arg0) const;
	::jboolean SetHasOverlappingRendering(const ::jboolean& arg0) const;
	::jboolean SetOutline(const ::android::graphics::Outline& arg0) const;
	::jboolean SetPivotX(const ::jfloat& arg0) const;
	::jboolean SetPivotY(const ::jfloat& arg0) const;
	::jboolean SetPosition(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jboolean SetPosition(const ::android::graphics::Rect& arg0) const;
	::jboolean SetProjectBackwards(const ::jboolean& arg0) const;
	::jboolean SetProjectionReceiver(const ::jboolean& arg0) const;
	::jboolean SetRenderEffect(const ::android::graphics::RenderEffect& arg0) const;
	::jboolean SetRotationX(const ::jfloat& arg0) const;
	::jboolean SetRotationY(const ::jfloat& arg0) const;
	::jboolean SetRotationZ(const ::jfloat& arg0) const;
	::jboolean SetScaleX(const ::jfloat& arg0) const;
	::jboolean SetScaleY(const ::jfloat& arg0) const;
	::jboolean SetSpotShadowColor(const ::jint& arg0) const;
	::jboolean SetTranslationX(const ::jfloat& arg0) const;
	::jboolean SetTranslationY(const ::jfloat& arg0) const;
	::jboolean SetTranslationZ(const ::jfloat& arg0) const;
	::jboolean SetUseCompositingLayer(const ::jboolean& arg0, const ::android::graphics::Paint& arg1) const;
	static jobject __Constructor(const ::java::lang::String& arg0);
	RenderNode(const ::java::lang::String& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit RenderNode(jobject o) : ::java::lang::Object(o) {}
	RenderNode(const RenderNode& o)  : ::java::lang::Object(o) {}

};

struct RecordingCanvas : ::android::graphics::Canvas
{
	static jni::Class __CLASS;

	::jvoid DisableZ() const;
	::jvoid DrawARGB(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid DrawArc(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3, const ::jfloat& arg4, const ::jfloat& arg5, const ::jboolean& arg6, const ::android::graphics::Paint& arg7) const;
	::jvoid DrawArc(const ::android::graphics::RectF& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jboolean& arg3, const ::android::graphics::Paint& arg4) const;
	::jvoid DrawBitmap(const ::android::graphics::Bitmap& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::android::graphics::Paint& arg3) const;
	::jvoid DrawBitmap(const ::android::graphics::Bitmap& arg0, const ::android::graphics::Matrix& arg1, const ::android::graphics::Paint& arg2) const;
	::jvoid DrawBitmap(const ::android::graphics::Bitmap& arg0, const ::android::graphics::Rect& arg1, const ::android::graphics::Rect& arg2, const ::android::graphics::Paint& arg3) const;
	::jvoid DrawBitmap(const ::android::graphics::Bitmap& arg0, const ::android::graphics::Rect& arg1, const ::android::graphics::RectF& arg2, const ::android::graphics::Paint& arg3) const;
	::jvoid DrawBitmap(const jni::Array< ::jint >& arg0, const ::jint& arg1, const ::jint& arg2, const ::jfloat& arg3, const ::jfloat& arg4, const ::jint& arg5, const ::jint& arg6, const ::jboolean& arg7, const ::android::graphics::Paint& arg8) const;
	::jvoid DrawBitmap(const jni::Array< ::jint >& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5, const ::jint& arg6, const ::jboolean& arg7, const ::android::graphics::Paint& arg8) const;
	::jvoid DrawBitmapMesh(const ::android::graphics::Bitmap& arg0, const ::jint& arg1, const ::jint& arg2, const jni::Array< ::jfloat >& arg3, const ::jint& arg4, const jni::Array< ::jint >& arg5, const ::jint& arg6, const ::android::graphics::Paint& arg7) const;
	::jvoid DrawCircle(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::android::graphics::Paint& arg3) const;
	::jvoid DrawColor(const ::jint& arg0) const;
	::jvoid DrawColor(const ::jint& arg0, const ::android::graphics::BlendMode& arg1) const;
	::jvoid DrawColor(const ::jint& arg0, const ::android::graphics::PorterDuff_Mode& arg1) const;
	::jvoid DrawColor(const ::jlong& arg0, const ::android::graphics::BlendMode& arg1) const;
	::jvoid DrawDoubleRoundRect(const ::android::graphics::RectF& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::android::graphics::RectF& arg3, const ::jfloat& arg4, const ::jfloat& arg5, const ::android::graphics::Paint& arg6) const;
	::jvoid DrawDoubleRoundRect(const ::android::graphics::RectF& arg0, const jni::Array< ::jfloat >& arg1, const ::android::graphics::RectF& arg2, const jni::Array< ::jfloat >& arg3, const ::android::graphics::Paint& arg4) const;
	::jvoid DrawGlyphs(const jni::Array< ::jint >& arg0, const ::jint& arg1, const jni::Array< ::jfloat >& arg2, const ::jint& arg3, const ::jint& arg4, const ::android::graphics::fonts::Font& arg5, const ::android::graphics::Paint& arg6) const;
	::jvoid DrawLine(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3, const ::android::graphics::Paint& arg4) const;
	::jvoid DrawLines(const jni::Array< ::jfloat >& arg0, const ::jint& arg1, const ::jint& arg2, const ::android::graphics::Paint& arg3) const;
	::jvoid DrawLines(const jni::Array< ::jfloat >& arg0, const ::android::graphics::Paint& arg1) const;
	::jvoid DrawOval(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3, const ::android::graphics::Paint& arg4) const;
	::jvoid DrawOval(const ::android::graphics::RectF& arg0, const ::android::graphics::Paint& arg1) const;
	::jvoid DrawPaint(const ::android::graphics::Paint& arg0) const;
	::jvoid DrawPatch(const ::android::graphics::NinePatch& arg0, const ::android::graphics::Rect& arg1, const ::android::graphics::Paint& arg2) const;
	::jvoid DrawPatch(const ::android::graphics::NinePatch& arg0, const ::android::graphics::RectF& arg1, const ::android::graphics::Paint& arg2) const;
	::jvoid DrawPath(const ::android::graphics::Path& arg0, const ::android::graphics::Paint& arg1) const;
	::jvoid DrawPicture(const ::android::graphics::Picture& arg0) const;
	::jvoid DrawPicture(const ::android::graphics::Picture& arg0, const ::android::graphics::Rect& arg1) const;
	::jvoid DrawPicture(const ::android::graphics::Picture& arg0, const ::android::graphics::RectF& arg1) const;
	::jvoid DrawPoint(const ::jfloat& arg0, const ::jfloat& arg1, const ::android::graphics::Paint& arg2) const;
	::jvoid DrawPoints(const jni::Array< ::jfloat >& arg0, const ::jint& arg1, const ::jint& arg2, const ::android::graphics::Paint& arg3) const;
	::jvoid DrawPoints(const jni::Array< ::jfloat >& arg0, const ::android::graphics::Paint& arg1) const;
	::jvoid DrawPosText(const ::java::lang::String& arg0, const jni::Array< ::jfloat >& arg1, const ::android::graphics::Paint& arg2) const;
	::jvoid DrawPosText(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2, const jni::Array< ::jfloat >& arg3, const ::android::graphics::Paint& arg4) const;
	::jvoid DrawRGB(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jvoid DrawRect(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3, const ::android::graphics::Paint& arg4) const;
	::jvoid DrawRect(const ::android::graphics::Rect& arg0, const ::android::graphics::Paint& arg1) const;
	::jvoid DrawRect(const ::android::graphics::RectF& arg0, const ::android::graphics::Paint& arg1) const;
	::jvoid DrawRenderNode(const ::android::graphics::RenderNode& arg0) const;
	::jvoid DrawRoundRect(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3, const ::jfloat& arg4, const ::jfloat& arg5, const ::android::graphics::Paint& arg6) const;
	::jvoid DrawRoundRect(const ::android::graphics::RectF& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::android::graphics::Paint& arg3) const;
	::jvoid DrawText(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2, const ::jfloat& arg3, const ::jfloat& arg4, const ::android::graphics::Paint& arg5) const;
	::jvoid DrawText(const ::java::lang::String& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::android::graphics::Paint& arg3) const;
	::jvoid DrawText(const ::java::lang::String& arg0, const ::jint& arg1, const ::jint& arg2, const ::jfloat& arg3, const ::jfloat& arg4, const ::android::graphics::Paint& arg5) const;
	::jvoid DrawText(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2, const ::jfloat& arg3, const ::jfloat& arg4, const ::android::graphics::Paint& arg5) const;
	::jvoid DrawTextOnPath(const ::java::lang::String& arg0, const ::android::graphics::Path& arg1, const ::jfloat& arg2, const ::jfloat& arg3, const ::android::graphics::Paint& arg4) const;
	::jvoid DrawTextOnPath(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2, const ::android::graphics::Path& arg3, const ::jfloat& arg4, const ::jfloat& arg5, const ::android::graphics::Paint& arg6) const;
	::jvoid DrawTextRun(const ::android::graphics::text::MeasuredText& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jfloat& arg5, const ::jfloat& arg6, const ::jboolean& arg7, const ::android::graphics::Paint& arg8) const;
	::jvoid DrawTextRun(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jfloat& arg5, const ::jfloat& arg6, const ::jboolean& arg7, const ::android::graphics::Paint& arg8) const;
	::jvoid DrawTextRun(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jfloat& arg5, const ::jfloat& arg6, const ::jboolean& arg7, const ::android::graphics::Paint& arg8) const;
	::jvoid DrawVertices(const ::android::graphics::Canvas_VertexMode& arg0, const ::jint& arg1, const jni::Array< ::jfloat >& arg2, const ::jint& arg3, const jni::Array< ::jfloat >& arg4, const ::jint& arg5, const jni::Array< ::jint >& arg6, const ::jint& arg7, const jni::Array< ::jshort >& arg8, const ::jint& arg9, const ::jint& arg10, const ::android::graphics::Paint& arg11) const;
	::jvoid EnableZ() const;
	::jint GetHeight() const;
	::jint GetMaximumBitmapHeight() const;
	::jint GetMaximumBitmapWidth() const;
	::jint GetWidth() const;
	::jboolean IsHardwareAccelerated() const;
	::jboolean IsOpaque() const;
	::jvoid SetBitmap(const ::android::graphics::Bitmap& arg0) const;
	::jvoid SetDensity(const ::jint& arg0) const;
	explicit RecordingCanvas(jobject o) : ::android::graphics::Canvas(o) {}
	RecordingCanvas(const RecordingCanvas& o)  : ::android::graphics::Canvas(o) {}

};

}}

namespace android { namespace graphics { namespace text { 
struct MeasuredText : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid GetBounds(const ::jint& arg0, const ::jint& arg1, const ::android::graphics::Rect& arg2) const;
	::jfloat GetCharWidthAt(const ::jint& arg0) const;
	::jfloat GetWidth(const ::jint& arg0, const ::jint& arg1) const;
	explicit MeasuredText(jobject o) : ::java::lang::Object(o) {}
	MeasuredText(const MeasuredText& o)  : ::java::lang::Object(o) {}

};

}}}

namespace android { namespace graphics { 
struct Canvas_VertexMode : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::android::graphics::Canvas_VertexMode& fTRIANGLES();
	static ::android::graphics::Canvas_VertexMode& fTRIANGLE_FAN();
	static ::android::graphics::Canvas_VertexMode& fTRIANGLE_STRIP();
	static ::android::graphics::Canvas_VertexMode ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::android::graphics::Canvas_VertexMode > Values();
	explicit Canvas_VertexMode(jobject o) : ::java::lang::Enum(o) {}
	Canvas_VertexMode(const Canvas_VertexMode& o)  : ::java::lang::Enum(o) {}

};

struct Outline : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean CanClip() const;
	::jfloat GetAlpha() const;
	::jfloat GetRadius() const;
	::jboolean GetRect(const ::android::graphics::Rect& arg0) const;
	::jboolean IsEmpty() const;
	::jvoid Offset(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid Set(const ::android::graphics::Outline& arg0) const;
	::jvoid SetAlpha(const ::jfloat& arg0) const;
	::jvoid SetConvexPath(const ::android::graphics::Path& arg0) const;
	::jvoid SetEmpty() const;
	::jvoid SetOval(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid SetOval(const ::android::graphics::Rect& arg0) const;
	::jvoid SetPath(const ::android::graphics::Path& arg0) const;
	::jvoid SetRect(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid SetRect(const ::android::graphics::Rect& arg0) const;
	::jvoid SetRoundRect(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jfloat& arg4) const;
	::jvoid SetRoundRect(const ::android::graphics::Rect& arg0, const ::jfloat& arg1) const;
	static jobject __Constructor();
	Outline() : ::java::lang::Object(__Constructor()) {}
	explicit Outline(jobject o) : ::java::lang::Object(o) {}
	Outline(const Outline& o)  : ::java::lang::Object(o) {}

};

struct RenderEffect : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::android::graphics::RenderEffect CreateBitmapEffect(const ::android::graphics::Bitmap& arg0);
	static ::android::graphics::RenderEffect CreateBitmapEffect(const ::android::graphics::Bitmap& arg0, const ::android::graphics::Rect& arg1, const ::android::graphics::Rect& arg2);
	static ::android::graphics::RenderEffect CreateBlendModeEffect(const ::android::graphics::RenderEffect& arg0, const ::android::graphics::RenderEffect& arg1, const ::android::graphics::BlendMode& arg2);
	static ::android::graphics::RenderEffect CreateBlurEffect(const ::jfloat& arg0, const ::jfloat& arg1, const ::android::graphics::RenderEffect& arg2, const ::android::graphics::Shader_TileMode& arg3);
	static ::android::graphics::RenderEffect CreateBlurEffect(const ::jfloat& arg0, const ::jfloat& arg1, const ::android::graphics::Shader_TileMode& arg2);
	static ::android::graphics::RenderEffect CreateChainEffect(const ::android::graphics::RenderEffect& arg0, const ::android::graphics::RenderEffect& arg1);
	static ::android::graphics::RenderEffect CreateColorFilterEffect(const ::android::graphics::ColorFilter& arg0);
	static ::android::graphics::RenderEffect CreateColorFilterEffect(const ::android::graphics::ColorFilter& arg0, const ::android::graphics::RenderEffect& arg1);
	static ::android::graphics::RenderEffect CreateOffsetEffect(const ::jfloat& arg0, const ::jfloat& arg1);
	static ::android::graphics::RenderEffect CreateOffsetEffect(const ::jfloat& arg0, const ::jfloat& arg1, const ::android::graphics::RenderEffect& arg2);
	static ::android::graphics::RenderEffect CreateShaderEffect(const ::android::graphics::Shader& arg0);
	explicit RenderEffect(jobject o) : ::java::lang::Object(o) {}
	RenderEffect(const RenderEffect& o)  : ::java::lang::Object(o) {}

};

struct Shader_TileMode : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::android::graphics::Shader_TileMode& fCLAMP();
	static ::android::graphics::Shader_TileMode& fDECAL();
	static ::android::graphics::Shader_TileMode& fMIRROR();
	static ::android::graphics::Shader_TileMode& fREPEAT();
	static ::android::graphics::Shader_TileMode ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::android::graphics::Shader_TileMode > Values();
	explicit Shader_TileMode(jobject o) : ::java::lang::Enum(o) {}
	Shader_TileMode(const Shader_TileMode& o)  : ::java::lang::Enum(o) {}

};

struct DrawFilter : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid Finalize() const;
	static jobject __Constructor();
	DrawFilter() : ::java::lang::Object(__Constructor()) {}
	explicit DrawFilter(jobject o) : ::java::lang::Object(o) {}
	DrawFilter(const DrawFilter& o)  : ::java::lang::Object(o) {}

};

struct Canvas_EdgeType : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::android::graphics::Canvas_EdgeType& fAA();
	static ::android::graphics::Canvas_EdgeType& fBW();
	static ::android::graphics::Canvas_EdgeType ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::android::graphics::Canvas_EdgeType > Values();
	explicit Canvas_EdgeType(jobject o) : ::java::lang::Enum(o) {}
	Canvas_EdgeType(const Canvas_EdgeType& o)  : ::java::lang::Enum(o) {}

};

}}

namespace android { namespace util { 
struct TypedValue : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fCOMPLEX_MANTISSA_MASK();
	static ::jint& fCOMPLEX_MANTISSA_SHIFT();
	static ::jint& fCOMPLEX_RADIX_0p23();
	static ::jint& fCOMPLEX_RADIX_16p7();
	static ::jint& fCOMPLEX_RADIX_23p0();
	static ::jint& fCOMPLEX_RADIX_8p15();
	static ::jint& fCOMPLEX_RADIX_MASK();
	static ::jint& fCOMPLEX_RADIX_SHIFT();
	static ::jint& fCOMPLEX_UNIT_DIP();
	static ::jint& fCOMPLEX_UNIT_FRACTION();
	static ::jint& fCOMPLEX_UNIT_FRACTION_PARENT();
	static ::jint& fCOMPLEX_UNIT_IN();
	static ::jint& fCOMPLEX_UNIT_MASK();
	static ::jint& fCOMPLEX_UNIT_MM();
	static ::jint& fCOMPLEX_UNIT_PT();
	static ::jint& fCOMPLEX_UNIT_PX();
	static ::jint& fCOMPLEX_UNIT_SHIFT();
	static ::jint& fCOMPLEX_UNIT_SP();
	static ::jint& fDATA_NULL_EMPTY();
	static ::jint& fDATA_NULL_UNDEFINED();
	static ::jint& fDENSITY_DEFAULT();
	static ::jint& fDENSITY_NONE();
	static ::jint& fTYPE_ATTRIBUTE();
	static ::jint& fTYPE_DIMENSION();
	static ::jint& fTYPE_FIRST_COLOR_INT();
	static ::jint& fTYPE_FIRST_INT();
	static ::jint& fTYPE_FLOAT();
	static ::jint& fTYPE_FRACTION();
	static ::jint& fTYPE_INT_BOOLEAN();
	static ::jint& fTYPE_INT_COLOR_ARGB4();
	static ::jint& fTYPE_INT_COLOR_ARGB8();
	static ::jint& fTYPE_INT_COLOR_RGB4();
	static ::jint& fTYPE_INT_COLOR_RGB8();
	static ::jint& fTYPE_INT_DEC();
	static ::jint& fTYPE_INT_HEX();
	static ::jint& fTYPE_LAST_COLOR_INT();
	static ::jint& fTYPE_LAST_INT();
	static ::jint& fTYPE_NULL();
	static ::jint& fTYPE_REFERENCE();
	static ::jint& fTYPE_STRING();
	::jint fAssetCookie() const;
	void fAssetCookie(const ::jint& arg0) const;
	::jint fChangingConfigurations() const;
	void fChangingConfigurations(const ::jint& arg0) const;
	::jint fData() const;
	void fData(const ::jint& arg0) const;
	::jint fDensity() const;
	void fDensity(const ::jint& arg0) const;
	::jint fResourceId() const;
	void fResourceId(const ::jint& arg0) const;
	::jint fSourceResourceId() const;
	void fSourceResourceId(const ::jint& arg0) const;
	::java::lang::CharSequence fString() const;
	void fString(const ::java::lang::CharSequence& arg0) const;
	::jint fType() const;
	void fType(const ::jint& arg0) const;
	static ::jfloat ApplyDimension(const ::jint& arg0, const ::jfloat& arg1, const ::android::util::DisplayMetrics& arg2);
	::java::lang::CharSequence CoerceToString() const;
	static ::java::lang::String CoerceToString(const ::jint& arg0, const ::jint& arg1);
	static ::jfloat ComplexToDimension(const ::jint& arg0, const ::android::util::DisplayMetrics& arg1);
	static ::jint ComplexToDimensionPixelOffset(const ::jint& arg0, const ::android::util::DisplayMetrics& arg1);
	static ::jint ComplexToDimensionPixelSize(const ::jint& arg0, const ::android::util::DisplayMetrics& arg1);
	static ::jfloat ComplexToFloat(const ::jint& arg0);
	static ::jfloat ComplexToFraction(const ::jint& arg0, const ::jfloat& arg1, const ::jfloat& arg2);
	::jint GetComplexUnit() const;
	::jfloat GetDimension(const ::android::util::DisplayMetrics& arg0) const;
	::jfloat GetFloat() const;
	::jfloat GetFraction(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jboolean IsColorType() const;
	::jvoid SetTo(const ::android::util::TypedValue& arg0) const;
	::java::lang::String ToString() const;
	static jobject __Constructor();
	TypedValue() : ::java::lang::Object(__Constructor()) {}
	explicit TypedValue(jobject o) : ::java::lang::Object(o) {}
	TypedValue(const TypedValue& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace content { namespace res { 
struct TypedArray : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::AutoCloseable();
	::jvoid Close() const;
	::jboolean GetBoolean(const ::jint& arg0, const ::jboolean& arg1) const;
	::jint GetChangingConfigurations() const;
	::jint GetColor(const ::jint& arg0, const ::jint& arg1) const;
	::android::content::res::ColorStateList GetColorStateList(const ::jint& arg0) const;
	::jfloat GetDimension(const ::jint& arg0, const ::jfloat& arg1) const;
	::jint GetDimensionPixelOffset(const ::jint& arg0, const ::jint& arg1) const;
	::jint GetDimensionPixelSize(const ::jint& arg0, const ::jint& arg1) const;
	::android::graphics::drawable::Drawable GetDrawable(const ::jint& arg0) const;
	::jfloat GetFloat(const ::jint& arg0, const ::jfloat& arg1) const;
	::android::graphics::Typeface GetFont(const ::jint& arg0) const;
	::jfloat GetFraction(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jfloat& arg3) const;
	::jint GetIndex(const ::jint& arg0) const;
	::jint GetIndexCount() const;
	::jint GetInt(const ::jint& arg0, const ::jint& arg1) const;
	::jint GetInteger(const ::jint& arg0, const ::jint& arg1) const;
	::jint GetLayoutDimension(const ::jint& arg0, const ::jint& arg1) const;
	::jint GetLayoutDimension(const ::jint& arg0, const ::java::lang::String& arg1) const;
	::java::lang::String GetNonResourceString(const ::jint& arg0) const;
	::java::lang::String GetPositionDescription() const;
	::jint GetResourceId(const ::jint& arg0, const ::jint& arg1) const;
	::android::content::res::Resources GetResources() const;
	::jint GetSourceResourceId(const ::jint& arg0, const ::jint& arg1) const;
	::java::lang::String GetString(const ::jint& arg0) const;
	::java::lang::CharSequence GetText(const ::jint& arg0) const;
	jni::Array< ::java::lang::CharSequence > GetTextArray(const ::jint& arg0) const;
	::jint GetType(const ::jint& arg0) const;
	::jboolean GetValue(const ::jint& arg0, const ::android::util::TypedValue& arg1) const;
	::jboolean HasValue(const ::jint& arg0) const;
	::jboolean HasValueOrEmpty(const ::jint& arg0) const;
	::jint Length() const;
	::android::util::TypedValue PeekValue(const ::jint& arg0) const;
	::jvoid Recycle() const;
	::java::lang::String ToString() const;
	explicit TypedArray(jobject o) : ::java::lang::Object(o) {}
	TypedArray(const TypedArray& o)  : ::java::lang::Object(o) {}

};

}}}

namespace android { namespace graphics { 
struct BitmapFactory_Options : ::java::lang::Object
{
	static jni::Class __CLASS;

	::android::graphics::Bitmap fInBitmap() const;
	void fInBitmap(const ::android::graphics::Bitmap& arg0) const;
	::jint fInDensity() const;
	void fInDensity(const ::jint& arg0) const;
	::jboolean fInDither() const;
	void fInDither(const ::jboolean& arg0) const;
	::jboolean fInInputShareable() const;
	void fInInputShareable(const ::jboolean& arg0) const;
	::jboolean fInJustDecodeBounds() const;
	void fInJustDecodeBounds(const ::jboolean& arg0) const;
	::jboolean fInMutable() const;
	void fInMutable(const ::jboolean& arg0) const;
	::jboolean fInPreferQualityOverSpeed() const;
	void fInPreferQualityOverSpeed(const ::jboolean& arg0) const;
	::android::graphics::ColorSpace fInPreferredColorSpace() const;
	void fInPreferredColorSpace(const ::android::graphics::ColorSpace& arg0) const;
	::android::graphics::Bitmap_Config fInPreferredConfig() const;
	void fInPreferredConfig(const ::android::graphics::Bitmap_Config& arg0) const;
	::jboolean fInPremultiplied() const;
	void fInPremultiplied(const ::jboolean& arg0) const;
	::jboolean fInPurgeable() const;
	void fInPurgeable(const ::jboolean& arg0) const;
	::jint fInSampleSize() const;
	void fInSampleSize(const ::jint& arg0) const;
	::jboolean fInScaled() const;
	void fInScaled(const ::jboolean& arg0) const;
	::jint fInScreenDensity() const;
	void fInScreenDensity(const ::jint& arg0) const;
	::jint fInTargetDensity() const;
	void fInTargetDensity(const ::jint& arg0) const;
	jni::Array< ::jbyte > fInTempStorage() const;
	void fInTempStorage(const jni::Array< ::jbyte >& arg0) const;
	::jboolean fMCancel() const;
	void fMCancel(const ::jboolean& arg0) const;
	::android::graphics::ColorSpace fOutColorSpace() const;
	void fOutColorSpace(const ::android::graphics::ColorSpace& arg0) const;
	::android::graphics::Bitmap_Config fOutConfig() const;
	void fOutConfig(const ::android::graphics::Bitmap_Config& arg0) const;
	::jint fOutHeight() const;
	void fOutHeight(const ::jint& arg0) const;
	::java::lang::String fOutMimeType() const;
	void fOutMimeType(const ::java::lang::String& arg0) const;
	::jint fOutWidth() const;
	void fOutWidth(const ::jint& arg0) const;
	::jvoid RequestCancelDecode() const;
	static jobject __Constructor();
	BitmapFactory_Options() : ::java::lang::Object(__Constructor()) {}
	explicit BitmapFactory_Options(jobject o) : ::java::lang::Object(o) {}
	BitmapFactory_Options(const BitmapFactory_Options& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace graphics { namespace drawable { 
struct Drawable_Callback : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid InvalidateDrawable(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid ScheduleDrawable(const ::android::graphics::drawable::Drawable& arg0, const ::java::lang::Runnable& arg1, const ::jlong& arg2) const;
	::jvoid UnscheduleDrawable(const ::android::graphics::drawable::Drawable& arg0, const ::java::lang::Runnable& arg1) const;
	explicit Drawable_Callback(jobject o) : java::lang::Object(o) {}
	Drawable_Callback(const Drawable_Callback& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::graphics::drawable::Drawable_Callback();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void InvalidateDrawable(const ::android::graphics::drawable::Drawable& arg0) = 0;
		virtual void ScheduleDrawable(const ::android::graphics::drawable::Drawable& arg0, const ::java::lang::Runnable& arg1, const ::jlong& arg2) = 0;
		virtual void UnscheduleDrawable(const ::android::graphics::drawable::Drawable& arg0, const ::java::lang::Runnable& arg1) = 0;
	};
};

struct Drawable_ConstantState : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean CanApplyTheme() const;
	::jint GetChangingConfigurations() const;
	::android::graphics::drawable::Drawable NewDrawable() const;
	::android::graphics::drawable::Drawable NewDrawable(const ::android::content::res::Resources& arg0) const;
	::android::graphics::drawable::Drawable NewDrawable(const ::android::content::res::Resources& arg0, const ::android::content::res::Resources_Theme& arg1) const;
	static jobject __Constructor();
	Drawable_ConstantState() : ::java::lang::Object(__Constructor()) {}
	explicit Drawable_ConstantState(jobject o) : ::java::lang::Object(o) {}
	Drawable_ConstantState(const Drawable_ConstantState& o)  : ::java::lang::Object(o) {}

};

}}}

namespace android { namespace content { namespace pm { 
struct ActivityInfo : ::android::content::pm::ComponentInfo
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::jint& fCOLOR_MODE_DEFAULT();
	static ::jint& fCOLOR_MODE_HDR();
	static ::jint& fCOLOR_MODE_WIDE_COLOR_GAMUT();
	static ::jint& fCONFIG_COLOR_MODE();
	static ::jint& fCONFIG_DENSITY();
	static ::jint& fCONFIG_FONT_SCALE();
	static ::jint& fCONFIG_FONT_WEIGHT_ADJUSTMENT();
	static ::jint& fCONFIG_KEYBOARD();
	static ::jint& fCONFIG_KEYBOARD_HIDDEN();
	static ::jint& fCONFIG_LAYOUT_DIRECTION();
	static ::jint& fCONFIG_LOCALE();
	static ::jint& fCONFIG_MCC();
	static ::jint& fCONFIG_MNC();
	static ::jint& fCONFIG_NAVIGATION();
	static ::jint& fCONFIG_ORIENTATION();
	static ::jint& fCONFIG_SCREEN_LAYOUT();
	static ::jint& fCONFIG_SCREEN_SIZE();
	static ::jint& fCONFIG_SMALLEST_SCREEN_SIZE();
	static ::jint& fCONFIG_TOUCHSCREEN();
	static ::jint& fCONFIG_UI_MODE();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fDOCUMENT_LAUNCH_ALWAYS();
	static ::jint& fDOCUMENT_LAUNCH_INTO_EXISTING();
	static ::jint& fDOCUMENT_LAUNCH_NEVER();
	static ::jint& fDOCUMENT_LAUNCH_NONE();
	static ::jint& fFLAG_ALLOW_TASK_REPARENTING();
	static ::jint& fFLAG_ALWAYS_RETAIN_TASK_STATE();
	static ::jint& fFLAG_AUTO_REMOVE_FROM_RECENTS();
	static ::jint& fFLAG_CLEAR_TASK_ON_LAUNCH();
	static ::jint& fFLAG_ENABLE_VR_MODE();
	static ::jint& fFLAG_EXCLUDE_FROM_RECENTS();
	static ::jint& fFLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS();
	static ::jint& fFLAG_FINISH_ON_TASK_LAUNCH();
	static ::jint& fFLAG_HARDWARE_ACCELERATED();
	static ::jint& fFLAG_IMMERSIVE();
	static ::jint& fFLAG_MULTIPROCESS();
	static ::jint& fFLAG_NO_HISTORY();
	static ::jint& fFLAG_PREFER_MINIMAL_POST_PROCESSING();
	static ::jint& fFLAG_RELINQUISH_TASK_IDENTITY();
	static ::jint& fFLAG_RESUME_WHILE_PAUSING();
	static ::jint& fFLAG_SINGLE_USER();
	static ::jint& fFLAG_STATE_NOT_NEEDED();
	static ::jint& fLAUNCH_MULTIPLE();
	static ::jint& fLAUNCH_SINGLE_INSTANCE();
	static ::jint& fLAUNCH_SINGLE_INSTANCE_PER_TASK();
	static ::jint& fLAUNCH_SINGLE_TASK();
	static ::jint& fLAUNCH_SINGLE_TOP();
	static ::jint& fPERSIST_ACROSS_REBOOTS();
	static ::jint& fPERSIST_NEVER();
	static ::jint& fPERSIST_ROOT_ONLY();
	static ::jint& fSCREEN_ORIENTATION_BEHIND();
	static ::jint& fSCREEN_ORIENTATION_FULL_SENSOR();
	static ::jint& fSCREEN_ORIENTATION_FULL_USER();
	static ::jint& fSCREEN_ORIENTATION_LANDSCAPE();
	static ::jint& fSCREEN_ORIENTATION_LOCKED();
	static ::jint& fSCREEN_ORIENTATION_NOSENSOR();
	static ::jint& fSCREEN_ORIENTATION_PORTRAIT();
	static ::jint& fSCREEN_ORIENTATION_REVERSE_LANDSCAPE();
	static ::jint& fSCREEN_ORIENTATION_REVERSE_PORTRAIT();
	static ::jint& fSCREEN_ORIENTATION_SENSOR();
	static ::jint& fSCREEN_ORIENTATION_SENSOR_LANDSCAPE();
	static ::jint& fSCREEN_ORIENTATION_SENSOR_PORTRAIT();
	static ::jint& fSCREEN_ORIENTATION_UNSPECIFIED();
	static ::jint& fSCREEN_ORIENTATION_USER();
	static ::jint& fSCREEN_ORIENTATION_USER_LANDSCAPE();
	static ::jint& fSCREEN_ORIENTATION_USER_PORTRAIT();
	static ::jint& fUIOPTION_SPLIT_ACTION_BAR_WHEN_NARROW();
	::jint fColorMode() const;
	void fColorMode(const ::jint& arg0) const;
	::jint fConfigChanges() const;
	void fConfigChanges(const ::jint& arg0) const;
	::jint fDocumentLaunchMode() const;
	void fDocumentLaunchMode(const ::jint& arg0) const;
	::jint fFlags() const;
	void fFlags(const ::jint& arg0) const;
	::jint fLaunchMode() const;
	void fLaunchMode(const ::jint& arg0) const;
	::jint fMaxRecents() const;
	void fMaxRecents(const ::jint& arg0) const;
	::java::lang::String fParentActivityName() const;
	void fParentActivityName(const ::java::lang::String& arg0) const;
	::java::lang::String fPermission() const;
	void fPermission(const ::java::lang::String& arg0) const;
	::jint fPersistableMode() const;
	void fPersistableMode(const ::jint& arg0) const;
	::jint fScreenOrientation() const;
	void fScreenOrientation(const ::jint& arg0) const;
	::jint fSoftInputMode() const;
	void fSoftInputMode(const ::jint& arg0) const;
	::java::lang::String fTargetActivity() const;
	void fTargetActivity(const ::java::lang::String& arg0) const;
	::java::lang::String fTaskAffinity() const;
	void fTaskAffinity(const ::java::lang::String& arg0) const;
	::jint fTheme() const;
	void fTheme(const ::jint& arg0) const;
	::jint fUiOptions() const;
	void fUiOptions(const ::jint& arg0) const;
	::android::content::pm::ActivityInfo_WindowLayout fWindowLayout() const;
	void fWindowLayout(const ::android::content::pm::ActivityInfo_WindowLayout& arg0) const;
	::jint DescribeContents() const;
	::jvoid Dump(const ::android::util::Printer& arg0, const ::java::lang::String& arg1) const;
	::jint GetThemeResource() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor();
	ActivityInfo() : ::android::content::pm::ComponentInfo(__Constructor()) {}
	explicit ActivityInfo(jobject o) : ::android::content::pm::ComponentInfo(o) {}
	ActivityInfo(const ActivityInfo& o)  : ::android::content::pm::ComponentInfo(o) {}

};

struct ActivityInfo_WindowLayout : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jint fGravity() const;
	::jint fHeight() const;
	::jfloat fHeightFraction() const;
	::jint fMinHeight() const;
	::jint fMinWidth() const;
	::jint fWidth() const;
	::jfloat fWidthFraction() const;
	static jobject __Constructor(const ::jint& arg0, const ::jfloat& arg1, const ::jint& arg2, const ::jfloat& arg3, const ::jint& arg4, const ::jint& arg5, const ::jint& arg6);
	ActivityInfo_WindowLayout(const ::jint& arg0, const ::jfloat& arg1, const ::jint& arg2, const ::jfloat& arg3, const ::jint& arg4, const ::jint& arg5, const ::jint& arg6) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3, arg4, arg5, arg6)) {}
	explicit ActivityInfo_WindowLayout(jobject o) : ::java::lang::Object(o) {}
	ActivityInfo_WindowLayout(const ActivityInfo_WindowLayout& o)  : ::java::lang::Object(o) {}

};

struct ApplicationInfo : ::android::content::pm::PackageItemInfo
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::jint& fCATEGORY_ACCESSIBILITY();
	static ::jint& fCATEGORY_AUDIO();
	static ::jint& fCATEGORY_GAME();
	static ::jint& fCATEGORY_IMAGE();
	static ::jint& fCATEGORY_MAPS();
	static ::jint& fCATEGORY_NEWS();
	static ::jint& fCATEGORY_PRODUCTIVITY();
	static ::jint& fCATEGORY_SOCIAL();
	static ::jint& fCATEGORY_UNDEFINED();
	static ::jint& fCATEGORY_VIDEO();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fFLAG_ALLOW_BACKUP();
	static ::jint& fFLAG_ALLOW_CLEAR_USER_DATA();
	static ::jint& fFLAG_ALLOW_TASK_REPARENTING();
	static ::jint& fFLAG_DEBUGGABLE();
	static ::jint& fFLAG_EXTERNAL_STORAGE();
	static ::jint& fFLAG_EXTRACT_NATIVE_LIBS();
	static ::jint& fFLAG_FACTORY_TEST();
	static ::jint& fFLAG_FULL_BACKUP_ONLY();
	static ::jint& fFLAG_HARDWARE_ACCELERATED();
	static ::jint& fFLAG_HAS_CODE();
	static ::jint& fFLAG_INSTALLED();
	static ::jint& fFLAG_IS_DATA_ONLY();
	static ::jint& fFLAG_IS_GAME();
	static ::jint& fFLAG_KILL_AFTER_RESTORE();
	static ::jint& fFLAG_LARGE_HEAP();
	static ::jint& fFLAG_MULTIARCH();
	static ::jint& fFLAG_PERSISTENT();
	static ::jint& fFLAG_RESIZEABLE_FOR_SCREENS();
	static ::jint& fFLAG_RESTORE_ANY_VERSION();
	static ::jint& fFLAG_STOPPED();
	static ::jint& fFLAG_SUPPORTS_LARGE_SCREENS();
	static ::jint& fFLAG_SUPPORTS_NORMAL_SCREENS();
	static ::jint& fFLAG_SUPPORTS_RTL();
	static ::jint& fFLAG_SUPPORTS_SCREEN_DENSITIES();
	static ::jint& fFLAG_SUPPORTS_SMALL_SCREENS();
	static ::jint& fFLAG_SUPPORTS_XLARGE_SCREENS();
	static ::jint& fFLAG_SUSPENDED();
	static ::jint& fFLAG_SYSTEM();
	static ::jint& fFLAG_TEST_ONLY();
	static ::jint& fFLAG_UPDATED_SYSTEM_APP();
	static ::jint& fFLAG_USES_CLEARTEXT_TRAFFIC();
	static ::jint& fFLAG_VM_SAFE_MODE();
	static ::jint& fGWP_ASAN_ALWAYS();
	static ::jint& fGWP_ASAN_DEFAULT();
	static ::jint& fGWP_ASAN_NEVER();
	static ::jint& fMEMTAG_ASYNC();
	static ::jint& fMEMTAG_DEFAULT();
	static ::jint& fMEMTAG_OFF();
	static ::jint& fMEMTAG_SYNC();
	static ::jint& fRAW_EXTERNAL_STORAGE_ACCESS_DEFAULT();
	static ::jint& fRAW_EXTERNAL_STORAGE_ACCESS_NOT_REQUESTED();
	static ::jint& fRAW_EXTERNAL_STORAGE_ACCESS_REQUESTED();
	static ::jint& fZEROINIT_DEFAULT();
	static ::jint& fZEROINIT_DISABLED();
	static ::jint& fZEROINIT_ENABLED();
	::java::lang::String fAppComponentFactory() const;
	void fAppComponentFactory(const ::java::lang::String& arg0) const;
	::java::lang::String fBackupAgentName() const;
	void fBackupAgentName(const ::java::lang::String& arg0) const;
	::jint fCategory() const;
	void fCategory(const ::jint& arg0) const;
	::java::lang::String fClassName() const;
	void fClassName(const ::java::lang::String& arg0) const;
	::jint fCompatibleWidthLimitDp() const;
	void fCompatibleWidthLimitDp(const ::jint& arg0) const;
	::jint fCompileSdkVersion() const;
	void fCompileSdkVersion(const ::jint& arg0) const;
	::java::lang::String fCompileSdkVersionCodename() const;
	void fCompileSdkVersionCodename(const ::java::lang::String& arg0) const;
	::java::lang::String fDataDir() const;
	void fDataDir(const ::java::lang::String& arg0) const;
	::jint fDescriptionRes() const;
	void fDescriptionRes(const ::jint& arg0) const;
	::java::lang::String fDeviceProtectedDataDir() const;
	void fDeviceProtectedDataDir(const ::java::lang::String& arg0) const;
	::jboolean fEnabled() const;
	void fEnabled(const ::jboolean& arg0) const;
	::jint fFlags() const;
	void fFlags(const ::jint& arg0) const;
	::jint fLargestWidthLimitDp() const;
	void fLargestWidthLimitDp(const ::jint& arg0) const;
	::java::lang::String fManageSpaceActivityName() const;
	void fManageSpaceActivityName(const ::java::lang::String& arg0) const;
	::jint fMinSdkVersion() const;
	void fMinSdkVersion(const ::jint& arg0) const;
	::java::lang::String fNativeLibraryDir() const;
	void fNativeLibraryDir(const ::java::lang::String& arg0) const;
	::java::lang::String fPermission() const;
	void fPermission(const ::java::lang::String& arg0) const;
	::java::lang::String fProcessName() const;
	void fProcessName(const ::java::lang::String& arg0) const;
	::java::lang::String fPublicSourceDir() const;
	void fPublicSourceDir(const ::java::lang::String& arg0) const;
	::jint fRequiresSmallestWidthDp() const;
	void fRequiresSmallestWidthDp(const ::jint& arg0) const;
	jni::Array< ::java::lang::String > fSharedLibraryFiles() const;
	void fSharedLibraryFiles(const jni::Array< ::java::lang::String >& arg0) const;
	::java::lang::String fSourceDir() const;
	void fSourceDir(const ::java::lang::String& arg0) const;
	jni::Array< ::java::lang::String > fSplitNames() const;
	void fSplitNames(const jni::Array< ::java::lang::String >& arg0) const;
	jni::Array< ::java::lang::String > fSplitPublicSourceDirs() const;
	void fSplitPublicSourceDirs(const jni::Array< ::java::lang::String >& arg0) const;
	jni::Array< ::java::lang::String > fSplitSourceDirs() const;
	void fSplitSourceDirs(const jni::Array< ::java::lang::String >& arg0) const;
	::java::util::UUID fStorageUuid() const;
	void fStorageUuid(const ::java::util::UUID& arg0) const;
	::jint fTargetSdkVersion() const;
	void fTargetSdkVersion(const ::jint& arg0) const;
	::java::lang::String fTaskAffinity() const;
	void fTaskAffinity(const ::java::lang::String& arg0) const;
	::jint fTheme() const;
	void fTheme(const ::jint& arg0) const;
	::jint fUiOptions() const;
	void fUiOptions(const ::jint& arg0) const;
	::jint fUid() const;
	void fUid(const ::jint& arg0) const;
	::jboolean AreAttributionsUserVisible() const;
	::jint DescribeContents() const;
	::jvoid Dump(const ::android::util::Printer& arg0, const ::java::lang::String& arg1) const;
	static ::java::lang::CharSequence GetCategoryTitle(const ::android::content::Context& arg0, const ::jint& arg1);
	::jint GetGwpAsanMode() const;
	::jint GetMemtagMode() const;
	::jint GetNativeHeapZeroInitialized() const;
	::jint GetRequestRawExternalStorageAccess() const;
	::jboolean IsProfileable() const;
	::jboolean IsProfileableByShell() const;
	::jboolean IsResourceOverlay() const;
	::jboolean IsVirtualPreload() const;
	::java::lang::CharSequence LoadDescription(const ::android::content::pm::PackageManager& arg0) const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor();
	ApplicationInfo() : ::android::content::pm::PackageItemInfo(__Constructor()) {}
	explicit ApplicationInfo(jobject o) : ::android::content::pm::PackageItemInfo(o) {}
	ApplicationInfo(const ApplicationInfo& o)  : ::android::content::pm::PackageItemInfo(o) {}

};

}}}

namespace java { namespace util { 
struct UUID : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Serializable();
	operator ::java::lang::Comparable();
	::jint ClockSequence() const;
	::jint CompareTo(const ::java::util::UUID& arg0) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	static ::java::util::UUID FromString(const ::java::lang::String& arg0);
	::jlong GetLeastSignificantBits() const;
	::jlong GetMostSignificantBits() const;
	::jint HashCode() const;
	static ::java::util::UUID NameUUIDFromBytes(const jni::Array< ::jbyte >& arg0);
	::jlong Node() const;
	static ::java::util::UUID RandomUUID();
	::jlong Timestamp() const;
	::java::lang::String ToString() const;
	::jint Variant() const;
	::jint Version() const;
	static jobject __Constructor(const ::jlong& arg0, const ::jlong& arg1);
	UUID(const ::jlong& arg0, const ::jlong& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit UUID(jobject o) : ::java::lang::Object(o) {}
	UUID(const UUID& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace content { namespace pm { 
struct ChangedPackages : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::java::util::List GetPackageNames() const;
	::jint GetSequenceNumber() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor(const ::jint& arg0, const ::java::util::List& arg1);
	ChangedPackages(const ::jint& arg0, const ::java::util::List& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit ChangedPackages(jobject o) : ::java::lang::Object(o) {}
	ChangedPackages(const ChangedPackages& o)  : ::java::lang::Object(o) {}

};

struct InstallSourceInfo : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::java::lang::String GetInitiatingPackageName() const;
	::android::content::pm::SigningInfo GetInitiatingPackageSigningInfo() const;
	::java::lang::String GetInstallingPackageName() const;
	::java::lang::String GetOriginatingPackageName() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit InstallSourceInfo(jobject o) : ::java::lang::Object(o) {}
	InstallSourceInfo(const InstallSourceInfo& o)  : ::java::lang::Object(o) {}

};

struct SigningInfo : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	jni::Array< ::android::content::pm::Signature > GetApkContentsSigners() const;
	jni::Array< ::android::content::pm::Signature > GetSigningCertificateHistory() const;
	::jboolean HasMultipleSigners() const;
	::jboolean HasPastSigningCertificates() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor();
	SigningInfo() : ::java::lang::Object(__Constructor()) {}
	explicit SigningInfo(jobject o) : ::java::lang::Object(o) {}
	SigningInfo(const SigningInfo& o)  : ::java::lang::Object(o) {}

};

struct Signature : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint HashCode() const;
	jni::Array< ::jbyte > ToByteArray() const;
	jni::Array< ::jchar > ToChars() const;
	jni::Array< ::jchar > ToChars(const jni::Array< ::jchar >& arg0, const jni::Array< ::jint >& arg1) const;
	::java::lang::String ToCharsString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor(const ::java::lang::String& arg0);
	Signature(const ::java::lang::String& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const jni::Array< ::jbyte >& arg0);
	Signature(const jni::Array< ::jbyte >& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit Signature(jobject o) : ::java::lang::Object(o) {}
	Signature(const Signature& o)  : ::java::lang::Object(o) {}

};

struct InstrumentationInfo : ::android::content::pm::PackageItemInfo
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::java::lang::String fDataDir() const;
	void fDataDir(const ::java::lang::String& arg0) const;
	::jboolean fFunctionalTest() const;
	void fFunctionalTest(const ::jboolean& arg0) const;
	::jboolean fHandleProfiling() const;
	void fHandleProfiling(const ::jboolean& arg0) const;
	::java::lang::String fPublicSourceDir() const;
	void fPublicSourceDir(const ::java::lang::String& arg0) const;
	::java::lang::String fSourceDir() const;
	void fSourceDir(const ::java::lang::String& arg0) const;
	jni::Array< ::java::lang::String > fSplitNames() const;
	void fSplitNames(const jni::Array< ::java::lang::String >& arg0) const;
	jni::Array< ::java::lang::String > fSplitPublicSourceDirs() const;
	void fSplitPublicSourceDirs(const jni::Array< ::java::lang::String >& arg0) const;
	jni::Array< ::java::lang::String > fSplitSourceDirs() const;
	void fSplitSourceDirs(const jni::Array< ::java::lang::String >& arg0) const;
	::java::lang::String fTargetPackage() const;
	void fTargetPackage(const ::java::lang::String& arg0) const;
	::java::lang::String fTargetProcesses() const;
	void fTargetProcesses(const ::java::lang::String& arg0) const;
	::jint DescribeContents() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor();
	InstrumentationInfo() : ::android::content::pm::PackageItemInfo(__Constructor()) {}
	explicit InstrumentationInfo(jobject o) : ::android::content::pm::PackageItemInfo(o) {}
	InstrumentationInfo(const InstrumentationInfo& o)  : ::android::content::pm::PackageItemInfo(o) {}

};

struct ModuleInfo : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::lang::CharSequence GetName() const;
	::java::lang::String GetPackageName() const;
	::jint HashCode() const;
	::jboolean IsHidden() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit ModuleInfo(jobject o) : ::java::lang::Object(o) {}
	ModuleInfo(const ModuleInfo& o)  : ::java::lang::Object(o) {}

};

struct PackageInfo : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fINSTALL_LOCATION_AUTO();
	static ::jint& fINSTALL_LOCATION_INTERNAL_ONLY();
	static ::jint& fINSTALL_LOCATION_PREFER_EXTERNAL();
	static ::jint& fREQUESTED_PERMISSION_GRANTED();
	static ::jint& fREQUESTED_PERMISSION_NEVER_FOR_LOCATION();
	jni::Array< ::android::content::pm::ActivityInfo > fActivities() const;
	void fActivities(const jni::Array< ::android::content::pm::ActivityInfo >& arg0) const;
	::android::content::pm::ApplicationInfo fApplicationInfo() const;
	void fApplicationInfo(const ::android::content::pm::ApplicationInfo& arg0) const;
	jni::Array< ::android::content::pm::Attribution > fAttributions() const;
	void fAttributions(const jni::Array< ::android::content::pm::Attribution >& arg0) const;
	::jint fBaseRevisionCode() const;
	void fBaseRevisionCode(const ::jint& arg0) const;
	jni::Array< ::android::content::pm::ConfigurationInfo > fConfigPreferences() const;
	void fConfigPreferences(const jni::Array< ::android::content::pm::ConfigurationInfo >& arg0) const;
	jni::Array< ::android::content::pm::FeatureGroupInfo > fFeatureGroups() const;
	void fFeatureGroups(const jni::Array< ::android::content::pm::FeatureGroupInfo >& arg0) const;
	::jlong fFirstInstallTime() const;
	void fFirstInstallTime(const ::jlong& arg0) const;
	jni::Array< ::jint > fGids() const;
	void fGids(const jni::Array< ::jint >& arg0) const;
	::jint fInstallLocation() const;
	void fInstallLocation(const ::jint& arg0) const;
	jni::Array< ::android::content::pm::InstrumentationInfo > fInstrumentation() const;
	void fInstrumentation(const jni::Array< ::android::content::pm::InstrumentationInfo >& arg0) const;
	::jboolean fIsApex() const;
	void fIsApex(const ::jboolean& arg0) const;
	::jlong fLastUpdateTime() const;
	void fLastUpdateTime(const ::jlong& arg0) const;
	::java::lang::String fPackageName() const;
	void fPackageName(const ::java::lang::String& arg0) const;
	jni::Array< ::android::content::pm::PermissionInfo > fPermissions() const;
	void fPermissions(const jni::Array< ::android::content::pm::PermissionInfo >& arg0) const;
	jni::Array< ::android::content::pm::ProviderInfo > fProviders() const;
	void fProviders(const jni::Array< ::android::content::pm::ProviderInfo >& arg0) const;
	jni::Array< ::android::content::pm::ActivityInfo > fReceivers() const;
	void fReceivers(const jni::Array< ::android::content::pm::ActivityInfo >& arg0) const;
	jni::Array< ::android::content::pm::FeatureInfo > fReqFeatures() const;
	void fReqFeatures(const jni::Array< ::android::content::pm::FeatureInfo >& arg0) const;
	jni::Array< ::java::lang::String > fRequestedPermissions() const;
	void fRequestedPermissions(const jni::Array< ::java::lang::String >& arg0) const;
	jni::Array< ::jint > fRequestedPermissionsFlags() const;
	void fRequestedPermissionsFlags(const jni::Array< ::jint >& arg0) const;
	jni::Array< ::android::content::pm::ServiceInfo > fServices() const;
	void fServices(const jni::Array< ::android::content::pm::ServiceInfo >& arg0) const;
	::java::lang::String fSharedUserId() const;
	void fSharedUserId(const ::java::lang::String& arg0) const;
	::jint fSharedUserLabel() const;
	void fSharedUserLabel(const ::jint& arg0) const;
	jni::Array< ::android::content::pm::Signature > fSignatures() const;
	void fSignatures(const jni::Array< ::android::content::pm::Signature >& arg0) const;
	::android::content::pm::SigningInfo fSigningInfo() const;
	void fSigningInfo(const ::android::content::pm::SigningInfo& arg0) const;
	jni::Array< ::java::lang::String > fSplitNames() const;
	void fSplitNames(const jni::Array< ::java::lang::String >& arg0) const;
	jni::Array< ::jint > fSplitRevisionCodes() const;
	void fSplitRevisionCodes(const jni::Array< ::jint >& arg0) const;
	::jint fVersionCode() const;
	void fVersionCode(const ::jint& arg0) const;
	::java::lang::String fVersionName() const;
	void fVersionName(const ::java::lang::String& arg0) const;
	::jint DescribeContents() const;
	::jlong GetLongVersionCode() const;
	::jvoid SetLongVersionCode(const ::jlong& arg0) const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor();
	PackageInfo() : ::java::lang::Object(__Constructor()) {}
	explicit PackageInfo(jobject o) : ::java::lang::Object(o) {}
	PackageInfo(const PackageInfo& o)  : ::java::lang::Object(o) {}

};

struct Attribution : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::jint GetLabel() const;
	::java::lang::String GetTag() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit Attribution(jobject o) : ::java::lang::Object(o) {}
	Attribution(const Attribution& o)  : ::java::lang::Object(o) {}

};

struct ConfigurationInfo : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fGL_ES_VERSION_UNDEFINED();
	static ::jint& fINPUT_FEATURE_FIVE_WAY_NAV();
	static ::jint& fINPUT_FEATURE_HARD_KEYBOARD();
	::jint fReqGlEsVersion() const;
	void fReqGlEsVersion(const ::jint& arg0) const;
	::jint fReqInputFeatures() const;
	void fReqInputFeatures(const ::jint& arg0) const;
	::jint fReqKeyboardType() const;
	void fReqKeyboardType(const ::jint& arg0) const;
	::jint fReqNavigation() const;
	void fReqNavigation(const ::jint& arg0) const;
	::jint fReqTouchScreen() const;
	void fReqTouchScreen(const ::jint& arg0) const;
	::jint DescribeContents() const;
	::java::lang::String GetGlEsVersion() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor();
	ConfigurationInfo() : ::java::lang::Object(__Constructor()) {}
	explicit ConfigurationInfo(jobject o) : ::java::lang::Object(o) {}
	ConfigurationInfo(const ConfigurationInfo& o)  : ::java::lang::Object(o) {}

};

struct FeatureGroupInfo : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	jni::Array< ::android::content::pm::FeatureInfo > fFeatures() const;
	void fFeatures(const jni::Array< ::android::content::pm::FeatureInfo >& arg0) const;
	::jint DescribeContents() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor();
	FeatureGroupInfo() : ::java::lang::Object(__Constructor()) {}
	explicit FeatureGroupInfo(jobject o) : ::java::lang::Object(o) {}
	FeatureGroupInfo(const FeatureGroupInfo& o)  : ::java::lang::Object(o) {}

};

struct FeatureInfo : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fFLAG_REQUIRED();
	static ::jint& fGL_ES_VERSION_UNDEFINED();
	::jint fFlags() const;
	void fFlags(const ::jint& arg0) const;
	::java::lang::String fName() const;
	void fName(const ::java::lang::String& arg0) const;
	::jint fReqGlEsVersion() const;
	void fReqGlEsVersion(const ::jint& arg0) const;
	::jint fVersion() const;
	void fVersion(const ::jint& arg0) const;
	::jint DescribeContents() const;
	::java::lang::String GetGlEsVersion() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor();
	FeatureInfo() : ::java::lang::Object(__Constructor()) {}
	explicit FeatureInfo(jobject o) : ::java::lang::Object(o) {}
	FeatureInfo(const FeatureInfo& o)  : ::java::lang::Object(o) {}

};

struct ServiceInfo : ::android::content::pm::ComponentInfo
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fFLAG_EXTERNAL_SERVICE();
	static ::jint& fFLAG_ISOLATED_PROCESS();
	static ::jint& fFLAG_SINGLE_USER();
	static ::jint& fFLAG_STOP_WITH_TASK();
	static ::jint& fFLAG_USE_APP_ZYGOTE();
	static ::jint& fFOREGROUND_SERVICE_TYPE_CAMERA();
	static ::jint& fFOREGROUND_SERVICE_TYPE_CONNECTED_DEVICE();
	static ::jint& fFOREGROUND_SERVICE_TYPE_DATA_SYNC();
	static ::jint& fFOREGROUND_SERVICE_TYPE_LOCATION();
	static ::jint& fFOREGROUND_SERVICE_TYPE_MANIFEST();
	static ::jint& fFOREGROUND_SERVICE_TYPE_MEDIA_PLAYBACK();
	static ::jint& fFOREGROUND_SERVICE_TYPE_MEDIA_PROJECTION();
	static ::jint& fFOREGROUND_SERVICE_TYPE_MICROPHONE();
	static ::jint& fFOREGROUND_SERVICE_TYPE_NONE();
	static ::jint& fFOREGROUND_SERVICE_TYPE_PHONE_CALL();
	::jint fFlags() const;
	void fFlags(const ::jint& arg0) const;
	::java::lang::String fPermission() const;
	void fPermission(const ::java::lang::String& arg0) const;
	::jint DescribeContents() const;
	::jvoid Dump(const ::android::util::Printer& arg0, const ::java::lang::String& arg1) const;
	::jint GetForegroundServiceType() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor();
	ServiceInfo() : ::android::content::pm::ComponentInfo(__Constructor()) {}
	explicit ServiceInfo(jobject o) : ::android::content::pm::ComponentInfo(o) {}
	ServiceInfo(const ServiceInfo& o)  : ::android::content::pm::ComponentInfo(o) {}

};

struct VersionedPackage : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jlong GetLongVersionCode() const;
	::java::lang::String GetPackageName() const;
	::jint GetVersionCode() const;
	::jint HashCode() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor(const ::java::lang::String& arg0, const ::jint& arg1);
	VersionedPackage(const ::java::lang::String& arg0, const ::jint& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::jlong& arg1);
	VersionedPackage(const ::java::lang::String& arg0, const ::jlong& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit VersionedPackage(jobject o) : ::java::lang::Object(o) {}
	VersionedPackage(const VersionedPackage& o)  : ::java::lang::Object(o) {}

};

struct PackageInstaller : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::java::lang::String& fACTION_SESSION_COMMITTED();
	static ::java::lang::String& fACTION_SESSION_DETAILS();
	static ::java::lang::String& fACTION_SESSION_UPDATED();
	static ::java::lang::String& fEXTRA_OTHER_PACKAGE_NAME();
	static ::java::lang::String& fEXTRA_PACKAGE_NAME();
	static ::java::lang::String& fEXTRA_SESSION();
	static ::java::lang::String& fEXTRA_SESSION_ID();
	static ::java::lang::String& fEXTRA_STATUS();
	static ::java::lang::String& fEXTRA_STATUS_MESSAGE();
	static ::java::lang::String& fEXTRA_STORAGE_PATH();
	static ::jint& fSTATUS_FAILURE();
	static ::jint& fSTATUS_FAILURE_ABORTED();
	static ::jint& fSTATUS_FAILURE_BLOCKED();
	static ::jint& fSTATUS_FAILURE_CONFLICT();
	static ::jint& fSTATUS_FAILURE_INCOMPATIBLE();
	static ::jint& fSTATUS_FAILURE_INVALID();
	static ::jint& fSTATUS_FAILURE_STORAGE();
	static ::jint& fSTATUS_PENDING_USER_ACTION();
	static ::jint& fSTATUS_SUCCESS();
	::jvoid AbandonSession(const ::jint& arg0) const;
	::jint CreateSession(const ::android::content::pm::PackageInstaller_SessionParams& arg0) const;
	::android::content::pm::PackageInstaller_SessionInfo GetActiveStagedSession() const;
	::java::util::List GetActiveStagedSessions() const;
	::java::util::List GetAllSessions() const;
	::java::util::List GetMySessions() const;
	::android::content::pm::PackageInstaller_SessionInfo GetSessionInfo(const ::jint& arg0) const;
	::java::util::List GetStagedSessions() const;
	::jvoid InstallExistingPackage(const ::java::lang::String& arg0, const ::jint& arg1, const ::android::content::IntentSender& arg2) const;
	::android::content::pm::PackageInstaller_Session OpenSession(const ::jint& arg0) const;
	::jvoid RegisterSessionCallback(const ::android::content::pm::PackageInstaller_SessionCallback& arg0) const;
	::jvoid RegisterSessionCallback(const ::android::content::pm::PackageInstaller_SessionCallback& arg0, const ::android::os::Handler& arg1) const;
	::jvoid Uninstall(const ::android::content::pm::VersionedPackage& arg0, const ::android::content::IntentSender& arg1) const;
	::jvoid Uninstall(const ::java::lang::String& arg0, const ::android::content::IntentSender& arg1) const;
	::jvoid UninstallExistingPackage(const ::java::lang::String& arg0, const ::android::content::IntentSender& arg1) const;
	::jvoid UnregisterSessionCallback(const ::android::content::pm::PackageInstaller_SessionCallback& arg0) const;
	::jvoid UpdateSessionAppIcon(const ::jint& arg0, const ::android::graphics::Bitmap& arg1) const;
	::jvoid UpdateSessionAppLabel(const ::jint& arg0, const ::java::lang::CharSequence& arg1) const;
	explicit PackageInstaller(jobject o) : ::java::lang::Object(o) {}
	PackageInstaller(const PackageInstaller& o)  : ::java::lang::Object(o) {}

};

struct PackageInstaller_SessionParams : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fMODE_FULL_INSTALL();
	static ::jint& fMODE_INHERIT_EXISTING();
	static ::java::util::Set& fRESTRICTED_PERMISSIONS_ALL();
	static ::jint& fUSER_ACTION_NOT_REQUIRED();
	static ::jint& fUSER_ACTION_REQUIRED();
	static ::jint& fUSER_ACTION_UNSPECIFIED();
	::jint DescribeContents() const;
	::jvoid SetAppIcon(const ::android::graphics::Bitmap& arg0) const;
	::jvoid SetAppLabel(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetAppPackageName(const ::java::lang::String& arg0) const;
	::jvoid SetAutoRevokePermissionsMode(const ::jboolean& arg0) const;
	::jvoid SetInstallLocation(const ::jint& arg0) const;
	::jvoid SetInstallReason(const ::jint& arg0) const;
	::jvoid SetInstallScenario(const ::jint& arg0) const;
	::jvoid SetMultiPackage() const;
	::jvoid SetOriginatingUid(const ::jint& arg0) const;
	::jvoid SetOriginatingUri(const ::android::net::Uri& arg0) const;
	::jvoid SetReferrerUri(const ::android::net::Uri& arg0) const;
	::jvoid SetRequireUserAction(const ::jint& arg0) const;
	::jvoid SetSize(const ::jlong& arg0) const;
	::jvoid SetWhitelistedRestrictedPermissions(const ::java::util::Set& arg0) const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor(const ::jint& arg0);
	PackageInstaller_SessionParams(const ::jint& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit PackageInstaller_SessionParams(jobject o) : ::java::lang::Object(o) {}
	PackageInstaller_SessionParams(const PackageInstaller_SessionParams& o)  : ::java::lang::Object(o) {}

};

struct PackageInstaller_SessionInfo : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fINVALID_ID();
	static ::jint& fSTAGED_SESSION_ACTIVATION_FAILED();
	static ::jint& fSTAGED_SESSION_CONFLICT();
	static ::jint& fSTAGED_SESSION_NO_ERROR();
	static ::jint& fSTAGED_SESSION_UNKNOWN();
	static ::jint& fSTAGED_SESSION_VERIFICATION_FAILED();
	::android::content::Intent CreateDetailsIntent() const;
	::jint DescribeContents() const;
	::android::graphics::Bitmap GetAppIcon() const;
	::java::lang::CharSequence GetAppLabel() const;
	::java::lang::String GetAppPackageName() const;
	jni::Array< ::jint > GetChildSessionIds() const;
	::jlong GetCreatedMillis() const;
	::jint GetInstallLocation() const;
	::jint GetInstallReason() const;
	::java::lang::String GetInstallerAttributionTag() const;
	::java::lang::String GetInstallerPackageName() const;
	::jint GetMode() const;
	::jint GetOriginatingUid() const;
	::android::net::Uri GetOriginatingUri() const;
	::jint GetParentSessionId() const;
	::jfloat GetProgress() const;
	::android::net::Uri GetReferrerUri() const;
	::jint GetRequireUserAction() const;
	::jint GetSessionId() const;
	::jlong GetSize() const;
	::jint GetStagedSessionErrorCode() const;
	::java::lang::String GetStagedSessionErrorMessage() const;
	::jlong GetUpdatedMillis() const;
	::android::os::UserHandle GetUser() const;
	::jboolean HasParentSessionId() const;
	::jboolean IsActive() const;
	::jboolean IsCommitted() const;
	::jboolean IsMultiPackage() const;
	::jboolean IsSealed() const;
	::jboolean IsStaged() const;
	::jboolean IsStagedSessionActive() const;
	::jboolean IsStagedSessionApplied() const;
	::jboolean IsStagedSessionFailed() const;
	::jboolean IsStagedSessionReady() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit PackageInstaller_SessionInfo(jobject o) : ::java::lang::Object(o) {}
	PackageInstaller_SessionInfo(const PackageInstaller_SessionInfo& o)  : ::java::lang::Object(o) {}

};

struct PackageInstaller_Session : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Closeable();
	::jvoid Abandon() const;
	::jvoid AddChildSessionId(const ::jint& arg0) const;
	::jvoid Close() const;
	::jvoid Commit(const ::android::content::IntentSender& arg0) const;
	::jvoid Fsync(const ::java::io::OutputStream& arg0) const;
	jni::Array< ::jint > GetChildSessionIds() const;
	jni::Array< ::java::lang::String > GetNames() const;
	::jint GetParentSessionId() const;
	::jboolean IsMultiPackage() const;
	::jboolean IsStaged() const;
	::java::io::InputStream OpenRead(const ::java::lang::String& arg0) const;
	::java::io::OutputStream OpenWrite(const ::java::lang::String& arg0, const ::jlong& arg1, const ::jlong& arg2) const;
	::jvoid RemoveChildSessionId(const ::jint& arg0) const;
	::jvoid RemoveSplit(const ::java::lang::String& arg0) const;
	::jvoid SetChecksums(const ::java::lang::String& arg0, const ::java::util::List& arg1, const jni::Array< ::jbyte >& arg2) const;
	::jvoid SetStagingProgress(const ::jfloat& arg0) const;
	::jvoid Transfer(const ::java::lang::String& arg0) const;
	explicit PackageInstaller_Session(jobject o) : ::java::lang::Object(o) {}
	PackageInstaller_Session(const PackageInstaller_Session& o)  : ::java::lang::Object(o) {}

};

struct PackageInstaller_SessionCallback : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnActiveChanged(const ::jint& arg0, const ::jboolean& arg1) const;
	::jvoid OnBadgingChanged(const ::jint& arg0) const;
	::jvoid OnCreated(const ::jint& arg0) const;
	::jvoid OnFinished(const ::jint& arg0, const ::jboolean& arg1) const;
	::jvoid OnProgressChanged(const ::jint& arg0, const ::jfloat& arg1) const;
	static jobject __Constructor();
	PackageInstaller_SessionCallback() : ::java::lang::Object(__Constructor()) {}
	explicit PackageInstaller_SessionCallback(jobject o) : ::java::lang::Object(o) {}
	PackageInstaller_SessionCallback(const PackageInstaller_SessionCallback& o)  : ::java::lang::Object(o) {}

};

struct PermissionGroupInfo : ::android::content::pm::PackageItemInfo
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fFLAG_PERSONAL_INFO();
	::jint fDescriptionRes() const;
	void fDescriptionRes(const ::jint& arg0) const;
	::jint fFlags() const;
	void fFlags(const ::jint& arg0) const;
	::java::lang::CharSequence fNonLocalizedDescription() const;
	void fNonLocalizedDescription(const ::java::lang::CharSequence& arg0) const;
	::jint fPriority() const;
	void fPriority(const ::jint& arg0) const;
	::jint DescribeContents() const;
	::java::lang::CharSequence LoadDescription(const ::android::content::pm::PackageManager& arg0) const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor();
	PermissionGroupInfo() : ::android::content::pm::PackageItemInfo(__Constructor()) {}
	explicit PermissionGroupInfo(jobject o) : ::android::content::pm::PackageItemInfo(o) {}
	PermissionGroupInfo(const PermissionGroupInfo& o)  : ::android::content::pm::PackageItemInfo(o) {}

};

struct PackageManager_Property : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::jboolean GetBoolean() const;
	::java::lang::String GetClassName() const;
	::jfloat GetFloat() const;
	::jint GetInteger() const;
	::java::lang::String GetName() const;
	::java::lang::String GetPackageName() const;
	::jint GetResourceId() const;
	::java::lang::String GetString() const;
	::jboolean IsBoolean() const;
	::jboolean IsFloat() const;
	::jboolean IsInteger() const;
	::jboolean IsResourceId() const;
	::jboolean IsString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit PackageManager_Property(jobject o) : ::java::lang::Object(o) {}
	PackageManager_Property(const PackageManager_Property& o)  : ::java::lang::Object(o) {}

};

struct PackageManager_OnChecksumsReadyListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnChecksumsReady(const ::java::util::List& arg0) const;
	explicit PackageManager_OnChecksumsReadyListener(jobject o) : java::lang::Object(o) {}
	PackageManager_OnChecksumsReadyListener(const PackageManager_OnChecksumsReadyListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::content::pm::PackageManager_OnChecksumsReadyListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnChecksumsReady(const ::java::util::List& arg0) = 0;
	};
};

struct ResolveInfo : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::android::content::pm::ActivityInfo fActivityInfo() const;
	void fActivityInfo(const ::android::content::pm::ActivityInfo& arg0) const;
	::android::content::IntentFilter fFilter() const;
	void fFilter(const ::android::content::IntentFilter& arg0) const;
	::jint fIcon() const;
	void fIcon(const ::jint& arg0) const;
	::jboolean fIsDefault() const;
	void fIsDefault(const ::jboolean& arg0) const;
	::jboolean fIsInstantAppAvailable() const;
	void fIsInstantAppAvailable(const ::jboolean& arg0) const;
	::jint fLabelRes() const;
	void fLabelRes(const ::jint& arg0) const;
	::jint fMatch() const;
	void fMatch(const ::jint& arg0) const;
	::java::lang::CharSequence fNonLocalizedLabel() const;
	void fNonLocalizedLabel(const ::java::lang::CharSequence& arg0) const;
	::jint fPreferredOrder() const;
	void fPreferredOrder(const ::jint& arg0) const;
	::jint fPriority() const;
	void fPriority(const ::jint& arg0) const;
	::android::content::pm::ProviderInfo fProviderInfo() const;
	void fProviderInfo(const ::android::content::pm::ProviderInfo& arg0) const;
	::java::lang::String fResolvePackageName() const;
	void fResolvePackageName(const ::java::lang::String& arg0) const;
	::android::content::pm::ServiceInfo fServiceInfo() const;
	void fServiceInfo(const ::android::content::pm::ServiceInfo& arg0) const;
	::jint fSpecificIndex() const;
	void fSpecificIndex(const ::jint& arg0) const;
	::jint DescribeContents() const;
	::jvoid Dump(const ::android::util::Printer& arg0, const ::java::lang::String& arg1) const;
	::jint GetIconResource() const;
	::jboolean IsCrossProfileIntentForwarderActivity() const;
	::android::graphics::drawable::Drawable LoadIcon(const ::android::content::pm::PackageManager& arg0) const;
	::java::lang::CharSequence LoadLabel(const ::android::content::pm::PackageManager& arg0) const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor();
	ResolveInfo() : ::java::lang::Object(__Constructor()) {}
	explicit ResolveInfo(jobject o) : ::java::lang::Object(o) {}
	ResolveInfo(const ResolveInfo& o)  : ::java::lang::Object(o) {}

};

struct PathPermission : ::android::os::PatternMatcher
{
	static jni::Class __CLASS;

	static ::android::os::Parcelable_Creator& fCREATOR();
	::java::lang::String GetReadPermission() const;
	::java::lang::String GetWritePermission() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor(const ::android::os::Parcel& arg0);
	PathPermission(const ::android::os::Parcel& arg0) : ::android::os::PatternMatcher(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::jint& arg1, const ::java::lang::String& arg2, const ::java::lang::String& arg3);
	PathPermission(const ::java::lang::String& arg0, const ::jint& arg1, const ::java::lang::String& arg2, const ::java::lang::String& arg3) : ::android::os::PatternMatcher(__Constructor(arg0, arg1, arg2, arg3)) {}
	explicit PathPermission(jobject o) : ::android::os::PatternMatcher(o) {}
	PathPermission(const PathPermission& o)  : ::android::os::PatternMatcher(o) {}

};

}}}

namespace android { namespace content { 
struct ContentProvider_CallingIdentity : ::java::lang::Object
{
	static jni::Class __CLASS;

	explicit ContentProvider_CallingIdentity(jobject o) : ::java::lang::Object(o) {}
	ContentProvider_CallingIdentity(const ContentProvider_CallingIdentity& o)  : ::java::lang::Object(o) {}

};

struct AttributionSource : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jboolean CheckCallingUid() const;
	::jint DescribeContents() const;
	::jvoid EnforceCallingUid() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::lang::String GetAttributionTag() const;
	::android::content::AttributionSource GetNext() const;
	::java::lang::String GetPackageName() const;
	::jint GetUid() const;
	::jint HashCode() const;
	::jboolean IsTrusted(const ::android::content::Context& arg0) const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit AttributionSource(jobject o) : ::java::lang::Object(o) {}
	AttributionSource(const AttributionSource& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace os { 
struct CancellationSignal : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid Cancel() const;
	::jboolean IsCanceled() const;
	::jvoid SetOnCancelListener(const ::android::os::CancellationSignal_OnCancelListener& arg0) const;
	::jvoid ThrowIfCanceled() const;
	static jobject __Constructor();
	CancellationSignal() : ::java::lang::Object(__Constructor()) {}
	explicit CancellationSignal(jobject o) : ::java::lang::Object(o) {}
	CancellationSignal(const CancellationSignal& o)  : ::java::lang::Object(o) {}

};

struct CancellationSignal_OnCancelListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnCancel() const;
	explicit CancellationSignal_OnCancelListener(jobject o) : java::lang::Object(o) {}
	CancellationSignal_OnCancelListener(const CancellationSignal_OnCancelListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::os::CancellationSignal_OnCancelListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnCancel() = 0;
	};
};

}}

namespace android { namespace content { 
struct ContentProvider_PipeDataWriter : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid WriteDataToPipe(const ::android::os::ParcelFileDescriptor& arg0, const ::android::net::Uri& arg1, const ::java::lang::String& arg2, const ::android::os::Bundle& arg3, const ::java::lang::Object& arg4) const;
	explicit ContentProvider_PipeDataWriter(jobject o) : java::lang::Object(o) {}
	ContentProvider_PipeDataWriter(const ContentProvider_PipeDataWriter& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::content::ContentProvider_PipeDataWriter();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void WriteDataToPipe(const ::android::os::ParcelFileDescriptor& arg0, const ::android::net::Uri& arg1, const ::java::lang::String& arg2, const ::android::os::Bundle& arg3, const ::java::lang::Object& arg4) = 0;
	};
};

}}

namespace android { namespace database { 
struct Cursor : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Closeable();
	static ::jint& fFIELD_TYPE_BLOB();
	static ::jint& fFIELD_TYPE_FLOAT();
	static ::jint& fFIELD_TYPE_INTEGER();
	static ::jint& fFIELD_TYPE_NULL();
	static ::jint& fFIELD_TYPE_STRING();
	::jvoid Close() const;
	::jvoid CopyStringToBuffer(const ::jint& arg0, const ::android::database::CharArrayBuffer& arg1) const;
	::jvoid Deactivate() const;
	jni::Array< ::jbyte > GetBlob(const ::jint& arg0) const;
	::jint GetColumnCount() const;
	::jint GetColumnIndex(const ::java::lang::String& arg0) const;
	::jint GetColumnIndexOrThrow(const ::java::lang::String& arg0) const;
	::java::lang::String GetColumnName(const ::jint& arg0) const;
	jni::Array< ::java::lang::String > GetColumnNames() const;
	::jint GetCount() const;
	::jdouble GetDouble(const ::jint& arg0) const;
	::android::os::Bundle GetExtras() const;
	::jfloat GetFloat(const ::jint& arg0) const;
	::jint GetInt(const ::jint& arg0) const;
	::jlong GetLong(const ::jint& arg0) const;
	::android::net::Uri GetNotificationUri() const;
	::java::util::List GetNotificationUris() const;
	::jint GetPosition() const;
	::jshort GetShort(const ::jint& arg0) const;
	::java::lang::String GetString(const ::jint& arg0) const;
	::jint GetType(const ::jint& arg0) const;
	::jboolean GetWantsAllOnMoveCalls() const;
	::jboolean IsAfterLast() const;
	::jboolean IsBeforeFirst() const;
	::jboolean IsClosed() const;
	::jboolean IsFirst() const;
	::jboolean IsLast() const;
	::jboolean IsNull(const ::jint& arg0) const;
	::jboolean Move(const ::jint& arg0) const;
	::jboolean MoveToFirst() const;
	::jboolean MoveToLast() const;
	::jboolean MoveToNext() const;
	::jboolean MoveToPosition(const ::jint& arg0) const;
	::jboolean MoveToPrevious() const;
	::jvoid RegisterContentObserver(const ::android::database::ContentObserver& arg0) const;
	::jvoid RegisterDataSetObserver(const ::android::database::DataSetObserver& arg0) const;
	::jboolean Requery() const;
	::android::os::Bundle Respond(const ::android::os::Bundle& arg0) const;
	::jvoid SetExtras(const ::android::os::Bundle& arg0) const;
	::jvoid SetNotificationUri(const ::android::content::ContentResolver& arg0, const ::android::net::Uri& arg1) const;
	::jvoid SetNotificationUris(const ::android::content::ContentResolver& arg0, const ::java::util::List& arg1) const;
	::jvoid UnregisterContentObserver(const ::android::database::ContentObserver& arg0) const;
	::jvoid UnregisterDataSetObserver(const ::android::database::DataSetObserver& arg0) const;
	explicit Cursor(jobject o) : java::lang::Object(o) {}
	Cursor(const Cursor& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::database::Cursor();
		operator ::java::io::Closeable();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void Close() = 0;
		virtual void CopyStringToBuffer(const ::jint& arg0, const ::android::database::CharArrayBuffer& arg1) = 0;
		virtual void Deactivate() = 0;
		virtual jni::Array< ::jbyte > GetBlob(const ::jint& arg0) = 0;
		virtual ::jint GetColumnCount() = 0;
		virtual ::jint GetColumnIndex(const ::java::lang::String& arg0) = 0;
		virtual ::jint GetColumnIndexOrThrow(const ::java::lang::String& arg0) = 0;
		virtual ::java::lang::String GetColumnName(const ::jint& arg0) = 0;
		virtual jni::Array< ::java::lang::String > GetColumnNames() = 0;
		virtual ::jint GetCount() = 0;
		virtual ::jdouble GetDouble(const ::jint& arg0) = 0;
		virtual ::android::os::Bundle GetExtras() = 0;
		virtual ::jfloat GetFloat(const ::jint& arg0) = 0;
		virtual ::jint GetInt(const ::jint& arg0) = 0;
		virtual ::jlong GetLong(const ::jint& arg0) = 0;
		virtual ::android::net::Uri GetNotificationUri() = 0;
		virtual ::java::util::List GetNotificationUris() = 0;
		virtual ::jint GetPosition() = 0;
		virtual ::jshort GetShort(const ::jint& arg0) = 0;
		virtual ::java::lang::String GetString(const ::jint& arg0) = 0;
		virtual ::jint GetType(const ::jint& arg0) = 0;
		virtual ::jboolean GetWantsAllOnMoveCalls() = 0;
		virtual ::jboolean IsAfterLast() = 0;
		virtual ::jboolean IsBeforeFirst() = 0;
		virtual ::jboolean IsClosed() = 0;
		virtual ::jboolean IsFirst() = 0;
		virtual ::jboolean IsLast() = 0;
		virtual ::jboolean IsNull(const ::jint& arg0) = 0;
		virtual ::jboolean Move(const ::jint& arg0) = 0;
		virtual ::jboolean MoveToFirst() = 0;
		virtual ::jboolean MoveToLast() = 0;
		virtual ::jboolean MoveToNext() = 0;
		virtual ::jboolean MoveToPosition(const ::jint& arg0) = 0;
		virtual ::jboolean MoveToPrevious() = 0;
		virtual void RegisterContentObserver(const ::android::database::ContentObserver& arg0) = 0;
		virtual void RegisterDataSetObserver(const ::android::database::DataSetObserver& arg0) = 0;
		virtual ::jboolean Requery() = 0;
		virtual ::android::os::Bundle Respond(const ::android::os::Bundle& arg0) = 0;
		virtual void SetExtras(const ::android::os::Bundle& arg0) = 0;
		virtual void SetNotificationUri(const ::android::content::ContentResolver& arg0, const ::android::net::Uri& arg1) = 0;
		virtual void SetNotificationUris(const ::android::content::ContentResolver& arg0, const ::java::util::List& arg1) = 0;
		virtual void UnregisterContentObserver(const ::android::database::ContentObserver& arg0) = 0;
		virtual void UnregisterDataSetObserver(const ::android::database::DataSetObserver& arg0) = 0;
	};
};

struct CharArrayBuffer : ::java::lang::Object
{
	static jni::Class __CLASS;

	jni::Array< ::jchar > fData() const;
	void fData(const jni::Array< ::jchar >& arg0) const;
	::jint fSizeCopied() const;
	void fSizeCopied(const ::jint& arg0) const;
	static jobject __Constructor(const ::jint& arg0);
	CharArrayBuffer(const ::jint& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const jni::Array< ::jchar >& arg0);
	CharArrayBuffer(const jni::Array< ::jchar >& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit CharArrayBuffer(jobject o) : ::java::lang::Object(o) {}
	CharArrayBuffer(const CharArrayBuffer& o)  : ::java::lang::Object(o) {}

};

struct ContentObserver : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean DeliverSelfNotifications() const;
	::jvoid DispatchChange(const ::jboolean& arg0) const;
	::jvoid DispatchChange(const ::jboolean& arg0, const ::android::net::Uri& arg1) const;
	::jvoid DispatchChange(const ::jboolean& arg0, const ::android::net::Uri& arg1, const ::jint& arg2) const;
	::jvoid DispatchChange(const ::jboolean& arg0, const ::java::util::Collection& arg1, const ::jint& arg2) const;
	::jvoid OnChange(const ::jboolean& arg0) const;
	::jvoid OnChange(const ::jboolean& arg0, const ::android::net::Uri& arg1) const;
	::jvoid OnChange(const ::jboolean& arg0, const ::android::net::Uri& arg1, const ::jint& arg2) const;
	::jvoid OnChange(const ::jboolean& arg0, const ::java::util::Collection& arg1, const ::jint& arg2) const;
	static jobject __Constructor(const ::android::os::Handler& arg0);
	ContentObserver(const ::android::os::Handler& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit ContentObserver(jobject o) : ::java::lang::Object(o) {}
	ContentObserver(const ContentObserver& o)  : ::java::lang::Object(o) {}

};

struct DataSetObserver : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnChanged() const;
	::jvoid OnInvalidated() const;
	static jobject __Constructor();
	DataSetObserver() : ::java::lang::Object(__Constructor()) {}
	explicit DataSetObserver(jobject o) : ::java::lang::Object(o) {}
	DataSetObserver(const DataSetObserver& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace accounts { 
struct Account : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::java::lang::String fName() const;
	::java::lang::String fType() const;
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint HashCode() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor(const ::android::os::Parcel& arg0);
	Account(const ::android::os::Parcel& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::java::lang::String& arg1);
	Account(const ::java::lang::String& arg0, const ::java::lang::String& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit Account(jobject o) : ::java::lang::Object(o) {}
	Account(const Account& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace content { 
struct SyncStatusObserver : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnStatusChanged(const ::jint& arg0) const;
	explicit SyncStatusObserver(jobject o) : java::lang::Object(o) {}
	SyncStatusObserver(const SyncStatusObserver& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::content::SyncStatusObserver();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnStatusChanged(const ::jint& arg0) = 0;
	};
};

struct SyncRequest : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit SyncRequest(jobject o) : ::java::lang::Object(o) {}
	SyncRequest(const SyncRequest& o)  : ::java::lang::Object(o) {}

};

struct SyncInfo : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	::android::accounts::Account fAccount() const;
	::java::lang::String fAuthority() const;
	::jlong fStartTime() const;
	::jint DescribeContents() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit SyncInfo(jobject o) : ::java::lang::Object(o) {}
	SyncInfo(const SyncInfo& o)  : ::java::lang::Object(o) {}

};

struct SyncAdapterType : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::java::lang::String fAccountType() const;
	::java::lang::String fAuthority() const;
	::jboolean fIsKey() const;
	::jboolean AllowParallelSyncs() const;
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::lang::String GetSettingsActivity() const;
	::jint HashCode() const;
	::jboolean IsAlwaysSyncable() const;
	::jboolean IsUserVisible() const;
	static ::android::content::SyncAdapterType NewKey(const ::java::lang::String& arg0, const ::java::lang::String& arg1);
	::jboolean SupportsUploading() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor(const ::android::os::Parcel& arg0);
	SyncAdapterType(const ::android::os::Parcel& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::jboolean& arg2, const ::jboolean& arg3);
	SyncAdapterType(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::jboolean& arg2, const ::jboolean& arg3) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3)) {}
	explicit SyncAdapterType(jobject o) : ::java::lang::Object(o) {}
	SyncAdapterType(const SyncAdapterType& o)  : ::java::lang::Object(o) {}

};

struct ContentResolver_MimeTypeInfo : ::java::lang::Object
{
	static jni::Class __CLASS;

	::java::lang::CharSequence GetContentDescription() const;
	::android::graphics::drawable::Icon GetIcon() const;
	::java::lang::CharSequence GetLabel() const;
	explicit ContentResolver_MimeTypeInfo(jobject o) : ::java::lang::Object(o) {}
	ContentResolver_MimeTypeInfo(const ContentResolver_MimeTypeInfo& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace graphics { namespace drawable { 
struct Icon : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fTYPE_ADAPTIVE_BITMAP();
	static ::jint& fTYPE_BITMAP();
	static ::jint& fTYPE_DATA();
	static ::jint& fTYPE_RESOURCE();
	static ::jint& fTYPE_URI();
	static ::jint& fTYPE_URI_ADAPTIVE_BITMAP();
	static ::android::graphics::drawable::Icon CreateWithAdaptiveBitmap(const ::android::graphics::Bitmap& arg0);
	static ::android::graphics::drawable::Icon CreateWithAdaptiveBitmapContentUri(const ::android::net::Uri& arg0);
	static ::android::graphics::drawable::Icon CreateWithAdaptiveBitmapContentUri(const ::java::lang::String& arg0);
	static ::android::graphics::drawable::Icon CreateWithBitmap(const ::android::graphics::Bitmap& arg0);
	static ::android::graphics::drawable::Icon CreateWithContentUri(const ::android::net::Uri& arg0);
	static ::android::graphics::drawable::Icon CreateWithContentUri(const ::java::lang::String& arg0);
	static ::android::graphics::drawable::Icon CreateWithData(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::jint& arg2);
	static ::android::graphics::drawable::Icon CreateWithFilePath(const ::java::lang::String& arg0);
	static ::android::graphics::drawable::Icon CreateWithResource(const ::android::content::Context& arg0, const ::jint& arg1);
	static ::android::graphics::drawable::Icon CreateWithResource(const ::java::lang::String& arg0, const ::jint& arg1);
	::jint DescribeContents() const;
	::jint GetResId() const;
	::java::lang::String GetResPackage() const;
	::jint GetType() const;
	::android::net::Uri GetUri() const;
	::android::graphics::drawable::Drawable LoadDrawable(const ::android::content::Context& arg0) const;
	::jvoid LoadDrawableAsync(const ::android::content::Context& arg0, const ::android::graphics::drawable::Icon_OnDrawableLoadedListener& arg1, const ::android::os::Handler& arg2) const;
	::jvoid LoadDrawableAsync(const ::android::content::Context& arg0, const ::android::os::Message& arg1) const;
	::android::graphics::drawable::Icon SetTint(const ::jint& arg0) const;
	::android::graphics::drawable::Icon SetTintBlendMode(const ::android::graphics::BlendMode& arg0) const;
	::android::graphics::drawable::Icon SetTintList(const ::android::content::res::ColorStateList& arg0) const;
	::android::graphics::drawable::Icon SetTintMode(const ::android::graphics::PorterDuff_Mode& arg0) const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit Icon(jobject o) : ::java::lang::Object(o) {}
	Icon(const Icon& o)  : ::java::lang::Object(o) {}

};

struct Icon_OnDrawableLoadedListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnDrawableLoaded(const ::android::graphics::drawable::Drawable& arg0) const;
	explicit Icon_OnDrawableLoadedListener(jobject o) : java::lang::Object(o) {}
	Icon_OnDrawableLoadedListener(const Icon_OnDrawableLoadedListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::graphics::drawable::Icon_OnDrawableLoadedListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnDrawableLoaded(const ::android::graphics::drawable::Drawable& arg0) = 0;
	};
};

}}}

namespace android { namespace content { 
struct ClipDescription : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::jint& fCLASSIFICATION_COMPLETE();
	static ::jint& fCLASSIFICATION_NOT_COMPLETE();
	static ::jint& fCLASSIFICATION_NOT_PERFORMED();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::java::lang::String& fMIMETYPE_TEXT_HTML();
	static ::java::lang::String& fMIMETYPE_TEXT_INTENT();
	static ::java::lang::String& fMIMETYPE_TEXT_PLAIN();
	static ::java::lang::String& fMIMETYPE_TEXT_URILIST();
	static ::java::lang::String& fMIMETYPE_UNKNOWN();
	static ::jboolean CompareMimeTypes(const ::java::lang::String& arg0, const ::java::lang::String& arg1);
	::jint DescribeContents() const;
	jni::Array< ::java::lang::String > FilterMimeTypes(const ::java::lang::String& arg0) const;
	::jint GetClassificationStatus() const;
	::jfloat GetConfidenceScore(const ::java::lang::String& arg0) const;
	::android::os::PersistableBundle GetExtras() const;
	::java::lang::CharSequence GetLabel() const;
	::java::lang::String GetMimeType(const ::jint& arg0) const;
	::jint GetMimeTypeCount() const;
	::jlong GetTimestamp() const;
	::jboolean HasMimeType(const ::java::lang::String& arg0) const;
	::jboolean IsStyledText() const;
	::jvoid SetExtras(const ::android::os::PersistableBundle& arg0) const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor(const ::java::lang::CharSequence& arg0, const jni::Array< ::java::lang::String >& arg1);
	ClipDescription(const ::java::lang::CharSequence& arg0, const jni::Array< ::java::lang::String >& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit ClipDescription(jobject o) : ::java::lang::Object(o) {}
	ClipDescription(const ClipDescription& o)  : ::java::lang::Object(o) {}

};

struct ServiceConnection : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnBindingDied(const ::android::content::ComponentName& arg0) const;
	::jvoid OnNullBinding(const ::android::content::ComponentName& arg0) const;
	::jvoid OnServiceConnected(const ::android::content::ComponentName& arg0, const ::android::os::IBinder& arg1) const;
	::jvoid OnServiceDisconnected(const ::android::content::ComponentName& arg0) const;
	explicit ServiceConnection(jobject o) : java::lang::Object(o) {}
	ServiceConnection(const ServiceConnection& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::content::ServiceConnection();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnBindingDied(const ::android::content::ComponentName& arg0) = 0;
		virtual void OnNullBinding(const ::android::content::ComponentName& arg0) = 0;
		virtual void OnServiceConnected(const ::android::content::ComponentName& arg0, const ::android::os::IBinder& arg1) = 0;
		virtual void OnServiceDisconnected(const ::android::content::ComponentName& arg0) = 0;
	};
};

struct ContextParams : ::java::lang::Object
{
	static jni::Class __CLASS;

	::java::lang::String GetAttributionTag() const;
	::android::content::AttributionSource GetNextAttributionSource() const;
	explicit ContextParams(jobject o) : ::java::lang::Object(o) {}
	ContextParams(const ContextParams& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace view { 
struct Display : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fDEFAULT_DISPLAY();
	static ::jint& fFLAG_PRESENTATION();
	static ::jint& fFLAG_PRIVATE();
	static ::jint& fFLAG_ROUND();
	static ::jint& fFLAG_SECURE();
	static ::jint& fFLAG_SUPPORTS_PROTECTED_BUFFERS();
	static ::jint& fINVALID_DISPLAY();
	static ::jint& fSTATE_DOZE();
	static ::jint& fSTATE_DOZE_SUSPEND();
	static ::jint& fSTATE_OFF();
	static ::jint& fSTATE_ON();
	static ::jint& fSTATE_ON_SUSPEND();
	static ::jint& fSTATE_UNKNOWN();
	static ::jint& fSTATE_VR();
	::jlong GetAppVsyncOffsetNanos() const;
	::jvoid GetCurrentSizeRange(const ::android::graphics::Point& arg0, const ::android::graphics::Point& arg1) const;
	::android::view::DisplayCutout GetCutout() const;
	::android::hardware::display::DeviceProductInfo GetDeviceProductInfo() const;
	::jint GetDisplayId() const;
	::jint GetFlags() const;
	::android::view::Display_HdrCapabilities GetHdrCapabilities() const;
	::jint GetHeight() const;
	::jvoid GetMetrics(const ::android::util::DisplayMetrics& arg0) const;
	::android::view::Display_Mode GetMode() const;
	::java::lang::String GetName() const;
	::jint GetOrientation() const;
	::jint GetPixelFormat() const;
	::android::graphics::ColorSpace GetPreferredWideGamutColorSpace() const;
	::jlong GetPresentationDeadlineNanos() const;
	::jvoid GetRealMetrics(const ::android::util::DisplayMetrics& arg0) const;
	::jvoid GetRealSize(const ::android::graphics::Point& arg0) const;
	::jvoid GetRectSize(const ::android::graphics::Rect& arg0) const;
	::jfloat GetRefreshRate() const;
	::jint GetRotation() const;
	::android::view::RoundedCorner GetRoundedCorner(const ::jint& arg0) const;
	::jvoid GetSize(const ::android::graphics::Point& arg0) const;
	::jint GetState() const;
	jni::Array< ::android::view::Display_Mode > GetSupportedModes() const;
	jni::Array< ::jfloat > GetSupportedRefreshRates() const;
	::jint GetWidth() const;
	::jboolean IsHdr() const;
	::jboolean IsMinimalPostProcessingSupported() const;
	::jboolean IsValid() const;
	::jboolean IsWideColorGamut() const;
	::java::lang::String ToString() const;
	explicit Display(jobject o) : ::java::lang::Object(o) { __Initialize(); }
	Display(const Display& o)  : ::java::lang::Object(o) { __Initialize(); }
jint __GetRawWidth() const;
jint __GetRawHeight() const;
private:
	void __Initialize();

};

}}

namespace android { namespace graphics { 
struct Point : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint fX() const;
	void fX(const ::jint& arg0) const;
	::jint fY() const;
	void fY(const ::jint& arg0) const;
	::jint DescribeContents() const;
	::jboolean Equals(const ::jint& arg0, const ::jint& arg1) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint HashCode() const;
	::jvoid Negate() const;
	::jvoid Offset(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid ReadFromParcel(const ::android::os::Parcel& arg0) const;
	::jvoid Set(const ::jint& arg0, const ::jint& arg1) const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor();
	Point() : ::java::lang::Object(__Constructor()) {}
	static jobject __Constructor(const ::jint& arg0, const ::jint& arg1);
	Point(const ::jint& arg0, const ::jint& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit Point(jobject o) : ::java::lang::Object(o) {}
	Point(const Point& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace view { 
struct DisplayCutout : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::android::graphics::Rect GetBoundingRectBottom() const;
	::android::graphics::Rect GetBoundingRectLeft() const;
	::android::graphics::Rect GetBoundingRectRight() const;
	::android::graphics::Rect GetBoundingRectTop() const;
	::java::util::List GetBoundingRects() const;
	::android::graphics::Path GetCutoutPath() const;
	::jint GetSafeInsetBottom() const;
	::jint GetSafeInsetLeft() const;
	::jint GetSafeInsetRight() const;
	::jint GetSafeInsetTop() const;
	::android::graphics::Insets GetWaterfallInsets() const;
	::jint HashCode() const;
	::java::lang::String ToString() const;
	static jobject __Constructor(const ::android::graphics::Insets& arg0, const ::android::graphics::Rect& arg1, const ::android::graphics::Rect& arg2, const ::android::graphics::Rect& arg3, const ::android::graphics::Rect& arg4);
	DisplayCutout(const ::android::graphics::Insets& arg0, const ::android::graphics::Rect& arg1, const ::android::graphics::Rect& arg2, const ::android::graphics::Rect& arg3, const ::android::graphics::Rect& arg4) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3, arg4)) {}
	static jobject __Constructor(const ::android::graphics::Insets& arg0, const ::android::graphics::Rect& arg1, const ::android::graphics::Rect& arg2, const ::android::graphics::Rect& arg3, const ::android::graphics::Rect& arg4, const ::android::graphics::Insets& arg5);
	DisplayCutout(const ::android::graphics::Insets& arg0, const ::android::graphics::Rect& arg1, const ::android::graphics::Rect& arg2, const ::android::graphics::Rect& arg3, const ::android::graphics::Rect& arg4, const ::android::graphics::Insets& arg5) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3, arg4, arg5)) {}
	static jobject __Constructor(const ::android::graphics::Rect& arg0, const ::java::util::List& arg1);
	DisplayCutout(const ::android::graphics::Rect& arg0, const ::java::util::List& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit DisplayCutout(jobject o) : ::java::lang::Object(o) {}
	DisplayCutout(const DisplayCutout& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace hardware { namespace display { 
struct DeviceProductInfo : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::jint& fCONNECTION_TO_SINK_BUILT_IN();
	static ::jint& fCONNECTION_TO_SINK_DIRECT();
	static ::jint& fCONNECTION_TO_SINK_TRANSITIVE();
	static ::jint& fCONNECTION_TO_SINK_UNKNOWN();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint GetConnectionToSinkType() const;
	::jint GetManufactureWeek() const;
	::jint GetManufactureYear() const;
	::java::lang::String GetManufacturerPnpId() const;
	::jint GetModelYear() const;
	::java::lang::String GetName() const;
	::java::lang::String GetProductId() const;
	::jint HashCode() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2, const ::jint& arg3, const ::jint& arg4);
	DeviceProductInfo(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2, const ::jint& arg3, const ::jint& arg4) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3, arg4)) {}
	explicit DeviceProductInfo(jobject o) : ::java::lang::Object(o) {}
	DeviceProductInfo(const DeviceProductInfo& o)  : ::java::lang::Object(o) {}

};

}}}

namespace android { namespace view { 
struct Display_HdrCapabilities : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fHDR_TYPE_DOLBY_VISION();
	static ::jint& fHDR_TYPE_HDR10();
	static ::jint& fHDR_TYPE_HDR10_PLUS();
	static ::jint& fHDR_TYPE_HLG();
	static ::jfloat& fINVALID_LUMINANCE();
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jfloat GetDesiredMaxAverageLuminance() const;
	::jfloat GetDesiredMaxLuminance() const;
	::jfloat GetDesiredMinLuminance() const;
	jni::Array< ::jint > GetSupportedHdrTypes() const;
	::jint HashCode() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit Display_HdrCapabilities(jobject o) : ::java::lang::Object(o) {}
	Display_HdrCapabilities(const Display_HdrCapabilities& o)  : ::java::lang::Object(o) {}

};

struct Display_Mode : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	jni::Array< ::jfloat > GetAlternativeRefreshRates() const;
	::jint GetModeId() const;
	::jint GetPhysicalHeight() const;
	::jint GetPhysicalWidth() const;
	::jfloat GetRefreshRate() const;
	::jint HashCode() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit Display_Mode(jobject o) : ::java::lang::Object(o) {}
	Display_Mode(const Display_Mode& o)  : ::java::lang::Object(o) {}

};

struct RoundedCorner : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fPOSITION_BOTTOM_LEFT();
	static ::jint& fPOSITION_BOTTOM_RIGHT();
	static ::jint& fPOSITION_TOP_LEFT();
	static ::jint& fPOSITION_TOP_RIGHT();
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::android::graphics::Point GetCenter() const;
	::jint GetPosition() const;
	::jint GetRadius() const;
	::jint HashCode() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3);
	RoundedCorner(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3)) {}
	explicit RoundedCorner(jobject o) : ::java::lang::Object(o) {}
	RoundedCorner(const RoundedCorner& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace content { 
struct SharedPreferences : java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean Contains(const ::java::lang::String& arg0) const;
	::android::content::SharedPreferences_Editor Edit() const;
	::java::util::Map GetAll() const;
	::jboolean GetBoolean(const ::java::lang::String& arg0, const ::jboolean& arg1) const;
	::jfloat GetFloat(const ::java::lang::String& arg0, const ::jfloat& arg1) const;
	::jint GetInt(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::jlong GetLong(const ::java::lang::String& arg0, const ::jlong& arg1) const;
	::java::lang::String GetString(const ::java::lang::String& arg0, const ::java::lang::String& arg1) const;
	::java::util::Set GetStringSet(const ::java::lang::String& arg0, const ::java::util::Set& arg1) const;
	::jvoid RegisterOnSharedPreferenceChangeListener(const ::android::content::SharedPreferences_OnSharedPreferenceChangeListener& arg0) const;
	::jvoid UnregisterOnSharedPreferenceChangeListener(const ::android::content::SharedPreferences_OnSharedPreferenceChangeListener& arg0) const;
	explicit SharedPreferences(jobject o) : java::lang::Object(o) {}
	SharedPreferences(const SharedPreferences& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::content::SharedPreferences();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean Contains(const ::java::lang::String& arg0) = 0;
		virtual ::android::content::SharedPreferences_Editor Edit() = 0;
		virtual ::java::util::Map GetAll() = 0;
		virtual ::jboolean GetBoolean(const ::java::lang::String& arg0, const ::jboolean& arg1) = 0;
		virtual ::jfloat GetFloat(const ::java::lang::String& arg0, const ::jfloat& arg1) = 0;
		virtual ::jint GetInt(const ::java::lang::String& arg0, const ::jint& arg1) = 0;
		virtual ::jlong GetLong(const ::java::lang::String& arg0, const ::jlong& arg1) = 0;
		virtual ::java::lang::String GetString(const ::java::lang::String& arg0, const ::java::lang::String& arg1) = 0;
		virtual ::java::util::Set GetStringSet(const ::java::lang::String& arg0, const ::java::util::Set& arg1) = 0;
		virtual void RegisterOnSharedPreferenceChangeListener(const ::android::content::SharedPreferences_OnSharedPreferenceChangeListener& arg0) = 0;
		virtual void UnregisterOnSharedPreferenceChangeListener(const ::android::content::SharedPreferences_OnSharedPreferenceChangeListener& arg0) = 0;
	};
};

struct SharedPreferences_Editor : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid Apply() const;
	::android::content::SharedPreferences_Editor Clear() const;
	::jboolean Commit() const;
	::android::content::SharedPreferences_Editor PutBoolean(const ::java::lang::String& arg0, const ::jboolean& arg1) const;
	::android::content::SharedPreferences_Editor PutFloat(const ::java::lang::String& arg0, const ::jfloat& arg1) const;
	::android::content::SharedPreferences_Editor PutInt(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::android::content::SharedPreferences_Editor PutLong(const ::java::lang::String& arg0, const ::jlong& arg1) const;
	::android::content::SharedPreferences_Editor PutString(const ::java::lang::String& arg0, const ::java::lang::String& arg1) const;
	::android::content::SharedPreferences_Editor PutStringSet(const ::java::lang::String& arg0, const ::java::util::Set& arg1) const;
	::android::content::SharedPreferences_Editor Remove(const ::java::lang::String& arg0) const;
	explicit SharedPreferences_Editor(jobject o) : java::lang::Object(o) {}
	SharedPreferences_Editor(const SharedPreferences_Editor& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::content::SharedPreferences_Editor();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void Apply() = 0;
		virtual ::android::content::SharedPreferences_Editor Clear() = 0;
		virtual ::jboolean Commit() = 0;
		virtual ::android::content::SharedPreferences_Editor PutBoolean(const ::java::lang::String& arg0, const ::jboolean& arg1) = 0;
		virtual ::android::content::SharedPreferences_Editor PutFloat(const ::java::lang::String& arg0, const ::jfloat& arg1) = 0;
		virtual ::android::content::SharedPreferences_Editor PutInt(const ::java::lang::String& arg0, const ::jint& arg1) = 0;
		virtual ::android::content::SharedPreferences_Editor PutLong(const ::java::lang::String& arg0, const ::jlong& arg1) = 0;
		virtual ::android::content::SharedPreferences_Editor PutString(const ::java::lang::String& arg0, const ::java::lang::String& arg1) = 0;
		virtual ::android::content::SharedPreferences_Editor PutStringSet(const ::java::lang::String& arg0, const ::java::util::Set& arg1) = 0;
		virtual ::android::content::SharedPreferences_Editor Remove(const ::java::lang::String& arg0) = 0;
	};
};

struct SharedPreferences_OnSharedPreferenceChangeListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnSharedPreferenceChanged(const ::android::content::SharedPreferences& arg0, const ::java::lang::String& arg1) const;
	explicit SharedPreferences_OnSharedPreferenceChangeListener(jobject o) : java::lang::Object(o) {}
	SharedPreferences_OnSharedPreferenceChangeListener(const SharedPreferences_OnSharedPreferenceChangeListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::content::SharedPreferences_OnSharedPreferenceChangeListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnSharedPreferenceChanged(const ::android::content::SharedPreferences& arg0, const ::java::lang::String& arg1) = 0;
	};
};

}}

namespace android { namespace database { namespace sqlite { 
struct SQLiteDatabase_CursorFactory : java::lang::Object
{
	static jni::Class __CLASS;

	::android::database::Cursor NewCursor(const ::android::database::sqlite::SQLiteDatabase& arg0, const ::android::database::sqlite::SQLiteCursorDriver& arg1, const ::java::lang::String& arg2, const ::android::database::sqlite::SQLiteQuery& arg3) const;
	explicit SQLiteDatabase_CursorFactory(jobject o) : java::lang::Object(o) {}
	SQLiteDatabase_CursorFactory(const SQLiteDatabase_CursorFactory& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::database::sqlite::SQLiteDatabase_CursorFactory();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::android::database::Cursor NewCursor(const ::android::database::sqlite::SQLiteDatabase& arg0, const ::android::database::sqlite::SQLiteCursorDriver& arg1, const ::java::lang::String& arg2, const ::android::database::sqlite::SQLiteQuery& arg3) = 0;
	};
};

struct SQLiteClosable : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Closeable();
	::jvoid AcquireReference() const;
	::jvoid Close() const;
	::jvoid OnAllReferencesReleased() const;
	::jvoid OnAllReferencesReleasedFromContainer() const;
	::jvoid ReleaseReference() const;
	::jvoid ReleaseReferenceFromContainer() const;
	static jobject __Constructor();
	SQLiteClosable() : ::java::lang::Object(__Constructor()) {}
	explicit SQLiteClosable(jobject o) : ::java::lang::Object(o) {}
	SQLiteClosable(const SQLiteClosable& o)  : ::java::lang::Object(o) {}

};

struct SQLiteDatabase : ::android::database::sqlite::SQLiteClosable
{
	static jni::Class __CLASS;

	static ::jint& fCONFLICT_ABORT();
	static ::jint& fCONFLICT_FAIL();
	static ::jint& fCONFLICT_IGNORE();
	static ::jint& fCONFLICT_NONE();
	static ::jint& fCONFLICT_REPLACE();
	static ::jint& fCONFLICT_ROLLBACK();
	static ::jint& fCREATE_IF_NECESSARY();
	static ::jint& fENABLE_WRITE_AHEAD_LOGGING();
	static ::jint& fMAX_SQL_CACHE_SIZE();
	static ::jint& fNO_LOCALIZED_COLLATORS();
	static ::jint& fOPEN_READONLY();
	static ::jint& fOPEN_READWRITE();
	static ::jint& fSQLITE_MAX_LIKE_PATTERN_LENGTH();
	::jvoid BeginTransaction() const;
	::jvoid BeginTransactionNonExclusive() const;
	::jvoid BeginTransactionWithListener(const ::android::database::sqlite::SQLiteTransactionListener& arg0) const;
	::jvoid BeginTransactionWithListenerNonExclusive(const ::android::database::sqlite::SQLiteTransactionListener& arg0) const;
	::android::database::sqlite::SQLiteStatement CompileStatement(const ::java::lang::String& arg0) const;
	static ::android::database::sqlite::SQLiteDatabase Create(const ::android::database::sqlite::SQLiteDatabase_CursorFactory& arg0);
	static ::android::database::sqlite::SQLiteDatabase CreateInMemory(const ::android::database::sqlite::SQLiteDatabase_OpenParams& arg0);
	::jint Delete(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const jni::Array< ::java::lang::String >& arg2) const;
	static ::jboolean DeleteDatabase(const ::java::io::File& arg0);
	::jvoid DisableWriteAheadLogging() const;
	::jboolean EnableWriteAheadLogging() const;
	::jvoid EndTransaction() const;
	::jvoid ExecPerConnectionSQL(const ::java::lang::String& arg0, const jni::Array< ::java::lang::Object >& arg1) const;
	::jvoid ExecSQL(const ::java::lang::String& arg0) const;
	::jvoid ExecSQL(const ::java::lang::String& arg0, const jni::Array< ::java::lang::Object >& arg1) const;
	::jvoid Finalize() const;
	static ::java::lang::String FindEditTable(const ::java::lang::String& arg0);
	::java::util::List GetAttachedDbs() const;
	::jlong GetMaximumSize() const;
	::jlong GetPageSize() const;
	::java::lang::String GetPath() const;
	::java::util::Map GetSyncedTables() const;
	::jint GetVersion() const;
	::jboolean InTransaction() const;
	::jlong Insert(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::android::content::ContentValues& arg2) const;
	::jlong InsertOrThrow(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::android::content::ContentValues& arg2) const;
	::jlong InsertWithOnConflict(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::android::content::ContentValues& arg2, const ::jint& arg3) const;
	::jboolean IsDatabaseIntegrityOk() const;
	::jboolean IsDbLockedByCurrentThread() const;
	::jboolean IsDbLockedByOtherThreads() const;
	::jboolean IsOpen() const;
	::jboolean IsReadOnly() const;
	::jboolean IsWriteAheadLoggingEnabled() const;
	::jvoid MarkTableSyncable(const ::java::lang::String& arg0, const ::java::lang::String& arg1) const;
	::jvoid MarkTableSyncable(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2) const;
	::jboolean NeedUpgrade(const ::jint& arg0) const;
	::jvoid OnAllReferencesReleased() const;
	static ::android::database::sqlite::SQLiteDatabase OpenDatabase(const ::java::io::File& arg0, const ::android::database::sqlite::SQLiteDatabase_OpenParams& arg1);
	static ::android::database::sqlite::SQLiteDatabase OpenDatabase(const ::java::lang::String& arg0, const ::android::database::sqlite::SQLiteDatabase_CursorFactory& arg1, const ::jint& arg2);
	static ::android::database::sqlite::SQLiteDatabase OpenDatabase(const ::java::lang::String& arg0, const ::android::database::sqlite::SQLiteDatabase_CursorFactory& arg1, const ::jint& arg2, const ::android::database::DatabaseErrorHandler& arg3);
	static ::android::database::sqlite::SQLiteDatabase OpenOrCreateDatabase(const ::java::io::File& arg0, const ::android::database::sqlite::SQLiteDatabase_CursorFactory& arg1);
	static ::android::database::sqlite::SQLiteDatabase OpenOrCreateDatabase(const ::java::lang::String& arg0, const ::android::database::sqlite::SQLiteDatabase_CursorFactory& arg1);
	static ::android::database::sqlite::SQLiteDatabase OpenOrCreateDatabase(const ::java::lang::String& arg0, const ::android::database::sqlite::SQLiteDatabase_CursorFactory& arg1, const ::android::database::DatabaseErrorHandler& arg2);
	::android::database::Cursor Query(const ::java::lang::String& arg0, const jni::Array< ::java::lang::String >& arg1, const ::java::lang::String& arg2, const jni::Array< ::java::lang::String >& arg3, const ::java::lang::String& arg4, const ::java::lang::String& arg5, const ::java::lang::String& arg6) const;
	::android::database::Cursor Query(const ::java::lang::String& arg0, const jni::Array< ::java::lang::String >& arg1, const ::java::lang::String& arg2, const jni::Array< ::java::lang::String >& arg3, const ::java::lang::String& arg4, const ::java::lang::String& arg5, const ::java::lang::String& arg6, const ::java::lang::String& arg7) const;
	::android::database::Cursor Query(const ::jboolean& arg0, const ::java::lang::String& arg1, const jni::Array< ::java::lang::String >& arg2, const ::java::lang::String& arg3, const jni::Array< ::java::lang::String >& arg4, const ::java::lang::String& arg5, const ::java::lang::String& arg6, const ::java::lang::String& arg7, const ::java::lang::String& arg8) const;
	::android::database::Cursor Query(const ::jboolean& arg0, const ::java::lang::String& arg1, const jni::Array< ::java::lang::String >& arg2, const ::java::lang::String& arg3, const jni::Array< ::java::lang::String >& arg4, const ::java::lang::String& arg5, const ::java::lang::String& arg6, const ::java::lang::String& arg7, const ::java::lang::String& arg8, const ::android::os::CancellationSignal& arg9) const;
	::android::database::Cursor QueryWithFactory(const ::android::database::sqlite::SQLiteDatabase_CursorFactory& arg0, const ::jboolean& arg1, const ::java::lang::String& arg2, const jni::Array< ::java::lang::String >& arg3, const ::java::lang::String& arg4, const jni::Array< ::java::lang::String >& arg5, const ::java::lang::String& arg6, const ::java::lang::String& arg7, const ::java::lang::String& arg8, const ::java::lang::String& arg9) const;
	::android::database::Cursor QueryWithFactory(const ::android::database::sqlite::SQLiteDatabase_CursorFactory& arg0, const ::jboolean& arg1, const ::java::lang::String& arg2, const jni::Array< ::java::lang::String >& arg3, const ::java::lang::String& arg4, const jni::Array< ::java::lang::String >& arg5, const ::java::lang::String& arg6, const ::java::lang::String& arg7, const ::java::lang::String& arg8, const ::java::lang::String& arg9, const ::android::os::CancellationSignal& arg10) const;
	::android::database::Cursor RawQuery(const ::java::lang::String& arg0, const jni::Array< ::java::lang::String >& arg1) const;
	::android::database::Cursor RawQuery(const ::java::lang::String& arg0, const jni::Array< ::java::lang::String >& arg1, const ::android::os::CancellationSignal& arg2) const;
	::android::database::Cursor RawQueryWithFactory(const ::android::database::sqlite::SQLiteDatabase_CursorFactory& arg0, const ::java::lang::String& arg1, const jni::Array< ::java::lang::String >& arg2, const ::java::lang::String& arg3) const;
	::android::database::Cursor RawQueryWithFactory(const ::android::database::sqlite::SQLiteDatabase_CursorFactory& arg0, const ::java::lang::String& arg1, const jni::Array< ::java::lang::String >& arg2, const ::java::lang::String& arg3, const ::android::os::CancellationSignal& arg4) const;
	static ::jint ReleaseMemory();
	::jlong Replace(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::android::content::ContentValues& arg2) const;
	::jlong ReplaceOrThrow(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::android::content::ContentValues& arg2) const;
	::jvoid SetCustomAggregateFunction(const ::java::lang::String& arg0, const ::java::util::function::BinaryOperator& arg1) const;
	::jvoid SetCustomScalarFunction(const ::java::lang::String& arg0, const ::java::util::function::UnaryOperator& arg1) const;
	::jvoid SetForeignKeyConstraintsEnabled(const ::jboolean& arg0) const;
	::jvoid SetLocale(const ::java::util::Locale& arg0) const;
	::jvoid SetLockingEnabled(const ::jboolean& arg0) const;
	::jvoid SetMaxSqlCacheSize(const ::jint& arg0) const;
	::jlong SetMaximumSize(const ::jlong& arg0) const;
	::jvoid SetPageSize(const ::jlong& arg0) const;
	::jvoid SetTransactionSuccessful() const;
	::jvoid SetVersion(const ::jint& arg0) const;
	::java::lang::String ToString() const;
	::jint Update(const ::java::lang::String& arg0, const ::android::content::ContentValues& arg1, const ::java::lang::String& arg2, const jni::Array< ::java::lang::String >& arg3) const;
	::jint UpdateWithOnConflict(const ::java::lang::String& arg0, const ::android::content::ContentValues& arg1, const ::java::lang::String& arg2, const jni::Array< ::java::lang::String >& arg3, const ::jint& arg4) const;
	::jvoid ValidateSql(const ::java::lang::String& arg0, const ::android::os::CancellationSignal& arg1) const;
	::jboolean YieldIfContended() const;
	::jboolean YieldIfContendedSafely() const;
	::jboolean YieldIfContendedSafely(const ::jlong& arg0) const;
	explicit SQLiteDatabase(jobject o) : ::android::database::sqlite::SQLiteClosable(o) {}
	SQLiteDatabase(const SQLiteDatabase& o)  : ::android::database::sqlite::SQLiteClosable(o) {}

};

struct SQLiteTransactionListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnBegin() const;
	::jvoid OnCommit() const;
	::jvoid OnRollback() const;
	explicit SQLiteTransactionListener(jobject o) : java::lang::Object(o) {}
	SQLiteTransactionListener(const SQLiteTransactionListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::database::sqlite::SQLiteTransactionListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnBegin() = 0;
		virtual void OnCommit() = 0;
		virtual void OnRollback() = 0;
	};
};

struct SQLiteProgram : ::android::database::sqlite::SQLiteClosable
{
	static jni::Class __CLASS;

	::jvoid BindAllArgsAsStrings(const jni::Array< ::java::lang::String >& arg0) const;
	::jvoid BindBlob(const ::jint& arg0, const jni::Array< ::jbyte >& arg1) const;
	::jvoid BindDouble(const ::jint& arg0, const ::jdouble& arg1) const;
	::jvoid BindLong(const ::jint& arg0, const ::jlong& arg1) const;
	::jvoid BindNull(const ::jint& arg0) const;
	::jvoid BindString(const ::jint& arg0, const ::java::lang::String& arg1) const;
	::jvoid ClearBindings() const;
	::jint GetUniqueId() const;
	::jvoid OnAllReferencesReleased() const;
	explicit SQLiteProgram(jobject o) : ::android::database::sqlite::SQLiteClosable(o) {}
	SQLiteProgram(const SQLiteProgram& o)  : ::android::database::sqlite::SQLiteClosable(o) {}

};

struct SQLiteStatement : ::android::database::sqlite::SQLiteProgram
{
	static jni::Class __CLASS;

	::jvoid Execute() const;
	::jlong ExecuteInsert() const;
	::jint ExecuteUpdateDelete() const;
	::android::os::ParcelFileDescriptor SimpleQueryForBlobFileDescriptor() const;
	::jlong SimpleQueryForLong() const;
	::java::lang::String SimpleQueryForString() const;
	::java::lang::String ToString() const;
	explicit SQLiteStatement(jobject o) : ::android::database::sqlite::SQLiteProgram(o) {}
	SQLiteStatement(const SQLiteStatement& o)  : ::android::database::sqlite::SQLiteProgram(o) {}

};

struct SQLiteDatabase_OpenParams : ::java::lang::Object
{
	static jni::Class __CLASS;

	::android::database::sqlite::SQLiteDatabase_CursorFactory GetCursorFactory() const;
	::android::database::DatabaseErrorHandler GetErrorHandler() const;
	::jlong GetIdleConnectionTimeout() const;
	::java::lang::String GetJournalMode() const;
	::jint GetLookasideSlotCount() const;
	::jint GetLookasideSlotSize() const;
	::jint GetOpenFlags() const;
	::java::lang::String GetSynchronousMode() const;
	explicit SQLiteDatabase_OpenParams(jobject o) : ::java::lang::Object(o) {}
	SQLiteDatabase_OpenParams(const SQLiteDatabase_OpenParams& o)  : ::java::lang::Object(o) {}

};

}}}

namespace android { namespace database { 
struct DatabaseErrorHandler : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnCorruption(const ::android::database::sqlite::SQLiteDatabase& arg0) const;
	explicit DatabaseErrorHandler(jobject o) : java::lang::Object(o) {}
	DatabaseErrorHandler(const DatabaseErrorHandler& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::database::DatabaseErrorHandler();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnCorruption(const ::android::database::sqlite::SQLiteDatabase& arg0) = 0;
	};
};

}}

namespace android { namespace database { namespace sqlite { 
struct SQLiteCursorDriver : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid CursorClosed() const;
	::jvoid CursorDeactivated() const;
	::jvoid CursorRequeried(const ::android::database::Cursor& arg0) const;
	::android::database::Cursor Query(const ::android::database::sqlite::SQLiteDatabase_CursorFactory& arg0, const jni::Array< ::java::lang::String >& arg1) const;
	::jvoid SetBindArguments(const jni::Array< ::java::lang::String >& arg0) const;
	explicit SQLiteCursorDriver(jobject o) : java::lang::Object(o) {}
	SQLiteCursorDriver(const SQLiteCursorDriver& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::database::sqlite::SQLiteCursorDriver();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void CursorClosed() = 0;
		virtual void CursorDeactivated() = 0;
		virtual void CursorRequeried(const ::android::database::Cursor& arg0) = 0;
		virtual ::android::database::Cursor Query(const ::android::database::sqlite::SQLiteDatabase_CursorFactory& arg0, const jni::Array< ::java::lang::String >& arg1) = 0;
		virtual void SetBindArguments(const jni::Array< ::java::lang::String >& arg0) = 0;
	};
};

struct SQLiteQuery : ::android::database::sqlite::SQLiteProgram
{
	static jni::Class __CLASS;

	::java::lang::String ToString() const;
	explicit SQLiteQuery(jobject o) : ::android::database::sqlite::SQLiteProgram(o) {}
	SQLiteQuery(const SQLiteQuery& o)  : ::android::database::sqlite::SQLiteProgram(o) {}

};

}}}

namespace android { namespace content { 
struct BroadcastReceiver : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid AbortBroadcast() const;
	::jvoid ClearAbortBroadcast() const;
	::jboolean GetAbortBroadcast() const;
	::jboolean GetDebugUnregister() const;
	::jint GetResultCode() const;
	::java::lang::String GetResultData() const;
	::android::os::Bundle GetResultExtras(const ::jboolean& arg0) const;
	::android::content::BroadcastReceiver_PendingResult GoAsync() const;
	::jboolean IsInitialStickyBroadcast() const;
	::jboolean IsOrderedBroadcast() const;
	::jvoid OnReceive(const ::android::content::Context& arg0, const ::android::content::Intent& arg1) const;
	::android::os::IBinder PeekService(const ::android::content::Context& arg0, const ::android::content::Intent& arg1) const;
	::jvoid SetDebugUnregister(const ::jboolean& arg0) const;
	::jvoid SetOrderedHint(const ::jboolean& arg0) const;
	::jvoid SetResult(const ::jint& arg0, const ::java::lang::String& arg1, const ::android::os::Bundle& arg2) const;
	::jvoid SetResultCode(const ::jint& arg0) const;
	::jvoid SetResultData(const ::java::lang::String& arg0) const;
	::jvoid SetResultExtras(const ::android::os::Bundle& arg0) const;
	static jobject __Constructor();
	BroadcastReceiver() : ::java::lang::Object(__Constructor()) {}
	explicit BroadcastReceiver(jobject o) : ::java::lang::Object(o) {}
	BroadcastReceiver(const BroadcastReceiver& o)  : ::java::lang::Object(o) {}

};

struct BroadcastReceiver_PendingResult : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid AbortBroadcast() const;
	::jvoid ClearAbortBroadcast() const;
	::jvoid Finish() const;
	::jboolean GetAbortBroadcast() const;
	::jint GetResultCode() const;
	::java::lang::String GetResultData() const;
	::android::os::Bundle GetResultExtras(const ::jboolean& arg0) const;
	::jvoid SetResult(const ::jint& arg0, const ::java::lang::String& arg1, const ::android::os::Bundle& arg2) const;
	::jvoid SetResultCode(const ::jint& arg0) const;
	::jvoid SetResultData(const ::java::lang::String& arg0) const;
	::jvoid SetResultExtras(const ::android::os::Bundle& arg0) const;
	explicit BroadcastReceiver_PendingResult(jobject o) : ::java::lang::Object(o) {}
	BroadcastReceiver_PendingResult(const BroadcastReceiver_PendingResult& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace view { 
struct LayoutInflater_Factory2 : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::view::LayoutInflater_Factory();
	::android::view::View OnCreateView(const ::android::view::View& arg0, const ::java::lang::String& arg1, const ::android::content::Context& arg2, const ::android::util::AttributeSet& arg3) const;
	explicit LayoutInflater_Factory2(jobject o) : java::lang::Object(o) {}
	LayoutInflater_Factory2(const LayoutInflater_Factory2& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::LayoutInflater_Factory2();
		operator ::android::view::LayoutInflater_Factory();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::android::view::View OnCreateView(const ::android::view::View& arg0, const ::java::lang::String& arg1, const ::android::content::Context& arg2, const ::android::util::AttributeSet& arg3) = 0;
	};
};

struct LayoutInflater_Factory : java::lang::Object
{
	static jni::Class __CLASS;

	::android::view::View OnCreateView(const ::java::lang::String& arg0, const ::android::content::Context& arg1, const ::android::util::AttributeSet& arg2) const;
	explicit LayoutInflater_Factory(jobject o) : java::lang::Object(o) {}
	LayoutInflater_Factory(const LayoutInflater_Factory& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::LayoutInflater_Factory();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::android::view::View OnCreateView(const ::java::lang::String& arg0, const ::android::content::Context& arg1, const ::android::util::AttributeSet& arg2) = 0;
	};
};

struct View : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::graphics::drawable::Drawable_Callback();
	operator ::android::view::KeyEvent_Callback();
	operator ::android::view::accessibility::AccessibilityEventSource();
	static ::jint& fACCESSIBILITY_LIVE_REGION_ASSERTIVE();
	static ::jint& fACCESSIBILITY_LIVE_REGION_NONE();
	static ::jint& fACCESSIBILITY_LIVE_REGION_POLITE();
	static ::android::util::Property& fALPHA();
	static ::jint& fAUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS();
	static ::java::lang::String& fAUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATE();
	static ::java::lang::String& fAUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAY();
	static ::java::lang::String& fAUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTH();
	static ::java::lang::String& fAUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEAR();
	static ::java::lang::String& fAUTOFILL_HINT_CREDIT_CARD_NUMBER();
	static ::java::lang::String& fAUTOFILL_HINT_CREDIT_CARD_SECURITY_CODE();
	static ::java::lang::String& fAUTOFILL_HINT_EMAIL_ADDRESS();
	static ::java::lang::String& fAUTOFILL_HINT_NAME();
	static ::java::lang::String& fAUTOFILL_HINT_PASSWORD();
	static ::java::lang::String& fAUTOFILL_HINT_PHONE();
	static ::java::lang::String& fAUTOFILL_HINT_POSTAL_ADDRESS();
	static ::java::lang::String& fAUTOFILL_HINT_POSTAL_CODE();
	static ::java::lang::String& fAUTOFILL_HINT_USERNAME();
	static ::jint& fAUTOFILL_TYPE_DATE();
	static ::jint& fAUTOFILL_TYPE_LIST();
	static ::jint& fAUTOFILL_TYPE_NONE();
	static ::jint& fAUTOFILL_TYPE_TEXT();
	static ::jint& fAUTOFILL_TYPE_TOGGLE();
	static ::jint& fDRAG_FLAG_GLOBAL();
	static ::jint& fDRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSION();
	static ::jint& fDRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSION();
	static ::jint& fDRAG_FLAG_GLOBAL_URI_READ();
	static ::jint& fDRAG_FLAG_GLOBAL_URI_WRITE();
	static ::jint& fDRAG_FLAG_OPAQUE();
	static ::jint& fDRAWING_CACHE_QUALITY_AUTO();
	static ::jint& fDRAWING_CACHE_QUALITY_HIGH();
	static ::jint& fDRAWING_CACHE_QUALITY_LOW();
	static jni::Array< ::jint >& fEMPTY_STATE_SET();
	static jni::Array< ::jint >& fENABLED_FOCUSED_SELECTED_STATE_SET();
	static jni::Array< ::jint >& fENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET();
	static jni::Array< ::jint >& fENABLED_FOCUSED_STATE_SET();
	static jni::Array< ::jint >& fENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET();
	static jni::Array< ::jint >& fENABLED_SELECTED_STATE_SET();
	static jni::Array< ::jint >& fENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET();
	static jni::Array< ::jint >& fENABLED_STATE_SET();
	static jni::Array< ::jint >& fENABLED_WINDOW_FOCUSED_STATE_SET();
	static ::jint& fFIND_VIEWS_WITH_CONTENT_DESCRIPTION();
	static ::jint& fFIND_VIEWS_WITH_TEXT();
	static ::jint& fFOCUSABLE();
	static ::jint& fFOCUSABLES_ALL();
	static ::jint& fFOCUSABLES_TOUCH_MODE();
	static ::jint& fFOCUSABLE_AUTO();
	static jni::Array< ::jint >& fFOCUSED_SELECTED_STATE_SET();
	static jni::Array< ::jint >& fFOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET();
	static jni::Array< ::jint >& fFOCUSED_STATE_SET();
	static jni::Array< ::jint >& fFOCUSED_WINDOW_FOCUSED_STATE_SET();
	static ::jint& fFOCUS_BACKWARD();
	static ::jint& fFOCUS_DOWN();
	static ::jint& fFOCUS_FORWARD();
	static ::jint& fFOCUS_LEFT();
	static ::jint& fFOCUS_RIGHT();
	static ::jint& fFOCUS_UP();
	static ::jint& fGONE();
	static ::jint& fHAPTIC_FEEDBACK_ENABLED();
	static ::jint& fIMPORTANT_FOR_ACCESSIBILITY_AUTO();
	static ::jint& fIMPORTANT_FOR_ACCESSIBILITY_NO();
	static ::jint& fIMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS();
	static ::jint& fIMPORTANT_FOR_ACCESSIBILITY_YES();
	static ::jint& fIMPORTANT_FOR_AUTOFILL_AUTO();
	static ::jint& fIMPORTANT_FOR_AUTOFILL_NO();
	static ::jint& fIMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS();
	static ::jint& fIMPORTANT_FOR_AUTOFILL_YES();
	static ::jint& fIMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS();
	static ::jint& fIMPORTANT_FOR_CONTENT_CAPTURE_AUTO();
	static ::jint& fIMPORTANT_FOR_CONTENT_CAPTURE_NO();
	static ::jint& fIMPORTANT_FOR_CONTENT_CAPTURE_NO_EXCLUDE_DESCENDANTS();
	static ::jint& fIMPORTANT_FOR_CONTENT_CAPTURE_YES();
	static ::jint& fIMPORTANT_FOR_CONTENT_CAPTURE_YES_EXCLUDE_DESCENDANTS();
	static ::jint& fINVISIBLE();
	static ::jint& fKEEP_SCREEN_ON();
	static ::jint& fLAYER_TYPE_HARDWARE();
	static ::jint& fLAYER_TYPE_NONE();
	static ::jint& fLAYER_TYPE_SOFTWARE();
	static ::jint& fLAYOUT_DIRECTION_INHERIT();
	static ::jint& fLAYOUT_DIRECTION_LOCALE();
	static ::jint& fLAYOUT_DIRECTION_LTR();
	static ::jint& fLAYOUT_DIRECTION_RTL();
	static ::jint& fMEASURED_HEIGHT_STATE_SHIFT();
	static ::jint& fMEASURED_SIZE_MASK();
	static ::jint& fMEASURED_STATE_MASK();
	static ::jint& fMEASURED_STATE_TOO_SMALL();
	static ::jint& fNOT_FOCUSABLE();
	static ::jint& fNO_ID();
	static ::jint& fOVER_SCROLL_ALWAYS();
	static ::jint& fOVER_SCROLL_IF_CONTENT_SCROLLS();
	static ::jint& fOVER_SCROLL_NEVER();
	static jni::Array< ::jint >& fPRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET();
	static jni::Array< ::jint >& fPRESSED_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET();
	static jni::Array< ::jint >& fPRESSED_ENABLED_FOCUSED_STATE_SET();
	static jni::Array< ::jint >& fPRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET();
	static jni::Array< ::jint >& fPRESSED_ENABLED_SELECTED_STATE_SET();
	static jni::Array< ::jint >& fPRESSED_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET();
	static jni::Array< ::jint >& fPRESSED_ENABLED_STATE_SET();
	static jni::Array< ::jint >& fPRESSED_ENABLED_WINDOW_FOCUSED_STATE_SET();
	static jni::Array< ::jint >& fPRESSED_FOCUSED_SELECTED_STATE_SET();
	static jni::Array< ::jint >& fPRESSED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET();
	static jni::Array< ::jint >& fPRESSED_FOCUSED_STATE_SET();
	static jni::Array< ::jint >& fPRESSED_FOCUSED_WINDOW_FOCUSED_STATE_SET();
	static jni::Array< ::jint >& fPRESSED_SELECTED_STATE_SET();
	static jni::Array< ::jint >& fPRESSED_SELECTED_WINDOW_FOCUSED_STATE_SET();
	static jni::Array< ::jint >& fPRESSED_STATE_SET();
	static jni::Array< ::jint >& fPRESSED_WINDOW_FOCUSED_STATE_SET();
	static ::android::util::Property& fROTATION();
	static ::android::util::Property& fROTATION_X();
	static ::android::util::Property& fROTATION_Y();
	static ::android::util::Property& fSCALE_X();
	static ::android::util::Property& fSCALE_Y();
	static ::jint& fSCREEN_STATE_OFF();
	static ::jint& fSCREEN_STATE_ON();
	static ::jint& fSCROLLBARS_INSIDE_INSET();
	static ::jint& fSCROLLBARS_INSIDE_OVERLAY();
	static ::jint& fSCROLLBARS_OUTSIDE_INSET();
	static ::jint& fSCROLLBARS_OUTSIDE_OVERLAY();
	static ::jint& fSCROLLBAR_POSITION_DEFAULT();
	static ::jint& fSCROLLBAR_POSITION_LEFT();
	static ::jint& fSCROLLBAR_POSITION_RIGHT();
	static ::jint& fSCROLL_AXIS_HORIZONTAL();
	static ::jint& fSCROLL_AXIS_NONE();
	static ::jint& fSCROLL_AXIS_VERTICAL();
	static ::jint& fSCROLL_CAPTURE_HINT_AUTO();
	static ::jint& fSCROLL_CAPTURE_HINT_EXCLUDE();
	static ::jint& fSCROLL_CAPTURE_HINT_EXCLUDE_DESCENDANTS();
	static ::jint& fSCROLL_CAPTURE_HINT_INCLUDE();
	static ::jint& fSCROLL_INDICATOR_BOTTOM();
	static ::jint& fSCROLL_INDICATOR_END();
	static ::jint& fSCROLL_INDICATOR_LEFT();
	static ::jint& fSCROLL_INDICATOR_RIGHT();
	static ::jint& fSCROLL_INDICATOR_START();
	static ::jint& fSCROLL_INDICATOR_TOP();
	static jni::Array< ::jint >& fSELECTED_STATE_SET();
	static jni::Array< ::jint >& fSELECTED_WINDOW_FOCUSED_STATE_SET();
	static ::jint& fSOUND_EFFECTS_ENABLED();
	static ::jint& fSTATUS_BAR_HIDDEN();
	static ::jint& fSTATUS_BAR_VISIBLE();
	static ::jint& fSYSTEM_UI_FLAG_FULLSCREEN();
	static ::jint& fSYSTEM_UI_FLAG_HIDE_NAVIGATION();
	static ::jint& fSYSTEM_UI_FLAG_IMMERSIVE();
	static ::jint& fSYSTEM_UI_FLAG_IMMERSIVE_STICKY();
	static ::jint& fSYSTEM_UI_FLAG_LAYOUT_FULLSCREEN();
	static ::jint& fSYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION();
	static ::jint& fSYSTEM_UI_FLAG_LAYOUT_STABLE();
	static ::jint& fSYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR();
	static ::jint& fSYSTEM_UI_FLAG_LIGHT_STATUS_BAR();
	static ::jint& fSYSTEM_UI_FLAG_LOW_PROFILE();
	static ::jint& fSYSTEM_UI_FLAG_VISIBLE();
	static ::jint& fSYSTEM_UI_LAYOUT_FLAGS();
	static ::jint& fTEXT_ALIGNMENT_CENTER();
	static ::jint& fTEXT_ALIGNMENT_GRAVITY();
	static ::jint& fTEXT_ALIGNMENT_INHERIT();
	static ::jint& fTEXT_ALIGNMENT_TEXT_END();
	static ::jint& fTEXT_ALIGNMENT_TEXT_START();
	static ::jint& fTEXT_ALIGNMENT_VIEW_END();
	static ::jint& fTEXT_ALIGNMENT_VIEW_START();
	static ::jint& fTEXT_DIRECTION_ANY_RTL();
	static ::jint& fTEXT_DIRECTION_FIRST_STRONG();
	static ::jint& fTEXT_DIRECTION_FIRST_STRONG_LTR();
	static ::jint& fTEXT_DIRECTION_FIRST_STRONG_RTL();
	static ::jint& fTEXT_DIRECTION_INHERIT();
	static ::jint& fTEXT_DIRECTION_LOCALE();
	static ::jint& fTEXT_DIRECTION_LTR();
	static ::jint& fTEXT_DIRECTION_RTL();
	static ::android::util::Property& fTRANSLATION_X();
	static ::android::util::Property& fTRANSLATION_Y();
	static ::android::util::Property& fTRANSLATION_Z();
	static ::java::lang::String& fVIEW_LOG_TAG();
	static ::jint& fVISIBLE();
	static jni::Array< ::jint >& fWINDOW_FOCUSED_STATE_SET();
	static ::android::util::Property& fX();
	static ::android::util::Property& fY();
	static ::android::util::Property& fZ();
	::jvoid AddChildrenForAccessibility(const ::java::util::ArrayList& arg0) const;
	::jvoid AddExtraDataToAccessibilityNodeInfo(const ::android::view::accessibility::AccessibilityNodeInfo& arg0, const ::java::lang::String& arg1, const ::android::os::Bundle& arg2) const;
	::jvoid AddFocusables(const ::java::util::ArrayList& arg0, const ::jint& arg1) const;
	::jvoid AddFocusables(const ::java::util::ArrayList& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jvoid AddKeyboardNavigationClusters(const ::java::util::Collection& arg0, const ::jint& arg1) const;
	::jvoid AddOnAttachStateChangeListener(const ::android::view::View_OnAttachStateChangeListener& arg0) const;
	::jvoid AddOnLayoutChangeListener(const ::android::view::View_OnLayoutChangeListener& arg0) const;
	::jvoid AddOnUnhandledKeyEventListener(const ::android::view::View_OnUnhandledKeyEventListener& arg0) const;
	::jvoid AddTouchables(const ::java::util::ArrayList& arg0) const;
	::android::view::ViewPropertyAnimator Animate() const;
	::jvoid AnnounceForAccessibility(const ::java::lang::CharSequence& arg0) const;
	::jvoid Autofill(const ::android::util::SparseArray& arg0) const;
	::jvoid Autofill(const ::android::view::autofill::AutofillValue& arg0) const;
	::jboolean AwakenScrollBars() const;
	::jboolean AwakenScrollBars(const ::jint& arg0) const;
	::jboolean AwakenScrollBars(const ::jint& arg0, const ::jboolean& arg1) const;
	::jvoid BringToFront() const;
	::jvoid BuildDrawingCache() const;
	::jvoid BuildDrawingCache(const ::jboolean& arg0) const;
	::jvoid BuildLayer() const;
	::jboolean CallOnClick() const;
	::jboolean CanResolveLayoutDirection() const;
	::jboolean CanResolveTextAlignment() const;
	::jboolean CanResolveTextDirection() const;
	::jboolean CanScrollHorizontally(const ::jint& arg0) const;
	::jboolean CanScrollVertically(const ::jint& arg0) const;
	::jvoid CancelDragAndDrop() const;
	::jvoid CancelLongPress() const;
	::jvoid CancelPendingInputEvents() const;
	::jboolean CheckInputConnectionProxy(const ::android::view::View& arg0) const;
	::jvoid ClearAnimation() const;
	::jvoid ClearFocus() const;
	::jvoid ClearViewTranslationCallback() const;
	static ::jint CombineMeasuredStates(const ::jint& arg0, const ::jint& arg1);
	::jint ComputeHorizontalScrollExtent() const;
	::jint ComputeHorizontalScrollOffset() const;
	::jint ComputeHorizontalScrollRange() const;
	::jvoid ComputeScroll() const;
	::android::view::WindowInsets ComputeSystemWindowInsets(const ::android::view::WindowInsets& arg0, const ::android::graphics::Rect& arg1) const;
	::jint ComputeVerticalScrollExtent() const;
	::jint ComputeVerticalScrollOffset() const;
	::jint ComputeVerticalScrollRange() const;
	::android::view::accessibility::AccessibilityNodeInfo CreateAccessibilityNodeInfo() const;
	::jvoid CreateContextMenu(const ::android::view::ContextMenu& arg0) const;
	::jvoid DestroyDrawingCache() const;
	::android::view::WindowInsets DispatchApplyWindowInsets(const ::android::view::WindowInsets& arg0) const;
	::jboolean DispatchCapturedPointerEvent(const ::android::view::MotionEvent& arg0) const;
	::jvoid DispatchConfigurationChanged(const ::android::content::res::Configuration& arg0) const;
	::jvoid DispatchCreateViewTranslationRequest(const ::java::util::Map& arg0, const jni::Array< ::jint >& arg1, const ::android::view::translation::TranslationCapability& arg2, const ::java::util::List& arg3) const;
	::jvoid DispatchDisplayHint(const ::jint& arg0) const;
	::jboolean DispatchDragEvent(const ::android::view::DragEvent& arg0) const;
	::jvoid DispatchDraw(const ::android::graphics::Canvas& arg0) const;
	::jvoid DispatchDrawableHotspotChanged(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jvoid DispatchFinishTemporaryDetach() const;
	::jboolean DispatchGenericFocusedEvent(const ::android::view::MotionEvent& arg0) const;
	::jboolean DispatchGenericMotionEvent(const ::android::view::MotionEvent& arg0) const;
	::jboolean DispatchGenericPointerEvent(const ::android::view::MotionEvent& arg0) const;
	::jboolean DispatchHoverEvent(const ::android::view::MotionEvent& arg0) const;
	::jboolean DispatchKeyEvent(const ::android::view::KeyEvent& arg0) const;
	::jboolean DispatchKeyEventPreIme(const ::android::view::KeyEvent& arg0) const;
	::jboolean DispatchKeyShortcutEvent(const ::android::view::KeyEvent& arg0) const;
	::jboolean DispatchNestedFling(const ::jfloat& arg0, const ::jfloat& arg1, const ::jboolean& arg2) const;
	::jboolean DispatchNestedPreFling(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jboolean DispatchNestedPrePerformAccessibilityAction(const ::jint& arg0, const ::android::os::Bundle& arg1) const;
	::jboolean DispatchNestedPreScroll(const ::jint& arg0, const ::jint& arg1, const jni::Array< ::jint >& arg2, const jni::Array< ::jint >& arg3) const;
	::jboolean DispatchNestedScroll(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const jni::Array< ::jint >& arg4) const;
	::jvoid DispatchPointerCaptureChanged(const ::jboolean& arg0) const;
	::jboolean DispatchPopulateAccessibilityEvent(const ::android::view::accessibility::AccessibilityEvent& arg0) const;
	::jvoid DispatchProvideAutofillStructure(const ::android::view::ViewStructure& arg0, const ::jint& arg1) const;
	::jvoid DispatchProvideStructure(const ::android::view::ViewStructure& arg0) const;
	::jvoid DispatchRestoreInstanceState(const ::android::util::SparseArray& arg0) const;
	::jvoid DispatchSaveInstanceState(const ::android::util::SparseArray& arg0) const;
	::jvoid DispatchScrollCaptureSearch(const ::android::graphics::Rect& arg0, const ::android::graphics::Point& arg1, const ::java::util::function::Consumer& arg2) const;
	::jvoid DispatchSetActivated(const ::jboolean& arg0) const;
	::jvoid DispatchSetPressed(const ::jboolean& arg0) const;
	::jvoid DispatchSetSelected(const ::jboolean& arg0) const;
	::jvoid DispatchStartTemporaryDetach() const;
	::jvoid DispatchSystemUiVisibilityChanged(const ::jint& arg0) const;
	::jboolean DispatchTouchEvent(const ::android::view::MotionEvent& arg0) const;
	::jboolean DispatchTrackballEvent(const ::android::view::MotionEvent& arg0) const;
	::jboolean DispatchUnhandledMove(const ::android::view::View& arg0, const ::jint& arg1) const;
	::jvoid DispatchVisibilityChanged(const ::android::view::View& arg0, const ::jint& arg1) const;
	::jvoid DispatchWindowFocusChanged(const ::jboolean& arg0) const;
	::jvoid DispatchWindowInsetsAnimationEnd(const ::android::view::WindowInsetsAnimation& arg0) const;
	::jvoid DispatchWindowInsetsAnimationPrepare(const ::android::view::WindowInsetsAnimation& arg0) const;
	::android::view::WindowInsets DispatchWindowInsetsAnimationProgress(const ::android::view::WindowInsets& arg0, const ::java::util::List& arg1) const;
	::android::view::WindowInsetsAnimation_Bounds DispatchWindowInsetsAnimationStart(const ::android::view::WindowInsetsAnimation& arg0, const ::android::view::WindowInsetsAnimation_Bounds& arg1) const;
	::jvoid DispatchWindowSystemUiVisiblityChanged(const ::jint& arg0) const;
	::jvoid DispatchWindowVisibilityChanged(const ::jint& arg0) const;
	::jvoid Draw(const ::android::graphics::Canvas& arg0) const;
	::jvoid DrawableHotspotChanged(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jvoid DrawableStateChanged() const;
	::android::view::View FindFocus() const;
	::android::view::View FindViewById(const ::jint& arg0) const;
	::android::view::View FindViewWithTag(const ::java::lang::Object& arg0) const;
	::jvoid FindViewsWithText(const ::java::util::ArrayList& arg0, const ::java::lang::CharSequence& arg1, const ::jint& arg2) const;
	::jboolean FitSystemWindows(const ::android::graphics::Rect& arg0) const;
	::android::view::View FocusSearch(const ::jint& arg0) const;
	::jvoid ForceHasOverlappingRendering(const ::jboolean& arg0) const;
	::jvoid ForceLayout() const;
	::jboolean GatherTransparentRegion(const ::android::graphics::Region& arg0) const;
	::jvoid GenerateDisplayHash(const ::java::lang::String& arg0, const ::android::graphics::Rect& arg1, const ::java::util::concurrent::Executor& arg2, const ::android::view::displayhash::DisplayHashResultCallback& arg3) const;
	static ::jint GenerateViewId();
	::java::lang::CharSequence GetAccessibilityClassName() const;
	::android::view::View_AccessibilityDelegate GetAccessibilityDelegate() const;
	::jint GetAccessibilityLiveRegion() const;
	::android::view::accessibility::AccessibilityNodeProvider GetAccessibilityNodeProvider() const;
	::java::lang::CharSequence GetAccessibilityPaneTitle() const;
	::jint GetAccessibilityTraversalAfter() const;
	::jint GetAccessibilityTraversalBefore() const;
	::jfloat GetAlpha() const;
	::android::view::animation::Animation GetAnimation() const;
	::android::graphics::Matrix GetAnimationMatrix() const;
	::android::os::IBinder GetApplicationWindowToken() const;
	jni::Array< ::jint > GetAttributeResolutionStack(const ::jint& arg0) const;
	::java::util::Map GetAttributeSourceResourceMap() const;
	jni::Array< ::java::lang::String > GetAutofillHints() const;
	::android::view::autofill::AutofillId GetAutofillId() const;
	::jint GetAutofillType() const;
	::android::view::autofill::AutofillValue GetAutofillValue() const;
	::android::graphics::drawable::Drawable GetBackground() const;
	::android::graphics::BlendMode GetBackgroundTintBlendMode() const;
	::android::content::res::ColorStateList GetBackgroundTintList() const;
	::android::graphics::PorterDuff_Mode GetBackgroundTintMode() const;
	::jint GetBaseline() const;
	::jint GetBottom() const;
	::jfloat GetBottomFadingEdgeStrength() const;
	::jint GetBottomPaddingOffset() const;
	::jfloat GetCameraDistance() const;
	::android::graphics::Rect GetClipBounds() const;
	::jboolean GetClipBounds(const ::android::graphics::Rect& arg0) const;
	::jboolean GetClipToOutline() const;
	::android::view::contentcapture::ContentCaptureSession GetContentCaptureSession() const;
	::java::lang::CharSequence GetContentDescription() const;
	::android::content::Context GetContext() const;
	::android::view::ContextMenu_ContextMenuInfo GetContextMenuInfo() const;
	::jboolean GetDefaultFocusHighlightEnabled() const;
	static ::jint GetDefaultSize(const ::jint& arg0, const ::jint& arg1);
	::android::view::Display GetDisplay() const;
	jni::Array< ::jint > GetDrawableState() const;
	::android::graphics::Bitmap GetDrawingCache() const;
	::android::graphics::Bitmap GetDrawingCache(const ::jboolean& arg0) const;
	::jint GetDrawingCacheBackgroundColor() const;
	::jint GetDrawingCacheQuality() const;
	::jvoid GetDrawingRect(const ::android::graphics::Rect& arg0) const;
	::jlong GetDrawingTime() const;
	::jfloat GetElevation() const;
	::jint GetExplicitStyle() const;
	::jboolean GetFilterTouchesWhenObscured() const;
	::jboolean GetFitsSystemWindows() const;
	::jint GetFocusable() const;
	::java::util::ArrayList GetFocusables(const ::jint& arg0) const;
	::jvoid GetFocusedRect(const ::android::graphics::Rect& arg0) const;
	::android::graphics::drawable::Drawable GetForeground() const;
	::jint GetForegroundGravity() const;
	::android::graphics::BlendMode GetForegroundTintBlendMode() const;
	::android::content::res::ColorStateList GetForegroundTintList() const;
	::android::graphics::PorterDuff_Mode GetForegroundTintMode() const;
	::jboolean GetGlobalVisibleRect(const ::android::graphics::Rect& arg0) const;
	::jboolean GetGlobalVisibleRect(const ::android::graphics::Rect& arg0, const ::android::graphics::Point& arg1) const;
	::android::os::Handler GetHandler() const;
	::jboolean GetHasOverlappingRendering() const;
	::jint GetHeight() const;
	::jvoid GetHitRect(const ::android::graphics::Rect& arg0) const;
	::jint GetHorizontalFadingEdgeLength() const;
	::jint GetHorizontalScrollbarHeight() const;
	::android::graphics::drawable::Drawable GetHorizontalScrollbarThumbDrawable() const;
	::android::graphics::drawable::Drawable GetHorizontalScrollbarTrackDrawable() const;
	::jint GetId() const;
	::jint GetImportantForAccessibility() const;
	::jint GetImportantForAutofill() const;
	::jint GetImportantForContentCapture() const;
	::jboolean GetKeepScreenOn() const;
	::android::view::KeyEvent_DispatcherState GetKeyDispatcherState() const;
	::jint GetLabelFor() const;
	::jint GetLayerType() const;
	::jint GetLayoutDirection() const;
	::android::view::ViewGroup_LayoutParams GetLayoutParams() const;
	::jint GetLeft() const;
	::jfloat GetLeftFadingEdgeStrength() const;
	::jint GetLeftPaddingOffset() const;
	::jboolean GetLocalVisibleRect(const ::android::graphics::Rect& arg0) const;
	::jvoid GetLocationInSurface(const jni::Array< ::jint >& arg0) const;
	::jvoid GetLocationInWindow(const jni::Array< ::jint >& arg0) const;
	::jvoid GetLocationOnScreen(const jni::Array< ::jint >& arg0) const;
	::android::graphics::Matrix GetMatrix() const;
	::jint GetMeasuredHeight() const;
	::jint GetMeasuredHeightAndState() const;
	::jint GetMeasuredState() const;
	::jint GetMeasuredWidth() const;
	::jint GetMeasuredWidthAndState() const;
	::jint GetMinimumHeight() const;
	::jint GetMinimumWidth() const;
	::jint GetNextClusterForwardId() const;
	::jint GetNextFocusDownId() const;
	::jint GetNextFocusForwardId() const;
	::jint GetNextFocusLeftId() const;
	::jint GetNextFocusRightId() const;
	::jint GetNextFocusUpId() const;
	::android::view::View_OnFocusChangeListener GetOnFocusChangeListener() const;
	::jint GetOutlineAmbientShadowColor() const;
	::android::view::ViewOutlineProvider GetOutlineProvider() const;
	::jint GetOutlineSpotShadowColor() const;
	::jint GetOverScrollMode() const;
	::android::view::ViewOverlay GetOverlay() const;
	::jint GetPaddingBottom() const;
	::jint GetPaddingEnd() const;
	::jint GetPaddingLeft() const;
	::jint GetPaddingRight() const;
	::jint GetPaddingStart() const;
	::jint GetPaddingTop() const;
	::android::view::ViewParent GetParent() const;
	::android::view::ViewParent GetParentForAccessibility() const;
	::jfloat GetPivotX() const;
	::jfloat GetPivotY() const;
	::android::view::PointerIcon GetPointerIcon() const;
	jni::Array< ::java::lang::String > GetReceiveContentMimeTypes() const;
	::android::content::res::Resources GetResources() const;
	::jboolean GetRevealOnFocusHint() const;
	::jint GetRight() const;
	::jfloat GetRightFadingEdgeStrength() const;
	::jint GetRightPaddingOffset() const;
	::android::view::AttachedSurfaceControl GetRootSurfaceControl() const;
	::android::view::View GetRootView() const;
	::android::view::WindowInsets GetRootWindowInsets() const;
	::jfloat GetRotation() const;
	::jfloat GetRotationX() const;
	::jfloat GetRotationY() const;
	::jfloat GetScaleX() const;
	::jfloat GetScaleY() const;
	::jint GetScrollBarDefaultDelayBeforeFade() const;
	::jint GetScrollBarFadeDuration() const;
	::jint GetScrollBarSize() const;
	::jint GetScrollBarStyle() const;
	::jint GetScrollCaptureHint() const;
	::jint GetScrollIndicators() const;
	::jint GetScrollX() const;
	::jint GetScrollY() const;
	::jint GetSolidColor() const;
	::jint GetSourceLayoutResId() const;
	::java::lang::CharSequence GetStateDescription() const;
	::android::animation::StateListAnimator GetStateListAnimator() const;
	::jint GetSuggestedMinimumHeight() const;
	::jint GetSuggestedMinimumWidth() const;
	::java::util::List GetSystemGestureExclusionRects() const;
	::jint GetSystemUiVisibility() const;
	::java::lang::Object GetTag() const;
	::java::lang::Object GetTag(const ::jint& arg0) const;
	::jint GetTextAlignment() const;
	::jint GetTextDirection() const;
	::java::lang::CharSequence GetTooltipText() const;
	::jint GetTop() const;
	::jfloat GetTopFadingEdgeStrength() const;
	::jint GetTopPaddingOffset() const;
	::android::view::TouchDelegate GetTouchDelegate() const;
	::java::util::ArrayList GetTouchables() const;
	::jfloat GetTransitionAlpha() const;
	::java::lang::String GetTransitionName() const;
	::jfloat GetTranslationX() const;
	::jfloat GetTranslationY() const;
	::jfloat GetTranslationZ() const;
	::jlong GetUniqueDrawingId() const;
	::jint GetVerticalFadingEdgeLength() const;
	::jint GetVerticalScrollbarPosition() const;
	::android::graphics::drawable::Drawable GetVerticalScrollbarThumbDrawable() const;
	::android::graphics::drawable::Drawable GetVerticalScrollbarTrackDrawable() const;
	::jint GetVerticalScrollbarWidth() const;
	::android::view::translation::ViewTranslationResponse GetViewTranslationResponse() const;
	::android::view::ViewTreeObserver GetViewTreeObserver() const;
	::jint GetVisibility() const;
	::jint GetWidth() const;
	::jint GetWindowAttachCount() const;
	::android::view::WindowId GetWindowId() const;
	::android::view::WindowInsetsController GetWindowInsetsController() const;
	::jint GetWindowSystemUiVisibility() const;
	::android::os::IBinder GetWindowToken() const;
	::jint GetWindowVisibility() const;
	::jvoid GetWindowVisibleDisplayFrame(const ::android::graphics::Rect& arg0) const;
	::jfloat GetX() const;
	::jfloat GetY() const;
	::jfloat GetZ() const;
	::jboolean HasExplicitFocusable() const;
	::jboolean HasFocus() const;
	::jboolean HasFocusable() const;
	::jboolean HasNestedScrollingParent() const;
	::jboolean HasOnClickListeners() const;
	::jboolean HasOnLongClickListeners() const;
	::jboolean HasOverlappingRendering() const;
	::jboolean HasPointerCapture() const;
	::jboolean HasTransientState() const;
	::jboolean HasWindowFocus() const;
	static ::android::view::View Inflate(const ::android::content::Context& arg0, const ::jint& arg1, const ::android::view::ViewGroup& arg2);
	::jvoid Invalidate() const;
	::jvoid Invalidate(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid Invalidate(const ::android::graphics::Rect& arg0) const;
	::jvoid InvalidateDrawable(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid InvalidateOutline() const;
	::jboolean IsAccessibilityFocused() const;
	::jboolean IsAccessibilityHeading() const;
	::jboolean IsActivated() const;
	::jboolean IsAttachedToWindow() const;
	::jboolean IsClickable() const;
	::jboolean IsContextClickable() const;
	::jboolean IsDirty() const;
	::jboolean IsDrawingCacheEnabled() const;
	::jboolean IsDuplicateParentStateEnabled() const;
	::jboolean IsEnabled() const;
	::jboolean IsFocusable() const;
	::jboolean IsFocusableInTouchMode() const;
	::jboolean IsFocused() const;
	::jboolean IsFocusedByDefault() const;
	::jboolean IsForceDarkAllowed() const;
	::jboolean IsHapticFeedbackEnabled() const;
	::jboolean IsHardwareAccelerated() const;
	::jboolean IsHorizontalFadingEdgeEnabled() const;
	::jboolean IsHorizontalScrollBarEnabled() const;
	::jboolean IsHovered() const;
	::jboolean IsImportantForAccessibility() const;
	::jboolean IsImportantForAutofill() const;
	::jboolean IsImportantForContentCapture() const;
	::jboolean IsInEditMode() const;
	::jboolean IsInLayout() const;
	::jboolean IsInTouchMode() const;
	::jboolean IsKeyboardNavigationCluster() const;
	::jboolean IsLaidOut() const;
	::jboolean IsLayoutDirectionResolved() const;
	::jboolean IsLayoutRequested() const;
	::jboolean IsLongClickable() const;
	::jboolean IsNestedScrollingEnabled() const;
	::jboolean IsOpaque() const;
	::jboolean IsPaddingOffsetRequired() const;
	::jboolean IsPaddingRelative() const;
	::jboolean IsPivotSet() const;
	::jboolean IsPressed() const;
	::jboolean IsSaveEnabled() const;
	::jboolean IsSaveFromParentEnabled() const;
	::jboolean IsScreenReaderFocusable() const;
	::jboolean IsScrollContainer() const;
	::jboolean IsScrollbarFadingEnabled() const;
	::jboolean IsSelected() const;
	::jboolean IsShowingLayoutBounds() const;
	::jboolean IsShown() const;
	::jboolean IsSoundEffectsEnabled() const;
	::jboolean IsTemporarilyDetached() const;
	::jboolean IsTextAlignmentResolved() const;
	::jboolean IsTextDirectionResolved() const;
	::jboolean IsVerticalFadingEdgeEnabled() const;
	::jboolean IsVerticalScrollBarEnabled() const;
	::jboolean IsVisibleToUserForAutofill(const ::jint& arg0) const;
	::jvoid JumpDrawablesToCurrentState() const;
	::android::view::View KeyboardNavigationClusterSearch(const ::android::view::View& arg0, const ::jint& arg1) const;
	::jvoid Layout(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid Measure(const ::jint& arg0, const ::jint& arg1) const;
	static jni::Array< ::jint > MergeDrawableStates(const jni::Array< ::jint >& arg0, const jni::Array< ::jint >& arg1);
	::jvoid OffsetLeftAndRight(const ::jint& arg0) const;
	::jvoid OffsetTopAndBottom(const ::jint& arg0) const;
	::jvoid OnAnimationEnd() const;
	::jvoid OnAnimationStart() const;
	::android::view::WindowInsets OnApplyWindowInsets(const ::android::view::WindowInsets& arg0) const;
	::jvoid OnAttachedToWindow() const;
	::jvoid OnCancelPendingInputEvents() const;
	::jboolean OnCapturedPointerEvent(const ::android::view::MotionEvent& arg0) const;
	::jboolean OnCheckIsTextEditor() const;
	::jvoid OnConfigurationChanged(const ::android::content::res::Configuration& arg0) const;
	::jvoid OnCreateContextMenu(const ::android::view::ContextMenu& arg0) const;
	jni::Array< ::jint > OnCreateDrawableState(const ::jint& arg0) const;
	::android::view::inputmethod::InputConnection OnCreateInputConnection(const ::android::view::inputmethod::EditorInfo& arg0) const;
	::jvoid OnCreateViewTranslationRequest(const jni::Array< ::jint >& arg0, const ::java::util::function::Consumer& arg1) const;
	::jvoid OnCreateVirtualViewTranslationRequests(const jni::Array< ::jlong >& arg0, const jni::Array< ::jint >& arg1, const ::java::util::function::Consumer& arg2) const;
	::jvoid OnDetachedFromWindow() const;
	::jvoid OnDisplayHint(const ::jint& arg0) const;
	::jboolean OnDragEvent(const ::android::view::DragEvent& arg0) const;
	::jvoid OnDraw(const ::android::graphics::Canvas& arg0) const;
	::jvoid OnDrawForeground(const ::android::graphics::Canvas& arg0) const;
	::jvoid OnDrawScrollBars(const ::android::graphics::Canvas& arg0) const;
	::jboolean OnFilterTouchEventForSecurity(const ::android::view::MotionEvent& arg0) const;
	::jvoid OnFinishInflate() const;
	::jvoid OnFinishTemporaryDetach() const;
	::jvoid OnFocusChanged(const ::jboolean& arg0, const ::jint& arg1, const ::android::graphics::Rect& arg2) const;
	::jboolean OnGenericMotionEvent(const ::android::view::MotionEvent& arg0) const;
	::jvoid OnHoverChanged(const ::jboolean& arg0) const;
	::jboolean OnHoverEvent(const ::android::view::MotionEvent& arg0) const;
	::jvoid OnInitializeAccessibilityEvent(const ::android::view::accessibility::AccessibilityEvent& arg0) const;
	::jvoid OnInitializeAccessibilityNodeInfo(const ::android::view::accessibility::AccessibilityNodeInfo& arg0) const;
	::jboolean OnKeyDown(const ::jint& arg0, const ::android::view::KeyEvent& arg1) const;
	::jboolean OnKeyLongPress(const ::jint& arg0, const ::android::view::KeyEvent& arg1) const;
	::jboolean OnKeyMultiple(const ::jint& arg0, const ::jint& arg1, const ::android::view::KeyEvent& arg2) const;
	::jboolean OnKeyPreIme(const ::jint& arg0, const ::android::view::KeyEvent& arg1) const;
	::jboolean OnKeyShortcut(const ::jint& arg0, const ::android::view::KeyEvent& arg1) const;
	::jboolean OnKeyUp(const ::jint& arg0, const ::android::view::KeyEvent& arg1) const;
	::jvoid OnLayout(const ::jboolean& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4) const;
	::jvoid OnMeasure(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid OnOverScrolled(const ::jint& arg0, const ::jint& arg1, const ::jboolean& arg2, const ::jboolean& arg3) const;
	::jvoid OnPointerCaptureChange(const ::jboolean& arg0) const;
	::jvoid OnPopulateAccessibilityEvent(const ::android::view::accessibility::AccessibilityEvent& arg0) const;
	::jvoid OnProvideAutofillStructure(const ::android::view::ViewStructure& arg0, const ::jint& arg1) const;
	::jvoid OnProvideAutofillVirtualStructure(const ::android::view::ViewStructure& arg0, const ::jint& arg1) const;
	::jvoid OnProvideContentCaptureStructure(const ::android::view::ViewStructure& arg0, const ::jint& arg1) const;
	::jvoid OnProvideStructure(const ::android::view::ViewStructure& arg0) const;
	::jvoid OnProvideVirtualStructure(const ::android::view::ViewStructure& arg0) const;
	::android::view::ContentInfo OnReceiveContent(const ::android::view::ContentInfo& arg0) const;
	::android::view::PointerIcon OnResolvePointerIcon(const ::android::view::MotionEvent& arg0, const ::jint& arg1) const;
	::jvoid OnRestoreInstanceState(const ::android::os::Parcelable& arg0) const;
	::jvoid OnRtlPropertiesChanged(const ::jint& arg0) const;
	::android::os::Parcelable OnSaveInstanceState() const;
	::jvoid OnScreenStateChanged(const ::jint& arg0) const;
	::jvoid OnScrollCaptureSearch(const ::android::graphics::Rect& arg0, const ::android::graphics::Point& arg1, const ::java::util::function::Consumer& arg2) const;
	::jvoid OnScrollChanged(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jboolean OnSetAlpha(const ::jint& arg0) const;
	::jvoid OnSizeChanged(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid OnStartTemporaryDetach() const;
	::jboolean OnTouchEvent(const ::android::view::MotionEvent& arg0) const;
	::jboolean OnTrackballEvent(const ::android::view::MotionEvent& arg0) const;
	::jvoid OnViewTranslationResponse(const ::android::view::translation::ViewTranslationResponse& arg0) const;
	::jvoid OnVirtualViewTranslationResponses(const ::android::util::LongSparseArray& arg0) const;
	::jvoid OnVisibilityAggregated(const ::jboolean& arg0) const;
	::jvoid OnVisibilityChanged(const ::android::view::View& arg0, const ::jint& arg1) const;
	::jvoid OnWindowFocusChanged(const ::jboolean& arg0) const;
	::jvoid OnWindowSystemUiVisibilityChanged(const ::jint& arg0) const;
	::jvoid OnWindowVisibilityChanged(const ::jint& arg0) const;
	::jboolean OverScrollBy(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5, const ::jint& arg6, const ::jint& arg7, const ::jboolean& arg8) const;
	::jboolean PerformAccessibilityAction(const ::jint& arg0, const ::android::os::Bundle& arg1) const;
	::jboolean PerformClick() const;
	::jboolean PerformContextClick() const;
	::jboolean PerformContextClick(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jboolean PerformHapticFeedback(const ::jint& arg0) const;
	::jboolean PerformHapticFeedback(const ::jint& arg0, const ::jint& arg1) const;
	::jboolean PerformLongClick() const;
	::jboolean PerformLongClick(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::android::view::ContentInfo PerformReceiveContent(const ::android::view::ContentInfo& arg0) const;
	::jvoid PlaySoundEffect(const ::jint& arg0) const;
	::jboolean Post(const ::java::lang::Runnable& arg0) const;
	::jboolean PostDelayed(const ::java::lang::Runnable& arg0, const ::jlong& arg1) const;
	::jvoid PostInvalidate() const;
	::jvoid PostInvalidate(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid PostInvalidateDelayed(const ::jlong& arg0) const;
	::jvoid PostInvalidateDelayed(const ::jlong& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4) const;
	::jvoid PostInvalidateOnAnimation() const;
	::jvoid PostInvalidateOnAnimation(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid PostOnAnimation(const ::java::lang::Runnable& arg0) const;
	::jvoid PostOnAnimationDelayed(const ::java::lang::Runnable& arg0, const ::jlong& arg1) const;
	::jvoid RefreshDrawableState() const;
	::jvoid ReleasePointerCapture() const;
	::jboolean RemoveCallbacks(const ::java::lang::Runnable& arg0) const;
	::jvoid RemoveOnAttachStateChangeListener(const ::android::view::View_OnAttachStateChangeListener& arg0) const;
	::jvoid RemoveOnLayoutChangeListener(const ::android::view::View_OnLayoutChangeListener& arg0) const;
	::jvoid RemoveOnUnhandledKeyEventListener(const ::android::view::View_OnUnhandledKeyEventListener& arg0) const;
	::jvoid RequestApplyInsets() const;
	::jvoid RequestFitSystemWindows() const;
	::jboolean RequestFocus() const;
	::jboolean RequestFocus(const ::jint& arg0) const;
	::jboolean RequestFocus(const ::jint& arg0, const ::android::graphics::Rect& arg1) const;
	::jboolean RequestFocusFromTouch() const;
	::jvoid RequestLayout() const;
	::jvoid RequestPointerCapture() const;
	::jboolean RequestRectangleOnScreen(const ::android::graphics::Rect& arg0) const;
	::jboolean RequestRectangleOnScreen(const ::android::graphics::Rect& arg0, const ::jboolean& arg1) const;
	::jvoid RequestUnbufferedDispatch(const ::jint& arg0) const;
	::jvoid RequestUnbufferedDispatch(const ::android::view::MotionEvent& arg0) const;
	::android::view::View RequireViewById(const ::jint& arg0) const;
	::jvoid ResetPivot() const;
	static ::jint ResolveSize(const ::jint& arg0, const ::jint& arg1);
	static ::jint ResolveSizeAndState(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2);
	::jboolean RestoreDefaultFocus() const;
	::jvoid RestoreHierarchyState(const ::android::util::SparseArray& arg0) const;
	::jvoid SaveAttributeDataForStyleable(const ::android::content::Context& arg0, const jni::Array< ::jint >& arg1, const ::android::util::AttributeSet& arg2, const ::android::content::res::TypedArray& arg3, const ::jint& arg4, const ::jint& arg5) const;
	::jvoid SaveHierarchyState(const ::android::util::SparseArray& arg0) const;
	::jvoid ScheduleDrawable(const ::android::graphics::drawable::Drawable& arg0, const ::java::lang::Runnable& arg1, const ::jlong& arg2) const;
	::jvoid ScrollBy(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid ScrollTo(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid SendAccessibilityEvent(const ::jint& arg0) const;
	::jvoid SendAccessibilityEventUnchecked(const ::android::view::accessibility::AccessibilityEvent& arg0) const;
	::jvoid SetAccessibilityDelegate(const ::android::view::View_AccessibilityDelegate& arg0) const;
	::jvoid SetAccessibilityHeading(const ::jboolean& arg0) const;
	::jvoid SetAccessibilityLiveRegion(const ::jint& arg0) const;
	::jvoid SetAccessibilityPaneTitle(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetAccessibilityTraversalAfter(const ::jint& arg0) const;
	::jvoid SetAccessibilityTraversalBefore(const ::jint& arg0) const;
	::jvoid SetActivated(const ::jboolean& arg0) const;
	::jvoid SetAllowClickWhenDisabled(const ::jboolean& arg0) const;
	::jvoid SetAlpha(const ::jfloat& arg0) const;
	::jvoid SetAnimation(const ::android::view::animation::Animation& arg0) const;
	::jvoid SetAnimationMatrix(const ::android::graphics::Matrix& arg0) const;
	::jvoid SetAutofillHints(const jni::Array< ::java::lang::String >& arg0) const;
	::jvoid SetAutofillId(const ::android::view::autofill::AutofillId& arg0) const;
	::jvoid SetBackground(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid SetBackgroundColor(const ::jint& arg0) const;
	::jvoid SetBackgroundDrawable(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid SetBackgroundResource(const ::jint& arg0) const;
	::jvoid SetBackgroundTintBlendMode(const ::android::graphics::BlendMode& arg0) const;
	::jvoid SetBackgroundTintList(const ::android::content::res::ColorStateList& arg0) const;
	::jvoid SetBackgroundTintMode(const ::android::graphics::PorterDuff_Mode& arg0) const;
	::jvoid SetBottom(const ::jint& arg0) const;
	::jvoid SetCameraDistance(const ::jfloat& arg0) const;
	::jvoid SetClickable(const ::jboolean& arg0) const;
	::jvoid SetClipBounds(const ::android::graphics::Rect& arg0) const;
	::jvoid SetClipToOutline(const ::jboolean& arg0) const;
	::jvoid SetContentCaptureSession(const ::android::view::contentcapture::ContentCaptureSession& arg0) const;
	::jvoid SetContentDescription(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetContextClickable(const ::jboolean& arg0) const;
	::jvoid SetDefaultFocusHighlightEnabled(const ::jboolean& arg0) const;
	::jvoid SetDrawingCacheBackgroundColor(const ::jint& arg0) const;
	::jvoid SetDrawingCacheEnabled(const ::jboolean& arg0) const;
	::jvoid SetDrawingCacheQuality(const ::jint& arg0) const;
	::jvoid SetDuplicateParentStateEnabled(const ::jboolean& arg0) const;
	::jvoid SetElevation(const ::jfloat& arg0) const;
	::jvoid SetEnabled(const ::jboolean& arg0) const;
	::jvoid SetFadingEdgeLength(const ::jint& arg0) const;
	::jvoid SetFilterTouchesWhenObscured(const ::jboolean& arg0) const;
	::jvoid SetFitsSystemWindows(const ::jboolean& arg0) const;
	::jvoid SetFocusable(const ::jint& arg0) const;
	::jvoid SetFocusable(const ::jboolean& arg0) const;
	::jvoid SetFocusableInTouchMode(const ::jboolean& arg0) const;
	::jvoid SetFocusedByDefault(const ::jboolean& arg0) const;
	::jvoid SetForceDarkAllowed(const ::jboolean& arg0) const;
	::jvoid SetForeground(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid SetForegroundGravity(const ::jint& arg0) const;
	::jvoid SetForegroundTintBlendMode(const ::android::graphics::BlendMode& arg0) const;
	::jvoid SetForegroundTintList(const ::android::content::res::ColorStateList& arg0) const;
	::jvoid SetForegroundTintMode(const ::android::graphics::PorterDuff_Mode& arg0) const;
	::jvoid SetHapticFeedbackEnabled(const ::jboolean& arg0) const;
	::jvoid SetHasTransientState(const ::jboolean& arg0) const;
	::jvoid SetHorizontalFadingEdgeEnabled(const ::jboolean& arg0) const;
	::jvoid SetHorizontalScrollBarEnabled(const ::jboolean& arg0) const;
	::jvoid SetHorizontalScrollbarThumbDrawable(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid SetHorizontalScrollbarTrackDrawable(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid SetHovered(const ::jboolean& arg0) const;
	::jvoid SetId(const ::jint& arg0) const;
	::jvoid SetImportantForAccessibility(const ::jint& arg0) const;
	::jvoid SetImportantForAutofill(const ::jint& arg0) const;
	::jvoid SetImportantForContentCapture(const ::jint& arg0) const;
	::jvoid SetKeepScreenOn(const ::jboolean& arg0) const;
	::jvoid SetKeyboardNavigationCluster(const ::jboolean& arg0) const;
	::jvoid SetLabelFor(const ::jint& arg0) const;
	::jvoid SetLayerPaint(const ::android::graphics::Paint& arg0) const;
	::jvoid SetLayerType(const ::jint& arg0, const ::android::graphics::Paint& arg1) const;
	::jvoid SetLayoutDirection(const ::jint& arg0) const;
	::jvoid SetLayoutParams(const ::android::view::ViewGroup_LayoutParams& arg0) const;
	::jvoid SetLeft(const ::jint& arg0) const;
	::jvoid SetLeftTopRightBottom(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid SetLongClickable(const ::jboolean& arg0) const;
	::jvoid SetMeasuredDimension(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid SetMinimumHeight(const ::jint& arg0) const;
	::jvoid SetMinimumWidth(const ::jint& arg0) const;
	::jvoid SetNestedScrollingEnabled(const ::jboolean& arg0) const;
	::jvoid SetNextClusterForwardId(const ::jint& arg0) const;
	::jvoid SetNextFocusDownId(const ::jint& arg0) const;
	::jvoid SetNextFocusForwardId(const ::jint& arg0) const;
	::jvoid SetNextFocusLeftId(const ::jint& arg0) const;
	::jvoid SetNextFocusRightId(const ::jint& arg0) const;
	::jvoid SetNextFocusUpId(const ::jint& arg0) const;
	::jvoid SetOnApplyWindowInsetsListener(const ::android::view::View_OnApplyWindowInsetsListener& arg0) const;
	::jvoid SetOnCapturedPointerListener(const ::android::view::View_OnCapturedPointerListener& arg0) const;
	::jvoid SetOnClickListener(const ::android::view::View_OnClickListener& arg0) const;
	::jvoid SetOnContextClickListener(const ::android::view::View_OnContextClickListener& arg0) const;
	::jvoid SetOnCreateContextMenuListener(const ::android::view::View_OnCreateContextMenuListener& arg0) const;
	::jvoid SetOnDragListener(const ::android::view::View_OnDragListener& arg0) const;
	::jvoid SetOnFocusChangeListener(const ::android::view::View_OnFocusChangeListener& arg0) const;
	::jvoid SetOnGenericMotionListener(const ::android::view::View_OnGenericMotionListener& arg0) const;
	::jvoid SetOnHoverListener(const ::android::view::View_OnHoverListener& arg0) const;
	::jvoid SetOnKeyListener(const ::android::view::View_OnKeyListener& arg0) const;
	::jvoid SetOnLongClickListener(const ::android::view::View_OnLongClickListener& arg0) const;
	::jvoid SetOnReceiveContentListener(const jni::Array< ::java::lang::String >& arg0, const ::android::view::OnReceiveContentListener& arg1) const;
	::jvoid SetOnScrollChangeListener(const ::android::view::View_OnScrollChangeListener& arg0) const;
	::jvoid SetOnSystemUiVisibilityChangeListener(const ::android::view::View_OnSystemUiVisibilityChangeListener& arg0) const;
	::jvoid SetOnTouchListener(const ::android::view::View_OnTouchListener& arg0) const;
	::jvoid SetOutlineAmbientShadowColor(const ::jint& arg0) const;
	::jvoid SetOutlineProvider(const ::android::view::ViewOutlineProvider& arg0) const;
	::jvoid SetOutlineSpotShadowColor(const ::jint& arg0) const;
	::jvoid SetOverScrollMode(const ::jint& arg0) const;
	::jvoid SetPadding(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid SetPaddingRelative(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid SetPivotX(const ::jfloat& arg0) const;
	::jvoid SetPivotY(const ::jfloat& arg0) const;
	::jvoid SetPointerIcon(const ::android::view::PointerIcon& arg0) const;
	::jvoid SetPressed(const ::jboolean& arg0) const;
	::jvoid SetRenderEffect(const ::android::graphics::RenderEffect& arg0) const;
	::jvoid SetRevealOnFocusHint(const ::jboolean& arg0) const;
	::jvoid SetRight(const ::jint& arg0) const;
	::jvoid SetRotation(const ::jfloat& arg0) const;
	::jvoid SetRotationX(const ::jfloat& arg0) const;
	::jvoid SetRotationY(const ::jfloat& arg0) const;
	::jvoid SetSaveEnabled(const ::jboolean& arg0) const;
	::jvoid SetSaveFromParentEnabled(const ::jboolean& arg0) const;
	::jvoid SetScaleX(const ::jfloat& arg0) const;
	::jvoid SetScaleY(const ::jfloat& arg0) const;
	::jvoid SetScreenReaderFocusable(const ::jboolean& arg0) const;
	::jvoid SetScrollBarDefaultDelayBeforeFade(const ::jint& arg0) const;
	::jvoid SetScrollBarFadeDuration(const ::jint& arg0) const;
	::jvoid SetScrollBarSize(const ::jint& arg0) const;
	::jvoid SetScrollBarStyle(const ::jint& arg0) const;
	::jvoid SetScrollCaptureCallback(const ::android::view::ScrollCaptureCallback& arg0) const;
	::jvoid SetScrollCaptureHint(const ::jint& arg0) const;
	::jvoid SetScrollContainer(const ::jboolean& arg0) const;
	::jvoid SetScrollIndicators(const ::jint& arg0) const;
	::jvoid SetScrollIndicators(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid SetScrollX(const ::jint& arg0) const;
	::jvoid SetScrollY(const ::jint& arg0) const;
	::jvoid SetScrollbarFadingEnabled(const ::jboolean& arg0) const;
	::jvoid SetSelected(const ::jboolean& arg0) const;
	::jvoid SetSoundEffectsEnabled(const ::jboolean& arg0) const;
	::jvoid SetStateDescription(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetStateListAnimator(const ::android::animation::StateListAnimator& arg0) const;
	::jvoid SetSystemGestureExclusionRects(const ::java::util::List& arg0) const;
	::jvoid SetSystemUiVisibility(const ::jint& arg0) const;
	::jvoid SetTag(const ::jint& arg0, const ::java::lang::Object& arg1) const;
	::jvoid SetTag(const ::java::lang::Object& arg0) const;
	::jvoid SetTextAlignment(const ::jint& arg0) const;
	::jvoid SetTextDirection(const ::jint& arg0) const;
	::jvoid SetTooltipText(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetTop(const ::jint& arg0) const;
	::jvoid SetTouchDelegate(const ::android::view::TouchDelegate& arg0) const;
	::jvoid SetTransitionAlpha(const ::jfloat& arg0) const;
	::jvoid SetTransitionName(const ::java::lang::String& arg0) const;
	::jvoid SetTransitionVisibility(const ::jint& arg0) const;
	::jvoid SetTranslationX(const ::jfloat& arg0) const;
	::jvoid SetTranslationY(const ::jfloat& arg0) const;
	::jvoid SetTranslationZ(const ::jfloat& arg0) const;
	::jvoid SetVerticalFadingEdgeEnabled(const ::jboolean& arg0) const;
	::jvoid SetVerticalScrollBarEnabled(const ::jboolean& arg0) const;
	::jvoid SetVerticalScrollbarPosition(const ::jint& arg0) const;
	::jvoid SetVerticalScrollbarThumbDrawable(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid SetVerticalScrollbarTrackDrawable(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid SetViewTranslationCallback(const ::android::view::translation::ViewTranslationCallback& arg0) const;
	::jvoid SetVisibility(const ::jint& arg0) const;
	::jvoid SetWillNotCacheDrawing(const ::jboolean& arg0) const;
	::jvoid SetWillNotDraw(const ::jboolean& arg0) const;
	::jvoid SetWindowInsetsAnimationCallback(const ::android::view::WindowInsetsAnimation_Callback& arg0) const;
	::jvoid SetX(const ::jfloat& arg0) const;
	::jvoid SetY(const ::jfloat& arg0) const;
	::jvoid SetZ(const ::jfloat& arg0) const;
	::jboolean ShowContextMenu() const;
	::jboolean ShowContextMenu(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::android::view::ActionMode StartActionMode(const ::android::view::ActionMode_Callback& arg0) const;
	::android::view::ActionMode StartActionMode(const ::android::view::ActionMode_Callback& arg0, const ::jint& arg1) const;
	::jvoid StartAnimation(const ::android::view::animation::Animation& arg0) const;
	::jboolean StartDrag(const ::android::content::ClipData& arg0, const ::android::view::View_DragShadowBuilder& arg1, const ::java::lang::Object& arg2, const ::jint& arg3) const;
	::jboolean StartDragAndDrop(const ::android::content::ClipData& arg0, const ::android::view::View_DragShadowBuilder& arg1, const ::java::lang::Object& arg2, const ::jint& arg3) const;
	::jboolean StartNestedScroll(const ::jint& arg0) const;
	::jvoid StopNestedScroll() const;
	::java::lang::String ToString() const;
	::jvoid TransformMatrixToGlobal(const ::android::graphics::Matrix& arg0) const;
	::jvoid TransformMatrixToLocal(const ::android::graphics::Matrix& arg0) const;
	::jvoid UnscheduleDrawable(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid UnscheduleDrawable(const ::android::graphics::drawable::Drawable& arg0, const ::java::lang::Runnable& arg1) const;
	::jvoid UpdateDragShadow(const ::android::view::View_DragShadowBuilder& arg0) const;
	::jboolean VerifyDrawable(const ::android::graphics::drawable::Drawable& arg0) const;
	::jboolean WillNotCacheDrawing() const;
	::jboolean WillNotDraw() const;
	static jobject __Constructor(const ::android::content::Context& arg0);
	View(const ::android::content::Context& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1);
	View(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2);
	View(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2) : ::java::lang::Object(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3);
	View(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3)) {}
	explicit View(jobject o) : ::java::lang::Object(o) {}
	View(const View& o)  : ::java::lang::Object(o) {}

};

struct KeyEvent_Callback : java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean OnKeyDown(const ::jint& arg0, const ::android::view::KeyEvent& arg1) const;
	::jboolean OnKeyLongPress(const ::jint& arg0, const ::android::view::KeyEvent& arg1) const;
	::jboolean OnKeyMultiple(const ::jint& arg0, const ::jint& arg1, const ::android::view::KeyEvent& arg2) const;
	::jboolean OnKeyUp(const ::jint& arg0, const ::android::view::KeyEvent& arg1) const;
	explicit KeyEvent_Callback(jobject o) : java::lang::Object(o) {}
	KeyEvent_Callback(const KeyEvent_Callback& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::KeyEvent_Callback();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean OnKeyDown(const ::jint& arg0, const ::android::view::KeyEvent& arg1) = 0;
		virtual ::jboolean OnKeyLongPress(const ::jint& arg0, const ::android::view::KeyEvent& arg1) = 0;
		virtual ::jboolean OnKeyMultiple(const ::jint& arg0, const ::jint& arg1, const ::android::view::KeyEvent& arg2) = 0;
		virtual ::jboolean OnKeyUp(const ::jint& arg0, const ::android::view::KeyEvent& arg1) = 0;
	};
};

struct InputEvent : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::android::view::InputDevice GetDevice() const;
	::jint GetDeviceId() const;
	::jlong GetEventTime() const;
	::jint GetSource() const;
	::jboolean IsFromSource(const ::jint& arg0) const;
	explicit InputEvent(jobject o) : ::java::lang::Object(o) {}
	InputEvent(const InputEvent& o)  : ::java::lang::Object(o) {}

};

struct KeyEvent : ::android::view::InputEvent
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::jint& fACTION_DOWN();
	static ::jint& fACTION_MULTIPLE();
	static ::jint& fACTION_UP();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fFLAG_CANCELED();
	static ::jint& fFLAG_CANCELED_LONG_PRESS();
	static ::jint& fFLAG_EDITOR_ACTION();
	static ::jint& fFLAG_FALLBACK();
	static ::jint& fFLAG_FROM_SYSTEM();
	static ::jint& fFLAG_KEEP_TOUCH_MODE();
	static ::jint& fFLAG_LONG_PRESS();
	static ::jint& fFLAG_SOFT_KEYBOARD();
	static ::jint& fFLAG_TRACKING();
	static ::jint& fFLAG_VIRTUAL_HARD_KEY();
	static ::jint& fFLAG_WOKE_HERE();
	static ::jint& fKEYCODE_0();
	static ::jint& fKEYCODE_1();
	static ::jint& fKEYCODE_11();
	static ::jint& fKEYCODE_12();
	static ::jint& fKEYCODE_2();
	static ::jint& fKEYCODE_3();
	static ::jint& fKEYCODE_3D_MODE();
	static ::jint& fKEYCODE_4();
	static ::jint& fKEYCODE_5();
	static ::jint& fKEYCODE_6();
	static ::jint& fKEYCODE_7();
	static ::jint& fKEYCODE_8();
	static ::jint& fKEYCODE_9();
	static ::jint& fKEYCODE_A();
	static ::jint& fKEYCODE_ALL_APPS();
	static ::jint& fKEYCODE_ALT_LEFT();
	static ::jint& fKEYCODE_ALT_RIGHT();
	static ::jint& fKEYCODE_APOSTROPHE();
	static ::jint& fKEYCODE_APP_SWITCH();
	static ::jint& fKEYCODE_ASSIST();
	static ::jint& fKEYCODE_AT();
	static ::jint& fKEYCODE_AVR_INPUT();
	static ::jint& fKEYCODE_AVR_POWER();
	static ::jint& fKEYCODE_B();
	static ::jint& fKEYCODE_BACK();
	static ::jint& fKEYCODE_BACKSLASH();
	static ::jint& fKEYCODE_BOOKMARK();
	static ::jint& fKEYCODE_BREAK();
	static ::jint& fKEYCODE_BRIGHTNESS_DOWN();
	static ::jint& fKEYCODE_BRIGHTNESS_UP();
	static ::jint& fKEYCODE_BUTTON_1();
	static ::jint& fKEYCODE_BUTTON_10();
	static ::jint& fKEYCODE_BUTTON_11();
	static ::jint& fKEYCODE_BUTTON_12();
	static ::jint& fKEYCODE_BUTTON_13();
	static ::jint& fKEYCODE_BUTTON_14();
	static ::jint& fKEYCODE_BUTTON_15();
	static ::jint& fKEYCODE_BUTTON_16();
	static ::jint& fKEYCODE_BUTTON_2();
	static ::jint& fKEYCODE_BUTTON_3();
	static ::jint& fKEYCODE_BUTTON_4();
	static ::jint& fKEYCODE_BUTTON_5();
	static ::jint& fKEYCODE_BUTTON_6();
	static ::jint& fKEYCODE_BUTTON_7();
	static ::jint& fKEYCODE_BUTTON_8();
	static ::jint& fKEYCODE_BUTTON_9();
	static ::jint& fKEYCODE_BUTTON_A();
	static ::jint& fKEYCODE_BUTTON_B();
	static ::jint& fKEYCODE_BUTTON_C();
	static ::jint& fKEYCODE_BUTTON_L1();
	static ::jint& fKEYCODE_BUTTON_L2();
	static ::jint& fKEYCODE_BUTTON_MODE();
	static ::jint& fKEYCODE_BUTTON_R1();
	static ::jint& fKEYCODE_BUTTON_R2();
	static ::jint& fKEYCODE_BUTTON_SELECT();
	static ::jint& fKEYCODE_BUTTON_START();
	static ::jint& fKEYCODE_BUTTON_THUMBL();
	static ::jint& fKEYCODE_BUTTON_THUMBR();
	static ::jint& fKEYCODE_BUTTON_X();
	static ::jint& fKEYCODE_BUTTON_Y();
	static ::jint& fKEYCODE_BUTTON_Z();
	static ::jint& fKEYCODE_C();
	static ::jint& fKEYCODE_CALCULATOR();
	static ::jint& fKEYCODE_CALENDAR();
	static ::jint& fKEYCODE_CALL();
	static ::jint& fKEYCODE_CAMERA();
	static ::jint& fKEYCODE_CAPS_LOCK();
	static ::jint& fKEYCODE_CAPTIONS();
	static ::jint& fKEYCODE_CHANNEL_DOWN();
	static ::jint& fKEYCODE_CHANNEL_UP();
	static ::jint& fKEYCODE_CLEAR();
	static ::jint& fKEYCODE_COMMA();
	static ::jint& fKEYCODE_CONTACTS();
	static ::jint& fKEYCODE_COPY();
	static ::jint& fKEYCODE_CTRL_LEFT();
	static ::jint& fKEYCODE_CTRL_RIGHT();
	static ::jint& fKEYCODE_CUT();
	static ::jint& fKEYCODE_D();
	static ::jint& fKEYCODE_DEL();
	static ::jint& fKEYCODE_DPAD_CENTER();
	static ::jint& fKEYCODE_DPAD_DOWN();
	static ::jint& fKEYCODE_DPAD_DOWN_LEFT();
	static ::jint& fKEYCODE_DPAD_DOWN_RIGHT();
	static ::jint& fKEYCODE_DPAD_LEFT();
	static ::jint& fKEYCODE_DPAD_RIGHT();
	static ::jint& fKEYCODE_DPAD_UP();
	static ::jint& fKEYCODE_DPAD_UP_LEFT();
	static ::jint& fKEYCODE_DPAD_UP_RIGHT();
	static ::jint& fKEYCODE_DVR();
	static ::jint& fKEYCODE_E();
	static ::jint& fKEYCODE_EISU();
	static ::jint& fKEYCODE_ENDCALL();
	static ::jint& fKEYCODE_ENTER();
	static ::jint& fKEYCODE_ENVELOPE();
	static ::jint& fKEYCODE_EQUALS();
	static ::jint& fKEYCODE_ESCAPE();
	static ::jint& fKEYCODE_EXPLORER();
	static ::jint& fKEYCODE_F();
	static ::jint& fKEYCODE_F1();
	static ::jint& fKEYCODE_F10();
	static ::jint& fKEYCODE_F11();
	static ::jint& fKEYCODE_F12();
	static ::jint& fKEYCODE_F2();
	static ::jint& fKEYCODE_F3();
	static ::jint& fKEYCODE_F4();
	static ::jint& fKEYCODE_F5();
	static ::jint& fKEYCODE_F6();
	static ::jint& fKEYCODE_F7();
	static ::jint& fKEYCODE_F8();
	static ::jint& fKEYCODE_F9();
	static ::jint& fKEYCODE_FOCUS();
	static ::jint& fKEYCODE_FORWARD();
	static ::jint& fKEYCODE_FORWARD_DEL();
	static ::jint& fKEYCODE_FUNCTION();
	static ::jint& fKEYCODE_G();
	static ::jint& fKEYCODE_GRAVE();
	static ::jint& fKEYCODE_GUIDE();
	static ::jint& fKEYCODE_H();
	static ::jint& fKEYCODE_HEADSETHOOK();
	static ::jint& fKEYCODE_HELP();
	static ::jint& fKEYCODE_HENKAN();
	static ::jint& fKEYCODE_HOME();
	static ::jint& fKEYCODE_I();
	static ::jint& fKEYCODE_INFO();
	static ::jint& fKEYCODE_INSERT();
	static ::jint& fKEYCODE_J();
	static ::jint& fKEYCODE_K();
	static ::jint& fKEYCODE_KANA();
	static ::jint& fKEYCODE_KATAKANA_HIRAGANA();
	static ::jint& fKEYCODE_L();
	static ::jint& fKEYCODE_LANGUAGE_SWITCH();
	static ::jint& fKEYCODE_LAST_CHANNEL();
	static ::jint& fKEYCODE_LEFT_BRACKET();
	static ::jint& fKEYCODE_M();
	static ::jint& fKEYCODE_MANNER_MODE();
	static ::jint& fKEYCODE_MEDIA_AUDIO_TRACK();
	static ::jint& fKEYCODE_MEDIA_CLOSE();
	static ::jint& fKEYCODE_MEDIA_EJECT();
	static ::jint& fKEYCODE_MEDIA_FAST_FORWARD();
	static ::jint& fKEYCODE_MEDIA_NEXT();
	static ::jint& fKEYCODE_MEDIA_PAUSE();
	static ::jint& fKEYCODE_MEDIA_PLAY();
	static ::jint& fKEYCODE_MEDIA_PLAY_PAUSE();
	static ::jint& fKEYCODE_MEDIA_PREVIOUS();
	static ::jint& fKEYCODE_MEDIA_RECORD();
	static ::jint& fKEYCODE_MEDIA_REWIND();
	static ::jint& fKEYCODE_MEDIA_SKIP_BACKWARD();
	static ::jint& fKEYCODE_MEDIA_SKIP_FORWARD();
	static ::jint& fKEYCODE_MEDIA_STEP_BACKWARD();
	static ::jint& fKEYCODE_MEDIA_STEP_FORWARD();
	static ::jint& fKEYCODE_MEDIA_STOP();
	static ::jint& fKEYCODE_MEDIA_TOP_MENU();
	static ::jint& fKEYCODE_MENU();
	static ::jint& fKEYCODE_META_LEFT();
	static ::jint& fKEYCODE_META_RIGHT();
	static ::jint& fKEYCODE_MINUS();
	static ::jint& fKEYCODE_MOVE_END();
	static ::jint& fKEYCODE_MOVE_HOME();
	static ::jint& fKEYCODE_MUHENKAN();
	static ::jint& fKEYCODE_MUSIC();
	static ::jint& fKEYCODE_MUTE();
	static ::jint& fKEYCODE_N();
	static ::jint& fKEYCODE_NAVIGATE_IN();
	static ::jint& fKEYCODE_NAVIGATE_NEXT();
	static ::jint& fKEYCODE_NAVIGATE_OUT();
	static ::jint& fKEYCODE_NAVIGATE_PREVIOUS();
	static ::jint& fKEYCODE_NOTIFICATION();
	static ::jint& fKEYCODE_NUM();
	static ::jint& fKEYCODE_NUMPAD_0();
	static ::jint& fKEYCODE_NUMPAD_1();
	static ::jint& fKEYCODE_NUMPAD_2();
	static ::jint& fKEYCODE_NUMPAD_3();
	static ::jint& fKEYCODE_NUMPAD_4();
	static ::jint& fKEYCODE_NUMPAD_5();
	static ::jint& fKEYCODE_NUMPAD_6();
	static ::jint& fKEYCODE_NUMPAD_7();
	static ::jint& fKEYCODE_NUMPAD_8();
	static ::jint& fKEYCODE_NUMPAD_9();
	static ::jint& fKEYCODE_NUMPAD_ADD();
	static ::jint& fKEYCODE_NUMPAD_COMMA();
	static ::jint& fKEYCODE_NUMPAD_DIVIDE();
	static ::jint& fKEYCODE_NUMPAD_DOT();
	static ::jint& fKEYCODE_NUMPAD_ENTER();
	static ::jint& fKEYCODE_NUMPAD_EQUALS();
	static ::jint& fKEYCODE_NUMPAD_LEFT_PAREN();
	static ::jint& fKEYCODE_NUMPAD_MULTIPLY();
	static ::jint& fKEYCODE_NUMPAD_RIGHT_PAREN();
	static ::jint& fKEYCODE_NUMPAD_SUBTRACT();
	static ::jint& fKEYCODE_NUM_LOCK();
	static ::jint& fKEYCODE_O();
	static ::jint& fKEYCODE_P();
	static ::jint& fKEYCODE_PAGE_DOWN();
	static ::jint& fKEYCODE_PAGE_UP();
	static ::jint& fKEYCODE_PAIRING();
	static ::jint& fKEYCODE_PASTE();
	static ::jint& fKEYCODE_PERIOD();
	static ::jint& fKEYCODE_PICTSYMBOLS();
	static ::jint& fKEYCODE_PLUS();
	static ::jint& fKEYCODE_POUND();
	static ::jint& fKEYCODE_POWER();
	static ::jint& fKEYCODE_PROFILE_SWITCH();
	static ::jint& fKEYCODE_PROG_BLUE();
	static ::jint& fKEYCODE_PROG_GREEN();
	static ::jint& fKEYCODE_PROG_RED();
	static ::jint& fKEYCODE_PROG_YELLOW();
	static ::jint& fKEYCODE_Q();
	static ::jint& fKEYCODE_R();
	static ::jint& fKEYCODE_REFRESH();
	static ::jint& fKEYCODE_RIGHT_BRACKET();
	static ::jint& fKEYCODE_RO();
	static ::jint& fKEYCODE_S();
	static ::jint& fKEYCODE_SCROLL_LOCK();
	static ::jint& fKEYCODE_SEARCH();
	static ::jint& fKEYCODE_SEMICOLON();
	static ::jint& fKEYCODE_SETTINGS();
	static ::jint& fKEYCODE_SHIFT_LEFT();
	static ::jint& fKEYCODE_SHIFT_RIGHT();
	static ::jint& fKEYCODE_SLASH();
	static ::jint& fKEYCODE_SLEEP();
	static ::jint& fKEYCODE_SOFT_LEFT();
	static ::jint& fKEYCODE_SOFT_RIGHT();
	static ::jint& fKEYCODE_SOFT_SLEEP();
	static ::jint& fKEYCODE_SPACE();
	static ::jint& fKEYCODE_STAR();
	static ::jint& fKEYCODE_STB_INPUT();
	static ::jint& fKEYCODE_STB_POWER();
	static ::jint& fKEYCODE_STEM_1();
	static ::jint& fKEYCODE_STEM_2();
	static ::jint& fKEYCODE_STEM_3();
	static ::jint& fKEYCODE_STEM_PRIMARY();
	static ::jint& fKEYCODE_SWITCH_CHARSET();
	static ::jint& fKEYCODE_SYM();
	static ::jint& fKEYCODE_SYSRQ();
	static ::jint& fKEYCODE_SYSTEM_NAVIGATION_DOWN();
	static ::jint& fKEYCODE_SYSTEM_NAVIGATION_LEFT();
	static ::jint& fKEYCODE_SYSTEM_NAVIGATION_RIGHT();
	static ::jint& fKEYCODE_SYSTEM_NAVIGATION_UP();
	static ::jint& fKEYCODE_T();
	static ::jint& fKEYCODE_TAB();
	static ::jint& fKEYCODE_THUMBS_DOWN();
	static ::jint& fKEYCODE_THUMBS_UP();
	static ::jint& fKEYCODE_TV();
	static ::jint& fKEYCODE_TV_ANTENNA_CABLE();
	static ::jint& fKEYCODE_TV_AUDIO_DESCRIPTION();
	static ::jint& fKEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN();
	static ::jint& fKEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP();
	static ::jint& fKEYCODE_TV_CONTENTS_MENU();
	static ::jint& fKEYCODE_TV_DATA_SERVICE();
	static ::jint& fKEYCODE_TV_INPUT();
	static ::jint& fKEYCODE_TV_INPUT_COMPONENT_1();
	static ::jint& fKEYCODE_TV_INPUT_COMPONENT_2();
	static ::jint& fKEYCODE_TV_INPUT_COMPOSITE_1();
	static ::jint& fKEYCODE_TV_INPUT_COMPOSITE_2();
	static ::jint& fKEYCODE_TV_INPUT_HDMI_1();
	static ::jint& fKEYCODE_TV_INPUT_HDMI_2();
	static ::jint& fKEYCODE_TV_INPUT_HDMI_3();
	static ::jint& fKEYCODE_TV_INPUT_HDMI_4();
	static ::jint& fKEYCODE_TV_INPUT_VGA_1();
	static ::jint& fKEYCODE_TV_MEDIA_CONTEXT_MENU();
	static ::jint& fKEYCODE_TV_NETWORK();
	static ::jint& fKEYCODE_TV_NUMBER_ENTRY();
	static ::jint& fKEYCODE_TV_POWER();
	static ::jint& fKEYCODE_TV_RADIO_SERVICE();
	static ::jint& fKEYCODE_TV_SATELLITE();
	static ::jint& fKEYCODE_TV_SATELLITE_BS();
	static ::jint& fKEYCODE_TV_SATELLITE_CS();
	static ::jint& fKEYCODE_TV_SATELLITE_SERVICE();
	static ::jint& fKEYCODE_TV_TELETEXT();
	static ::jint& fKEYCODE_TV_TERRESTRIAL_ANALOG();
	static ::jint& fKEYCODE_TV_TERRESTRIAL_DIGITAL();
	static ::jint& fKEYCODE_TV_TIMER_PROGRAMMING();
	static ::jint& fKEYCODE_TV_ZOOM_MODE();
	static ::jint& fKEYCODE_U();
	static ::jint& fKEYCODE_UNKNOWN();
	static ::jint& fKEYCODE_V();
	static ::jint& fKEYCODE_VOICE_ASSIST();
	static ::jint& fKEYCODE_VOLUME_DOWN();
	static ::jint& fKEYCODE_VOLUME_MUTE();
	static ::jint& fKEYCODE_VOLUME_UP();
	static ::jint& fKEYCODE_W();
	static ::jint& fKEYCODE_WAKEUP();
	static ::jint& fKEYCODE_WINDOW();
	static ::jint& fKEYCODE_X();
	static ::jint& fKEYCODE_Y();
	static ::jint& fKEYCODE_YEN();
	static ::jint& fKEYCODE_Z();
	static ::jint& fKEYCODE_ZENKAKU_HANKAKU();
	static ::jint& fKEYCODE_ZOOM_IN();
	static ::jint& fKEYCODE_ZOOM_OUT();
	static ::jint& fMAX_KEYCODE();
	static ::jint& fMETA_ALT_LEFT_ON();
	static ::jint& fMETA_ALT_MASK();
	static ::jint& fMETA_ALT_ON();
	static ::jint& fMETA_ALT_RIGHT_ON();
	static ::jint& fMETA_CAPS_LOCK_ON();
	static ::jint& fMETA_CTRL_LEFT_ON();
	static ::jint& fMETA_CTRL_MASK();
	static ::jint& fMETA_CTRL_ON();
	static ::jint& fMETA_CTRL_RIGHT_ON();
	static ::jint& fMETA_FUNCTION_ON();
	static ::jint& fMETA_META_LEFT_ON();
	static ::jint& fMETA_META_MASK();
	static ::jint& fMETA_META_ON();
	static ::jint& fMETA_META_RIGHT_ON();
	static ::jint& fMETA_NUM_LOCK_ON();
	static ::jint& fMETA_SCROLL_LOCK_ON();
	static ::jint& fMETA_SHIFT_LEFT_ON();
	static ::jint& fMETA_SHIFT_MASK();
	static ::jint& fMETA_SHIFT_ON();
	static ::jint& fMETA_SHIFT_RIGHT_ON();
	static ::jint& fMETA_SYM_ON();
	static ::android::view::KeyEvent ChangeAction(const ::android::view::KeyEvent& arg0, const ::jint& arg1);
	static ::android::view::KeyEvent ChangeFlags(const ::android::view::KeyEvent& arg0, const ::jint& arg1);
	static ::android::view::KeyEvent ChangeTimeRepeat(const ::android::view::KeyEvent& arg0, const ::jlong& arg1, const ::jint& arg2);
	static ::android::view::KeyEvent ChangeTimeRepeat(const ::android::view::KeyEvent& arg0, const ::jlong& arg1, const ::jint& arg2, const ::jint& arg3);
	::jboolean Dispatch(const ::android::view::KeyEvent_Callback& arg0) const;
	::jboolean Dispatch(const ::android::view::KeyEvent_Callback& arg0, const ::android::view::KeyEvent_DispatcherState& arg1, const ::java::lang::Object& arg2) const;
	::jint GetAction() const;
	::java::lang::String GetCharacters() const;
	static ::jint GetDeadChar(const ::jint& arg0, const ::jint& arg1);
	::jint GetDeviceId() const;
	::jchar GetDisplayLabel() const;
	::jlong GetDownTime() const;
	::jlong GetEventTime() const;
	::jint GetFlags() const;
	::android::view::KeyCharacterMap GetKeyCharacterMap() const;
	::jint GetKeyCode() const;
	::jboolean GetKeyData(const ::android::view::KeyCharacterMap_KeyData& arg0) const;
	::jchar GetMatch(const jni::Array< ::jchar >& arg0) const;
	::jchar GetMatch(const jni::Array< ::jchar >& arg0, const ::jint& arg1) const;
	static ::jint GetMaxKeyCode();
	::jint GetMetaState() const;
	static ::jint GetModifierMetaStateMask();
	::jint GetModifiers() const;
	::jchar GetNumber() const;
	::jint GetRepeatCount() const;
	::jint GetScanCode() const;
	::jint GetSource() const;
	::jint GetUnicodeChar() const;
	::jint GetUnicodeChar(const ::jint& arg0) const;
	::jboolean HasModifiers(const ::jint& arg0) const;
	::jboolean HasNoModifiers() const;
	::jboolean IsAltPressed() const;
	::jboolean IsCanceled() const;
	::jboolean IsCapsLockOn() const;
	::jboolean IsCtrlPressed() const;
	::jboolean IsFunctionPressed() const;
	static ::jboolean IsGamepadButton(const ::jint& arg0);
	::jboolean IsLongPress() const;
	static ::jboolean IsMediaSessionKey(const ::jint& arg0);
	::jboolean IsMetaPressed() const;
	static ::jboolean IsModifierKey(const ::jint& arg0);
	::jboolean IsNumLockOn() const;
	::jboolean IsPrintingKey() const;
	::jboolean IsScrollLockOn() const;
	::jboolean IsShiftPressed() const;
	::jboolean IsSymPressed() const;
	::jboolean IsSystem() const;
	::jboolean IsTracking() const;
	static ::jint KeyCodeFromString(const ::java::lang::String& arg0);
	static ::java::lang::String KeyCodeToString(const ::jint& arg0);
	static ::jboolean MetaStateHasModifiers(const ::jint& arg0, const ::jint& arg1);
	static ::jboolean MetaStateHasNoModifiers(const ::jint& arg0);
	static ::jint NormalizeMetaState(const ::jint& arg0);
	::jvoid SetSource(const ::jint& arg0) const;
	::jvoid StartTracking() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor(const ::jint& arg0, const ::jint& arg1);
	KeyEvent(const ::jint& arg0, const ::jint& arg1) : ::android::view::InputEvent(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::jlong& arg0, const ::jlong& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4);
	KeyEvent(const ::jlong& arg0, const ::jlong& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4) : ::android::view::InputEvent(__Constructor(arg0, arg1, arg2, arg3, arg4)) {}
	static jobject __Constructor(const ::jlong& arg0, const ::jlong& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5);
	KeyEvent(const ::jlong& arg0, const ::jlong& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5) : ::android::view::InputEvent(__Constructor(arg0, arg1, arg2, arg3, arg4, arg5)) {}
	static jobject __Constructor(const ::jlong& arg0, const ::jlong& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5, const ::jint& arg6, const ::jint& arg7);
	KeyEvent(const ::jlong& arg0, const ::jlong& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5, const ::jint& arg6, const ::jint& arg7) : ::android::view::InputEvent(__Constructor(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)) {}
	static jobject __Constructor(const ::jlong& arg0, const ::jlong& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5, const ::jint& arg6, const ::jint& arg7, const ::jint& arg8);
	KeyEvent(const ::jlong& arg0, const ::jlong& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5, const ::jint& arg6, const ::jint& arg7, const ::jint& arg8) : ::android::view::InputEvent(__Constructor(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)) {}
	static jobject __Constructor(const ::jlong& arg0, const ::jlong& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5, const ::jint& arg6, const ::jint& arg7, const ::jint& arg8, const ::jint& arg9);
	KeyEvent(const ::jlong& arg0, const ::jlong& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5, const ::jint& arg6, const ::jint& arg7, const ::jint& arg8, const ::jint& arg9) : ::android::view::InputEvent(__Constructor(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)) {}
	static jobject __Constructor(const ::jlong& arg0, const ::java::lang::String& arg1, const ::jint& arg2, const ::jint& arg3);
	KeyEvent(const ::jlong& arg0, const ::java::lang::String& arg1, const ::jint& arg2, const ::jint& arg3) : ::android::view::InputEvent(__Constructor(arg0, arg1, arg2, arg3)) {}
	static jobject __Constructor(const ::android::view::KeyEvent& arg0, const ::jlong& arg1, const ::jint& arg2);
	KeyEvent(const ::android::view::KeyEvent& arg0, const ::jlong& arg1, const ::jint& arg2) : ::android::view::InputEvent(__Constructor(arg0, arg1, arg2)) {}
	explicit KeyEvent(jobject o) : ::android::view::InputEvent(o) {}
	KeyEvent(const KeyEvent& o)  : ::android::view::InputEvent(o) {}

};

struct InputDevice : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fKEYBOARD_TYPE_ALPHABETIC();
	static ::jint& fKEYBOARD_TYPE_NONE();
	static ::jint& fKEYBOARD_TYPE_NON_ALPHABETIC();
	static ::jint& fMOTION_RANGE_ORIENTATION();
	static ::jint& fMOTION_RANGE_PRESSURE();
	static ::jint& fMOTION_RANGE_SIZE();
	static ::jint& fMOTION_RANGE_TOOL_MAJOR();
	static ::jint& fMOTION_RANGE_TOOL_MINOR();
	static ::jint& fMOTION_RANGE_TOUCH_MAJOR();
	static ::jint& fMOTION_RANGE_TOUCH_MINOR();
	static ::jint& fMOTION_RANGE_X();
	static ::jint& fMOTION_RANGE_Y();
	static ::jint& fSOURCE_ANY();
	static ::jint& fSOURCE_BLUETOOTH_STYLUS();
	static ::jint& fSOURCE_CLASS_BUTTON();
	static ::jint& fSOURCE_CLASS_JOYSTICK();
	static ::jint& fSOURCE_CLASS_MASK();
	static ::jint& fSOURCE_CLASS_NONE();
	static ::jint& fSOURCE_CLASS_POINTER();
	static ::jint& fSOURCE_CLASS_POSITION();
	static ::jint& fSOURCE_CLASS_TRACKBALL();
	static ::jint& fSOURCE_DPAD();
	static ::jint& fSOURCE_GAMEPAD();
	static ::jint& fSOURCE_HDMI();
	static ::jint& fSOURCE_JOYSTICK();
	static ::jint& fSOURCE_KEYBOARD();
	static ::jint& fSOURCE_MOUSE();
	static ::jint& fSOURCE_MOUSE_RELATIVE();
	static ::jint& fSOURCE_ROTARY_ENCODER();
	static ::jint& fSOURCE_SENSOR();
	static ::jint& fSOURCE_STYLUS();
	static ::jint& fSOURCE_TOUCHPAD();
	static ::jint& fSOURCE_TOUCHSCREEN();
	static ::jint& fSOURCE_TOUCH_NAVIGATION();
	static ::jint& fSOURCE_TRACKBALL();
	static ::jint& fSOURCE_UNKNOWN();
	::jint DescribeContents() const;
	::android::hardware::BatteryState GetBatteryState() const;
	::jint GetControllerNumber() const;
	::java::lang::String GetDescriptor() const;
	static ::android::view::InputDevice GetDevice(const ::jint& arg0);
	static jni::Array< ::jint > GetDeviceIds();
	::jint GetId() const;
	::android::view::KeyCharacterMap GetKeyCharacterMap() const;
	::jint GetKeyboardType() const;
	::android::hardware::lights::LightsManager GetLightsManager() const;
	::android::view::InputDevice_MotionRange GetMotionRange(const ::jint& arg0) const;
	::android::view::InputDevice_MotionRange GetMotionRange(const ::jint& arg0, const ::jint& arg1) const;
	::java::util::List GetMotionRanges() const;
	::java::lang::String GetName() const;
	::jint GetProductId() const;
	::android::hardware::SensorManager GetSensorManager() const;
	::jint GetSources() const;
	::jint GetVendorId() const;
	::android::os::Vibrator GetVibrator() const;
	::android::os::VibratorManager GetVibratorManager() const;
	jni::Array< ::jboolean > HasKeys(const jni::Array< ::jint >& arg0) const;
	::jboolean HasMicrophone() const;
	::jboolean IsEnabled() const;
	::jboolean IsExternal() const;
	::jboolean IsVirtual() const;
	::jboolean SupportsSource(const ::jint& arg0) const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit InputDevice(jobject o) : ::java::lang::Object(o) {}
	InputDevice(const InputDevice& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace hardware { 
struct BatteryState : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fSTATUS_CHARGING();
	static ::jint& fSTATUS_DISCHARGING();
	static ::jint& fSTATUS_FULL();
	static ::jint& fSTATUS_NOT_CHARGING();
	static ::jint& fSTATUS_UNKNOWN();
	::jfloat GetCapacity() const;
	::jint GetStatus() const;
	::jboolean IsPresent() const;
	static jobject __Constructor();
	BatteryState() : ::java::lang::Object(__Constructor()) {}
	explicit BatteryState(jobject o) : ::java::lang::Object(o) {}
	BatteryState(const BatteryState& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace view { 
struct KeyCharacterMap : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::jint& fALPHA();
	static ::jint& fBUILT_IN_KEYBOARD();
	static ::jint& fCOMBINING_ACCENT();
	static ::jint& fCOMBINING_ACCENT_MASK();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fFULL();
	static ::jchar& fHEX_INPUT();
	static ::jint& fMODIFIER_BEHAVIOR_CHORDED();
	static ::jint& fMODIFIER_BEHAVIOR_CHORDED_OR_TOGGLED();
	static ::jint& fNUMERIC();
	static ::jchar& fPICKER_DIALOG_INPUT();
	static ::jint& fPREDICTIVE();
	static ::jint& fSPECIAL_FUNCTION();
	static ::jint& fVIRTUAL_KEYBOARD();
	::jint DescribeContents() const;
	static ::jboolean DeviceHasKey(const ::jint& arg0);
	static jni::Array< ::jboolean > DeviceHasKeys(const jni::Array< ::jint >& arg0);
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jvoid Finalize() const;
	::jint Get(const ::jint& arg0, const ::jint& arg1) const;
	static ::jint GetDeadChar(const ::jint& arg0, const ::jint& arg1);
	::jchar GetDisplayLabel(const ::jint& arg0) const;
	jni::Array< ::android::view::KeyEvent > GetEvents(const jni::Array< ::jchar >& arg0) const;
	::jboolean GetKeyData(const ::jint& arg0, const ::android::view::KeyCharacterMap_KeyData& arg1) const;
	::jint GetKeyboardType() const;
	::jchar GetMatch(const ::jint& arg0, const jni::Array< ::jchar >& arg1) const;
	::jchar GetMatch(const ::jint& arg0, const jni::Array< ::jchar >& arg1, const ::jint& arg2) const;
	::jint GetModifierBehavior() const;
	::jchar GetNumber(const ::jint& arg0) const;
	::jboolean IsPrintingKey(const ::jint& arg0) const;
	static ::android::view::KeyCharacterMap Load(const ::jint& arg0);
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit KeyCharacterMap(jobject o) : ::java::lang::Object(o) {}
	KeyCharacterMap(const KeyCharacterMap& o)  : ::java::lang::Object(o) {}

};

struct KeyCharacterMap_KeyData : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fMETA_LENGTH();
	::jchar fDisplayLabel() const;
	void fDisplayLabel(const ::jchar& arg0) const;
	jni::Array< ::jchar > fMeta() const;
	void fMeta(const jni::Array< ::jchar >& arg0) const;
	::jchar fNumber() const;
	void fNumber(const ::jchar& arg0) const;
	static jobject __Constructor();
	KeyCharacterMap_KeyData() : ::java::lang::Object(__Constructor()) {}
	explicit KeyCharacterMap_KeyData(jobject o) : ::java::lang::Object(o) {}
	KeyCharacterMap_KeyData(const KeyCharacterMap_KeyData& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace hardware { namespace lights { 
struct LightsManager : ::java::lang::Object
{
	static jni::Class __CLASS;

	::android::hardware::lights::LightState GetLightState(const ::android::hardware::lights::Light& arg0) const;
	::java::util::List GetLights() const;
	::android::hardware::lights::LightsManager_LightsSession OpenSession() const;
	explicit LightsManager(jobject o) : ::java::lang::Object(o) {}
	LightsManager(const LightsManager& o)  : ::java::lang::Object(o) {}

};

struct Light : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fLIGHT_CAPABILITY_BRIGHTNESS();
	static ::jint& fLIGHT_CAPABILITY_RGB();
	static ::jint& fLIGHT_TYPE_INPUT();
	static ::jint& fLIGHT_TYPE_MICROPHONE();
	static ::jint& fLIGHT_TYPE_PLAYER_ID();
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint GetId() const;
	::java::lang::String GetName() const;
	::jint GetOrdinal() const;
	::jint GetType() const;
	::jboolean HasBrightnessControl() const;
	::jboolean HasRgbControl() const;
	::jint HashCode() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit Light(jobject o) : ::java::lang::Object(o) {}
	Light(const Light& o)  : ::java::lang::Object(o) {}

};

struct LightState : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::jint GetColor() const;
	::jint GetPlayerId() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit LightState(jobject o) : ::java::lang::Object(o) {}
	LightState(const LightState& o)  : ::java::lang::Object(o) {}

};

struct LightsManager_LightsSession : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::AutoCloseable();
	::jvoid Close() const;
	::jvoid RequestLights(const ::android::hardware::lights::LightsRequest& arg0) const;
	explicit LightsManager_LightsSession(jobject o) : ::java::lang::Object(o) {}
	LightsManager_LightsSession(const LightsManager_LightsSession& o)  : ::java::lang::Object(o) {}

};

struct LightsRequest : ::java::lang::Object
{
	static jni::Class __CLASS;

	::java::util::List GetLightStates() const;
	::java::util::List GetLights() const;
	::java::util::Map GetLightsAndStates() const;
	explicit LightsRequest(jobject o) : ::java::lang::Object(o) {}
	LightsRequest(const LightsRequest& o)  : ::java::lang::Object(o) {}

};

}}}

namespace android { namespace view { 
struct InputDevice_MotionRange : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jint GetAxis() const;
	::jfloat GetFlat() const;
	::jfloat GetFuzz() const;
	::jfloat GetMax() const;
	::jfloat GetMin() const;
	::jfloat GetRange() const;
	::jfloat GetResolution() const;
	::jint GetSource() const;
	::jboolean IsFromSource(const ::jint& arg0) const;
	explicit InputDevice_MotionRange(jobject o) : ::java::lang::Object(o) {}
	InputDevice_MotionRange(const InputDevice_MotionRange& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace hardware { 
struct SensorManager : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fAXIS_MINUS_X();
	static ::jint& fAXIS_MINUS_Y();
	static ::jint& fAXIS_MINUS_Z();
	static ::jint& fAXIS_X();
	static ::jint& fAXIS_Y();
	static ::jint& fAXIS_Z();
	static ::jint& fDATA_X();
	static ::jint& fDATA_Y();
	static ::jint& fDATA_Z();
	static ::jfloat& fGRAVITY_DEATH_STAR_I();
	static ::jfloat& fGRAVITY_EARTH();
	static ::jfloat& fGRAVITY_JUPITER();
	static ::jfloat& fGRAVITY_MARS();
	static ::jfloat& fGRAVITY_MERCURY();
	static ::jfloat& fGRAVITY_MOON();
	static ::jfloat& fGRAVITY_NEPTUNE();
	static ::jfloat& fGRAVITY_PLUTO();
	static ::jfloat& fGRAVITY_SATURN();
	static ::jfloat& fGRAVITY_SUN();
	static ::jfloat& fGRAVITY_THE_ISLAND();
	static ::jfloat& fGRAVITY_URANUS();
	static ::jfloat& fGRAVITY_VENUS();
	static ::jfloat& fLIGHT_CLOUDY();
	static ::jfloat& fLIGHT_FULLMOON();
	static ::jfloat& fLIGHT_NO_MOON();
	static ::jfloat& fLIGHT_OVERCAST();
	static ::jfloat& fLIGHT_SHADE();
	static ::jfloat& fLIGHT_SUNLIGHT();
	static ::jfloat& fLIGHT_SUNLIGHT_MAX();
	static ::jfloat& fLIGHT_SUNRISE();
	static ::jfloat& fMAGNETIC_FIELD_EARTH_MAX();
	static ::jfloat& fMAGNETIC_FIELD_EARTH_MIN();
	static ::jfloat& fPRESSURE_STANDARD_ATMOSPHERE();
	static ::jint& fRAW_DATA_INDEX();
	static ::jint& fRAW_DATA_X();
	static ::jint& fRAW_DATA_Y();
	static ::jint& fRAW_DATA_Z();
	static ::jint& fSENSOR_ACCELEROMETER();
	static ::jint& fSENSOR_ALL();
	static ::jint& fSENSOR_DELAY_FASTEST();
	static ::jint& fSENSOR_DELAY_GAME();
	static ::jint& fSENSOR_DELAY_NORMAL();
	static ::jint& fSENSOR_DELAY_UI();
	static ::jint& fSENSOR_LIGHT();
	static ::jint& fSENSOR_MAGNETIC_FIELD();
	static ::jint& fSENSOR_MAX();
	static ::jint& fSENSOR_MIN();
	static ::jint& fSENSOR_ORIENTATION();
	static ::jint& fSENSOR_ORIENTATION_RAW();
	static ::jint& fSENSOR_PROXIMITY();
	static ::jint& fSENSOR_STATUS_ACCURACY_HIGH();
	static ::jint& fSENSOR_STATUS_ACCURACY_LOW();
	static ::jint& fSENSOR_STATUS_ACCURACY_MEDIUM();
	static ::jint& fSENSOR_STATUS_NO_CONTACT();
	static ::jint& fSENSOR_STATUS_UNRELIABLE();
	static ::jint& fSENSOR_TEMPERATURE();
	static ::jint& fSENSOR_TRICORDER();
	static ::jfloat& fSTANDARD_GRAVITY();
	::jboolean CancelTriggerSensor(const ::android::hardware::TriggerEventListener& arg0, const ::android::hardware::Sensor& arg1) const;
	::android::hardware::SensorDirectChannel CreateDirectChannel(const ::android::hardware::HardwareBuffer& arg0) const;
	::android::hardware::SensorDirectChannel CreateDirectChannel(const ::android::os::MemoryFile& arg0) const;
	::jboolean Flush(const ::android::hardware::SensorEventListener& arg0) const;
	static ::jfloat GetAltitude(const ::jfloat& arg0, const ::jfloat& arg1);
	static ::jvoid GetAngleChange(const jni::Array< ::jfloat >& arg0, const jni::Array< ::jfloat >& arg1, const jni::Array< ::jfloat >& arg2);
	::android::hardware::Sensor GetDefaultSensor(const ::jint& arg0) const;
	::android::hardware::Sensor GetDefaultSensor(const ::jint& arg0, const ::jboolean& arg1) const;
	::java::util::List GetDynamicSensorList(const ::jint& arg0) const;
	static ::jfloat GetInclination(const jni::Array< ::jfloat >& arg0);
	static jni::Array< ::jfloat > GetOrientation(const jni::Array< ::jfloat >& arg0, const jni::Array< ::jfloat >& arg1);
	static ::jvoid GetQuaternionFromVector(const jni::Array< ::jfloat >& arg0, const jni::Array< ::jfloat >& arg1);
	static ::jboolean GetRotationMatrix(const jni::Array< ::jfloat >& arg0, const jni::Array< ::jfloat >& arg1, const jni::Array< ::jfloat >& arg2, const jni::Array< ::jfloat >& arg3);
	static ::jvoid GetRotationMatrixFromVector(const jni::Array< ::jfloat >& arg0, const jni::Array< ::jfloat >& arg1);
	::java::util::List GetSensorList(const ::jint& arg0) const;
	::jint GetSensors() const;
	::jboolean IsDynamicSensorDiscoverySupported() const;
	::jvoid RegisterDynamicSensorCallback(const ::android::hardware::SensorManager_DynamicSensorCallback& arg0) const;
	::jvoid RegisterDynamicSensorCallback(const ::android::hardware::SensorManager_DynamicSensorCallback& arg0, const ::android::os::Handler& arg1) const;
	::jboolean RegisterListener(const ::android::hardware::SensorEventListener& arg0, const ::android::hardware::Sensor& arg1, const ::jint& arg2) const;
	::jboolean RegisterListener(const ::android::hardware::SensorEventListener& arg0, const ::android::hardware::Sensor& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jboolean RegisterListener(const ::android::hardware::SensorEventListener& arg0, const ::android::hardware::Sensor& arg1, const ::jint& arg2, const ::jint& arg3, const ::android::os::Handler& arg4) const;
	::jboolean RegisterListener(const ::android::hardware::SensorEventListener& arg0, const ::android::hardware::Sensor& arg1, const ::jint& arg2, const ::android::os::Handler& arg3) const;
	::jboolean RegisterListener(const ::android::hardware::SensorListener& arg0, const ::jint& arg1) const;
	::jboolean RegisterListener(const ::android::hardware::SensorListener& arg0, const ::jint& arg1, const ::jint& arg2) const;
	static ::jboolean RemapCoordinateSystem(const jni::Array< ::jfloat >& arg0, const ::jint& arg1, const ::jint& arg2, const jni::Array< ::jfloat >& arg3);
	::jboolean RequestTriggerSensor(const ::android::hardware::TriggerEventListener& arg0, const ::android::hardware::Sensor& arg1) const;
	::jvoid UnregisterDynamicSensorCallback(const ::android::hardware::SensorManager_DynamicSensorCallback& arg0) const;
	::jvoid UnregisterListener(const ::android::hardware::SensorEventListener& arg0) const;
	::jvoid UnregisterListener(const ::android::hardware::SensorEventListener& arg0, const ::android::hardware::Sensor& arg1) const;
	::jvoid UnregisterListener(const ::android::hardware::SensorListener& arg0) const;
	::jvoid UnregisterListener(const ::android::hardware::SensorListener& arg0, const ::jint& arg1) const;
	explicit SensorManager(jobject o) : ::java::lang::Object(o) {}
	SensorManager(const SensorManager& o)  : ::java::lang::Object(o) {}

};

struct TriggerEventListener : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnTrigger(const ::android::hardware::TriggerEvent& arg0) const;
	static jobject __Constructor();
	TriggerEventListener() : ::java::lang::Object(__Constructor()) {}
	explicit TriggerEventListener(jobject o) : ::java::lang::Object(o) {}
	TriggerEventListener(const TriggerEventListener& o)  : ::java::lang::Object(o) {}

};

struct TriggerEvent : ::java::lang::Object
{
	static jni::Class __CLASS;

	::android::hardware::Sensor fSensor() const;
	void fSensor(const ::android::hardware::Sensor& arg0) const;
	::jlong fTimestamp() const;
	void fTimestamp(const ::jlong& arg0) const;
	jni::Array< ::jfloat > fValues() const;
	explicit TriggerEvent(jobject o) : ::java::lang::Object(o) {}
	TriggerEvent(const TriggerEvent& o)  : ::java::lang::Object(o) {}

};

struct Sensor : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fREPORTING_MODE_CONTINUOUS();
	static ::jint& fREPORTING_MODE_ONE_SHOT();
	static ::jint& fREPORTING_MODE_ON_CHANGE();
	static ::jint& fREPORTING_MODE_SPECIAL_TRIGGER();
	static ::java::lang::String& fSTRING_TYPE_ACCELEROMETER();
	static ::java::lang::String& fSTRING_TYPE_ACCELEROMETER_UNCALIBRATED();
	static ::java::lang::String& fSTRING_TYPE_AMBIENT_TEMPERATURE();
	static ::java::lang::String& fSTRING_TYPE_GAME_ROTATION_VECTOR();
	static ::java::lang::String& fSTRING_TYPE_GEOMAGNETIC_ROTATION_VECTOR();
	static ::java::lang::String& fSTRING_TYPE_GRAVITY();
	static ::java::lang::String& fSTRING_TYPE_GYROSCOPE();
	static ::java::lang::String& fSTRING_TYPE_GYROSCOPE_UNCALIBRATED();
	static ::java::lang::String& fSTRING_TYPE_HEART_BEAT();
	static ::java::lang::String& fSTRING_TYPE_HEART_RATE();
	static ::java::lang::String& fSTRING_TYPE_HINGE_ANGLE();
	static ::java::lang::String& fSTRING_TYPE_LIGHT();
	static ::java::lang::String& fSTRING_TYPE_LINEAR_ACCELERATION();
	static ::java::lang::String& fSTRING_TYPE_LOW_LATENCY_OFFBODY_DETECT();
	static ::java::lang::String& fSTRING_TYPE_MAGNETIC_FIELD();
	static ::java::lang::String& fSTRING_TYPE_MAGNETIC_FIELD_UNCALIBRATED();
	static ::java::lang::String& fSTRING_TYPE_MOTION_DETECT();
	static ::java::lang::String& fSTRING_TYPE_ORIENTATION();
	static ::java::lang::String& fSTRING_TYPE_POSE_6DOF();
	static ::java::lang::String& fSTRING_TYPE_PRESSURE();
	static ::java::lang::String& fSTRING_TYPE_PROXIMITY();
	static ::java::lang::String& fSTRING_TYPE_RELATIVE_HUMIDITY();
	static ::java::lang::String& fSTRING_TYPE_ROTATION_VECTOR();
	static ::java::lang::String& fSTRING_TYPE_SIGNIFICANT_MOTION();
	static ::java::lang::String& fSTRING_TYPE_STATIONARY_DETECT();
	static ::java::lang::String& fSTRING_TYPE_STEP_COUNTER();
	static ::java::lang::String& fSTRING_TYPE_STEP_DETECTOR();
	static ::java::lang::String& fSTRING_TYPE_TEMPERATURE();
	static ::jint& fTYPE_ACCELEROMETER();
	static ::jint& fTYPE_ACCELEROMETER_UNCALIBRATED();
	static ::jint& fTYPE_ALL();
	static ::jint& fTYPE_AMBIENT_TEMPERATURE();
	static ::jint& fTYPE_DEVICE_PRIVATE_BASE();
	static ::jint& fTYPE_GAME_ROTATION_VECTOR();
	static ::jint& fTYPE_GEOMAGNETIC_ROTATION_VECTOR();
	static ::jint& fTYPE_GRAVITY();
	static ::jint& fTYPE_GYROSCOPE();
	static ::jint& fTYPE_GYROSCOPE_UNCALIBRATED();
	static ::jint& fTYPE_HEART_BEAT();
	static ::jint& fTYPE_HEART_RATE();
	static ::jint& fTYPE_HINGE_ANGLE();
	static ::jint& fTYPE_LIGHT();
	static ::jint& fTYPE_LINEAR_ACCELERATION();
	static ::jint& fTYPE_LOW_LATENCY_OFFBODY_DETECT();
	static ::jint& fTYPE_MAGNETIC_FIELD();
	static ::jint& fTYPE_MAGNETIC_FIELD_UNCALIBRATED();
	static ::jint& fTYPE_MOTION_DETECT();
	static ::jint& fTYPE_ORIENTATION();
	static ::jint& fTYPE_POSE_6DOF();
	static ::jint& fTYPE_PRESSURE();
	static ::jint& fTYPE_PROXIMITY();
	static ::jint& fTYPE_RELATIVE_HUMIDITY();
	static ::jint& fTYPE_ROTATION_VECTOR();
	static ::jint& fTYPE_SIGNIFICANT_MOTION();
	static ::jint& fTYPE_STATIONARY_DETECT();
	static ::jint& fTYPE_STEP_COUNTER();
	static ::jint& fTYPE_STEP_DETECTOR();
	static ::jint& fTYPE_TEMPERATURE();
	::jint GetFifoMaxEventCount() const;
	::jint GetFifoReservedEventCount() const;
	::jint GetHighestDirectReportRateLevel() const;
	::jint GetId() const;
	::jint GetMaxDelay() const;
	::jfloat GetMaximumRange() const;
	::jint GetMinDelay() const;
	::java::lang::String GetName() const;
	::jfloat GetPower() const;
	::jint GetReportingMode() const;
	::jfloat GetResolution() const;
	::java::lang::String GetStringType() const;
	::jint GetType() const;
	::java::lang::String GetVendor() const;
	::jint GetVersion() const;
	::jboolean IsAdditionalInfoSupported() const;
	::jboolean IsDirectChannelTypeSupported(const ::jint& arg0) const;
	::jboolean IsDynamicSensor() const;
	::jboolean IsWakeUpSensor() const;
	::java::lang::String ToString() const;
	explicit Sensor(jobject o) : ::java::lang::Object(o) {}
	Sensor(const Sensor& o)  : ::java::lang::Object(o) {}

};

struct SensorDirectChannel : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::nio::channels::Channel();
	static ::jint& fRATE_FAST();
	static ::jint& fRATE_NORMAL();
	static ::jint& fRATE_STOP();
	static ::jint& fRATE_VERY_FAST();
	static ::jint& fTYPE_HARDWARE_BUFFER();
	static ::jint& fTYPE_MEMORY_FILE();
	::jvoid Close() const;
	::jint Configure(const ::android::hardware::Sensor& arg0, const ::jint& arg1) const;
	::jvoid Finalize() const;
	::jboolean IsOpen() const;
	explicit SensorDirectChannel(jobject o) : ::java::lang::Object(o) {}
	SensorDirectChannel(const SensorDirectChannel& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace os { 
struct MemoryFile : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean AllowPurging(const ::jboolean& arg0) const;
	::jvoid Close() const;
	::java::io::InputStream GetInputStream() const;
	::java::io::OutputStream GetOutputStream() const;
	::jboolean IsPurgingAllowed() const;
	::jint Length() const;
	::jint ReadBytes(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid WriteBytes(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	static jobject __Constructor(const ::java::lang::String& arg0, const ::jint& arg1);
	MemoryFile(const ::java::lang::String& arg0, const ::jint& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit MemoryFile(jobject o) : ::java::lang::Object(o) {}
	MemoryFile(const MemoryFile& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace hardware { 
struct SensorEventListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnAccuracyChanged(const ::android::hardware::Sensor& arg0, const ::jint& arg1) const;
	::jvoid OnSensorChanged(const ::android::hardware::SensorEvent& arg0) const;
	explicit SensorEventListener(jobject o) : java::lang::Object(o) {}
	SensorEventListener(const SensorEventListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::hardware::SensorEventListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnAccuracyChanged(const ::android::hardware::Sensor& arg0, const ::jint& arg1) = 0;
		virtual void OnSensorChanged(const ::android::hardware::SensorEvent& arg0) = 0;
	};
};

struct SensorEvent : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jint fAccuracy() const;
	void fAccuracy(const ::jint& arg0) const;
	::android::hardware::Sensor fSensor() const;
	void fSensor(const ::android::hardware::Sensor& arg0) const;
	::jlong fTimestamp() const;
	void fTimestamp(const ::jlong& arg0) const;
	jni::Array< ::jfloat > fValues() const;
	explicit SensorEvent(jobject o) : ::java::lang::Object(o) {}
	SensorEvent(const SensorEvent& o)  : ::java::lang::Object(o) {}

};

struct SensorManager_DynamicSensorCallback : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnDynamicSensorConnected(const ::android::hardware::Sensor& arg0) const;
	::jvoid OnDynamicSensorDisconnected(const ::android::hardware::Sensor& arg0) const;
	static jobject __Constructor();
	SensorManager_DynamicSensorCallback() : ::java::lang::Object(__Constructor()) {}
	explicit SensorManager_DynamicSensorCallback(jobject o) : ::java::lang::Object(o) {}
	SensorManager_DynamicSensorCallback(const SensorManager_DynamicSensorCallback& o)  : ::java::lang::Object(o) {}

};

struct SensorListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnAccuracyChanged(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid OnSensorChanged(const ::jint& arg0, const jni::Array< ::jfloat >& arg1) const;
	explicit SensorListener(jobject o) : java::lang::Object(o) {}
	SensorListener(const SensorListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::hardware::SensorListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnAccuracyChanged(const ::jint& arg0, const ::jint& arg1) = 0;
		virtual void OnSensorChanged(const ::jint& arg0, const jni::Array< ::jfloat >& arg1) = 0;
	};
};

}}

namespace android { namespace os { 
struct Vibrator : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fVIBRATION_EFFECT_SUPPORT_NO();
	static ::jint& fVIBRATION_EFFECT_SUPPORT_UNKNOWN();
	static ::jint& fVIBRATION_EFFECT_SUPPORT_YES();
	::jint AreAllEffectsSupported(const jni::Array< ::jint >& arg0) const;
	::jboolean AreAllPrimitivesSupported(const jni::Array< ::jint >& arg0) const;
	jni::Array< ::jint > AreEffectsSupported(const jni::Array< ::jint >& arg0) const;
	jni::Array< ::jboolean > ArePrimitivesSupported(const jni::Array< ::jint >& arg0) const;
	::jvoid Cancel() const;
	::jint GetId() const;
	jni::Array< ::jint > GetPrimitiveDurations(const jni::Array< ::jint >& arg0) const;
	::jboolean HasAmplitudeControl() const;
	::jboolean HasVibrator() const;
	::jvoid Vibrate(const ::jlong& arg0) const;
	::jvoid Vibrate(const ::jlong& arg0, const ::android::media::AudioAttributes& arg1) const;
	::jvoid Vibrate(const ::android::os::VibrationEffect& arg0) const;
	::jvoid Vibrate(const ::android::os::VibrationEffect& arg0, const ::android::media::AudioAttributes& arg1) const;
	::jvoid Vibrate(const jni::Array< ::jlong >& arg0, const ::jint& arg1) const;
	::jvoid Vibrate(const jni::Array< ::jlong >& arg0, const ::jint& arg1, const ::android::media::AudioAttributes& arg2) const;
	explicit Vibrator(jobject o) : ::java::lang::Object(o) {}
	Vibrator(const Vibrator& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace media { 
struct AudioAttributes : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::jint& fALLOW_CAPTURE_BY_ALL();
	static ::jint& fALLOW_CAPTURE_BY_NONE();
	static ::jint& fALLOW_CAPTURE_BY_SYSTEM();
	static ::jint& fCONTENT_TYPE_MOVIE();
	static ::jint& fCONTENT_TYPE_MUSIC();
	static ::jint& fCONTENT_TYPE_SONIFICATION();
	static ::jint& fCONTENT_TYPE_SPEECH();
	static ::jint& fCONTENT_TYPE_UNKNOWN();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fFLAG_AUDIBILITY_ENFORCED();
	static ::jint& fFLAG_HW_AV_SYNC();
	static ::jint& fFLAG_LOW_LATENCY();
	static ::jint& fUSAGE_ALARM();
	static ::jint& fUSAGE_ASSISTANCE_ACCESSIBILITY();
	static ::jint& fUSAGE_ASSISTANCE_NAVIGATION_GUIDANCE();
	static ::jint& fUSAGE_ASSISTANCE_SONIFICATION();
	static ::jint& fUSAGE_ASSISTANT();
	static ::jint& fUSAGE_GAME();
	static ::jint& fUSAGE_MEDIA();
	static ::jint& fUSAGE_NOTIFICATION();
	static ::jint& fUSAGE_NOTIFICATION_COMMUNICATION_DELAYED();
	static ::jint& fUSAGE_NOTIFICATION_COMMUNICATION_INSTANT();
	static ::jint& fUSAGE_NOTIFICATION_COMMUNICATION_REQUEST();
	static ::jint& fUSAGE_NOTIFICATION_EVENT();
	static ::jint& fUSAGE_NOTIFICATION_RINGTONE();
	static ::jint& fUSAGE_UNKNOWN();
	static ::jint& fUSAGE_VOICE_COMMUNICATION();
	static ::jint& fUSAGE_VOICE_COMMUNICATION_SIGNALLING();
	::jboolean AreHapticChannelsMuted() const;
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint GetAllowedCapturePolicy() const;
	::jint GetContentType() const;
	::jint GetFlags() const;
	::jint GetUsage() const;
	::jint GetVolumeControlStream() const;
	::jint HashCode() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit AudioAttributes(jobject o) : ::java::lang::Object(o) {}
	AudioAttributes(const AudioAttributes& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace os { 
struct VibrationEffect : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fDEFAULT_AMPLITUDE();
	static ::jint& fEFFECT_CLICK();
	static ::jint& fEFFECT_DOUBLE_CLICK();
	static ::jint& fEFFECT_HEAVY_CLICK();
	static ::jint& fEFFECT_TICK();
	static ::android::os::VibrationEffect CreateOneShot(const ::jlong& arg0, const ::jint& arg1);
	static ::android::os::VibrationEffect CreatePredefined(const ::jint& arg0);
	static ::android::os::VibrationEffect CreateWaveform(const jni::Array< ::jlong >& arg0, const ::jint& arg1);
	static ::android::os::VibrationEffect CreateWaveform(const jni::Array< ::jlong >& arg0, const jni::Array< ::jint >& arg1, const ::jint& arg2);
	::jint DescribeContents() const;
	static ::android::os::VibrationEffect_Composition StartComposition();
	explicit VibrationEffect(jobject o) : ::java::lang::Object(o) {}
	VibrationEffect(const VibrationEffect& o)  : ::java::lang::Object(o) {}

};

struct VibrationEffect_Composition : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fPRIMITIVE_CLICK();
	static ::jint& fPRIMITIVE_LOW_TICK();
	static ::jint& fPRIMITIVE_QUICK_FALL();
	static ::jint& fPRIMITIVE_QUICK_RISE();
	static ::jint& fPRIMITIVE_SLOW_RISE();
	static ::jint& fPRIMITIVE_SPIN();
	static ::jint& fPRIMITIVE_THUD();
	static ::jint& fPRIMITIVE_TICK();
	::android::os::VibrationEffect_Composition AddPrimitive(const ::jint& arg0) const;
	::android::os::VibrationEffect_Composition AddPrimitive(const ::jint& arg0, const ::jfloat& arg1) const;
	::android::os::VibrationEffect_Composition AddPrimitive(const ::jint& arg0, const ::jfloat& arg1, const ::jint& arg2) const;
	::android::os::VibrationEffect Compose() const;
	explicit VibrationEffect_Composition(jobject o) : ::java::lang::Object(o) {}
	VibrationEffect_Composition(const VibrationEffect_Composition& o)  : ::java::lang::Object(o) {}

};

struct VibratorManager : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid Cancel() const;
	::android::os::Vibrator GetDefaultVibrator() const;
	::android::os::Vibrator GetVibrator(const ::jint& arg0) const;
	jni::Array< ::jint > GetVibratorIds() const;
	::jvoid Vibrate(const ::android::os::CombinedVibration& arg0) const;
	::jvoid Vibrate(const ::android::os::CombinedVibration& arg0, const ::android::os::VibrationAttributes& arg1) const;
	explicit VibratorManager(jobject o) : ::java::lang::Object(o) {}
	VibratorManager(const VibratorManager& o)  : ::java::lang::Object(o) {}

};

struct CombinedVibration : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::android::os::CombinedVibration CreateParallel(const ::android::os::VibrationEffect& arg0);
	::jint DescribeContents() const;
	static ::android::os::CombinedVibration_ParallelCombination StartParallel();
	explicit CombinedVibration(jobject o) : ::java::lang::Object(o) {}
	CombinedVibration(const CombinedVibration& o)  : ::java::lang::Object(o) {}

};

struct CombinedVibration_ParallelCombination : ::java::lang::Object
{
	static jni::Class __CLASS;

	::android::os::CombinedVibration_ParallelCombination AddVibrator(const ::jint& arg0, const ::android::os::VibrationEffect& arg1) const;
	::android::os::CombinedVibration Combine() const;
	explicit CombinedVibration_ParallelCombination(jobject o) : ::java::lang::Object(o) {}
	CombinedVibration_ParallelCombination(const CombinedVibration_ParallelCombination& o)  : ::java::lang::Object(o) {}

};

struct VibrationAttributes : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fFLAG_BYPASS_INTERRUPTION_POLICY();
	static ::jint& fUSAGE_ALARM();
	static ::jint& fUSAGE_CLASS_ALARM();
	static ::jint& fUSAGE_CLASS_FEEDBACK();
	static ::jint& fUSAGE_CLASS_MASK();
	static ::jint& fUSAGE_CLASS_UNKNOWN();
	static ::jint& fUSAGE_COMMUNICATION_REQUEST();
	static ::jint& fUSAGE_HARDWARE_FEEDBACK();
	static ::jint& fUSAGE_NOTIFICATION();
	static ::jint& fUSAGE_PHYSICAL_EMULATION();
	static ::jint& fUSAGE_RINGTONE();
	static ::jint& fUSAGE_TOUCH();
	static ::jint& fUSAGE_UNKNOWN();
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint GetFlags() const;
	::jint GetUsage() const;
	::jint GetUsageClass() const;
	::jint HashCode() const;
	::jboolean IsFlagSet(const ::jint& arg0) const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit VibrationAttributes(jobject o) : ::java::lang::Object(o) {}
	VibrationAttributes(const VibrationAttributes& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace view { 
struct KeyEvent_DispatcherState : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid HandleUpEvent(const ::android::view::KeyEvent& arg0) const;
	::jboolean IsTracking(const ::android::view::KeyEvent& arg0) const;
	::jvoid PerformedLongPress(const ::android::view::KeyEvent& arg0) const;
	::jvoid Reset() const;
	::jvoid Reset(const ::java::lang::Object& arg0) const;
	::jvoid StartTracking(const ::android::view::KeyEvent& arg0, const ::java::lang::Object& arg1) const;
	static jobject __Constructor();
	KeyEvent_DispatcherState() : ::java::lang::Object(__Constructor()) {}
	explicit KeyEvent_DispatcherState(jobject o) : ::java::lang::Object(o) {}
	KeyEvent_DispatcherState(const KeyEvent_DispatcherState& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace view { namespace accessibility { 
struct AccessibilityEventSource : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid SendAccessibilityEvent(const ::jint& arg0) const;
	::jvoid SendAccessibilityEventUnchecked(const ::android::view::accessibility::AccessibilityEvent& arg0) const;
	explicit AccessibilityEventSource(jobject o) : java::lang::Object(o) {}
	AccessibilityEventSource(const AccessibilityEventSource& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::accessibility::AccessibilityEventSource();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void SendAccessibilityEvent(const ::jint& arg0) = 0;
		virtual void SendAccessibilityEventUnchecked(const ::android::view::accessibility::AccessibilityEvent& arg0) = 0;
	};
};

struct AccessibilityRecord : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jint GetAddedCount() const;
	::java::lang::CharSequence GetBeforeText() const;
	::java::lang::CharSequence GetClassName() const;
	::java::lang::CharSequence GetContentDescription() const;
	::jint GetCurrentItemIndex() const;
	::jint GetFromIndex() const;
	::jint GetItemCount() const;
	::jint GetMaxScrollX() const;
	::jint GetMaxScrollY() const;
	::android::os::Parcelable GetParcelableData() const;
	::jint GetRemovedCount() const;
	::jint GetScrollDeltaX() const;
	::jint GetScrollDeltaY() const;
	::jint GetScrollX() const;
	::jint GetScrollY() const;
	::android::view::accessibility::AccessibilityNodeInfo GetSource() const;
	::java::util::List GetText() const;
	::jint GetToIndex() const;
	::jint GetWindowId() const;
	::jboolean IsChecked() const;
	::jboolean IsEnabled() const;
	::jboolean IsFullScreen() const;
	::jboolean IsPassword() const;
	::jboolean IsScrollable() const;
	static ::android::view::accessibility::AccessibilityRecord Obtain();
	static ::android::view::accessibility::AccessibilityRecord Obtain(const ::android::view::accessibility::AccessibilityRecord& arg0);
	::jvoid Recycle() const;
	::jvoid SetAddedCount(const ::jint& arg0) const;
	::jvoid SetBeforeText(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetChecked(const ::jboolean& arg0) const;
	::jvoid SetClassName(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetContentDescription(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetCurrentItemIndex(const ::jint& arg0) const;
	::jvoid SetEnabled(const ::jboolean& arg0) const;
	::jvoid SetFromIndex(const ::jint& arg0) const;
	::jvoid SetFullScreen(const ::jboolean& arg0) const;
	::jvoid SetItemCount(const ::jint& arg0) const;
	::jvoid SetMaxScrollX(const ::jint& arg0) const;
	::jvoid SetMaxScrollY(const ::jint& arg0) const;
	::jvoid SetParcelableData(const ::android::os::Parcelable& arg0) const;
	::jvoid SetPassword(const ::jboolean& arg0) const;
	::jvoid SetRemovedCount(const ::jint& arg0) const;
	::jvoid SetScrollDeltaX(const ::jint& arg0) const;
	::jvoid SetScrollDeltaY(const ::jint& arg0) const;
	::jvoid SetScrollX(const ::jint& arg0) const;
	::jvoid SetScrollY(const ::jint& arg0) const;
	::jvoid SetScrollable(const ::jboolean& arg0) const;
	::jvoid SetSource(const ::android::view::View& arg0) const;
	::jvoid SetSource(const ::android::view::View& arg0, const ::jint& arg1) const;
	::jvoid SetToIndex(const ::jint& arg0) const;
	::java::lang::String ToString() const;
	static jobject __Constructor();
	AccessibilityRecord() : ::java::lang::Object(__Constructor()) {}
	explicit AccessibilityRecord(jobject o) : ::java::lang::Object(o) {}
	AccessibilityRecord(const AccessibilityRecord& o)  : ::java::lang::Object(o) {}

};

struct AccessibilityEvent : ::android::view::accessibility::AccessibilityRecord
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::jint& fCONTENT_CHANGE_TYPE_CONTENT_DESCRIPTION();
	static ::jint& fCONTENT_CHANGE_TYPE_PANE_APPEARED();
	static ::jint& fCONTENT_CHANGE_TYPE_PANE_DISAPPEARED();
	static ::jint& fCONTENT_CHANGE_TYPE_PANE_TITLE();
	static ::jint& fCONTENT_CHANGE_TYPE_STATE_DESCRIPTION();
	static ::jint& fCONTENT_CHANGE_TYPE_SUBTREE();
	static ::jint& fCONTENT_CHANGE_TYPE_TEXT();
	static ::jint& fCONTENT_CHANGE_TYPE_UNDEFINED();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fINVALID_POSITION();
	static ::jint& fMAX_TEXT_LENGTH();
	static ::jint& fTYPES_ALL_MASK();
	static ::jint& fTYPE_ANNOUNCEMENT();
	static ::jint& fTYPE_ASSIST_READING_CONTEXT();
	static ::jint& fTYPE_GESTURE_DETECTION_END();
	static ::jint& fTYPE_GESTURE_DETECTION_START();
	static ::jint& fTYPE_NOTIFICATION_STATE_CHANGED();
	static ::jint& fTYPE_TOUCH_EXPLORATION_GESTURE_END();
	static ::jint& fTYPE_TOUCH_EXPLORATION_GESTURE_START();
	static ::jint& fTYPE_TOUCH_INTERACTION_END();
	static ::jint& fTYPE_TOUCH_INTERACTION_START();
	static ::jint& fTYPE_VIEW_ACCESSIBILITY_FOCUSED();
	static ::jint& fTYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED();
	static ::jint& fTYPE_VIEW_CLICKED();
	static ::jint& fTYPE_VIEW_CONTEXT_CLICKED();
	static ::jint& fTYPE_VIEW_FOCUSED();
	static ::jint& fTYPE_VIEW_HOVER_ENTER();
	static ::jint& fTYPE_VIEW_HOVER_EXIT();
	static ::jint& fTYPE_VIEW_LONG_CLICKED();
	static ::jint& fTYPE_VIEW_SCROLLED();
	static ::jint& fTYPE_VIEW_SELECTED();
	static ::jint& fTYPE_VIEW_TEXT_CHANGED();
	static ::jint& fTYPE_VIEW_TEXT_SELECTION_CHANGED();
	static ::jint& fTYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY();
	static ::jint& fTYPE_WINDOWS_CHANGED();
	static ::jint& fTYPE_WINDOW_CONTENT_CHANGED();
	static ::jint& fTYPE_WINDOW_STATE_CHANGED();
	static ::jint& fWINDOWS_CHANGE_ACCESSIBILITY_FOCUSED();
	static ::jint& fWINDOWS_CHANGE_ACTIVE();
	static ::jint& fWINDOWS_CHANGE_ADDED();
	static ::jint& fWINDOWS_CHANGE_BOUNDS();
	static ::jint& fWINDOWS_CHANGE_CHILDREN();
	static ::jint& fWINDOWS_CHANGE_FOCUSED();
	static ::jint& fWINDOWS_CHANGE_LAYER();
	static ::jint& fWINDOWS_CHANGE_PARENT();
	static ::jint& fWINDOWS_CHANGE_PIP();
	static ::jint& fWINDOWS_CHANGE_REMOVED();
	static ::jint& fWINDOWS_CHANGE_TITLE();
	::jvoid AppendRecord(const ::android::view::accessibility::AccessibilityRecord& arg0) const;
	::jint DescribeContents() const;
	static ::java::lang::String EventTypeToString(const ::jint& arg0);
	::jint GetAction() const;
	::jint GetContentChangeTypes() const;
	::jlong GetEventTime() const;
	::jint GetEventType() const;
	::jint GetMovementGranularity() const;
	::java::lang::CharSequence GetPackageName() const;
	::android::view::accessibility::AccessibilityRecord GetRecord(const ::jint& arg0) const;
	::jint GetRecordCount() const;
	::jint GetWindowChanges() const;
	::jvoid InitFromParcel(const ::android::os::Parcel& arg0) const;
	static ::android::view::accessibility::AccessibilityEvent Obtain();
	static ::android::view::accessibility::AccessibilityEvent Obtain(const ::jint& arg0);
	static ::android::view::accessibility::AccessibilityEvent Obtain(const ::android::view::accessibility::AccessibilityEvent& arg0);
	::jvoid Recycle() const;
	::jvoid SetAction(const ::jint& arg0) const;
	::jvoid SetContentChangeTypes(const ::jint& arg0) const;
	::jvoid SetEventTime(const ::jlong& arg0) const;
	::jvoid SetEventType(const ::jint& arg0) const;
	::jvoid SetMovementGranularity(const ::jint& arg0) const;
	::jvoid SetPackageName(const ::java::lang::CharSequence& arg0) const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor();
	AccessibilityEvent() : ::android::view::accessibility::AccessibilityRecord(__Constructor()) {}
	static jobject __Constructor(const ::jint& arg0);
	AccessibilityEvent(const ::jint& arg0) : ::android::view::accessibility::AccessibilityRecord(__Constructor(arg0)) {}
	explicit AccessibilityEvent(jobject o) : ::android::view::accessibility::AccessibilityRecord(o) {}
	AccessibilityEvent(const AccessibilityEvent& o)  : ::android::view::accessibility::AccessibilityRecord(o) {}

};

struct AccessibilityNodeInfo : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::jint& fACTION_ACCESSIBILITY_FOCUS();
	static ::java::lang::String& fACTION_ARGUMENT_COLUMN_INT();
	static ::java::lang::String& fACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN();
	static ::java::lang::String& fACTION_ARGUMENT_HTML_ELEMENT_STRING();
	static ::java::lang::String& fACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT();
	static ::java::lang::String& fACTION_ARGUMENT_MOVE_WINDOW_X();
	static ::java::lang::String& fACTION_ARGUMENT_MOVE_WINDOW_Y();
	static ::java::lang::String& fACTION_ARGUMENT_PRESS_AND_HOLD_DURATION_MILLIS_INT();
	static ::java::lang::String& fACTION_ARGUMENT_PROGRESS_VALUE();
	static ::java::lang::String& fACTION_ARGUMENT_ROW_INT();
	static ::java::lang::String& fACTION_ARGUMENT_SELECTION_END_INT();
	static ::java::lang::String& fACTION_ARGUMENT_SELECTION_START_INT();
	static ::java::lang::String& fACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE();
	static ::jint& fACTION_CLEAR_ACCESSIBILITY_FOCUS();
	static ::jint& fACTION_CLEAR_FOCUS();
	static ::jint& fACTION_CLEAR_SELECTION();
	static ::jint& fACTION_CLICK();
	static ::jint& fACTION_COLLAPSE();
	static ::jint& fACTION_COPY();
	static ::jint& fACTION_CUT();
	static ::jint& fACTION_DISMISS();
	static ::jint& fACTION_EXPAND();
	static ::jint& fACTION_FOCUS();
	static ::jint& fACTION_LONG_CLICK();
	static ::jint& fACTION_NEXT_AT_MOVEMENT_GRANULARITY();
	static ::jint& fACTION_NEXT_HTML_ELEMENT();
	static ::jint& fACTION_PASTE();
	static ::jint& fACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY();
	static ::jint& fACTION_PREVIOUS_HTML_ELEMENT();
	static ::jint& fACTION_SCROLL_BACKWARD();
	static ::jint& fACTION_SCROLL_FORWARD();
	static ::jint& fACTION_SELECT();
	static ::jint& fACTION_SET_SELECTION();
	static ::jint& fACTION_SET_TEXT();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::java::lang::String& fEXTRA_DATA_RENDERING_INFO_KEY();
	static ::java::lang::String& fEXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_LENGTH();
	static ::jint& fEXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_MAX_LENGTH();
	static ::java::lang::String& fEXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_START_INDEX();
	static ::java::lang::String& fEXTRA_DATA_TEXT_CHARACTER_LOCATION_KEY();
	static ::jint& fFOCUS_ACCESSIBILITY();
	static ::jint& fFOCUS_INPUT();
	static ::jint& fMOVEMENT_GRANULARITY_CHARACTER();
	static ::jint& fMOVEMENT_GRANULARITY_LINE();
	static ::jint& fMOVEMENT_GRANULARITY_PAGE();
	static ::jint& fMOVEMENT_GRANULARITY_PARAGRAPH();
	static ::jint& fMOVEMENT_GRANULARITY_WORD();
	::jvoid AddAction(const ::jint& arg0) const;
	::jvoid AddAction(const ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& arg0) const;
	::jvoid AddChild(const ::android::view::View& arg0) const;
	::jvoid AddChild(const ::android::view::View& arg0, const ::jint& arg1) const;
	::jboolean CanOpenPopup() const;
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::util::List FindAccessibilityNodeInfosByText(const ::java::lang::String& arg0) const;
	::java::util::List FindAccessibilityNodeInfosByViewId(const ::java::lang::String& arg0) const;
	::android::view::accessibility::AccessibilityNodeInfo FindFocus(const ::jint& arg0) const;
	::android::view::accessibility::AccessibilityNodeInfo FocusSearch(const ::jint& arg0) const;
	::java::util::List GetActionList() const;
	::jint GetActions() const;
	::java::util::List GetAvailableExtraData() const;
	::jvoid GetBoundsInParent(const ::android::graphics::Rect& arg0) const;
	::jvoid GetBoundsInScreen(const ::android::graphics::Rect& arg0) const;
	::android::view::accessibility::AccessibilityNodeInfo GetChild(const ::jint& arg0) const;
	::jint GetChildCount() const;
	::java::lang::CharSequence GetClassName() const;
	::android::view::accessibility::AccessibilityNodeInfo_CollectionInfo GetCollectionInfo() const;
	::android::view::accessibility::AccessibilityNodeInfo_CollectionItemInfo GetCollectionItemInfo() const;
	::java::lang::CharSequence GetContentDescription() const;
	::jint GetDrawingOrder() const;
	::java::lang::CharSequence GetError() const;
	::android::view::accessibility::AccessibilityNodeInfo_ExtraRenderingInfo GetExtraRenderingInfo() const;
	::android::os::Bundle GetExtras() const;
	::java::lang::CharSequence GetHintText() const;
	::jint GetInputType() const;
	::android::view::accessibility::AccessibilityNodeInfo GetLabelFor() const;
	::android::view::accessibility::AccessibilityNodeInfo GetLabeledBy() const;
	::jint GetLiveRegion() const;
	::jint GetMaxTextLength() const;
	::jint GetMovementGranularities() const;
	::java::lang::CharSequence GetPackageName() const;
	::java::lang::CharSequence GetPaneTitle() const;
	::android::view::accessibility::AccessibilityNodeInfo GetParent() const;
	::android::view::accessibility::AccessibilityNodeInfo_RangeInfo GetRangeInfo() const;
	::java::lang::CharSequence GetStateDescription() const;
	::java::lang::CharSequence GetText() const;
	::jint GetTextSelectionEnd() const;
	::jint GetTextSelectionStart() const;
	::java::lang::CharSequence GetTooltipText() const;
	::android::view::accessibility::AccessibilityNodeInfo_TouchDelegateInfo GetTouchDelegateInfo() const;
	::android::view::accessibility::AccessibilityNodeInfo GetTraversalAfter() const;
	::android::view::accessibility::AccessibilityNodeInfo GetTraversalBefore() const;
	::java::lang::String GetViewIdResourceName() const;
	::android::view::accessibility::AccessibilityWindowInfo GetWindow() const;
	::jint GetWindowId() const;
	::jint HashCode() const;
	::jboolean IsAccessibilityFocused() const;
	::jboolean IsCheckable() const;
	::jboolean IsChecked() const;
	::jboolean IsClickable() const;
	::jboolean IsContentInvalid() const;
	::jboolean IsContextClickable() const;
	::jboolean IsDismissable() const;
	::jboolean IsEditable() const;
	::jboolean IsEnabled() const;
	::jboolean IsFocusable() const;
	::jboolean IsFocused() const;
	::jboolean IsHeading() const;
	::jboolean IsImportantForAccessibility() const;
	::jboolean IsLongClickable() const;
	::jboolean IsMultiLine() const;
	::jboolean IsPassword() const;
	::jboolean IsScreenReaderFocusable() const;
	::jboolean IsScrollable() const;
	::jboolean IsSelected() const;
	::jboolean IsShowingHintText() const;
	::jboolean IsTextEntryKey() const;
	::jboolean IsVisibleToUser() const;
	static ::android::view::accessibility::AccessibilityNodeInfo Obtain();
	static ::android::view::accessibility::AccessibilityNodeInfo Obtain(const ::android::view::View& arg0);
	static ::android::view::accessibility::AccessibilityNodeInfo Obtain(const ::android::view::View& arg0, const ::jint& arg1);
	static ::android::view::accessibility::AccessibilityNodeInfo Obtain(const ::android::view::accessibility::AccessibilityNodeInfo& arg0);
	::jboolean PerformAction(const ::jint& arg0) const;
	::jboolean PerformAction(const ::jint& arg0, const ::android::os::Bundle& arg1) const;
	::jvoid Recycle() const;
	::jboolean Refresh() const;
	::jboolean RefreshWithExtraData(const ::java::lang::String& arg0, const ::android::os::Bundle& arg1) const;
	::jvoid RemoveAction(const ::jint& arg0) const;
	::jboolean RemoveAction(const ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& arg0) const;
	::jboolean RemoveChild(const ::android::view::View& arg0) const;
	::jboolean RemoveChild(const ::android::view::View& arg0, const ::jint& arg1) const;
	::jvoid SetAccessibilityFocused(const ::jboolean& arg0) const;
	::jvoid SetAvailableExtraData(const ::java::util::List& arg0) const;
	::jvoid SetBoundsInParent(const ::android::graphics::Rect& arg0) const;
	::jvoid SetBoundsInScreen(const ::android::graphics::Rect& arg0) const;
	::jvoid SetCanOpenPopup(const ::jboolean& arg0) const;
	::jvoid SetCheckable(const ::jboolean& arg0) const;
	::jvoid SetChecked(const ::jboolean& arg0) const;
	::jvoid SetClassName(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetClickable(const ::jboolean& arg0) const;
	::jvoid SetCollectionInfo(const ::android::view::accessibility::AccessibilityNodeInfo_CollectionInfo& arg0) const;
	::jvoid SetCollectionItemInfo(const ::android::view::accessibility::AccessibilityNodeInfo_CollectionItemInfo& arg0) const;
	::jvoid SetContentDescription(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetContentInvalid(const ::jboolean& arg0) const;
	::jvoid SetContextClickable(const ::jboolean& arg0) const;
	::jvoid SetDismissable(const ::jboolean& arg0) const;
	::jvoid SetDrawingOrder(const ::jint& arg0) const;
	::jvoid SetEditable(const ::jboolean& arg0) const;
	::jvoid SetEnabled(const ::jboolean& arg0) const;
	::jvoid SetError(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetFocusable(const ::jboolean& arg0) const;
	::jvoid SetFocused(const ::jboolean& arg0) const;
	::jvoid SetHeading(const ::jboolean& arg0) const;
	::jvoid SetHintText(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetImportantForAccessibility(const ::jboolean& arg0) const;
	::jvoid SetInputType(const ::jint& arg0) const;
	::jvoid SetLabelFor(const ::android::view::View& arg0) const;
	::jvoid SetLabelFor(const ::android::view::View& arg0, const ::jint& arg1) const;
	::jvoid SetLabeledBy(const ::android::view::View& arg0) const;
	::jvoid SetLabeledBy(const ::android::view::View& arg0, const ::jint& arg1) const;
	::jvoid SetLiveRegion(const ::jint& arg0) const;
	::jvoid SetLongClickable(const ::jboolean& arg0) const;
	::jvoid SetMaxTextLength(const ::jint& arg0) const;
	::jvoid SetMovementGranularities(const ::jint& arg0) const;
	::jvoid SetMultiLine(const ::jboolean& arg0) const;
	::jvoid SetPackageName(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetPaneTitle(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetParent(const ::android::view::View& arg0) const;
	::jvoid SetParent(const ::android::view::View& arg0, const ::jint& arg1) const;
	::jvoid SetPassword(const ::jboolean& arg0) const;
	::jvoid SetRangeInfo(const ::android::view::accessibility::AccessibilityNodeInfo_RangeInfo& arg0) const;
	::jvoid SetScreenReaderFocusable(const ::jboolean& arg0) const;
	::jvoid SetScrollable(const ::jboolean& arg0) const;
	::jvoid SetSelected(const ::jboolean& arg0) const;
	::jvoid SetShowingHintText(const ::jboolean& arg0) const;
	::jvoid SetSource(const ::android::view::View& arg0) const;
	::jvoid SetSource(const ::android::view::View& arg0, const ::jint& arg1) const;
	::jvoid SetStateDescription(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetText(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetTextEntryKey(const ::jboolean& arg0) const;
	::jvoid SetTextSelection(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid SetTooltipText(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetTouchDelegateInfo(const ::android::view::accessibility::AccessibilityNodeInfo_TouchDelegateInfo& arg0) const;
	::jvoid SetTraversalAfter(const ::android::view::View& arg0) const;
	::jvoid SetTraversalAfter(const ::android::view::View& arg0, const ::jint& arg1) const;
	::jvoid SetTraversalBefore(const ::android::view::View& arg0) const;
	::jvoid SetTraversalBefore(const ::android::view::View& arg0, const ::jint& arg1) const;
	::jvoid SetViewIdResourceName(const ::java::lang::String& arg0) const;
	::jvoid SetVisibleToUser(const ::jboolean& arg0) const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor();
	AccessibilityNodeInfo() : ::java::lang::Object(__Constructor()) {}
	static jobject __Constructor(const ::android::view::View& arg0);
	AccessibilityNodeInfo(const ::android::view::View& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::view::View& arg0, const ::jint& arg1);
	AccessibilityNodeInfo(const ::android::view::View& arg0, const ::jint& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit AccessibilityNodeInfo(jobject o) : ::java::lang::Object(o) {}
	AccessibilityNodeInfo(const AccessibilityNodeInfo& o)  : ::java::lang::Object(o) {}

};

struct AccessibilityNodeInfo_AccessibilityAction : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& fACTION_ACCESSIBILITY_FOCUS();
	static ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& fACTION_CLEAR_ACCESSIBILITY_FOCUS();
	static ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& fACTION_CLEAR_FOCUS();
	static ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& fACTION_CLEAR_SELECTION();
	static ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& fACTION_CLICK();
	static ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& fACTION_COLLAPSE();
	static ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& fACTION_CONTEXT_CLICK();
	static ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& fACTION_COPY();
	static ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& fACTION_CUT();
	static ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& fACTION_DISMISS();
	static ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& fACTION_EXPAND();
	static ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& fACTION_FOCUS();
	static ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& fACTION_HIDE_TOOLTIP();
	static ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& fACTION_IME_ENTER();
	static ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& fACTION_LONG_CLICK();
	static ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& fACTION_MOVE_WINDOW();
	static ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& fACTION_NEXT_AT_MOVEMENT_GRANULARITY();
	static ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& fACTION_NEXT_HTML_ELEMENT();
	static ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& fACTION_PAGE_DOWN();
	static ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& fACTION_PAGE_LEFT();
	static ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& fACTION_PAGE_RIGHT();
	static ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& fACTION_PAGE_UP();
	static ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& fACTION_PASTE();
	static ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& fACTION_PRESS_AND_HOLD();
	static ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& fACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY();
	static ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& fACTION_PREVIOUS_HTML_ELEMENT();
	static ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& fACTION_SCROLL_BACKWARD();
	static ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& fACTION_SCROLL_DOWN();
	static ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& fACTION_SCROLL_FORWARD();
	static ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& fACTION_SCROLL_LEFT();
	static ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& fACTION_SCROLL_RIGHT();
	static ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& fACTION_SCROLL_TO_POSITION();
	static ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& fACTION_SCROLL_UP();
	static ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& fACTION_SELECT();
	static ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& fACTION_SET_PROGRESS();
	static ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& fACTION_SET_SELECTION();
	static ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& fACTION_SET_TEXT();
	static ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& fACTION_SHOW_ON_SCREEN();
	static ::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction& fACTION_SHOW_TOOLTIP();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint GetId() const;
	::java::lang::CharSequence GetLabel() const;
	::jint HashCode() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor(const ::jint& arg0, const ::java::lang::CharSequence& arg1);
	AccessibilityNodeInfo_AccessibilityAction(const ::jint& arg0, const ::java::lang::CharSequence& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit AccessibilityNodeInfo_AccessibilityAction(jobject o) : ::java::lang::Object(o) {}
	AccessibilityNodeInfo_AccessibilityAction(const AccessibilityNodeInfo_AccessibilityAction& o)  : ::java::lang::Object(o) {}

};

struct AccessibilityNodeInfo_CollectionInfo : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fSELECTION_MODE_MULTIPLE();
	static ::jint& fSELECTION_MODE_NONE();
	static ::jint& fSELECTION_MODE_SINGLE();
	::jint GetColumnCount() const;
	::jint GetRowCount() const;
	::jint GetSelectionMode() const;
	::jboolean IsHierarchical() const;
	static ::android::view::accessibility::AccessibilityNodeInfo_CollectionInfo Obtain(const ::jint& arg0, const ::jint& arg1, const ::jboolean& arg2);
	static ::android::view::accessibility::AccessibilityNodeInfo_CollectionInfo Obtain(const ::jint& arg0, const ::jint& arg1, const ::jboolean& arg2, const ::jint& arg3);
	static jobject __Constructor(const ::jint& arg0, const ::jint& arg1, const ::jboolean& arg2);
	AccessibilityNodeInfo_CollectionInfo(const ::jint& arg0, const ::jint& arg1, const ::jboolean& arg2) : ::java::lang::Object(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::jint& arg0, const ::jint& arg1, const ::jboolean& arg2, const ::jint& arg3);
	AccessibilityNodeInfo_CollectionInfo(const ::jint& arg0, const ::jint& arg1, const ::jboolean& arg2, const ::jint& arg3) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3)) {}
	explicit AccessibilityNodeInfo_CollectionInfo(jobject o) : ::java::lang::Object(o) {}
	AccessibilityNodeInfo_CollectionInfo(const AccessibilityNodeInfo_CollectionInfo& o)  : ::java::lang::Object(o) {}

};

struct AccessibilityNodeInfo_CollectionItemInfo : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jint GetColumnIndex() const;
	::jint GetColumnSpan() const;
	::jint GetRowIndex() const;
	::jint GetRowSpan() const;
	::jboolean IsHeading() const;
	::jboolean IsSelected() const;
	static ::android::view::accessibility::AccessibilityNodeInfo_CollectionItemInfo Obtain(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jboolean& arg4);
	static ::android::view::accessibility::AccessibilityNodeInfo_CollectionItemInfo Obtain(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jboolean& arg4, const ::jboolean& arg5);
	static jobject __Constructor(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jboolean& arg4);
	AccessibilityNodeInfo_CollectionItemInfo(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jboolean& arg4) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3, arg4)) {}
	static jobject __Constructor(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jboolean& arg4, const ::jboolean& arg5);
	AccessibilityNodeInfo_CollectionItemInfo(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jboolean& arg4, const ::jboolean& arg5) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3, arg4, arg5)) {}
	explicit AccessibilityNodeInfo_CollectionItemInfo(jobject o) : ::java::lang::Object(o) {}
	AccessibilityNodeInfo_CollectionItemInfo(const AccessibilityNodeInfo_CollectionItemInfo& o)  : ::java::lang::Object(o) {}

};

struct AccessibilityNodeInfo_ExtraRenderingInfo : ::java::lang::Object
{
	static jni::Class __CLASS;

	::android::util::Size GetLayoutSize() const;
	::jfloat GetTextSizeInPx() const;
	::jint GetTextSizeUnit() const;
	explicit AccessibilityNodeInfo_ExtraRenderingInfo(jobject o) : ::java::lang::Object(o) {}
	AccessibilityNodeInfo_ExtraRenderingInfo(const AccessibilityNodeInfo_ExtraRenderingInfo& o)  : ::java::lang::Object(o) {}

};

struct AccessibilityNodeInfo_RangeInfo : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fRANGE_TYPE_FLOAT();
	static ::jint& fRANGE_TYPE_INT();
	static ::jint& fRANGE_TYPE_PERCENT();
	::jfloat GetCurrent() const;
	::jfloat GetMax() const;
	::jfloat GetMin() const;
	::jint GetType() const;
	static ::android::view::accessibility::AccessibilityNodeInfo_RangeInfo Obtain(const ::jint& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3);
	static jobject __Constructor(const ::jint& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3);
	AccessibilityNodeInfo_RangeInfo(const ::jint& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3)) {}
	explicit AccessibilityNodeInfo_RangeInfo(jobject o) : ::java::lang::Object(o) {}
	AccessibilityNodeInfo_RangeInfo(const AccessibilityNodeInfo_RangeInfo& o)  : ::java::lang::Object(o) {}

};

struct AccessibilityNodeInfo_TouchDelegateInfo : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::android::graphics::Region GetRegionAt(const ::jint& arg0) const;
	::jint GetRegionCount() const;
	::android::view::accessibility::AccessibilityNodeInfo GetTargetForRegion(const ::android::graphics::Region& arg0) const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor(const ::java::util::Map& arg0);
	AccessibilityNodeInfo_TouchDelegateInfo(const ::java::util::Map& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit AccessibilityNodeInfo_TouchDelegateInfo(jobject o) : ::java::lang::Object(o) {}
	AccessibilityNodeInfo_TouchDelegateInfo(const AccessibilityNodeInfo_TouchDelegateInfo& o)  : ::java::lang::Object(o) {}

};

struct AccessibilityWindowInfo : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fTYPE_ACCESSIBILITY_OVERLAY();
	static ::jint& fTYPE_APPLICATION();
	static ::jint& fTYPE_INPUT_METHOD();
	static ::jint& fTYPE_SPLIT_SCREEN_DIVIDER();
	static ::jint& fTYPE_SYSTEM();
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::android::view::accessibility::AccessibilityNodeInfo GetAnchor() const;
	::jvoid GetBoundsInScreen(const ::android::graphics::Rect& arg0) const;
	::android::view::accessibility::AccessibilityWindowInfo GetChild(const ::jint& arg0) const;
	::jint GetChildCount() const;
	::jint GetDisplayId() const;
	::jint GetId() const;
	::jint GetLayer() const;
	::android::view::accessibility::AccessibilityWindowInfo GetParent() const;
	::jvoid GetRegionInScreen(const ::android::graphics::Region& arg0) const;
	::android::view::accessibility::AccessibilityNodeInfo GetRoot() const;
	::java::lang::CharSequence GetTitle() const;
	::jint GetType() const;
	::jint HashCode() const;
	::jboolean IsAccessibilityFocused() const;
	::jboolean IsActive() const;
	::jboolean IsFocused() const;
	::jboolean IsInPictureInPictureMode() const;
	static ::android::view::accessibility::AccessibilityWindowInfo Obtain();
	static ::android::view::accessibility::AccessibilityWindowInfo Obtain(const ::android::view::accessibility::AccessibilityWindowInfo& arg0);
	::jvoid Recycle() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor();
	AccessibilityWindowInfo() : ::java::lang::Object(__Constructor()) {}
	explicit AccessibilityWindowInfo(jobject o) : ::java::lang::Object(o) {}
	AccessibilityWindowInfo(const AccessibilityWindowInfo& o)  : ::java::lang::Object(o) {}

};

}}}

namespace android { namespace util { 
struct Property : ::java::lang::Object
{
	static jni::Class __CLASS;

	::java::lang::Object Get(const ::java::lang::Object& arg0) const;
	::java::lang::String GetName() const;
	::java::lang::Class GetType() const;
	::jboolean IsReadOnly() const;
	static ::android::util::Property Of(const ::java::lang::Class& arg0, const ::java::lang::Class& arg1, const ::java::lang::String& arg2);
	::jvoid Set(const ::java::lang::Object& arg0, const ::java::lang::Object& arg1) const;
	static jobject __Constructor(const ::java::lang::Class& arg0, const ::java::lang::String& arg1);
	Property(const ::java::lang::Class& arg0, const ::java::lang::String& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit Property(jobject o) : ::java::lang::Object(o) {}
	Property(const Property& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace view { 
struct View_OnAttachStateChangeListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnViewAttachedToWindow(const ::android::view::View& arg0) const;
	::jvoid OnViewDetachedFromWindow(const ::android::view::View& arg0) const;
	explicit View_OnAttachStateChangeListener(jobject o) : java::lang::Object(o) {}
	View_OnAttachStateChangeListener(const View_OnAttachStateChangeListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::View_OnAttachStateChangeListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnViewAttachedToWindow(const ::android::view::View& arg0) = 0;
		virtual void OnViewDetachedFromWindow(const ::android::view::View& arg0) = 0;
	};
};

struct View_OnLayoutChangeListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnLayoutChange(const ::android::view::View& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5, const ::jint& arg6, const ::jint& arg7, const ::jint& arg8) const;
	explicit View_OnLayoutChangeListener(jobject o) : java::lang::Object(o) {}
	View_OnLayoutChangeListener(const View_OnLayoutChangeListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::View_OnLayoutChangeListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnLayoutChange(const ::android::view::View& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5, const ::jint& arg6, const ::jint& arg7, const ::jint& arg8) = 0;
	};
};

struct View_OnUnhandledKeyEventListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean OnUnhandledKeyEvent(const ::android::view::View& arg0, const ::android::view::KeyEvent& arg1) const;
	explicit View_OnUnhandledKeyEventListener(jobject o) : java::lang::Object(o) {}
	View_OnUnhandledKeyEventListener(const View_OnUnhandledKeyEventListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::View_OnUnhandledKeyEventListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean OnUnhandledKeyEvent(const ::android::view::View& arg0, const ::android::view::KeyEvent& arg1) = 0;
	};
};

struct ViewPropertyAnimator : ::java::lang::Object
{
	static jni::Class __CLASS;

	::android::view::ViewPropertyAnimator Alpha(const ::jfloat& arg0) const;
	::android::view::ViewPropertyAnimator AlphaBy(const ::jfloat& arg0) const;
	::jvoid Cancel() const;
	::jlong GetDuration() const;
	::android::animation::TimeInterpolator GetInterpolator() const;
	::jlong GetStartDelay() const;
	::android::view::ViewPropertyAnimator Rotation(const ::jfloat& arg0) const;
	::android::view::ViewPropertyAnimator RotationBy(const ::jfloat& arg0) const;
	::android::view::ViewPropertyAnimator RotationX(const ::jfloat& arg0) const;
	::android::view::ViewPropertyAnimator RotationXBy(const ::jfloat& arg0) const;
	::android::view::ViewPropertyAnimator RotationY(const ::jfloat& arg0) const;
	::android::view::ViewPropertyAnimator RotationYBy(const ::jfloat& arg0) const;
	::android::view::ViewPropertyAnimator ScaleX(const ::jfloat& arg0) const;
	::android::view::ViewPropertyAnimator ScaleXBy(const ::jfloat& arg0) const;
	::android::view::ViewPropertyAnimator ScaleY(const ::jfloat& arg0) const;
	::android::view::ViewPropertyAnimator ScaleYBy(const ::jfloat& arg0) const;
	::android::view::ViewPropertyAnimator SetDuration(const ::jlong& arg0) const;
	::android::view::ViewPropertyAnimator SetInterpolator(const ::android::animation::TimeInterpolator& arg0) const;
	::android::view::ViewPropertyAnimator SetListener(const ::android::animation::Animator_AnimatorListener& arg0) const;
	::android::view::ViewPropertyAnimator SetStartDelay(const ::jlong& arg0) const;
	::android::view::ViewPropertyAnimator SetUpdateListener(const ::android::animation::ValueAnimator_AnimatorUpdateListener& arg0) const;
	::jvoid Start() const;
	::android::view::ViewPropertyAnimator TranslationX(const ::jfloat& arg0) const;
	::android::view::ViewPropertyAnimator TranslationXBy(const ::jfloat& arg0) const;
	::android::view::ViewPropertyAnimator TranslationY(const ::jfloat& arg0) const;
	::android::view::ViewPropertyAnimator TranslationYBy(const ::jfloat& arg0) const;
	::android::view::ViewPropertyAnimator TranslationZ(const ::jfloat& arg0) const;
	::android::view::ViewPropertyAnimator TranslationZBy(const ::jfloat& arg0) const;
	::android::view::ViewPropertyAnimator WithEndAction(const ::java::lang::Runnable& arg0) const;
	::android::view::ViewPropertyAnimator WithLayer() const;
	::android::view::ViewPropertyAnimator WithStartAction(const ::java::lang::Runnable& arg0) const;
	::android::view::ViewPropertyAnimator X(const ::jfloat& arg0) const;
	::android::view::ViewPropertyAnimator XBy(const ::jfloat& arg0) const;
	::android::view::ViewPropertyAnimator Y(const ::jfloat& arg0) const;
	::android::view::ViewPropertyAnimator YBy(const ::jfloat& arg0) const;
	::android::view::ViewPropertyAnimator Z(const ::jfloat& arg0) const;
	::android::view::ViewPropertyAnimator ZBy(const ::jfloat& arg0) const;
	explicit ViewPropertyAnimator(jobject o) : ::java::lang::Object(o) {}
	ViewPropertyAnimator(const ViewPropertyAnimator& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace animation { 
struct TimeInterpolator : java::lang::Object
{
	static jni::Class __CLASS;

	::jfloat GetInterpolation(const ::jfloat& arg0) const;
	explicit TimeInterpolator(jobject o) : java::lang::Object(o) {}
	TimeInterpolator(const TimeInterpolator& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::animation::TimeInterpolator();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jfloat GetInterpolation(const ::jfloat& arg0) = 0;
	};
};

struct Animator_AnimatorListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnAnimationCancel(const ::android::animation::Animator& arg0) const;
	::jvoid OnAnimationEnd(const ::android::animation::Animator& arg0) const;
	::jvoid OnAnimationEnd(const ::android::animation::Animator& arg0, const ::jboolean& arg1) const;
	::jvoid OnAnimationRepeat(const ::android::animation::Animator& arg0) const;
	::jvoid OnAnimationStart(const ::android::animation::Animator& arg0) const;
	::jvoid OnAnimationStart(const ::android::animation::Animator& arg0, const ::jboolean& arg1) const;
	explicit Animator_AnimatorListener(jobject o) : java::lang::Object(o) {}
	Animator_AnimatorListener(const Animator_AnimatorListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::animation::Animator_AnimatorListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnAnimationCancel(const ::android::animation::Animator& arg0) = 0;
		virtual void OnAnimationEnd(const ::android::animation::Animator& arg0) = 0;
		virtual void OnAnimationEnd(const ::android::animation::Animator& arg0, const ::jboolean& arg1) = 0;
		virtual void OnAnimationRepeat(const ::android::animation::Animator& arg0) = 0;
		virtual void OnAnimationStart(const ::android::animation::Animator& arg0) = 0;
		virtual void OnAnimationStart(const ::android::animation::Animator& arg0, const ::jboolean& arg1) = 0;
	};
};

struct Animator : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::Cloneable();
	static ::jlong& fDURATION_INFINITE();
	::jvoid AddListener(const ::android::animation::Animator_AnimatorListener& arg0) const;
	::jvoid AddPauseListener(const ::android::animation::Animator_AnimatorPauseListener& arg0) const;
	::jvoid Cancel() const;
	::android::animation::Animator Clone() const;
	::jvoid End() const;
	::jlong GetDuration() const;
	::android::animation::TimeInterpolator GetInterpolator() const;
	::java::util::ArrayList GetListeners() const;
	::jlong GetStartDelay() const;
	::jlong GetTotalDuration() const;
	::jboolean IsPaused() const;
	::jboolean IsRunning() const;
	::jboolean IsStarted() const;
	::jvoid Pause() const;
	::jvoid RemoveAllListeners() const;
	::jvoid RemoveListener(const ::android::animation::Animator_AnimatorListener& arg0) const;
	::jvoid RemovePauseListener(const ::android::animation::Animator_AnimatorPauseListener& arg0) const;
	::jvoid Resume() const;
	::android::animation::Animator SetDuration(const ::jlong& arg0) const;
	::jvoid SetInterpolator(const ::android::animation::TimeInterpolator& arg0) const;
	::jvoid SetStartDelay(const ::jlong& arg0) const;
	::jvoid SetTarget(const ::java::lang::Object& arg0) const;
	::jvoid SetupEndValues() const;
	::jvoid SetupStartValues() const;
	::jvoid Start() const;
	static jobject __Constructor();
	Animator() : ::java::lang::Object(__Constructor()) {}
	explicit Animator(jobject o) : ::java::lang::Object(o) {}
	Animator(const Animator& o)  : ::java::lang::Object(o) {}

};

struct Animator_AnimatorPauseListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnAnimationPause(const ::android::animation::Animator& arg0) const;
	::jvoid OnAnimationResume(const ::android::animation::Animator& arg0) const;
	explicit Animator_AnimatorPauseListener(jobject o) : java::lang::Object(o) {}
	Animator_AnimatorPauseListener(const Animator_AnimatorPauseListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::animation::Animator_AnimatorPauseListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnAnimationPause(const ::android::animation::Animator& arg0) = 0;
		virtual void OnAnimationResume(const ::android::animation::Animator& arg0) = 0;
	};
};

struct ValueAnimator_AnimatorUpdateListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnAnimationUpdate(const ::android::animation::ValueAnimator& arg0) const;
	explicit ValueAnimator_AnimatorUpdateListener(jobject o) : java::lang::Object(o) {}
	ValueAnimator_AnimatorUpdateListener(const ValueAnimator_AnimatorUpdateListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::animation::ValueAnimator_AnimatorUpdateListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnAnimationUpdate(const ::android::animation::ValueAnimator& arg0) = 0;
	};
};

struct ValueAnimator : ::android::animation::Animator
{
	static jni::Class __CLASS;

	static ::jint& fINFINITE();
	static ::jint& fRESTART();
	static ::jint& fREVERSE();
	::jvoid AddUpdateListener(const ::android::animation::ValueAnimator_AnimatorUpdateListener& arg0) const;
	static ::jboolean AreAnimatorsEnabled();
	::jvoid Cancel() const;
	::android::animation::ValueAnimator Clone() const;
	::jvoid End() const;
	::jfloat GetAnimatedFraction() const;
	::java::lang::Object GetAnimatedValue() const;
	::java::lang::Object GetAnimatedValue(const ::java::lang::String& arg0) const;
	::jlong GetCurrentPlayTime() const;
	::jlong GetDuration() const;
	static ::jlong GetFrameDelay();
	::android::animation::TimeInterpolator GetInterpolator() const;
	::jint GetRepeatCount() const;
	::jint GetRepeatMode() const;
	::jlong GetStartDelay() const;
	::jlong GetTotalDuration() const;
	jni::Array< ::android::animation::PropertyValuesHolder > GetValues() const;
	::jboolean IsRunning() const;
	::jboolean IsStarted() const;
	static ::android::animation::ValueAnimator OfArgb(const jni::Array< ::jint >& arg0);
	static ::android::animation::ValueAnimator OfFloat(const jni::Array< ::jfloat >& arg0);
	static ::android::animation::ValueAnimator OfInt(const jni::Array< ::jint >& arg0);
	static ::android::animation::ValueAnimator OfObject(const ::android::animation::TypeEvaluator& arg0, const jni::Array< ::java::lang::Object >& arg1);
	static ::android::animation::ValueAnimator OfPropertyValuesHolder(const jni::Array< ::android::animation::PropertyValuesHolder >& arg0);
	::jvoid Pause() const;
	::jvoid RemoveAllUpdateListeners() const;
	::jvoid RemoveUpdateListener(const ::android::animation::ValueAnimator_AnimatorUpdateListener& arg0) const;
	::jvoid Resume() const;
	::jvoid Reverse() const;
	::jvoid SetCurrentFraction(const ::jfloat& arg0) const;
	::jvoid SetCurrentPlayTime(const ::jlong& arg0) const;
	::android::animation::ValueAnimator SetDuration(const ::jlong& arg0) const;
	::jvoid SetEvaluator(const ::android::animation::TypeEvaluator& arg0) const;
	::jvoid SetFloatValues(const jni::Array< ::jfloat >& arg0) const;
	static ::jvoid SetFrameDelay(const ::jlong& arg0);
	::jvoid SetIntValues(const jni::Array< ::jint >& arg0) const;
	::jvoid SetInterpolator(const ::android::animation::TimeInterpolator& arg0) const;
	::jvoid SetObjectValues(const jni::Array< ::java::lang::Object >& arg0) const;
	::jvoid SetRepeatCount(const ::jint& arg0) const;
	::jvoid SetRepeatMode(const ::jint& arg0) const;
	::jvoid SetStartDelay(const ::jlong& arg0) const;
	::jvoid SetValues(const jni::Array< ::android::animation::PropertyValuesHolder >& arg0) const;
	::jvoid Start() const;
	::java::lang::String ToString() const;
	static jobject __Constructor();
	ValueAnimator() : ::android::animation::Animator(__Constructor()) {}
	explicit ValueAnimator(jobject o) : ::android::animation::Animator(o) {}
	ValueAnimator(const ValueAnimator& o)  : ::android::animation::Animator(o) {}

};

struct PropertyValuesHolder : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::Cloneable();
	::android::animation::PropertyValuesHolder Clone() const;
	::java::lang::String GetPropertyName() const;
	static ::android::animation::PropertyValuesHolder OfFloat(const ::android::util::Property& arg0, const jni::Array< ::jfloat >& arg1);
	static ::android::animation::PropertyValuesHolder OfFloat(const ::java::lang::String& arg0, const jni::Array< ::jfloat >& arg1);
	static ::android::animation::PropertyValuesHolder OfInt(const ::android::util::Property& arg0, const jni::Array< ::jint >& arg1);
	static ::android::animation::PropertyValuesHolder OfInt(const ::java::lang::String& arg0, const jni::Array< ::jint >& arg1);
	static ::android::animation::PropertyValuesHolder OfKeyframe(const ::android::util::Property& arg0, const jni::Array< ::android::animation::Keyframe >& arg1);
	static ::android::animation::PropertyValuesHolder OfKeyframe(const ::java::lang::String& arg0, const jni::Array< ::android::animation::Keyframe >& arg1);
	static ::android::animation::PropertyValuesHolder OfMultiFloat(const ::java::lang::String& arg0, const ::android::animation::TypeConverter& arg1, const ::android::animation::TypeEvaluator& arg2, const jni::Array< ::android::animation::Keyframe >& arg3);
	static ::android::animation::PropertyValuesHolder OfMultiFloat(const ::java::lang::String& arg0, const ::android::animation::TypeConverter& arg1, const ::android::animation::TypeEvaluator& arg2, const jni::Array< ::java::lang::Object >& arg3);
	static ::android::animation::PropertyValuesHolder OfMultiFloat(const ::java::lang::String& arg0, const ::android::graphics::Path& arg1);
	static ::android::animation::PropertyValuesHolder OfMultiFloat(const ::java::lang::String& arg0, const jni::Array< jni::Array< ::jfloat > >& arg1);
	static ::android::animation::PropertyValuesHolder OfMultiInt(const ::java::lang::String& arg0, const ::android::animation::TypeConverter& arg1, const ::android::animation::TypeEvaluator& arg2, const jni::Array< ::android::animation::Keyframe >& arg3);
	static ::android::animation::PropertyValuesHolder OfMultiInt(const ::java::lang::String& arg0, const ::android::animation::TypeConverter& arg1, const ::android::animation::TypeEvaluator& arg2, const jni::Array< ::java::lang::Object >& arg3);
	static ::android::animation::PropertyValuesHolder OfMultiInt(const ::java::lang::String& arg0, const ::android::graphics::Path& arg1);
	static ::android::animation::PropertyValuesHolder OfMultiInt(const ::java::lang::String& arg0, const jni::Array< jni::Array< ::jint > >& arg1);
	static ::android::animation::PropertyValuesHolder OfObject(const ::android::util::Property& arg0, const ::android::animation::TypeConverter& arg1, const ::android::animation::TypeEvaluator& arg2, const jni::Array< ::java::lang::Object >& arg3);
	static ::android::animation::PropertyValuesHolder OfObject(const ::android::util::Property& arg0, const ::android::animation::TypeConverter& arg1, const ::android::graphics::Path& arg2);
	static ::android::animation::PropertyValuesHolder OfObject(const ::android::util::Property& arg0, const ::android::animation::TypeEvaluator& arg1, const jni::Array< ::java::lang::Object >& arg2);
	static ::android::animation::PropertyValuesHolder OfObject(const ::java::lang::String& arg0, const ::android::animation::TypeConverter& arg1, const ::android::graphics::Path& arg2);
	static ::android::animation::PropertyValuesHolder OfObject(const ::java::lang::String& arg0, const ::android::animation::TypeEvaluator& arg1, const jni::Array< ::java::lang::Object >& arg2);
	::jvoid SetConverter(const ::android::animation::TypeConverter& arg0) const;
	::jvoid SetEvaluator(const ::android::animation::TypeEvaluator& arg0) const;
	::jvoid SetFloatValues(const jni::Array< ::jfloat >& arg0) const;
	::jvoid SetIntValues(const jni::Array< ::jint >& arg0) const;
	::jvoid SetKeyframes(const jni::Array< ::android::animation::Keyframe >& arg0) const;
	::jvoid SetObjectValues(const jni::Array< ::java::lang::Object >& arg0) const;
	::jvoid SetProperty(const ::android::util::Property& arg0) const;
	::jvoid SetPropertyName(const ::java::lang::String& arg0) const;
	::java::lang::String ToString() const;
	explicit PropertyValuesHolder(jobject o) : ::java::lang::Object(o) {}
	PropertyValuesHolder(const PropertyValuesHolder& o)  : ::java::lang::Object(o) {}

};

struct Keyframe : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::Cloneable();
	::android::animation::Keyframe Clone() const;
	::jfloat GetFraction() const;
	::android::animation::TimeInterpolator GetInterpolator() const;
	::java::lang::Class GetType() const;
	::java::lang::Object GetValue() const;
	::jboolean HasValue() const;
	static ::android::animation::Keyframe OfFloat(const ::jfloat& arg0);
	static ::android::animation::Keyframe OfFloat(const ::jfloat& arg0, const ::jfloat& arg1);
	static ::android::animation::Keyframe OfInt(const ::jfloat& arg0);
	static ::android::animation::Keyframe OfInt(const ::jfloat& arg0, const ::jint& arg1);
	static ::android::animation::Keyframe OfObject(const ::jfloat& arg0);
	static ::android::animation::Keyframe OfObject(const ::jfloat& arg0, const ::java::lang::Object& arg1);
	::jvoid SetFraction(const ::jfloat& arg0) const;
	::jvoid SetInterpolator(const ::android::animation::TimeInterpolator& arg0) const;
	::jvoid SetValue(const ::java::lang::Object& arg0) const;
	static jobject __Constructor();
	Keyframe() : ::java::lang::Object(__Constructor()) {}
	explicit Keyframe(jobject o) : ::java::lang::Object(o) {}
	Keyframe(const Keyframe& o)  : ::java::lang::Object(o) {}

};

struct TypeConverter : ::java::lang::Object
{
	static jni::Class __CLASS;

	::java::lang::Object Convert(const ::java::lang::Object& arg0) const;
	static jobject __Constructor(const ::java::lang::Class& arg0, const ::java::lang::Class& arg1);
	TypeConverter(const ::java::lang::Class& arg0, const ::java::lang::Class& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit TypeConverter(jobject o) : ::java::lang::Object(o) {}
	TypeConverter(const TypeConverter& o)  : ::java::lang::Object(o) {}

};

struct TypeEvaluator : java::lang::Object
{
	static jni::Class __CLASS;

	::java::lang::Object Evaluate(const ::jfloat& arg0, const ::java::lang::Object& arg1, const ::java::lang::Object& arg2) const;
	explicit TypeEvaluator(jobject o) : java::lang::Object(o) {}
	TypeEvaluator(const TypeEvaluator& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::animation::TypeEvaluator();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::lang::Object Evaluate(const ::jfloat& arg0, const ::java::lang::Object& arg1, const ::java::lang::Object& arg2) = 0;
	};
};

}}

namespace android { namespace view { namespace autofill { 
struct AutofillValue : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	static ::android::view::autofill::AutofillValue ForDate(const ::jlong& arg0);
	static ::android::view::autofill::AutofillValue ForList(const ::jint& arg0);
	static ::android::view::autofill::AutofillValue ForText(const ::java::lang::CharSequence& arg0);
	static ::android::view::autofill::AutofillValue ForToggle(const ::jboolean& arg0);
	::jlong GetDateValue() const;
	::jint GetListValue() const;
	::java::lang::CharSequence GetTextValue() const;
	::jboolean GetToggleValue() const;
	::jint HashCode() const;
	::jboolean IsDate() const;
	::jboolean IsList() const;
	::jboolean IsText() const;
	::jboolean IsToggle() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit AutofillValue(jobject o) : ::java::lang::Object(o) {}
	AutofillValue(const AutofillValue& o)  : ::java::lang::Object(o) {}

};

}}}

namespace android { namespace view { 
struct WindowInsets : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::android::view::WindowInsets& fCONSUMED();
	::android::view::WindowInsets ConsumeDisplayCutout() const;
	::android::view::WindowInsets ConsumeStableInsets() const;
	::android::view::WindowInsets ConsumeSystemWindowInsets() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::android::view::DisplayCutout GetDisplayCutout() const;
	::android::graphics::Insets GetInsets(const ::jint& arg0) const;
	::android::graphics::Insets GetInsetsIgnoringVisibility(const ::jint& arg0) const;
	::android::graphics::Insets GetMandatorySystemGestureInsets() const;
	::android::graphics::Rect GetPrivacyIndicatorBounds() const;
	::android::view::RoundedCorner GetRoundedCorner(const ::jint& arg0) const;
	::jint GetStableInsetBottom() const;
	::jint GetStableInsetLeft() const;
	::jint GetStableInsetRight() const;
	::jint GetStableInsetTop() const;
	::android::graphics::Insets GetStableInsets() const;
	::android::graphics::Insets GetSystemGestureInsets() const;
	::jint GetSystemWindowInsetBottom() const;
	::jint GetSystemWindowInsetLeft() const;
	::jint GetSystemWindowInsetRight() const;
	::jint GetSystemWindowInsetTop() const;
	::android::graphics::Insets GetSystemWindowInsets() const;
	::android::graphics::Insets GetTappableElementInsets() const;
	::jboolean HasInsets() const;
	::jboolean HasStableInsets() const;
	::jboolean HasSystemWindowInsets() const;
	::jint HashCode() const;
	::android::view::WindowInsets Inset(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::android::view::WindowInsets Inset(const ::android::graphics::Insets& arg0) const;
	::jboolean IsConsumed() const;
	::jboolean IsRound() const;
	::jboolean IsVisible(const ::jint& arg0) const;
	::android::view::WindowInsets ReplaceSystemWindowInsets(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::android::view::WindowInsets ReplaceSystemWindowInsets(const ::android::graphics::Rect& arg0) const;
	::java::lang::String ToString() const;
	explicit WindowInsets(jobject o) : ::java::lang::Object(o) {}
	WindowInsets(const WindowInsets& o)  : ::java::lang::Object(o) {}

};

struct ContextMenu : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::view::Menu();
	::jvoid ClearHeader() const;
	::android::view::ContextMenu SetHeaderIcon(const ::jint& arg0) const;
	::android::view::ContextMenu SetHeaderIcon(const ::android::graphics::drawable::Drawable& arg0) const;
	::android::view::ContextMenu SetHeaderTitle(const ::jint& arg0) const;
	::android::view::ContextMenu SetHeaderTitle(const ::java::lang::CharSequence& arg0) const;
	::android::view::ContextMenu SetHeaderView(const ::android::view::View& arg0) const;
	explicit ContextMenu(jobject o) : java::lang::Object(o) {}
	ContextMenu(const ContextMenu& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::ContextMenu();
		operator ::android::view::Menu();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void ClearHeader() = 0;
		virtual ::android::view::ContextMenu SetHeaderIcon(const ::jint& arg0) = 0;
		virtual ::android::view::ContextMenu SetHeaderIcon(const ::android::graphics::drawable::Drawable& arg0) = 0;
		virtual ::android::view::ContextMenu SetHeaderTitle(const ::jint& arg0) = 0;
		virtual ::android::view::ContextMenu SetHeaderTitle(const ::java::lang::CharSequence& arg0) = 0;
		virtual ::android::view::ContextMenu SetHeaderView(const ::android::view::View& arg0) = 0;
	};
};

struct Menu : java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fCATEGORY_ALTERNATIVE();
	static ::jint& fCATEGORY_CONTAINER();
	static ::jint& fCATEGORY_SECONDARY();
	static ::jint& fCATEGORY_SYSTEM();
	static ::jint& fFIRST();
	static ::jint& fFLAG_ALWAYS_PERFORM_CLOSE();
	static ::jint& fFLAG_APPEND_TO_GROUP();
	static ::jint& fFLAG_PERFORM_NO_CLOSE();
	static ::jint& fNONE();
	static ::jint& fSUPPORTED_MODIFIERS_MASK();
	::android::view::MenuItem Add(const ::jint& arg0) const;
	::android::view::MenuItem Add(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::android::view::MenuItem Add(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::java::lang::CharSequence& arg3) const;
	::android::view::MenuItem Add(const ::java::lang::CharSequence& arg0) const;
	::jint AddIntentOptions(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::android::content::ComponentName& arg3, const jni::Array< ::android::content::Intent >& arg4, const ::android::content::Intent& arg5, const ::jint& arg6, const jni::Array< ::android::view::MenuItem >& arg7) const;
	::android::view::SubMenu AddSubMenu(const ::jint& arg0) const;
	::android::view::SubMenu AddSubMenu(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::android::view::SubMenu AddSubMenu(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::java::lang::CharSequence& arg3) const;
	::android::view::SubMenu AddSubMenu(const ::java::lang::CharSequence& arg0) const;
	::jvoid Clear() const;
	::jvoid Close() const;
	::android::view::MenuItem FindItem(const ::jint& arg0) const;
	::android::view::MenuItem GetItem(const ::jint& arg0) const;
	::jboolean HasVisibleItems() const;
	::jboolean IsShortcutKey(const ::jint& arg0, const ::android::view::KeyEvent& arg1) const;
	::jboolean PerformIdentifierAction(const ::jint& arg0, const ::jint& arg1) const;
	::jboolean PerformShortcut(const ::jint& arg0, const ::android::view::KeyEvent& arg1, const ::jint& arg2) const;
	::jvoid RemoveGroup(const ::jint& arg0) const;
	::jvoid RemoveItem(const ::jint& arg0) const;
	::jvoid SetGroupCheckable(const ::jint& arg0, const ::jboolean& arg1, const ::jboolean& arg2) const;
	::jvoid SetGroupDividerEnabled(const ::jboolean& arg0) const;
	::jvoid SetGroupEnabled(const ::jint& arg0, const ::jboolean& arg1) const;
	::jvoid SetGroupVisible(const ::jint& arg0, const ::jboolean& arg1) const;
	::jvoid SetQwertyMode(const ::jboolean& arg0) const;
	::jint Size() const;
	explicit Menu(jobject o) : java::lang::Object(o) {}
	Menu(const Menu& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::Menu();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::android::view::MenuItem Add(const ::jint& arg0) = 0;
		virtual ::android::view::MenuItem Add(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) = 0;
		virtual ::android::view::MenuItem Add(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::java::lang::CharSequence& arg3) = 0;
		virtual ::android::view::MenuItem Add(const ::java::lang::CharSequence& arg0) = 0;
		virtual ::jint AddIntentOptions(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::android::content::ComponentName& arg3, const jni::Array< ::android::content::Intent >& arg4, const ::android::content::Intent& arg5, const ::jint& arg6, const jni::Array< ::android::view::MenuItem >& arg7) = 0;
		virtual ::android::view::SubMenu AddSubMenu(const ::jint& arg0) = 0;
		virtual ::android::view::SubMenu AddSubMenu(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) = 0;
		virtual ::android::view::SubMenu AddSubMenu(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::java::lang::CharSequence& arg3) = 0;
		virtual ::android::view::SubMenu AddSubMenu(const ::java::lang::CharSequence& arg0) = 0;
		virtual void Clear() = 0;
		virtual void Close() = 0;
		virtual ::android::view::MenuItem FindItem(const ::jint& arg0) = 0;
		virtual ::android::view::MenuItem GetItem(const ::jint& arg0) = 0;
		virtual ::jboolean HasVisibleItems() = 0;
		virtual ::jboolean IsShortcutKey(const ::jint& arg0, const ::android::view::KeyEvent& arg1) = 0;
		virtual ::jboolean PerformIdentifierAction(const ::jint& arg0, const ::jint& arg1) = 0;
		virtual ::jboolean PerformShortcut(const ::jint& arg0, const ::android::view::KeyEvent& arg1, const ::jint& arg2) = 0;
		virtual void RemoveGroup(const ::jint& arg0) = 0;
		virtual void RemoveItem(const ::jint& arg0) = 0;
		virtual void SetGroupCheckable(const ::jint& arg0, const ::jboolean& arg1, const ::jboolean& arg2) = 0;
		virtual void SetGroupDividerEnabled(const ::jboolean& arg0) = 0;
		virtual void SetGroupEnabled(const ::jint& arg0, const ::jboolean& arg1) = 0;
		virtual void SetGroupVisible(const ::jint& arg0, const ::jboolean& arg1) = 0;
		virtual void SetQwertyMode(const ::jboolean& arg0) = 0;
		virtual ::jint Size() = 0;
	};
};

struct MenuItem : java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fSHOW_AS_ACTION_ALWAYS();
	static ::jint& fSHOW_AS_ACTION_COLLAPSE_ACTION_VIEW();
	static ::jint& fSHOW_AS_ACTION_IF_ROOM();
	static ::jint& fSHOW_AS_ACTION_NEVER();
	static ::jint& fSHOW_AS_ACTION_WITH_TEXT();
	::jboolean CollapseActionView() const;
	::jboolean ExpandActionView() const;
	::android::view::ActionProvider GetActionProvider() const;
	::android::view::View GetActionView() const;
	::jint GetAlphabeticModifiers() const;
	::jchar GetAlphabeticShortcut() const;
	::java::lang::CharSequence GetContentDescription() const;
	::jint GetGroupId() const;
	::android::graphics::drawable::Drawable GetIcon() const;
	::android::graphics::BlendMode GetIconTintBlendMode() const;
	::android::content::res::ColorStateList GetIconTintList() const;
	::android::graphics::PorterDuff_Mode GetIconTintMode() const;
	::android::content::Intent GetIntent() const;
	::jint GetItemId() const;
	::android::view::ContextMenu_ContextMenuInfo GetMenuInfo() const;
	::jint GetNumericModifiers() const;
	::jchar GetNumericShortcut() const;
	::jint GetOrder() const;
	::android::view::SubMenu GetSubMenu() const;
	::java::lang::CharSequence GetTitle() const;
	::java::lang::CharSequence GetTitleCondensed() const;
	::java::lang::CharSequence GetTooltipText() const;
	::jboolean HasSubMenu() const;
	::jboolean IsActionViewExpanded() const;
	::jboolean IsCheckable() const;
	::jboolean IsChecked() const;
	::jboolean IsEnabled() const;
	::jboolean IsVisible() const;
	::android::view::MenuItem SetActionProvider(const ::android::view::ActionProvider& arg0) const;
	::android::view::MenuItem SetActionView(const ::jint& arg0) const;
	::android::view::MenuItem SetActionView(const ::android::view::View& arg0) const;
	::android::view::MenuItem SetAlphabeticShortcut(const ::jchar& arg0) const;
	::android::view::MenuItem SetAlphabeticShortcut(const ::jchar& arg0, const ::jint& arg1) const;
	::android::view::MenuItem SetCheckable(const ::jboolean& arg0) const;
	::android::view::MenuItem SetChecked(const ::jboolean& arg0) const;
	::android::view::MenuItem SetContentDescription(const ::java::lang::CharSequence& arg0) const;
	::android::view::MenuItem SetEnabled(const ::jboolean& arg0) const;
	::android::view::MenuItem SetIcon(const ::jint& arg0) const;
	::android::view::MenuItem SetIcon(const ::android::graphics::drawable::Drawable& arg0) const;
	::android::view::MenuItem SetIconTintBlendMode(const ::android::graphics::BlendMode& arg0) const;
	::android::view::MenuItem SetIconTintList(const ::android::content::res::ColorStateList& arg0) const;
	::android::view::MenuItem SetIconTintMode(const ::android::graphics::PorterDuff_Mode& arg0) const;
	::android::view::MenuItem SetIntent(const ::android::content::Intent& arg0) const;
	::android::view::MenuItem SetNumericShortcut(const ::jchar& arg0) const;
	::android::view::MenuItem SetNumericShortcut(const ::jchar& arg0, const ::jint& arg1) const;
	::android::view::MenuItem SetOnActionExpandListener(const ::android::view::MenuItem_OnActionExpandListener& arg0) const;
	::android::view::MenuItem SetOnMenuItemClickListener(const ::android::view::MenuItem_OnMenuItemClickListener& arg0) const;
	::android::view::MenuItem SetShortcut(const ::jchar& arg0, const ::jchar& arg1) const;
	::android::view::MenuItem SetShortcut(const ::jchar& arg0, const ::jchar& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid SetShowAsAction(const ::jint& arg0) const;
	::android::view::MenuItem SetShowAsActionFlags(const ::jint& arg0) const;
	::android::view::MenuItem SetTitle(const ::jint& arg0) const;
	::android::view::MenuItem SetTitle(const ::java::lang::CharSequence& arg0) const;
	::android::view::MenuItem SetTitleCondensed(const ::java::lang::CharSequence& arg0) const;
	::android::view::MenuItem SetTooltipText(const ::java::lang::CharSequence& arg0) const;
	::android::view::MenuItem SetVisible(const ::jboolean& arg0) const;
	explicit MenuItem(jobject o) : java::lang::Object(o) {}
	MenuItem(const MenuItem& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::MenuItem();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean CollapseActionView() = 0;
		virtual ::jboolean ExpandActionView() = 0;
		virtual ::android::view::ActionProvider GetActionProvider() = 0;
		virtual ::android::view::View GetActionView() = 0;
		virtual ::jint GetAlphabeticModifiers() = 0;
		virtual ::jchar GetAlphabeticShortcut() = 0;
		virtual ::java::lang::CharSequence GetContentDescription() = 0;
		virtual ::jint GetGroupId() = 0;
		virtual ::android::graphics::drawable::Drawable GetIcon() = 0;
		virtual ::android::graphics::BlendMode GetIconTintBlendMode() = 0;
		virtual ::android::content::res::ColorStateList GetIconTintList() = 0;
		virtual ::android::graphics::PorterDuff_Mode GetIconTintMode() = 0;
		virtual ::android::content::Intent GetIntent() = 0;
		virtual ::jint GetItemId() = 0;
		virtual ::android::view::ContextMenu_ContextMenuInfo GetMenuInfo() = 0;
		virtual ::jint GetNumericModifiers() = 0;
		virtual ::jchar GetNumericShortcut() = 0;
		virtual ::jint GetOrder() = 0;
		virtual ::android::view::SubMenu GetSubMenu() = 0;
		virtual ::java::lang::CharSequence GetTitle() = 0;
		virtual ::java::lang::CharSequence GetTitleCondensed() = 0;
		virtual ::java::lang::CharSequence GetTooltipText() = 0;
		virtual ::jboolean HasSubMenu() = 0;
		virtual ::jboolean IsActionViewExpanded() = 0;
		virtual ::jboolean IsCheckable() = 0;
		virtual ::jboolean IsChecked() = 0;
		virtual ::jboolean IsEnabled() = 0;
		virtual ::jboolean IsVisible() = 0;
		virtual ::android::view::MenuItem SetActionProvider(const ::android::view::ActionProvider& arg0) = 0;
		virtual ::android::view::MenuItem SetActionView(const ::jint& arg0) = 0;
		virtual ::android::view::MenuItem SetActionView(const ::android::view::View& arg0) = 0;
		virtual ::android::view::MenuItem SetAlphabeticShortcut(const ::jchar& arg0) = 0;
		virtual ::android::view::MenuItem SetAlphabeticShortcut(const ::jchar& arg0, const ::jint& arg1) = 0;
		virtual ::android::view::MenuItem SetCheckable(const ::jboolean& arg0) = 0;
		virtual ::android::view::MenuItem SetChecked(const ::jboolean& arg0) = 0;
		virtual ::android::view::MenuItem SetContentDescription(const ::java::lang::CharSequence& arg0) = 0;
		virtual ::android::view::MenuItem SetEnabled(const ::jboolean& arg0) = 0;
		virtual ::android::view::MenuItem SetIcon(const ::jint& arg0) = 0;
		virtual ::android::view::MenuItem SetIcon(const ::android::graphics::drawable::Drawable& arg0) = 0;
		virtual ::android::view::MenuItem SetIconTintBlendMode(const ::android::graphics::BlendMode& arg0) = 0;
		virtual ::android::view::MenuItem SetIconTintList(const ::android::content::res::ColorStateList& arg0) = 0;
		virtual ::android::view::MenuItem SetIconTintMode(const ::android::graphics::PorterDuff_Mode& arg0) = 0;
		virtual ::android::view::MenuItem SetIntent(const ::android::content::Intent& arg0) = 0;
		virtual ::android::view::MenuItem SetNumericShortcut(const ::jchar& arg0) = 0;
		virtual ::android::view::MenuItem SetNumericShortcut(const ::jchar& arg0, const ::jint& arg1) = 0;
		virtual ::android::view::MenuItem SetOnActionExpandListener(const ::android::view::MenuItem_OnActionExpandListener& arg0) = 0;
		virtual ::android::view::MenuItem SetOnMenuItemClickListener(const ::android::view::MenuItem_OnMenuItemClickListener& arg0) = 0;
		virtual ::android::view::MenuItem SetShortcut(const ::jchar& arg0, const ::jchar& arg1) = 0;
		virtual ::android::view::MenuItem SetShortcut(const ::jchar& arg0, const ::jchar& arg1, const ::jint& arg2, const ::jint& arg3) = 0;
		virtual void SetShowAsAction(const ::jint& arg0) = 0;
		virtual ::android::view::MenuItem SetShowAsActionFlags(const ::jint& arg0) = 0;
		virtual ::android::view::MenuItem SetTitle(const ::jint& arg0) = 0;
		virtual ::android::view::MenuItem SetTitle(const ::java::lang::CharSequence& arg0) = 0;
		virtual ::android::view::MenuItem SetTitleCondensed(const ::java::lang::CharSequence& arg0) = 0;
		virtual ::android::view::MenuItem SetTooltipText(const ::java::lang::CharSequence& arg0) = 0;
		virtual ::android::view::MenuItem SetVisible(const ::jboolean& arg0) = 0;
	};
};

struct ActionProvider : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean HasSubMenu() const;
	::jboolean IsVisible() const;
	::android::view::View OnCreateActionView() const;
	::android::view::View OnCreateActionView(const ::android::view::MenuItem& arg0) const;
	::jboolean OnPerformDefaultAction() const;
	::jvoid OnPrepareSubMenu(const ::android::view::SubMenu& arg0) const;
	::jboolean OverridesItemVisibility() const;
	::jvoid RefreshVisibility() const;
	::jvoid SetVisibilityListener(const ::android::view::ActionProvider_VisibilityListener& arg0) const;
	static jobject __Constructor(const ::android::content::Context& arg0);
	ActionProvider(const ::android::content::Context& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit ActionProvider(jobject o) : ::java::lang::Object(o) {}
	ActionProvider(const ActionProvider& o)  : ::java::lang::Object(o) {}

};

struct SubMenu : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::view::Menu();
	::jvoid ClearHeader() const;
	::android::view::MenuItem GetItem() const;
	::android::view::SubMenu SetHeaderIcon(const ::jint& arg0) const;
	::android::view::SubMenu SetHeaderIcon(const ::android::graphics::drawable::Drawable& arg0) const;
	::android::view::SubMenu SetHeaderTitle(const ::jint& arg0) const;
	::android::view::SubMenu SetHeaderTitle(const ::java::lang::CharSequence& arg0) const;
	::android::view::SubMenu SetHeaderView(const ::android::view::View& arg0) const;
	::android::view::SubMenu SetIcon(const ::jint& arg0) const;
	::android::view::SubMenu SetIcon(const ::android::graphics::drawable::Drawable& arg0) const;
	explicit SubMenu(jobject o) : java::lang::Object(o) {}
	SubMenu(const SubMenu& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::SubMenu();
		operator ::android::view::Menu();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void ClearHeader() = 0;
		virtual ::android::view::MenuItem GetItem() = 0;
		virtual ::android::view::SubMenu SetHeaderIcon(const ::jint& arg0) = 0;
		virtual ::android::view::SubMenu SetHeaderIcon(const ::android::graphics::drawable::Drawable& arg0) = 0;
		virtual ::android::view::SubMenu SetHeaderTitle(const ::jint& arg0) = 0;
		virtual ::android::view::SubMenu SetHeaderTitle(const ::java::lang::CharSequence& arg0) = 0;
		virtual ::android::view::SubMenu SetHeaderView(const ::android::view::View& arg0) = 0;
		virtual ::android::view::SubMenu SetIcon(const ::jint& arg0) = 0;
		virtual ::android::view::SubMenu SetIcon(const ::android::graphics::drawable::Drawable& arg0) = 0;
	};
};

struct ActionProvider_VisibilityListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnActionProviderVisibilityChanged(const ::jboolean& arg0) const;
	explicit ActionProvider_VisibilityListener(jobject o) : java::lang::Object(o) {}
	ActionProvider_VisibilityListener(const ActionProvider_VisibilityListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::ActionProvider_VisibilityListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnActionProviderVisibilityChanged(const ::jboolean& arg0) = 0;
	};
};

struct ContextMenu_ContextMenuInfo : java::lang::Object
{
	static jni::Class __CLASS;

	explicit ContextMenu_ContextMenuInfo(jobject o) : java::lang::Object(o) {}
	ContextMenu_ContextMenuInfo(const ContextMenu_ContextMenuInfo& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::ContextMenu_ContextMenuInfo();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
	};
};

struct MenuItem_OnActionExpandListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean OnMenuItemActionCollapse(const ::android::view::MenuItem& arg0) const;
	::jboolean OnMenuItemActionExpand(const ::android::view::MenuItem& arg0) const;
	explicit MenuItem_OnActionExpandListener(jobject o) : java::lang::Object(o) {}
	MenuItem_OnActionExpandListener(const MenuItem_OnActionExpandListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::MenuItem_OnActionExpandListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean OnMenuItemActionCollapse(const ::android::view::MenuItem& arg0) = 0;
		virtual ::jboolean OnMenuItemActionExpand(const ::android::view::MenuItem& arg0) = 0;
	};
};

struct MenuItem_OnMenuItemClickListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean OnMenuItemClick(const ::android::view::MenuItem& arg0) const;
	explicit MenuItem_OnMenuItemClickListener(jobject o) : java::lang::Object(o) {}
	MenuItem_OnMenuItemClickListener(const MenuItem_OnMenuItemClickListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::MenuItem_OnMenuItemClickListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean OnMenuItemClick(const ::android::view::MenuItem& arg0) = 0;
	};
};

struct MotionEvent : ::android::view::InputEvent
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::jint& fACTION_BUTTON_PRESS();
	static ::jint& fACTION_BUTTON_RELEASE();
	static ::jint& fACTION_CANCEL();
	static ::jint& fACTION_DOWN();
	static ::jint& fACTION_HOVER_ENTER();
	static ::jint& fACTION_HOVER_EXIT();
	static ::jint& fACTION_HOVER_MOVE();
	static ::jint& fACTION_MASK();
	static ::jint& fACTION_MOVE();
	static ::jint& fACTION_OUTSIDE();
	static ::jint& fACTION_POINTER_1_DOWN();
	static ::jint& fACTION_POINTER_1_UP();
	static ::jint& fACTION_POINTER_2_DOWN();
	static ::jint& fACTION_POINTER_2_UP();
	static ::jint& fACTION_POINTER_3_DOWN();
	static ::jint& fACTION_POINTER_3_UP();
	static ::jint& fACTION_POINTER_DOWN();
	static ::jint& fACTION_POINTER_ID_MASK();
	static ::jint& fACTION_POINTER_ID_SHIFT();
	static ::jint& fACTION_POINTER_INDEX_MASK();
	static ::jint& fACTION_POINTER_INDEX_SHIFT();
	static ::jint& fACTION_POINTER_UP();
	static ::jint& fACTION_SCROLL();
	static ::jint& fACTION_UP();
	static ::jint& fAXIS_BRAKE();
	static ::jint& fAXIS_DISTANCE();
	static ::jint& fAXIS_GAS();
	static ::jint& fAXIS_GENERIC_1();
	static ::jint& fAXIS_GENERIC_10();
	static ::jint& fAXIS_GENERIC_11();
	static ::jint& fAXIS_GENERIC_12();
	static ::jint& fAXIS_GENERIC_13();
	static ::jint& fAXIS_GENERIC_14();
	static ::jint& fAXIS_GENERIC_15();
	static ::jint& fAXIS_GENERIC_16();
	static ::jint& fAXIS_GENERIC_2();
	static ::jint& fAXIS_GENERIC_3();
	static ::jint& fAXIS_GENERIC_4();
	static ::jint& fAXIS_GENERIC_5();
	static ::jint& fAXIS_GENERIC_6();
	static ::jint& fAXIS_GENERIC_7();
	static ::jint& fAXIS_GENERIC_8();
	static ::jint& fAXIS_GENERIC_9();
	static ::jint& fAXIS_HAT_X();
	static ::jint& fAXIS_HAT_Y();
	static ::jint& fAXIS_HSCROLL();
	static ::jint& fAXIS_LTRIGGER();
	static ::jint& fAXIS_ORIENTATION();
	static ::jint& fAXIS_PRESSURE();
	static ::jint& fAXIS_RELATIVE_X();
	static ::jint& fAXIS_RELATIVE_Y();
	static ::jint& fAXIS_RTRIGGER();
	static ::jint& fAXIS_RUDDER();
	static ::jint& fAXIS_RX();
	static ::jint& fAXIS_RY();
	static ::jint& fAXIS_RZ();
	static ::jint& fAXIS_SCROLL();
	static ::jint& fAXIS_SIZE();
	static ::jint& fAXIS_THROTTLE();
	static ::jint& fAXIS_TILT();
	static ::jint& fAXIS_TOOL_MAJOR();
	static ::jint& fAXIS_TOOL_MINOR();
	static ::jint& fAXIS_TOUCH_MAJOR();
	static ::jint& fAXIS_TOUCH_MINOR();
	static ::jint& fAXIS_VSCROLL();
	static ::jint& fAXIS_WHEEL();
	static ::jint& fAXIS_X();
	static ::jint& fAXIS_Y();
	static ::jint& fAXIS_Z();
	static ::jint& fBUTTON_BACK();
	static ::jint& fBUTTON_FORWARD();
	static ::jint& fBUTTON_PRIMARY();
	static ::jint& fBUTTON_SECONDARY();
	static ::jint& fBUTTON_STYLUS_PRIMARY();
	static ::jint& fBUTTON_STYLUS_SECONDARY();
	static ::jint& fBUTTON_TERTIARY();
	static ::jint& fCLASSIFICATION_AMBIGUOUS_GESTURE();
	static ::jint& fCLASSIFICATION_DEEP_PRESS();
	static ::jint& fCLASSIFICATION_NONE();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fEDGE_BOTTOM();
	static ::jint& fEDGE_LEFT();
	static ::jint& fEDGE_RIGHT();
	static ::jint& fEDGE_TOP();
	static ::jint& fFLAG_WINDOW_IS_OBSCURED();
	static ::jint& fFLAG_WINDOW_IS_PARTIALLY_OBSCURED();
	static ::jint& fINVALID_POINTER_ID();
	static ::jint& fTOOL_TYPE_ERASER();
	static ::jint& fTOOL_TYPE_FINGER();
	static ::jint& fTOOL_TYPE_MOUSE();
	static ::jint& fTOOL_TYPE_STYLUS();
	static ::jint& fTOOL_TYPE_UNKNOWN();
	static ::java::lang::String ActionToString(const ::jint& arg0);
	::jvoid AddBatch(const ::jlong& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3, const ::jfloat& arg4, const ::jint& arg5) const;
	::jvoid AddBatch(const ::jlong& arg0, const jni::Array< ::android::view::MotionEvent_PointerCoords >& arg1, const ::jint& arg2) const;
	static ::jint AxisFromString(const ::java::lang::String& arg0);
	static ::java::lang::String AxisToString(const ::jint& arg0);
	::jvoid Finalize() const;
	::jint FindPointerIndex(const ::jint& arg0) const;
	::jint GetAction() const;
	::jint GetActionButton() const;
	::jint GetActionIndex() const;
	::jint GetActionMasked() const;
	::jfloat GetAxisValue(const ::jint& arg0) const;
	::jfloat GetAxisValue(const ::jint& arg0, const ::jint& arg1) const;
	::jint GetButtonState() const;
	::jint GetClassification() const;
	::jint GetDeviceId() const;
	::jlong GetDownTime() const;
	::jint GetEdgeFlags() const;
	::jlong GetEventTime() const;
	::jint GetFlags() const;
	::jfloat GetHistoricalAxisValue(const ::jint& arg0, const ::jint& arg1) const;
	::jfloat GetHistoricalAxisValue(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jlong GetHistoricalEventTime(const ::jint& arg0) const;
	::jfloat GetHistoricalOrientation(const ::jint& arg0) const;
	::jfloat GetHistoricalOrientation(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid GetHistoricalPointerCoords(const ::jint& arg0, const ::jint& arg1, const ::android::view::MotionEvent_PointerCoords& arg2) const;
	::jfloat GetHistoricalPressure(const ::jint& arg0) const;
	::jfloat GetHistoricalPressure(const ::jint& arg0, const ::jint& arg1) const;
	::jfloat GetHistoricalSize(const ::jint& arg0) const;
	::jfloat GetHistoricalSize(const ::jint& arg0, const ::jint& arg1) const;
	::jfloat GetHistoricalToolMajor(const ::jint& arg0) const;
	::jfloat GetHistoricalToolMajor(const ::jint& arg0, const ::jint& arg1) const;
	::jfloat GetHistoricalToolMinor(const ::jint& arg0) const;
	::jfloat GetHistoricalToolMinor(const ::jint& arg0, const ::jint& arg1) const;
	::jfloat GetHistoricalTouchMajor(const ::jint& arg0) const;
	::jfloat GetHistoricalTouchMajor(const ::jint& arg0, const ::jint& arg1) const;
	::jfloat GetHistoricalTouchMinor(const ::jint& arg0) const;
	::jfloat GetHistoricalTouchMinor(const ::jint& arg0, const ::jint& arg1) const;
	::jfloat GetHistoricalX(const ::jint& arg0) const;
	::jfloat GetHistoricalX(const ::jint& arg0, const ::jint& arg1) const;
	::jfloat GetHistoricalY(const ::jint& arg0) const;
	::jfloat GetHistoricalY(const ::jint& arg0, const ::jint& arg1) const;
	::jint GetHistorySize() const;
	::jint GetMetaState() const;
	::jfloat GetOrientation() const;
	::jfloat GetOrientation(const ::jint& arg0) const;
	::jvoid GetPointerCoords(const ::jint& arg0, const ::android::view::MotionEvent_PointerCoords& arg1) const;
	::jint GetPointerCount() const;
	::jint GetPointerId(const ::jint& arg0) const;
	::jvoid GetPointerProperties(const ::jint& arg0, const ::android::view::MotionEvent_PointerProperties& arg1) const;
	::jfloat GetPressure() const;
	::jfloat GetPressure(const ::jint& arg0) const;
	::jfloat GetRawX() const;
	::jfloat GetRawX(const ::jint& arg0) const;
	::jfloat GetRawY() const;
	::jfloat GetRawY(const ::jint& arg0) const;
	::jfloat GetSize() const;
	::jfloat GetSize(const ::jint& arg0) const;
	::jint GetSource() const;
	::jfloat GetToolMajor() const;
	::jfloat GetToolMajor(const ::jint& arg0) const;
	::jfloat GetToolMinor() const;
	::jfloat GetToolMinor(const ::jint& arg0) const;
	::jint GetToolType(const ::jint& arg0) const;
	::jfloat GetTouchMajor() const;
	::jfloat GetTouchMajor(const ::jint& arg0) const;
	::jfloat GetTouchMinor() const;
	::jfloat GetTouchMinor(const ::jint& arg0) const;
	::jfloat GetX() const;
	::jfloat GetX(const ::jint& arg0) const;
	::jfloat GetXPrecision() const;
	::jfloat GetY() const;
	::jfloat GetY(const ::jint& arg0) const;
	::jfloat GetYPrecision() const;
	::jboolean IsButtonPressed(const ::jint& arg0) const;
	static ::android::view::MotionEvent Obtain(const ::jlong& arg0, const ::jlong& arg1, const ::jint& arg2, const ::jfloat& arg3, const ::jfloat& arg4, const ::jfloat& arg5, const ::jfloat& arg6, const ::jint& arg7, const ::jfloat& arg8, const ::jfloat& arg9, const ::jint& arg10, const ::jint& arg11);
	static ::android::view::MotionEvent Obtain(const ::jlong& arg0, const ::jlong& arg1, const ::jint& arg2, const ::jfloat& arg3, const ::jfloat& arg4, const ::jint& arg5);
	static ::android::view::MotionEvent Obtain(const ::jlong& arg0, const ::jlong& arg1, const ::jint& arg2, const ::jint& arg3, const ::jfloat& arg4, const ::jfloat& arg5, const ::jfloat& arg6, const ::jfloat& arg7, const ::jint& arg8, const ::jfloat& arg9, const ::jfloat& arg10, const ::jint& arg11, const ::jint& arg12);
	static ::android::view::MotionEvent Obtain(const ::jlong& arg0, const ::jlong& arg1, const ::jint& arg2, const ::jint& arg3, const jni::Array< ::jint >& arg4, const jni::Array< ::android::view::MotionEvent_PointerCoords >& arg5, const ::jint& arg6, const ::jfloat& arg7, const ::jfloat& arg8, const ::jint& arg9, const ::jint& arg10, const ::jint& arg11, const ::jint& arg12);
	static ::android::view::MotionEvent Obtain(const ::jlong& arg0, const ::jlong& arg1, const ::jint& arg2, const ::jint& arg3, const jni::Array< ::android::view::MotionEvent_PointerProperties >& arg4, const jni::Array< ::android::view::MotionEvent_PointerCoords >& arg5, const ::jint& arg6, const ::jint& arg7, const ::jfloat& arg8, const ::jfloat& arg9, const ::jint& arg10, const ::jint& arg11, const ::jint& arg12, const ::jint& arg13);
	static ::android::view::MotionEvent Obtain(const ::android::view::MotionEvent& arg0);
	static ::android::view::MotionEvent ObtainNoHistory(const ::android::view::MotionEvent& arg0);
	::jvoid OffsetLocation(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jvoid Recycle() const;
	::jvoid SetAction(const ::jint& arg0) const;
	::jvoid SetEdgeFlags(const ::jint& arg0) const;
	::jvoid SetLocation(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jvoid SetSource(const ::jint& arg0) const;
	::java::lang::String ToString() const;
	::jvoid Transform(const ::android::graphics::Matrix& arg0) const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit MotionEvent(jobject o) : ::android::view::InputEvent(o) {}
	MotionEvent(const MotionEvent& o)  : ::android::view::InputEvent(o) {}

};

struct MotionEvent_PointerCoords : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jfloat fOrientation() const;
	void fOrientation(const ::jfloat& arg0) const;
	::jfloat fPressure() const;
	void fPressure(const ::jfloat& arg0) const;
	::jfloat fSize() const;
	void fSize(const ::jfloat& arg0) const;
	::jfloat fToolMajor() const;
	void fToolMajor(const ::jfloat& arg0) const;
	::jfloat fToolMinor() const;
	void fToolMinor(const ::jfloat& arg0) const;
	::jfloat fTouchMajor() const;
	void fTouchMajor(const ::jfloat& arg0) const;
	::jfloat fTouchMinor() const;
	void fTouchMinor(const ::jfloat& arg0) const;
	::jfloat fX() const;
	void fX(const ::jfloat& arg0) const;
	::jfloat fY() const;
	void fY(const ::jfloat& arg0) const;
	::jvoid Clear() const;
	::jvoid CopyFrom(const ::android::view::MotionEvent_PointerCoords& arg0) const;
	::jfloat GetAxisValue(const ::jint& arg0) const;
	::jvoid SetAxisValue(const ::jint& arg0, const ::jfloat& arg1) const;
	static jobject __Constructor();
	MotionEvent_PointerCoords() : ::java::lang::Object(__Constructor()) {}
	explicit MotionEvent_PointerCoords(jobject o) : ::java::lang::Object(o) {}
	MotionEvent_PointerCoords(const MotionEvent_PointerCoords& o)  : ::java::lang::Object(o) {}

};

struct MotionEvent_PointerProperties : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jint fId() const;
	void fId(const ::jint& arg0) const;
	::jint fToolType() const;
	void fToolType(const ::jint& arg0) const;
	::jvoid Clear() const;
	::jvoid CopyFrom(const ::android::view::MotionEvent_PointerProperties& arg0) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint HashCode() const;
	static jobject __Constructor();
	MotionEvent_PointerProperties() : ::java::lang::Object(__Constructor()) {}
	explicit MotionEvent_PointerProperties(jobject o) : ::java::lang::Object(o) {}
	MotionEvent_PointerProperties(const MotionEvent_PointerProperties& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace view { namespace translation { 
struct TranslationCapability : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fSTATE_AVAILABLE_TO_DOWNLOAD();
	static ::jint& fSTATE_DOWNLOADING();
	static ::jint& fSTATE_NOT_AVAILABLE();
	static ::jint& fSTATE_ON_DEVICE();
	::jint DescribeContents() const;
	::android::view::translation::TranslationSpec GetSourceSpec() const;
	::jint GetState() const;
	::jint GetSupportedTranslationFlags() const;
	::android::view::translation::TranslationSpec GetTargetSpec() const;
	::jboolean IsUiTranslationEnabled() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit TranslationCapability(jobject o) : ::java::lang::Object(o) {}
	TranslationCapability(const TranslationCapability& o)  : ::java::lang::Object(o) {}

};

struct TranslationSpec : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fDATA_FORMAT_TEXT();
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint GetDataFormat() const;
	::android::icu::util::ULocale GetLocale() const;
	::jint HashCode() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor(const ::android::icu::util::ULocale& arg0, const ::jint& arg1);
	TranslationSpec(const ::android::icu::util::ULocale& arg0, const ::jint& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit TranslationSpec(jobject o) : ::java::lang::Object(o) {}
	TranslationSpec(const TranslationSpec& o)  : ::java::lang::Object(o) {}

};

}}}

namespace android { namespace view { 
struct DragEvent : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::jint& fACTION_DRAG_ENDED();
	static ::jint& fACTION_DRAG_ENTERED();
	static ::jint& fACTION_DRAG_EXITED();
	static ::jint& fACTION_DRAG_LOCATION();
	static ::jint& fACTION_DRAG_STARTED();
	static ::jint& fACTION_DROP();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::jint GetAction() const;
	::android::content::ClipData GetClipData() const;
	::android::content::ClipDescription GetClipDescription() const;
	::java::lang::Object GetLocalState() const;
	::jboolean GetResult() const;
	::jfloat GetX() const;
	::jfloat GetY() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit DragEvent(jobject o) : ::java::lang::Object(o) {}
	DragEvent(const DragEvent& o)  : ::java::lang::Object(o) {}

};

struct ViewStructure : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jint AddChildCount(const ::jint& arg0) const;
	::jvoid AsyncCommit() const;
	::android::view::ViewStructure AsyncNewChild(const ::jint& arg0) const;
	::android::view::autofill::AutofillId GetAutofillId() const;
	::jint GetChildCount() const;
	::android::os::Bundle GetExtras() const;
	::java::lang::CharSequence GetHint() const;
	::java::lang::CharSequence GetText() const;
	::jint GetTextSelectionEnd() const;
	::jint GetTextSelectionStart() const;
	::jboolean HasExtras() const;
	::android::view::ViewStructure NewChild(const ::jint& arg0) const;
	::android::view::ViewStructure_HtmlInfo_Builder NewHtmlInfoBuilder(const ::java::lang::String& arg0) const;
	::jvoid SetAccessibilityFocused(const ::jboolean& arg0) const;
	::jvoid SetActivated(const ::jboolean& arg0) const;
	::jvoid SetAlpha(const ::jfloat& arg0) const;
	::jvoid SetAutofillHints(const jni::Array< ::java::lang::String >& arg0) const;
	::jvoid SetAutofillId(const ::android::view::autofill::AutofillId& arg0) const;
	::jvoid SetAutofillId(const ::android::view::autofill::AutofillId& arg0, const ::jint& arg1) const;
	::jvoid SetAutofillOptions(const jni::Array< ::java::lang::CharSequence >& arg0) const;
	::jvoid SetAutofillType(const ::jint& arg0) const;
	::jvoid SetAutofillValue(const ::android::view::autofill::AutofillValue& arg0) const;
	::jvoid SetCheckable(const ::jboolean& arg0) const;
	::jvoid SetChecked(const ::jboolean& arg0) const;
	::jvoid SetChildCount(const ::jint& arg0) const;
	::jvoid SetClassName(const ::java::lang::String& arg0) const;
	::jvoid SetClickable(const ::jboolean& arg0) const;
	::jvoid SetContentDescription(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetContextClickable(const ::jboolean& arg0) const;
	::jvoid SetDataIsSensitive(const ::jboolean& arg0) const;
	::jvoid SetDimens(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5) const;
	::jvoid SetElevation(const ::jfloat& arg0) const;
	::jvoid SetEnabled(const ::jboolean& arg0) const;
	::jvoid SetFocusable(const ::jboolean& arg0) const;
	::jvoid SetFocused(const ::jboolean& arg0) const;
	::jvoid SetHint(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetHintIdEntry(const ::java::lang::String& arg0) const;
	::jvoid SetHtmlInfo(const ::android::view::ViewStructure_HtmlInfo& arg0) const;
	::jvoid SetId(const ::jint& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2, const ::java::lang::String& arg3) const;
	::jvoid SetImportantForAutofill(const ::jint& arg0) const;
	::jvoid SetInputType(const ::jint& arg0) const;
	::jvoid SetLocaleList(const ::android::os::LocaleList& arg0) const;
	::jvoid SetLongClickable(const ::jboolean& arg0) const;
	::jvoid SetMaxTextEms(const ::jint& arg0) const;
	::jvoid SetMaxTextLength(const ::jint& arg0) const;
	::jvoid SetMinTextEms(const ::jint& arg0) const;
	::jvoid SetOpaque(const ::jboolean& arg0) const;
	::jvoid SetReceiveContentMimeTypes(const jni::Array< ::java::lang::String >& arg0) const;
	::jvoid SetSelected(const ::jboolean& arg0) const;
	::jvoid SetText(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetText(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jvoid SetTextIdEntry(const ::java::lang::String& arg0) const;
	::jvoid SetTextLines(const jni::Array< ::jint >& arg0, const jni::Array< ::jint >& arg1) const;
	::jvoid SetTextStyle(const ::jfloat& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid SetTransformation(const ::android::graphics::Matrix& arg0) const;
	::jvoid SetVisibility(const ::jint& arg0) const;
	::jvoid SetWebDomain(const ::java::lang::String& arg0) const;
	static jobject __Constructor();
	ViewStructure() : ::java::lang::Object(__Constructor()) {}
	explicit ViewStructure(jobject o) : ::java::lang::Object(o) {}
	ViewStructure(const ViewStructure& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace view { namespace autofill { 
struct AutofillId : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint HashCode() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit AutofillId(jobject o) : ::java::lang::Object(o) {}
	AutofillId(const AutofillId& o)  : ::java::lang::Object(o) {}

};

}}}

namespace android { namespace view { 
struct ViewStructure_HtmlInfo_Builder : ::java::lang::Object
{
	static jni::Class __CLASS;

	::android::view::ViewStructure_HtmlInfo_Builder AddAttribute(const ::java::lang::String& arg0, const ::java::lang::String& arg1) const;
	::android::view::ViewStructure_HtmlInfo Build() const;
	static jobject __Constructor();
	ViewStructure_HtmlInfo_Builder() : ::java::lang::Object(__Constructor()) {}
	explicit ViewStructure_HtmlInfo_Builder(jobject o) : ::java::lang::Object(o) {}
	ViewStructure_HtmlInfo_Builder(const ViewStructure_HtmlInfo_Builder& o)  : ::java::lang::Object(o) {}

};

struct ViewStructure_HtmlInfo : ::java::lang::Object
{
	static jni::Class __CLASS;

	::java::util::List GetAttributes() const;
	::java::lang::String GetTag() const;
	static jobject __Constructor();
	ViewStructure_HtmlInfo() : ::java::lang::Object(__Constructor()) {}
	explicit ViewStructure_HtmlInfo(jobject o) : ::java::lang::Object(o) {}
	ViewStructure_HtmlInfo(const ViewStructure_HtmlInfo& o)  : ::java::lang::Object(o) {}

};

struct WindowInsetsAnimation : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jfloat GetAlpha() const;
	::jlong GetDurationMillis() const;
	::jfloat GetFraction() const;
	::jfloat GetInterpolatedFraction() const;
	::android::view::animation::Interpolator GetInterpolator() const;
	::jint GetTypeMask() const;
	::jvoid SetAlpha(const ::jfloat& arg0) const;
	::jvoid SetFraction(const ::jfloat& arg0) const;
	static jobject __Constructor(const ::jint& arg0, const ::android::view::animation::Interpolator& arg1, const ::jlong& arg2);
	WindowInsetsAnimation(const ::jint& arg0, const ::android::view::animation::Interpolator& arg1, const ::jlong& arg2) : ::java::lang::Object(__Constructor(arg0, arg1, arg2)) {}
	explicit WindowInsetsAnimation(jobject o) : ::java::lang::Object(o) {}
	WindowInsetsAnimation(const WindowInsetsAnimation& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace view { namespace animation { 
struct Interpolator : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::animation::TimeInterpolator();
	explicit Interpolator(jobject o) : java::lang::Object(o) {}
	Interpolator(const Interpolator& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::animation::Interpolator();
		operator ::android::animation::TimeInterpolator();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
	};
};

}}}

namespace android { namespace view { 
struct WindowInsetsAnimation_Bounds : ::java::lang::Object
{
	static jni::Class __CLASS;

	::android::graphics::Insets GetLowerBound() const;
	::android::graphics::Insets GetUpperBound() const;
	::android::view::WindowInsetsAnimation_Bounds Inset(const ::android::graphics::Insets& arg0) const;
	::java::lang::String ToString() const;
	static jobject __Constructor(const ::android::graphics::Insets& arg0, const ::android::graphics::Insets& arg1);
	WindowInsetsAnimation_Bounds(const ::android::graphics::Insets& arg0, const ::android::graphics::Insets& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit WindowInsetsAnimation_Bounds(jobject o) : ::java::lang::Object(o) {}
	WindowInsetsAnimation_Bounds(const WindowInsetsAnimation_Bounds& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace view { namespace displayhash { 
struct DisplayHashResultCallback : java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fDISPLAY_HASH_ERROR_INVALID_BOUNDS();
	static ::jint& fDISPLAY_HASH_ERROR_INVALID_HASH_ALGORITHM();
	static ::jint& fDISPLAY_HASH_ERROR_MISSING_WINDOW();
	static ::jint& fDISPLAY_HASH_ERROR_NOT_VISIBLE_ON_SCREEN();
	static ::jint& fDISPLAY_HASH_ERROR_TOO_MANY_REQUESTS();
	static ::jint& fDISPLAY_HASH_ERROR_UNKNOWN();
	::jvoid OnDisplayHashError(const ::jint& arg0) const;
	::jvoid OnDisplayHashResult(const ::android::view::displayhash::DisplayHash& arg0) const;
	explicit DisplayHashResultCallback(jobject o) : java::lang::Object(o) {}
	DisplayHashResultCallback(const DisplayHashResultCallback& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::displayhash::DisplayHashResultCallback();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnDisplayHashError(const ::jint& arg0) = 0;
		virtual void OnDisplayHashResult(const ::android::view::displayhash::DisplayHash& arg0) = 0;
	};
};

struct DisplayHash : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit DisplayHash(jobject o) : ::java::lang::Object(o) {}
	DisplayHash(const DisplayHash& o)  : ::java::lang::Object(o) {}

};

}}}

namespace android { namespace view { 
struct View_AccessibilityDelegate : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid AddExtraDataToAccessibilityNodeInfo(const ::android::view::View& arg0, const ::android::view::accessibility::AccessibilityNodeInfo& arg1, const ::java::lang::String& arg2, const ::android::os::Bundle& arg3) const;
	::jboolean DispatchPopulateAccessibilityEvent(const ::android::view::View& arg0, const ::android::view::accessibility::AccessibilityEvent& arg1) const;
	::android::view::accessibility::AccessibilityNodeProvider GetAccessibilityNodeProvider(const ::android::view::View& arg0) const;
	::jvoid OnInitializeAccessibilityEvent(const ::android::view::View& arg0, const ::android::view::accessibility::AccessibilityEvent& arg1) const;
	::jvoid OnInitializeAccessibilityNodeInfo(const ::android::view::View& arg0, const ::android::view::accessibility::AccessibilityNodeInfo& arg1) const;
	::jvoid OnPopulateAccessibilityEvent(const ::android::view::View& arg0, const ::android::view::accessibility::AccessibilityEvent& arg1) const;
	::jboolean OnRequestSendAccessibilityEvent(const ::android::view::ViewGroup& arg0, const ::android::view::View& arg1, const ::android::view::accessibility::AccessibilityEvent& arg2) const;
	::jboolean PerformAccessibilityAction(const ::android::view::View& arg0, const ::jint& arg1, const ::android::os::Bundle& arg2) const;
	::jvoid SendAccessibilityEvent(const ::android::view::View& arg0, const ::jint& arg1) const;
	::jvoid SendAccessibilityEventUnchecked(const ::android::view::View& arg0, const ::android::view::accessibility::AccessibilityEvent& arg1) const;
	static jobject __Constructor();
	View_AccessibilityDelegate() : ::java::lang::Object(__Constructor()) {}
	explicit View_AccessibilityDelegate(jobject o) : ::java::lang::Object(o) {}
	View_AccessibilityDelegate(const View_AccessibilityDelegate& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace view { namespace accessibility { 
struct AccessibilityNodeProvider : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fHOST_VIEW_ID();
	::jvoid AddExtraDataToAccessibilityNodeInfo(const ::jint& arg0, const ::android::view::accessibility::AccessibilityNodeInfo& arg1, const ::java::lang::String& arg2, const ::android::os::Bundle& arg3) const;
	::android::view::accessibility::AccessibilityNodeInfo CreateAccessibilityNodeInfo(const ::jint& arg0) const;
	::java::util::List FindAccessibilityNodeInfosByText(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::android::view::accessibility::AccessibilityNodeInfo FindFocus(const ::jint& arg0) const;
	::jboolean PerformAction(const ::jint& arg0, const ::jint& arg1, const ::android::os::Bundle& arg2) const;
	static jobject __Constructor();
	AccessibilityNodeProvider() : ::java::lang::Object(__Constructor()) {}
	explicit AccessibilityNodeProvider(jobject o) : ::java::lang::Object(o) {}
	AccessibilityNodeProvider(const AccessibilityNodeProvider& o)  : ::java::lang::Object(o) {}

};

}}}

namespace android { namespace view { 
struct ViewGroup : ::android::view::View
{
	static jni::Class __CLASS;

	operator ::android::view::ViewParent();
	operator ::android::view::ViewManager();
	static ::jint& fCLIP_TO_PADDING_MASK();
	static ::jint& fFOCUS_AFTER_DESCENDANTS();
	static ::jint& fFOCUS_BEFORE_DESCENDANTS();
	static ::jint& fFOCUS_BLOCK_DESCENDANTS();
	static ::jint& fLAYOUT_MODE_CLIP_BOUNDS();
	static ::jint& fLAYOUT_MODE_OPTICAL_BOUNDS();
	static ::jint& fPERSISTENT_ALL_CACHES();
	static ::jint& fPERSISTENT_ANIMATION_CACHE();
	static ::jint& fPERSISTENT_NO_CACHE();
	static ::jint& fPERSISTENT_SCROLLING_CACHE();
	::jvoid AddChildrenForAccessibility(const ::java::util::ArrayList& arg0) const;
	::jvoid AddExtraDataToAccessibilityNodeInfo(const ::android::view::accessibility::AccessibilityNodeInfo& arg0, const ::java::lang::String& arg1, const ::android::os::Bundle& arg2) const;
	::jvoid AddFocusables(const ::java::util::ArrayList& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jvoid AddKeyboardNavigationClusters(const ::java::util::Collection& arg0, const ::jint& arg1) const;
	::jboolean AddStatesFromChildren() const;
	::jvoid AddTouchables(const ::java::util::ArrayList& arg0) const;
	::jvoid AddView(const ::android::view::View& arg0) const;
	::jvoid AddView(const ::android::view::View& arg0, const ::jint& arg1) const;
	::jvoid AddView(const ::android::view::View& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jvoid AddView(const ::android::view::View& arg0, const ::jint& arg1, const ::android::view::ViewGroup_LayoutParams& arg2) const;
	::jvoid AddView(const ::android::view::View& arg0, const ::android::view::ViewGroup_LayoutParams& arg1) const;
	::jboolean AddViewInLayout(const ::android::view::View& arg0, const ::jint& arg1, const ::android::view::ViewGroup_LayoutParams& arg2) const;
	::jboolean AddViewInLayout(const ::android::view::View& arg0, const ::jint& arg1, const ::android::view::ViewGroup_LayoutParams& arg2, const ::jboolean& arg3) const;
	::jvoid AttachLayoutAnimationParameters(const ::android::view::View& arg0, const ::android::view::ViewGroup_LayoutParams& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid AttachViewToParent(const ::android::view::View& arg0, const ::jint& arg1, const ::android::view::ViewGroup_LayoutParams& arg2) const;
	::jvoid BringChildToFront(const ::android::view::View& arg0) const;
	::jboolean CanAnimate() const;
	::jboolean CheckLayoutParams(const ::android::view::ViewGroup_LayoutParams& arg0) const;
	::jvoid ChildDrawableStateChanged(const ::android::view::View& arg0) const;
	::jvoid ChildHasTransientStateChanged(const ::android::view::View& arg0, const ::jboolean& arg1) const;
	::jvoid CleanupLayoutState(const ::android::view::View& arg0) const;
	::jvoid ClearChildFocus(const ::android::view::View& arg0) const;
	::jvoid ClearDisappearingChildren() const;
	::jvoid ClearFocus() const;
	::jvoid Debug(const ::jint& arg0) const;
	::jvoid DetachAllViewsFromParent() const;
	::jvoid DetachViewFromParent(const ::jint& arg0) const;
	::jvoid DetachViewFromParent(const ::android::view::View& arg0) const;
	::jvoid DetachViewsFromParent(const ::jint& arg0, const ::jint& arg1) const;
	::android::view::WindowInsets DispatchApplyWindowInsets(const ::android::view::WindowInsets& arg0) const;
	::jboolean DispatchCapturedPointerEvent(const ::android::view::MotionEvent& arg0) const;
	::jvoid DispatchConfigurationChanged(const ::android::content::res::Configuration& arg0) const;
	::jvoid DispatchCreateViewTranslationRequest(const ::java::util::Map& arg0, const jni::Array< ::jint >& arg1, const ::android::view::translation::TranslationCapability& arg2, const ::java::util::List& arg3) const;
	::jvoid DispatchDisplayHint(const ::jint& arg0) const;
	::jboolean DispatchDragEvent(const ::android::view::DragEvent& arg0) const;
	::jvoid DispatchDraw(const ::android::graphics::Canvas& arg0) const;
	::jvoid DispatchDrawableHotspotChanged(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jvoid DispatchFinishTemporaryDetach() const;
	::jvoid DispatchFreezeSelfOnly(const ::android::util::SparseArray& arg0) const;
	::jboolean DispatchGenericFocusedEvent(const ::android::view::MotionEvent& arg0) const;
	::jboolean DispatchGenericPointerEvent(const ::android::view::MotionEvent& arg0) const;
	::jboolean DispatchHoverEvent(const ::android::view::MotionEvent& arg0) const;
	::jboolean DispatchKeyEvent(const ::android::view::KeyEvent& arg0) const;
	::jboolean DispatchKeyEventPreIme(const ::android::view::KeyEvent& arg0) const;
	::jboolean DispatchKeyShortcutEvent(const ::android::view::KeyEvent& arg0) const;
	::jvoid DispatchPointerCaptureChanged(const ::jboolean& arg0) const;
	::jvoid DispatchProvideAutofillStructure(const ::android::view::ViewStructure& arg0, const ::jint& arg1) const;
	::jvoid DispatchProvideStructure(const ::android::view::ViewStructure& arg0) const;
	::jvoid DispatchRestoreInstanceState(const ::android::util::SparseArray& arg0) const;
	::jvoid DispatchSaveInstanceState(const ::android::util::SparseArray& arg0) const;
	::jvoid DispatchScrollCaptureSearch(const ::android::graphics::Rect& arg0, const ::android::graphics::Point& arg1, const ::java::util::function::Consumer& arg2) const;
	::jvoid DispatchSetActivated(const ::jboolean& arg0) const;
	::jvoid DispatchSetPressed(const ::jboolean& arg0) const;
	::jvoid DispatchSetSelected(const ::jboolean& arg0) const;
	::jvoid DispatchStartTemporaryDetach() const;
	::jvoid DispatchSystemUiVisibilityChanged(const ::jint& arg0) const;
	::jvoid DispatchThawSelfOnly(const ::android::util::SparseArray& arg0) const;
	::jboolean DispatchTouchEvent(const ::android::view::MotionEvent& arg0) const;
	::jboolean DispatchTrackballEvent(const ::android::view::MotionEvent& arg0) const;
	::jboolean DispatchUnhandledMove(const ::android::view::View& arg0, const ::jint& arg1) const;
	::jvoid DispatchVisibilityChanged(const ::android::view::View& arg0, const ::jint& arg1) const;
	::jvoid DispatchWindowFocusChanged(const ::jboolean& arg0) const;
	::jvoid DispatchWindowInsetsAnimationEnd(const ::android::view::WindowInsetsAnimation& arg0) const;
	::jvoid DispatchWindowInsetsAnimationPrepare(const ::android::view::WindowInsetsAnimation& arg0) const;
	::android::view::WindowInsets DispatchWindowInsetsAnimationProgress(const ::android::view::WindowInsets& arg0, const ::java::util::List& arg1) const;
	::android::view::WindowInsetsAnimation_Bounds DispatchWindowInsetsAnimationStart(const ::android::view::WindowInsetsAnimation& arg0, const ::android::view::WindowInsetsAnimation_Bounds& arg1) const;
	::jvoid DispatchWindowSystemUiVisiblityChanged(const ::jint& arg0) const;
	::jvoid DispatchWindowVisibilityChanged(const ::jint& arg0) const;
	::jboolean DrawChild(const ::android::graphics::Canvas& arg0, const ::android::view::View& arg1, const ::jlong& arg2) const;
	::jvoid DrawableStateChanged() const;
	::jvoid EndViewTransition(const ::android::view::View& arg0) const;
	::android::view::View FindFocus() const;
	::jvoid FindViewsWithText(const ::java::util::ArrayList& arg0, const ::java::lang::CharSequence& arg1, const ::jint& arg2) const;
	::android::view::View FocusSearch(const ::android::view::View& arg0, const ::jint& arg1) const;
	::jvoid FocusableViewAvailable(const ::android::view::View& arg0) const;
	::jboolean GatherTransparentRegion(const ::android::graphics::Region& arg0) const;
	::android::view::ViewGroup_LayoutParams GenerateDefaultLayoutParams() const;
	::android::view::ViewGroup_LayoutParams GenerateLayoutParams(const ::android::util::AttributeSet& arg0) const;
	::android::view::ViewGroup_LayoutParams GenerateLayoutParams(const ::android::view::ViewGroup_LayoutParams& arg0) const;
	::java::lang::CharSequence GetAccessibilityClassName() const;
	::android::view::View GetChildAt(const ::jint& arg0) const;
	::jint GetChildCount() const;
	::jint GetChildDrawingOrder(const ::jint& arg0) const;
	::jint GetChildDrawingOrder(const ::jint& arg0, const ::jint& arg1) const;
	static ::jint GetChildMeasureSpec(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2);
	::jboolean GetChildStaticTransformation(const ::android::view::View& arg0, const ::android::view::animation::Transformation& arg1) const;
	::jboolean GetChildVisibleRect(const ::android::view::View& arg0, const ::android::graphics::Rect& arg1, const ::android::graphics::Point& arg2) const;
	::jboolean GetClipChildren() const;
	::jboolean GetClipToPadding() const;
	::jint GetDescendantFocusability() const;
	::android::view::View GetFocusedChild() const;
	::android::view::animation::LayoutAnimationController GetLayoutAnimation() const;
	::android::view::animation::Animation_AnimationListener GetLayoutAnimationListener() const;
	::jint GetLayoutMode() const;
	::android::animation::LayoutTransition GetLayoutTransition() const;
	::jint GetNestedScrollAxes() const;
	::android::view::ViewGroupOverlay GetOverlay() const;
	::jint GetPersistentDrawingCache() const;
	::jboolean GetTouchscreenBlocksFocus() const;
	::jboolean HasFocus() const;
	::jboolean HasTransientState() const;
	::jint IndexOfChild(const ::android::view::View& arg0) const;
	::jvoid InvalidateChild(const ::android::view::View& arg0, const ::android::graphics::Rect& arg1) const;
	::android::view::ViewParent InvalidateChildInParent(const jni::Array< ::jint >& arg0, const ::android::graphics::Rect& arg1) const;
	::jboolean IsAlwaysDrawnWithCacheEnabled() const;
	::jboolean IsAnimationCacheEnabled() const;
	::jboolean IsChildrenDrawingOrderEnabled() const;
	::jboolean IsChildrenDrawnWithCacheEnabled() const;
	::jboolean IsLayoutSuppressed() const;
	::jboolean IsMotionEventSplittingEnabled() const;
	::jboolean IsTransitionGroup() const;
	::jvoid JumpDrawablesToCurrentState() const;
	::jvoid Layout(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid MeasureChild(const ::android::view::View& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jvoid MeasureChildWithMargins(const ::android::view::View& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4) const;
	::jvoid MeasureChildren(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid NotifySubtreeAccessibilityStateChanged(const ::android::view::View& arg0, const ::android::view::View& arg1, const ::jint& arg2) const;
	::jvoid OffsetDescendantRectToMyCoords(const ::android::view::View& arg0, const ::android::graphics::Rect& arg1) const;
	::jvoid OffsetRectIntoDescendantCoords(const ::android::view::View& arg0, const ::android::graphics::Rect& arg1) const;
	::jvoid OnAttachedToWindow() const;
	jni::Array< ::jint > OnCreateDrawableState(const ::jint& arg0) const;
	::jvoid OnDescendantInvalidated(const ::android::view::View& arg0, const ::android::view::View& arg1) const;
	::jvoid OnDetachedFromWindow() const;
	::jboolean OnInterceptHoverEvent(const ::android::view::MotionEvent& arg0) const;
	::jboolean OnInterceptTouchEvent(const ::android::view::MotionEvent& arg0) const;
	::jvoid OnLayout(const ::jboolean& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4) const;
	::jboolean OnNestedFling(const ::android::view::View& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jboolean& arg3) const;
	::jboolean OnNestedPreFling(const ::android::view::View& arg0, const ::jfloat& arg1, const ::jfloat& arg2) const;
	::jboolean OnNestedPrePerformAccessibilityAction(const ::android::view::View& arg0, const ::jint& arg1, const ::android::os::Bundle& arg2) const;
	::jvoid OnNestedPreScroll(const ::android::view::View& arg0, const ::jint& arg1, const ::jint& arg2, const jni::Array< ::jint >& arg3) const;
	::jvoid OnNestedScroll(const ::android::view::View& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4) const;
	::jvoid OnNestedScrollAccepted(const ::android::view::View& arg0, const ::android::view::View& arg1, const ::jint& arg2) const;
	::jboolean OnRequestFocusInDescendants(const ::jint& arg0, const ::android::graphics::Rect& arg1) const;
	::jboolean OnRequestSendAccessibilityEvent(const ::android::view::View& arg0, const ::android::view::accessibility::AccessibilityEvent& arg1) const;
	::android::view::PointerIcon OnResolvePointerIcon(const ::android::view::MotionEvent& arg0, const ::jint& arg1) const;
	::jboolean OnStartNestedScroll(const ::android::view::View& arg0, const ::android::view::View& arg1, const ::jint& arg2) const;
	::jvoid OnStopNestedScroll(const ::android::view::View& arg0) const;
	::jvoid OnViewAdded(const ::android::view::View& arg0) const;
	::jvoid OnViewRemoved(const ::android::view::View& arg0) const;
	::jvoid RecomputeViewAttributes(const ::android::view::View& arg0) const;
	::jvoid RemoveAllViews() const;
	::jvoid RemoveAllViewsInLayout() const;
	::jvoid RemoveDetachedView(const ::android::view::View& arg0, const ::jboolean& arg1) const;
	::jvoid RemoveView(const ::android::view::View& arg0) const;
	::jvoid RemoveViewAt(const ::jint& arg0) const;
	::jvoid RemoveViewInLayout(const ::android::view::View& arg0) const;
	::jvoid RemoveViews(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid RemoveViewsInLayout(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid RequestChildFocus(const ::android::view::View& arg0, const ::android::view::View& arg1) const;
	::jboolean RequestChildRectangleOnScreen(const ::android::view::View& arg0, const ::android::graphics::Rect& arg1, const ::jboolean& arg2) const;
	::jvoid RequestDisallowInterceptTouchEvent(const ::jboolean& arg0) const;
	::jboolean RequestFocus(const ::jint& arg0, const ::android::graphics::Rect& arg1) const;
	::jboolean RequestSendAccessibilityEvent(const ::android::view::View& arg0, const ::android::view::accessibility::AccessibilityEvent& arg1) const;
	::jvoid RequestTransparentRegion(const ::android::view::View& arg0) const;
	::jboolean RestoreDefaultFocus() const;
	::jvoid ScheduleLayoutAnimation() const;
	::jvoid SetAddStatesFromChildren(const ::jboolean& arg0) const;
	::jvoid SetAlwaysDrawnWithCacheEnabled(const ::jboolean& arg0) const;
	::jvoid SetAnimationCacheEnabled(const ::jboolean& arg0) const;
	::jvoid SetChildrenDrawingCacheEnabled(const ::jboolean& arg0) const;
	::jvoid SetChildrenDrawingOrderEnabled(const ::jboolean& arg0) const;
	::jvoid SetChildrenDrawnWithCacheEnabled(const ::jboolean& arg0) const;
	::jvoid SetClipChildren(const ::jboolean& arg0) const;
	::jvoid SetClipToPadding(const ::jboolean& arg0) const;
	::jvoid SetDescendantFocusability(const ::jint& arg0) const;
	::jvoid SetLayoutAnimation(const ::android::view::animation::LayoutAnimationController& arg0) const;
	::jvoid SetLayoutAnimationListener(const ::android::view::animation::Animation_AnimationListener& arg0) const;
	::jvoid SetLayoutMode(const ::jint& arg0) const;
	::jvoid SetLayoutTransition(const ::android::animation::LayoutTransition& arg0) const;
	::jvoid SetMotionEventSplittingEnabled(const ::jboolean& arg0) const;
	::jvoid SetOnHierarchyChangeListener(const ::android::view::ViewGroup_OnHierarchyChangeListener& arg0) const;
	::jvoid SetPersistentDrawingCache(const ::jint& arg0) const;
	::jvoid SetStaticTransformationsEnabled(const ::jboolean& arg0) const;
	::jvoid SetTouchscreenBlocksFocus(const ::jboolean& arg0) const;
	::jvoid SetTransitionGroup(const ::jboolean& arg0) const;
	::jvoid SetWindowInsetsAnimationCallback(const ::android::view::WindowInsetsAnimation_Callback& arg0) const;
	::jboolean ShouldDelayChildPressedState() const;
	::jboolean ShowContextMenuForChild(const ::android::view::View& arg0) const;
	::jboolean ShowContextMenuForChild(const ::android::view::View& arg0, const ::jfloat& arg1, const ::jfloat& arg2) const;
	::android::view::ActionMode StartActionModeForChild(const ::android::view::View& arg0, const ::android::view::ActionMode_Callback& arg1) const;
	::android::view::ActionMode StartActionModeForChild(const ::android::view::View& arg0, const ::android::view::ActionMode_Callback& arg1, const ::jint& arg2) const;
	::jvoid StartLayoutAnimation() const;
	::jvoid StartViewTransition(const ::android::view::View& arg0) const;
	::jvoid SuppressLayout(const ::jboolean& arg0) const;
	::jvoid UpdateViewLayout(const ::android::view::View& arg0, const ::android::view::ViewGroup_LayoutParams& arg1) const;
	static jobject __Constructor(const ::android::content::Context& arg0);
	ViewGroup(const ::android::content::Context& arg0) : ::android::view::View(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1);
	ViewGroup(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1) : ::android::view::View(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2);
	ViewGroup(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2) : ::android::view::View(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3);
	ViewGroup(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3) : ::android::view::View(__Constructor(arg0, arg1, arg2, arg3)) {}
	explicit ViewGroup(jobject o) : ::android::view::View(o) {}
	ViewGroup(const ViewGroup& o)  : ::android::view::View(o) {}

};

struct ViewParent : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid BringChildToFront(const ::android::view::View& arg0) const;
	::jboolean CanResolveLayoutDirection() const;
	::jboolean CanResolveTextAlignment() const;
	::jboolean CanResolveTextDirection() const;
	::jvoid ChildDrawableStateChanged(const ::android::view::View& arg0) const;
	::jvoid ChildHasTransientStateChanged(const ::android::view::View& arg0, const ::jboolean& arg1) const;
	::jvoid ClearChildFocus(const ::android::view::View& arg0) const;
	::jvoid CreateContextMenu(const ::android::view::ContextMenu& arg0) const;
	::android::view::View FocusSearch(const ::android::view::View& arg0, const ::jint& arg1) const;
	::jvoid FocusableViewAvailable(const ::android::view::View& arg0) const;
	::jboolean GetChildVisibleRect(const ::android::view::View& arg0, const ::android::graphics::Rect& arg1, const ::android::graphics::Point& arg2) const;
	::jint GetLayoutDirection() const;
	::android::view::ViewParent GetParent() const;
	::android::view::ViewParent GetParentForAccessibility() const;
	::jint GetTextAlignment() const;
	::jint GetTextDirection() const;
	::jvoid InvalidateChild(const ::android::view::View& arg0, const ::android::graphics::Rect& arg1) const;
	::android::view::ViewParent InvalidateChildInParent(const jni::Array< ::jint >& arg0, const ::android::graphics::Rect& arg1) const;
	::jboolean IsLayoutDirectionResolved() const;
	::jboolean IsLayoutRequested() const;
	::jboolean IsTextAlignmentResolved() const;
	::jboolean IsTextDirectionResolved() const;
	::android::view::View KeyboardNavigationClusterSearch(const ::android::view::View& arg0, const ::jint& arg1) const;
	::jvoid NotifySubtreeAccessibilityStateChanged(const ::android::view::View& arg0, const ::android::view::View& arg1, const ::jint& arg2) const;
	::jvoid OnDescendantInvalidated(const ::android::view::View& arg0, const ::android::view::View& arg1) const;
	::jboolean OnNestedFling(const ::android::view::View& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jboolean& arg3) const;
	::jboolean OnNestedPreFling(const ::android::view::View& arg0, const ::jfloat& arg1, const ::jfloat& arg2) const;
	::jboolean OnNestedPrePerformAccessibilityAction(const ::android::view::View& arg0, const ::jint& arg1, const ::android::os::Bundle& arg2) const;
	::jvoid OnNestedPreScroll(const ::android::view::View& arg0, const ::jint& arg1, const ::jint& arg2, const jni::Array< ::jint >& arg3) const;
	::jvoid OnNestedScroll(const ::android::view::View& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4) const;
	::jvoid OnNestedScrollAccepted(const ::android::view::View& arg0, const ::android::view::View& arg1, const ::jint& arg2) const;
	::jboolean OnStartNestedScroll(const ::android::view::View& arg0, const ::android::view::View& arg1, const ::jint& arg2) const;
	::jvoid OnStopNestedScroll(const ::android::view::View& arg0) const;
	::jvoid RecomputeViewAttributes(const ::android::view::View& arg0) const;
	::jvoid RequestChildFocus(const ::android::view::View& arg0, const ::android::view::View& arg1) const;
	::jboolean RequestChildRectangleOnScreen(const ::android::view::View& arg0, const ::android::graphics::Rect& arg1, const ::jboolean& arg2) const;
	::jvoid RequestDisallowInterceptTouchEvent(const ::jboolean& arg0) const;
	::jvoid RequestFitSystemWindows() const;
	::jvoid RequestLayout() const;
	::jboolean RequestSendAccessibilityEvent(const ::android::view::View& arg0, const ::android::view::accessibility::AccessibilityEvent& arg1) const;
	::jvoid RequestTransparentRegion(const ::android::view::View& arg0) const;
	::jboolean ShowContextMenuForChild(const ::android::view::View& arg0) const;
	::jboolean ShowContextMenuForChild(const ::android::view::View& arg0, const ::jfloat& arg1, const ::jfloat& arg2) const;
	::android::view::ActionMode StartActionModeForChild(const ::android::view::View& arg0, const ::android::view::ActionMode_Callback& arg1) const;
	::android::view::ActionMode StartActionModeForChild(const ::android::view::View& arg0, const ::android::view::ActionMode_Callback& arg1, const ::jint& arg2) const;
	explicit ViewParent(jobject o) : java::lang::Object(o) {}
	ViewParent(const ViewParent& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::ViewParent();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void BringChildToFront(const ::android::view::View& arg0) = 0;
		virtual ::jboolean CanResolveLayoutDirection() = 0;
		virtual ::jboolean CanResolveTextAlignment() = 0;
		virtual ::jboolean CanResolveTextDirection() = 0;
		virtual void ChildDrawableStateChanged(const ::android::view::View& arg0) = 0;
		virtual void ChildHasTransientStateChanged(const ::android::view::View& arg0, const ::jboolean& arg1) = 0;
		virtual void ClearChildFocus(const ::android::view::View& arg0) = 0;
		virtual void CreateContextMenu(const ::android::view::ContextMenu& arg0) = 0;
		virtual ::android::view::View FocusSearch(const ::android::view::View& arg0, const ::jint& arg1) = 0;
		virtual void FocusableViewAvailable(const ::android::view::View& arg0) = 0;
		virtual ::jboolean GetChildVisibleRect(const ::android::view::View& arg0, const ::android::graphics::Rect& arg1, const ::android::graphics::Point& arg2) = 0;
		virtual ::jint GetLayoutDirection() = 0;
		virtual ::android::view::ViewParent GetParent() = 0;
		virtual ::android::view::ViewParent GetParentForAccessibility() = 0;
		virtual ::jint GetTextAlignment() = 0;
		virtual ::jint GetTextDirection() = 0;
		virtual void InvalidateChild(const ::android::view::View& arg0, const ::android::graphics::Rect& arg1) = 0;
		virtual ::android::view::ViewParent InvalidateChildInParent(const jni::Array< ::jint >& arg0, const ::android::graphics::Rect& arg1) = 0;
		virtual ::jboolean IsLayoutDirectionResolved() = 0;
		virtual ::jboolean IsLayoutRequested() = 0;
		virtual ::jboolean IsTextAlignmentResolved() = 0;
		virtual ::jboolean IsTextDirectionResolved() = 0;
		virtual ::android::view::View KeyboardNavigationClusterSearch(const ::android::view::View& arg0, const ::jint& arg1) = 0;
		virtual void NotifySubtreeAccessibilityStateChanged(const ::android::view::View& arg0, const ::android::view::View& arg1, const ::jint& arg2) = 0;
		virtual void OnDescendantInvalidated(const ::android::view::View& arg0, const ::android::view::View& arg1) = 0;
		virtual ::jboolean OnNestedFling(const ::android::view::View& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jboolean& arg3) = 0;
		virtual ::jboolean OnNestedPreFling(const ::android::view::View& arg0, const ::jfloat& arg1, const ::jfloat& arg2) = 0;
		virtual ::jboolean OnNestedPrePerformAccessibilityAction(const ::android::view::View& arg0, const ::jint& arg1, const ::android::os::Bundle& arg2) = 0;
		virtual void OnNestedPreScroll(const ::android::view::View& arg0, const ::jint& arg1, const ::jint& arg2, const jni::Array< ::jint >& arg3) = 0;
		virtual void OnNestedScroll(const ::android::view::View& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4) = 0;
		virtual void OnNestedScrollAccepted(const ::android::view::View& arg0, const ::android::view::View& arg1, const ::jint& arg2) = 0;
		virtual ::jboolean OnStartNestedScroll(const ::android::view::View& arg0, const ::android::view::View& arg1, const ::jint& arg2) = 0;
		virtual void OnStopNestedScroll(const ::android::view::View& arg0) = 0;
		virtual void RecomputeViewAttributes(const ::android::view::View& arg0) = 0;
		virtual void RequestChildFocus(const ::android::view::View& arg0, const ::android::view::View& arg1) = 0;
		virtual ::jboolean RequestChildRectangleOnScreen(const ::android::view::View& arg0, const ::android::graphics::Rect& arg1, const ::jboolean& arg2) = 0;
		virtual void RequestDisallowInterceptTouchEvent(const ::jboolean& arg0) = 0;
		virtual void RequestFitSystemWindows() = 0;
		virtual void RequestLayout() = 0;
		virtual ::jboolean RequestSendAccessibilityEvent(const ::android::view::View& arg0, const ::android::view::accessibility::AccessibilityEvent& arg1) = 0;
		virtual void RequestTransparentRegion(const ::android::view::View& arg0) = 0;
		virtual ::jboolean ShowContextMenuForChild(const ::android::view::View& arg0) = 0;
		virtual ::jboolean ShowContextMenuForChild(const ::android::view::View& arg0, const ::jfloat& arg1, const ::jfloat& arg2) = 0;
		virtual ::android::view::ActionMode StartActionModeForChild(const ::android::view::View& arg0, const ::android::view::ActionMode_Callback& arg1) = 0;
		virtual ::android::view::ActionMode StartActionModeForChild(const ::android::view::View& arg0, const ::android::view::ActionMode_Callback& arg1, const ::jint& arg2) = 0;
	};
};

struct ActionMode_Callback : java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean OnActionItemClicked(const ::android::view::ActionMode& arg0, const ::android::view::MenuItem& arg1) const;
	::jboolean OnCreateActionMode(const ::android::view::ActionMode& arg0, const ::android::view::Menu& arg1) const;
	::jvoid OnDestroyActionMode(const ::android::view::ActionMode& arg0) const;
	::jboolean OnPrepareActionMode(const ::android::view::ActionMode& arg0, const ::android::view::Menu& arg1) const;
	explicit ActionMode_Callback(jobject o) : java::lang::Object(o) {}
	ActionMode_Callback(const ActionMode_Callback& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::ActionMode_Callback();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean OnActionItemClicked(const ::android::view::ActionMode& arg0, const ::android::view::MenuItem& arg1) = 0;
		virtual ::jboolean OnCreateActionMode(const ::android::view::ActionMode& arg0, const ::android::view::Menu& arg1) = 0;
		virtual void OnDestroyActionMode(const ::android::view::ActionMode& arg0) = 0;
		virtual ::jboolean OnPrepareActionMode(const ::android::view::ActionMode& arg0, const ::android::view::Menu& arg1) = 0;
	};
};

struct ActionMode : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fDEFAULT_HIDE_DURATION();
	static ::jint& fTYPE_FLOATING();
	static ::jint& fTYPE_PRIMARY();
	::jvoid Finish() const;
	::android::view::View GetCustomView() const;
	::android::view::Menu GetMenu() const;
	::android::view::MenuInflater GetMenuInflater() const;
	::java::lang::CharSequence GetSubtitle() const;
	::java::lang::Object GetTag() const;
	::java::lang::CharSequence GetTitle() const;
	::jboolean GetTitleOptionalHint() const;
	::jint GetType() const;
	::jvoid Hide(const ::jlong& arg0) const;
	::jvoid Invalidate() const;
	::jvoid InvalidateContentRect() const;
	::jboolean IsTitleOptional() const;
	::jvoid OnWindowFocusChanged(const ::jboolean& arg0) const;
	::jvoid SetCustomView(const ::android::view::View& arg0) const;
	::jvoid SetSubtitle(const ::jint& arg0) const;
	::jvoid SetSubtitle(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetTag(const ::java::lang::Object& arg0) const;
	::jvoid SetTitle(const ::jint& arg0) const;
	::jvoid SetTitle(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetTitleOptionalHint(const ::jboolean& arg0) const;
	::jvoid SetType(const ::jint& arg0) const;
	static jobject __Constructor();
	ActionMode() : ::java::lang::Object(__Constructor()) {}
	explicit ActionMode(jobject o) : ::java::lang::Object(o) {}
	ActionMode(const ActionMode& o)  : ::java::lang::Object(o) {}

};

struct MenuInflater : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid Inflate(const ::jint& arg0, const ::android::view::Menu& arg1) const;
	static jobject __Constructor(const ::android::content::Context& arg0);
	MenuInflater(const ::android::content::Context& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit MenuInflater(jobject o) : ::java::lang::Object(o) {}
	MenuInflater(const MenuInflater& o)  : ::java::lang::Object(o) {}

};

struct ViewManager : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid AddView(const ::android::view::View& arg0, const ::android::view::ViewGroup_LayoutParams& arg1) const;
	::jvoid RemoveView(const ::android::view::View& arg0) const;
	::jvoid UpdateViewLayout(const ::android::view::View& arg0, const ::android::view::ViewGroup_LayoutParams& arg1) const;
	explicit ViewManager(jobject o) : java::lang::Object(o) {}
	ViewManager(const ViewManager& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::ViewManager();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void AddView(const ::android::view::View& arg0, const ::android::view::ViewGroup_LayoutParams& arg1) = 0;
		virtual void RemoveView(const ::android::view::View& arg0) = 0;
		virtual void UpdateViewLayout(const ::android::view::View& arg0, const ::android::view::ViewGroup_LayoutParams& arg1) = 0;
	};
};

struct ViewGroup_LayoutParams : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fFILL_PARENT();
	static ::jint& fMATCH_PARENT();
	static ::jint& fWRAP_CONTENT();
	::jint fHeight() const;
	void fHeight(const ::jint& arg0) const;
	::android::view::animation::LayoutAnimationController_AnimationParameters fLayoutAnimationParameters() const;
	void fLayoutAnimationParameters(const ::android::view::animation::LayoutAnimationController_AnimationParameters& arg0) const;
	::jint fWidth() const;
	void fWidth(const ::jint& arg0) const;
	::jvoid ResolveLayoutDirection(const ::jint& arg0) const;
	::jvoid SetBaseAttributes(const ::android::content::res::TypedArray& arg0, const ::jint& arg1, const ::jint& arg2) const;
	static jobject __Constructor(const ::jint& arg0, const ::jint& arg1);
	ViewGroup_LayoutParams(const ::jint& arg0, const ::jint& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1);
	ViewGroup_LayoutParams(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit ViewGroup_LayoutParams(jobject o) : ::java::lang::Object(o) {}
	ViewGroup_LayoutParams(const ViewGroup_LayoutParams& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace view { namespace animation { 
struct LayoutAnimationController_AnimationParameters : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jint fCount() const;
	void fCount(const ::jint& arg0) const;
	::jint fIndex() const;
	void fIndex(const ::jint& arg0) const;
	static jobject __Constructor();
	LayoutAnimationController_AnimationParameters() : ::java::lang::Object(__Constructor()) {}
	explicit LayoutAnimationController_AnimationParameters(jobject o) : ::java::lang::Object(o) {}
	LayoutAnimationController_AnimationParameters(const LayoutAnimationController_AnimationParameters& o)  : ::java::lang::Object(o) {}

};

struct Transformation : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fTYPE_ALPHA();
	static ::jint& fTYPE_BOTH();
	static ::jint& fTYPE_IDENTITY();
	static ::jint& fTYPE_MATRIX();
	::jfloat fMAlpha() const;
	void fMAlpha(const ::jfloat& arg0) const;
	::android::graphics::Matrix fMMatrix() const;
	void fMMatrix(const ::android::graphics::Matrix& arg0) const;
	::jint fMTransformationType() const;
	void fMTransformationType(const ::jint& arg0) const;
	::jvoid Clear() const;
	::jvoid Compose(const ::android::view::animation::Transformation& arg0) const;
	::jfloat GetAlpha() const;
	::android::graphics::Matrix GetMatrix() const;
	::jint GetTransformationType() const;
	::jvoid Set(const ::android::view::animation::Transformation& arg0) const;
	::jvoid SetAlpha(const ::jfloat& arg0) const;
	::jvoid SetTransformationType(const ::jint& arg0) const;
	::java::lang::String ToShortString() const;
	::java::lang::String ToString() const;
	static jobject __Constructor();
	Transformation() : ::java::lang::Object(__Constructor()) {}
	explicit Transformation(jobject o) : ::java::lang::Object(o) {}
	Transformation(const Transformation& o)  : ::java::lang::Object(o) {}

};

struct LayoutAnimationController : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fORDER_NORMAL();
	static ::jint& fORDER_RANDOM();
	static ::jint& fORDER_REVERSE();
	::android::view::animation::Animation fMAnimation() const;
	void fMAnimation(const ::android::view::animation::Animation& arg0) const;
	::android::view::animation::Interpolator fMInterpolator() const;
	void fMInterpolator(const ::android::view::animation::Interpolator& arg0) const;
	::java::util::Random fMRandomizer() const;
	void fMRandomizer(const ::java::util::Random& arg0) const;
	::android::view::animation::Animation GetAnimation() const;
	::android::view::animation::Animation GetAnimationForView(const ::android::view::View& arg0) const;
	::jfloat GetDelay() const;
	::jlong GetDelayForView(const ::android::view::View& arg0) const;
	::android::view::animation::Interpolator GetInterpolator() const;
	::jint GetOrder() const;
	::jint GetTransformedIndex(const ::android::view::animation::LayoutAnimationController_AnimationParameters& arg0) const;
	::jboolean IsDone() const;
	::jvoid SetAnimation(const ::android::content::Context& arg0, const ::jint& arg1) const;
	::jvoid SetAnimation(const ::android::view::animation::Animation& arg0) const;
	::jvoid SetDelay(const ::jfloat& arg0) const;
	::jvoid SetInterpolator(const ::android::content::Context& arg0, const ::jint& arg1) const;
	::jvoid SetInterpolator(const ::android::view::animation::Interpolator& arg0) const;
	::jvoid SetOrder(const ::jint& arg0) const;
	::jvoid Start() const;
	::jboolean WillOverlap() const;
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1);
	LayoutAnimationController(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::view::animation::Animation& arg0);
	LayoutAnimationController(const ::android::view::animation::Animation& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::view::animation::Animation& arg0, const ::jfloat& arg1);
	LayoutAnimationController(const ::android::view::animation::Animation& arg0, const ::jfloat& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit LayoutAnimationController(jobject o) : ::java::lang::Object(o) {}
	LayoutAnimationController(const LayoutAnimationController& o)  : ::java::lang::Object(o) {}

};

struct Animation : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::Cloneable();
	static ::jint& fABSOLUTE();
	static ::jint& fINFINITE();
	static ::jint& fRELATIVE_TO_PARENT();
	static ::jint& fRELATIVE_TO_SELF();
	static ::jint& fRESTART();
	static ::jint& fREVERSE();
	static ::jint& fSTART_ON_FIRST_FRAME();
	static ::jint& fZORDER_BOTTOM();
	static ::jint& fZORDER_NORMAL();
	static ::jint& fZORDER_TOP();
	::jvoid ApplyTransformation(const ::jfloat& arg0, const ::android::view::animation::Transformation& arg1) const;
	::jvoid Cancel() const;
	::android::view::animation::Animation Clone() const;
	::jlong ComputeDurationHint() const;
	::jvoid EnsureInterpolator() const;
	::jvoid Finalize() const;
	::jint GetBackgroundColor() const;
	::jboolean GetDetachWallpaper() const;
	::jlong GetDuration() const;
	::jboolean GetFillAfter() const;
	::jboolean GetFillBefore() const;
	::android::view::animation::Interpolator GetInterpolator() const;
	::jint GetRepeatCount() const;
	::jint GetRepeatMode() const;
	::jfloat GetScaleFactor() const;
	::jlong GetStartOffset() const;
	::jlong GetStartTime() const;
	::jboolean GetTransformation(const ::jlong& arg0, const ::android::view::animation::Transformation& arg1) const;
	::jboolean GetTransformation(const ::jlong& arg0, const ::android::view::animation::Transformation& arg1, const ::jfloat& arg2) const;
	::jint GetZAdjustment() const;
	::jboolean HasEnded() const;
	::jboolean HasStarted() const;
	::jvoid Initialize(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jboolean IsFillEnabled() const;
	::jboolean IsInitialized() const;
	::jvoid Reset() const;
	::jfloat ResolveSize(const ::jint& arg0, const ::jfloat& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid RestrictDuration(const ::jlong& arg0) const;
	::jvoid ScaleCurrentDuration(const ::jfloat& arg0) const;
	::jvoid SetAnimationListener(const ::android::view::animation::Animation_AnimationListener& arg0) const;
	::jvoid SetBackgroundColor(const ::jint& arg0) const;
	::jvoid SetDetachWallpaper(const ::jboolean& arg0) const;
	::jvoid SetDuration(const ::jlong& arg0) const;
	::jvoid SetFillAfter(const ::jboolean& arg0) const;
	::jvoid SetFillBefore(const ::jboolean& arg0) const;
	::jvoid SetFillEnabled(const ::jboolean& arg0) const;
	::jvoid SetInterpolator(const ::android::content::Context& arg0, const ::jint& arg1) const;
	::jvoid SetInterpolator(const ::android::view::animation::Interpolator& arg0) const;
	::jvoid SetRepeatCount(const ::jint& arg0) const;
	::jvoid SetRepeatMode(const ::jint& arg0) const;
	::jvoid SetStartOffset(const ::jlong& arg0) const;
	::jvoid SetStartTime(const ::jlong& arg0) const;
	::jvoid SetZAdjustment(const ::jint& arg0) const;
	::jvoid Start() const;
	::jvoid StartNow() const;
	::jboolean WillChangeBounds() const;
	::jboolean WillChangeTransformationMatrix() const;
	static jobject __Constructor();
	Animation() : ::java::lang::Object(__Constructor()) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1);
	Animation(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit Animation(jobject o) : ::java::lang::Object(o) {}
	Animation(const Animation& o)  : ::java::lang::Object(o) {}

};

struct Animation_AnimationListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnAnimationEnd(const ::android::view::animation::Animation& arg0) const;
	::jvoid OnAnimationRepeat(const ::android::view::animation::Animation& arg0) const;
	::jvoid OnAnimationStart(const ::android::view::animation::Animation& arg0) const;
	explicit Animation_AnimationListener(jobject o) : java::lang::Object(o) {}
	Animation_AnimationListener(const Animation_AnimationListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::animation::Animation_AnimationListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnAnimationEnd(const ::android::view::animation::Animation& arg0) = 0;
		virtual void OnAnimationRepeat(const ::android::view::animation::Animation& arg0) = 0;
		virtual void OnAnimationStart(const ::android::view::animation::Animation& arg0) = 0;
	};
};

}}}

namespace java { namespace util { 
struct Random : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Serializable();
	::java::util::stream::DoubleStream Doubles() const;
	::java::util::stream::DoubleStream Doubles(const ::jdouble& arg0, const ::jdouble& arg1) const;
	::java::util::stream::DoubleStream Doubles(const ::jlong& arg0) const;
	::java::util::stream::DoubleStream Doubles(const ::jlong& arg0, const ::jdouble& arg1, const ::jdouble& arg2) const;
	::java::util::stream::IntStream Ints() const;
	::java::util::stream::IntStream Ints(const ::jint& arg0, const ::jint& arg1) const;
	::java::util::stream::IntStream Ints(const ::jlong& arg0) const;
	::java::util::stream::IntStream Ints(const ::jlong& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::java::util::stream::LongStream Longs() const;
	::java::util::stream::LongStream Longs(const ::jlong& arg0) const;
	::java::util::stream::LongStream Longs(const ::jlong& arg0, const ::jlong& arg1) const;
	::java::util::stream::LongStream Longs(const ::jlong& arg0, const ::jlong& arg1, const ::jlong& arg2) const;
	::jint Next(const ::jint& arg0) const;
	::jboolean NextBoolean() const;
	::jvoid NextBytes(const jni::Array< ::jbyte >& arg0) const;
	::jdouble NextDouble() const;
	::jfloat NextFloat() const;
	::jdouble NextGaussian() const;
	::jint NextInt() const;
	::jint NextInt(const ::jint& arg0) const;
	::jlong NextLong() const;
	::jvoid SetSeed(const ::jlong& arg0) const;
	static jobject __Constructor();
	Random() : ::java::lang::Object(__Constructor()) {}
	static jobject __Constructor(const ::jlong& arg0);
	Random(const ::jlong& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit Random(jobject o) : ::java::lang::Object(o) {}
	Random(const Random& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace animation { 
struct LayoutTransition : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fAPPEARING();
	static ::jint& fCHANGE_APPEARING();
	static ::jint& fCHANGE_DISAPPEARING();
	static ::jint& fCHANGING();
	static ::jint& fDISAPPEARING();
	::jvoid AddChild(const ::android::view::ViewGroup& arg0, const ::android::view::View& arg1) const;
	::jvoid AddTransitionListener(const ::android::animation::LayoutTransition_TransitionListener& arg0) const;
	::jvoid DisableTransitionType(const ::jint& arg0) const;
	::jvoid EnableTransitionType(const ::jint& arg0) const;
	::android::animation::Animator GetAnimator(const ::jint& arg0) const;
	::jlong GetDuration(const ::jint& arg0) const;
	::android::animation::TimeInterpolator GetInterpolator(const ::jint& arg0) const;
	::jlong GetStagger(const ::jint& arg0) const;
	::jlong GetStartDelay(const ::jint& arg0) const;
	::java::util::List GetTransitionListeners() const;
	::jvoid HideChild(const ::android::view::ViewGroup& arg0, const ::android::view::View& arg1) const;
	::jvoid HideChild(const ::android::view::ViewGroup& arg0, const ::android::view::View& arg1, const ::jint& arg2) const;
	::jboolean IsChangingLayout() const;
	::jboolean IsRunning() const;
	::jboolean IsTransitionTypeEnabled(const ::jint& arg0) const;
	::jvoid RemoveChild(const ::android::view::ViewGroup& arg0, const ::android::view::View& arg1) const;
	::jvoid RemoveTransitionListener(const ::android::animation::LayoutTransition_TransitionListener& arg0) const;
	::jvoid SetAnimateParentHierarchy(const ::jboolean& arg0) const;
	::jvoid SetAnimator(const ::jint& arg0, const ::android::animation::Animator& arg1) const;
	::jvoid SetDuration(const ::jint& arg0, const ::jlong& arg1) const;
	::jvoid SetDuration(const ::jlong& arg0) const;
	::jvoid SetInterpolator(const ::jint& arg0, const ::android::animation::TimeInterpolator& arg1) const;
	::jvoid SetStagger(const ::jint& arg0, const ::jlong& arg1) const;
	::jvoid SetStartDelay(const ::jint& arg0, const ::jlong& arg1) const;
	::jvoid ShowChild(const ::android::view::ViewGroup& arg0, const ::android::view::View& arg1) const;
	::jvoid ShowChild(const ::android::view::ViewGroup& arg0, const ::android::view::View& arg1, const ::jint& arg2) const;
	static jobject __Constructor();
	LayoutTransition() : ::java::lang::Object(__Constructor()) {}
	explicit LayoutTransition(jobject o) : ::java::lang::Object(o) {}
	LayoutTransition(const LayoutTransition& o)  : ::java::lang::Object(o) {}

};

struct LayoutTransition_TransitionListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid EndTransition(const ::android::animation::LayoutTransition& arg0, const ::android::view::ViewGroup& arg1, const ::android::view::View& arg2, const ::jint& arg3) const;
	::jvoid StartTransition(const ::android::animation::LayoutTransition& arg0, const ::android::view::ViewGroup& arg1, const ::android::view::View& arg2, const ::jint& arg3) const;
	explicit LayoutTransition_TransitionListener(jobject o) : java::lang::Object(o) {}
	LayoutTransition_TransitionListener(const LayoutTransition_TransitionListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::animation::LayoutTransition_TransitionListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void EndTransition(const ::android::animation::LayoutTransition& arg0, const ::android::view::ViewGroup& arg1, const ::android::view::View& arg2, const ::jint& arg3) = 0;
		virtual void StartTransition(const ::android::animation::LayoutTransition& arg0, const ::android::view::ViewGroup& arg1, const ::android::view::View& arg2, const ::jint& arg3) = 0;
	};
};

}}

namespace android { namespace view { 
struct ViewOverlay : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid Add(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid Clear() const;
	::jvoid Remove(const ::android::graphics::drawable::Drawable& arg0) const;
	explicit ViewOverlay(jobject o) : ::java::lang::Object(o) {}
	ViewOverlay(const ViewOverlay& o)  : ::java::lang::Object(o) {}

};

struct ViewGroupOverlay : ::android::view::ViewOverlay
{
	static jni::Class __CLASS;

	::jvoid Add(const ::android::view::View& arg0) const;
	::jvoid Remove(const ::android::view::View& arg0) const;
	explicit ViewGroupOverlay(jobject o) : ::android::view::ViewOverlay(o) {}
	ViewGroupOverlay(const ViewGroupOverlay& o)  : ::android::view::ViewOverlay(o) {}

};

struct PointerIcon : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fTYPE_ALIAS();
	static ::jint& fTYPE_ALL_SCROLL();
	static ::jint& fTYPE_ARROW();
	static ::jint& fTYPE_CELL();
	static ::jint& fTYPE_CONTEXT_MENU();
	static ::jint& fTYPE_COPY();
	static ::jint& fTYPE_CROSSHAIR();
	static ::jint& fTYPE_DEFAULT();
	static ::jint& fTYPE_GRAB();
	static ::jint& fTYPE_GRABBING();
	static ::jint& fTYPE_HAND();
	static ::jint& fTYPE_HELP();
	static ::jint& fTYPE_HORIZONTAL_DOUBLE_ARROW();
	static ::jint& fTYPE_NO_DROP();
	static ::jint& fTYPE_NULL();
	static ::jint& fTYPE_TEXT();
	static ::jint& fTYPE_TOP_LEFT_DIAGONAL_DOUBLE_ARROW();
	static ::jint& fTYPE_TOP_RIGHT_DIAGONAL_DOUBLE_ARROW();
	static ::jint& fTYPE_VERTICAL_DOUBLE_ARROW();
	static ::jint& fTYPE_VERTICAL_TEXT();
	static ::jint& fTYPE_WAIT();
	static ::jint& fTYPE_ZOOM_IN();
	static ::jint& fTYPE_ZOOM_OUT();
	static ::android::view::PointerIcon Create(const ::android::graphics::Bitmap& arg0, const ::jfloat& arg1, const ::jfloat& arg2);
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	static ::android::view::PointerIcon GetSystemIcon(const ::android::content::Context& arg0, const ::jint& arg1);
	static ::android::view::PointerIcon Load(const ::android::content::res::Resources& arg0, const ::jint& arg1);
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit PointerIcon(jobject o) : ::java::lang::Object(o) {}
	PointerIcon(const PointerIcon& o)  : ::java::lang::Object(o) {}

};

struct ViewGroup_OnHierarchyChangeListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnChildViewAdded(const ::android::view::View& arg0, const ::android::view::View& arg1) const;
	::jvoid OnChildViewRemoved(const ::android::view::View& arg0, const ::android::view::View& arg1) const;
	explicit ViewGroup_OnHierarchyChangeListener(jobject o) : java::lang::Object(o) {}
	ViewGroup_OnHierarchyChangeListener(const ViewGroup_OnHierarchyChangeListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::ViewGroup_OnHierarchyChangeListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnChildViewAdded(const ::android::view::View& arg0, const ::android::view::View& arg1) = 0;
		virtual void OnChildViewRemoved(const ::android::view::View& arg0, const ::android::view::View& arg1) = 0;
	};
};

struct WindowInsetsAnimation_Callback : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fDISPATCH_MODE_CONTINUE_ON_SUBTREE();
	static ::jint& fDISPATCH_MODE_STOP();
	::jint GetDispatchMode() const;
	::jvoid OnEnd(const ::android::view::WindowInsetsAnimation& arg0) const;
	::jvoid OnPrepare(const ::android::view::WindowInsetsAnimation& arg0) const;
	::android::view::WindowInsets OnProgress(const ::android::view::WindowInsets& arg0, const ::java::util::List& arg1) const;
	::android::view::WindowInsetsAnimation_Bounds OnStart(const ::android::view::WindowInsetsAnimation& arg0, const ::android::view::WindowInsetsAnimation_Bounds& arg1) const;
	static jobject __Constructor(const ::jint& arg0);
	WindowInsetsAnimation_Callback(const ::jint& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit WindowInsetsAnimation_Callback(jobject o) : ::java::lang::Object(o) {}
	WindowInsetsAnimation_Callback(const WindowInsetsAnimation_Callback& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace view { namespace contentcapture { 
struct ContentCaptureSession : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::AutoCloseable();
	::jvoid Close() const;
	::android::view::contentcapture::ContentCaptureSession CreateContentCaptureSession(const ::android::view::contentcapture::ContentCaptureContext& arg0) const;
	::jvoid Destroy() const;
	::android::view::contentcapture::ContentCaptureContext GetContentCaptureContext() const;
	::android::view::contentcapture::ContentCaptureSessionId GetContentCaptureSessionId() const;
	::android::view::autofill::AutofillId NewAutofillId(const ::android::view::autofill::AutofillId& arg0, const ::jlong& arg1) const;
	::android::view::ViewStructure NewViewStructure(const ::android::view::View& arg0) const;
	::android::view::ViewStructure NewVirtualViewStructure(const ::android::view::autofill::AutofillId& arg0, const ::jlong& arg1) const;
	::jvoid NotifySessionPaused() const;
	::jvoid NotifySessionResumed() const;
	::jvoid NotifyViewAppeared(const ::android::view::ViewStructure& arg0) const;
	::jvoid NotifyViewDisappeared(const ::android::view::autofill::AutofillId& arg0) const;
	::jvoid NotifyViewInsetsChanged(const ::android::graphics::Insets& arg0) const;
	::jvoid NotifyViewTextChanged(const ::android::view::autofill::AutofillId& arg0, const ::java::lang::CharSequence& arg1) const;
	::jvoid NotifyViewsDisappeared(const ::android::view::autofill::AutofillId& arg0, const jni::Array< ::jlong >& arg1) const;
	::jvoid SetContentCaptureContext(const ::android::view::contentcapture::ContentCaptureContext& arg0) const;
	::java::lang::String ToString() const;
	explicit ContentCaptureSession(jobject o) : ::java::lang::Object(o) {}
	ContentCaptureSession(const ContentCaptureSession& o)  : ::java::lang::Object(o) {}

};

struct ContentCaptureContext : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	static ::android::view::contentcapture::ContentCaptureContext ForLocusId(const ::java::lang::String& arg0);
	::android::os::Bundle GetExtras() const;
	::android::content::LocusId GetLocusId() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit ContentCaptureContext(jobject o) : ::java::lang::Object(o) {}
	ContentCaptureContext(const ContentCaptureContext& o)  : ::java::lang::Object(o) {}

};

}}}

namespace android { namespace content { 
struct LocusId : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::lang::String GetId() const;
	::jint HashCode() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor(const ::java::lang::String& arg0);
	LocusId(const ::java::lang::String& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit LocusId(jobject o) : ::java::lang::Object(o) {}
	LocusId(const LocusId& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace view { namespace contentcapture { 
struct ContentCaptureSessionId : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint HashCode() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit ContentCaptureSessionId(jobject o) : ::java::lang::Object(o) {}
	ContentCaptureSessionId(const ContentCaptureSessionId& o)  : ::java::lang::Object(o) {}

};

}}}

namespace android { namespace view { 
struct View_OnFocusChangeListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnFocusChange(const ::android::view::View& arg0, const ::jboolean& arg1) const;
	explicit View_OnFocusChangeListener(jobject o) : java::lang::Object(o) {}
	View_OnFocusChangeListener(const View_OnFocusChangeListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::View_OnFocusChangeListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnFocusChange(const ::android::view::View& arg0, const ::jboolean& arg1) = 0;
	};
};

struct ViewOutlineProvider : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::android::view::ViewOutlineProvider& fBACKGROUND();
	static ::android::view::ViewOutlineProvider& fBOUNDS();
	static ::android::view::ViewOutlineProvider& fPADDED_BOUNDS();
	::jvoid GetOutline(const ::android::view::View& arg0, const ::android::graphics::Outline& arg1) const;
	static jobject __Constructor();
	ViewOutlineProvider() : ::java::lang::Object(__Constructor()) {}
	explicit ViewOutlineProvider(jobject o) : ::java::lang::Object(o) {}
	ViewOutlineProvider(const ViewOutlineProvider& o)  : ::java::lang::Object(o) {}

};

struct AttachedSurfaceControl : java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean ApplyTransactionOnDraw(const ::android::view::SurfaceControl_Transaction& arg0) const;
	::android::view::SurfaceControl_Transaction BuildReparentTransaction(const ::android::view::SurfaceControl& arg0) const;
	explicit AttachedSurfaceControl(jobject o) : java::lang::Object(o) {}
	AttachedSurfaceControl(const AttachedSurfaceControl& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::AttachedSurfaceControl();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean ApplyTransactionOnDraw(const ::android::view::SurfaceControl_Transaction& arg0) = 0;
		virtual ::android::view::SurfaceControl_Transaction BuildReparentTransaction(const ::android::view::SurfaceControl& arg0) = 0;
	};
};

struct SurfaceControl_Transaction : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Closeable();
	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jvoid Apply() const;
	::jvoid Close() const;
	::jint DescribeContents() const;
	::android::view::SurfaceControl_Transaction Merge(const ::android::view::SurfaceControl_Transaction& arg0) const;
	::android::view::SurfaceControl_Transaction Reparent(const ::android::view::SurfaceControl& arg0, const ::android::view::SurfaceControl& arg1) const;
	::android::view::SurfaceControl_Transaction SetAlpha(const ::android::view::SurfaceControl& arg0, const ::jfloat& arg1) const;
	::android::view::SurfaceControl_Transaction SetBufferSize(const ::android::view::SurfaceControl& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::android::view::SurfaceControl_Transaction SetFrameRate(const ::android::view::SurfaceControl& arg0, const ::jfloat& arg1, const ::jint& arg2) const;
	::android::view::SurfaceControl_Transaction SetFrameRate(const ::android::view::SurfaceControl& arg0, const ::jfloat& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::android::view::SurfaceControl_Transaction SetGeometry(const ::android::view::SurfaceControl& arg0, const ::android::graphics::Rect& arg1, const ::android::graphics::Rect& arg2, const ::jint& arg3) const;
	::android::view::SurfaceControl_Transaction SetLayer(const ::android::view::SurfaceControl& arg0, const ::jint& arg1) const;
	::android::view::SurfaceControl_Transaction SetVisibility(const ::android::view::SurfaceControl& arg0, const ::jboolean& arg1) const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor();
	SurfaceControl_Transaction() : ::java::lang::Object(__Constructor()) {}
	explicit SurfaceControl_Transaction(jobject o) : ::java::lang::Object(o) {}
	SurfaceControl_Transaction(const SurfaceControl_Transaction& o)  : ::java::lang::Object(o) {}

};

struct SurfaceControl : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::jvoid Finalize() const;
	::jboolean IsValid() const;
	::jvoid ReadFromParcel(const ::android::os::Parcel& arg0) const;
	::jvoid Release() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit SurfaceControl(jobject o) : ::java::lang::Object(o) {}
	SurfaceControl(const SurfaceControl& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace animation { 
struct StateListAnimator : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::Cloneable();
	::jvoid AddState(const jni::Array< ::jint >& arg0, const ::android::animation::Animator& arg1) const;
	::android::animation::StateListAnimator Clone() const;
	::jvoid JumpToCurrentState() const;
	static jobject __Constructor();
	StateListAnimator() : ::java::lang::Object(__Constructor()) {}
	explicit StateListAnimator(jobject o) : ::java::lang::Object(o) {}
	StateListAnimator(const StateListAnimator& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace view { 
struct TouchDelegate : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fABOVE();
	static ::jint& fBELOW();
	static ::jint& fTO_LEFT();
	static ::jint& fTO_RIGHT();
	::android::view::accessibility::AccessibilityNodeInfo_TouchDelegateInfo GetTouchDelegateInfo() const;
	::jboolean OnTouchEvent(const ::android::view::MotionEvent& arg0) const;
	::jboolean OnTouchExplorationHoverEvent(const ::android::view::MotionEvent& arg0) const;
	static jobject __Constructor(const ::android::graphics::Rect& arg0, const ::android::view::View& arg1);
	TouchDelegate(const ::android::graphics::Rect& arg0, const ::android::view::View& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit TouchDelegate(jobject o) : ::java::lang::Object(o) {}
	TouchDelegate(const TouchDelegate& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace view { namespace translation { 
struct ViewTranslationResponse : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::android::view::autofill::AutofillId GetAutofillId() const;
	::java::util::Set GetKeys() const;
	::android::view::translation::TranslationResponseValue GetValue(const ::java::lang::String& arg0) const;
	::jint HashCode() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit ViewTranslationResponse(jobject o) : ::java::lang::Object(o) {}
	ViewTranslationResponse(const ViewTranslationResponse& o)  : ::java::lang::Object(o) {}

};

struct TranslationResponseValue : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::java::lang::String& fEXTRA_DEFINITIONS();
	static ::jint& fSTATUS_ERROR();
	static ::jint& fSTATUS_SUCCESS();
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	static ::android::view::translation::TranslationResponseValue ForError();
	::android::os::Bundle GetExtras() const;
	::jint GetStatusCode() const;
	::java::lang::CharSequence GetText() const;
	::java::lang::CharSequence GetTransliteration() const;
	::jint HashCode() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit TranslationResponseValue(jobject o) : ::java::lang::Object(o) {}
	TranslationResponseValue(const TranslationResponseValue& o)  : ::java::lang::Object(o) {}

};

}}}

namespace android { namespace view { 
struct ViewTreeObserver : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid AddOnDrawListener(const ::android::view::ViewTreeObserver_OnDrawListener& arg0) const;
	::jvoid AddOnGlobalFocusChangeListener(const ::android::view::ViewTreeObserver_OnGlobalFocusChangeListener& arg0) const;
	::jvoid AddOnGlobalLayoutListener(const ::android::view::ViewTreeObserver_OnGlobalLayoutListener& arg0) const;
	::jvoid AddOnPreDrawListener(const ::android::view::ViewTreeObserver_OnPreDrawListener& arg0) const;
	::jvoid AddOnScrollChangedListener(const ::android::view::ViewTreeObserver_OnScrollChangedListener& arg0) const;
	::jvoid AddOnSystemGestureExclusionRectsChangedListener(const ::java::util::function::Consumer& arg0) const;
	::jvoid AddOnTouchModeChangeListener(const ::android::view::ViewTreeObserver_OnTouchModeChangeListener& arg0) const;
	::jvoid AddOnWindowAttachListener(const ::android::view::ViewTreeObserver_OnWindowAttachListener& arg0) const;
	::jvoid AddOnWindowFocusChangeListener(const ::android::view::ViewTreeObserver_OnWindowFocusChangeListener& arg0) const;
	::jvoid DispatchOnDraw() const;
	::jvoid DispatchOnGlobalLayout() const;
	::jboolean DispatchOnPreDraw() const;
	::jboolean IsAlive() const;
	::jvoid RegisterFrameCommitCallback(const ::java::lang::Runnable& arg0) const;
	::jvoid RemoveGlobalOnLayoutListener(const ::android::view::ViewTreeObserver_OnGlobalLayoutListener& arg0) const;
	::jvoid RemoveOnDrawListener(const ::android::view::ViewTreeObserver_OnDrawListener& arg0) const;
	::jvoid RemoveOnGlobalFocusChangeListener(const ::android::view::ViewTreeObserver_OnGlobalFocusChangeListener& arg0) const;
	::jvoid RemoveOnGlobalLayoutListener(const ::android::view::ViewTreeObserver_OnGlobalLayoutListener& arg0) const;
	::jvoid RemoveOnPreDrawListener(const ::android::view::ViewTreeObserver_OnPreDrawListener& arg0) const;
	::jvoid RemoveOnScrollChangedListener(const ::android::view::ViewTreeObserver_OnScrollChangedListener& arg0) const;
	::jvoid RemoveOnSystemGestureExclusionRectsChangedListener(const ::java::util::function::Consumer& arg0) const;
	::jvoid RemoveOnTouchModeChangeListener(const ::android::view::ViewTreeObserver_OnTouchModeChangeListener& arg0) const;
	::jvoid RemoveOnWindowAttachListener(const ::android::view::ViewTreeObserver_OnWindowAttachListener& arg0) const;
	::jvoid RemoveOnWindowFocusChangeListener(const ::android::view::ViewTreeObserver_OnWindowFocusChangeListener& arg0) const;
	::jboolean UnregisterFrameCommitCallback(const ::java::lang::Runnable& arg0) const;
	explicit ViewTreeObserver(jobject o) : ::java::lang::Object(o) {}
	ViewTreeObserver(const ViewTreeObserver& o)  : ::java::lang::Object(o) {}

};

struct ViewTreeObserver_OnDrawListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnDraw() const;
	explicit ViewTreeObserver_OnDrawListener(jobject o) : java::lang::Object(o) {}
	ViewTreeObserver_OnDrawListener(const ViewTreeObserver_OnDrawListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::ViewTreeObserver_OnDrawListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnDraw() = 0;
	};
};

struct ViewTreeObserver_OnGlobalFocusChangeListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnGlobalFocusChanged(const ::android::view::View& arg0, const ::android::view::View& arg1) const;
	explicit ViewTreeObserver_OnGlobalFocusChangeListener(jobject o) : java::lang::Object(o) {}
	ViewTreeObserver_OnGlobalFocusChangeListener(const ViewTreeObserver_OnGlobalFocusChangeListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::ViewTreeObserver_OnGlobalFocusChangeListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnGlobalFocusChanged(const ::android::view::View& arg0, const ::android::view::View& arg1) = 0;
	};
};

struct ViewTreeObserver_OnGlobalLayoutListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnGlobalLayout() const;
	explicit ViewTreeObserver_OnGlobalLayoutListener(jobject o) : java::lang::Object(o) {}
	ViewTreeObserver_OnGlobalLayoutListener(const ViewTreeObserver_OnGlobalLayoutListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::ViewTreeObserver_OnGlobalLayoutListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnGlobalLayout() = 0;
	};
};

struct ViewTreeObserver_OnPreDrawListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean OnPreDraw() const;
	explicit ViewTreeObserver_OnPreDrawListener(jobject o) : java::lang::Object(o) {}
	ViewTreeObserver_OnPreDrawListener(const ViewTreeObserver_OnPreDrawListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::ViewTreeObserver_OnPreDrawListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean OnPreDraw() = 0;
	};
};

struct ViewTreeObserver_OnScrollChangedListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnScrollChanged() const;
	explicit ViewTreeObserver_OnScrollChangedListener(jobject o) : java::lang::Object(o) {}
	ViewTreeObserver_OnScrollChangedListener(const ViewTreeObserver_OnScrollChangedListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::ViewTreeObserver_OnScrollChangedListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnScrollChanged() = 0;
	};
};

struct ViewTreeObserver_OnTouchModeChangeListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnTouchModeChanged(const ::jboolean& arg0) const;
	explicit ViewTreeObserver_OnTouchModeChangeListener(jobject o) : java::lang::Object(o) {}
	ViewTreeObserver_OnTouchModeChangeListener(const ViewTreeObserver_OnTouchModeChangeListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::ViewTreeObserver_OnTouchModeChangeListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnTouchModeChanged(const ::jboolean& arg0) = 0;
	};
};

struct ViewTreeObserver_OnWindowAttachListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnWindowAttached() const;
	::jvoid OnWindowDetached() const;
	explicit ViewTreeObserver_OnWindowAttachListener(jobject o) : java::lang::Object(o) {}
	ViewTreeObserver_OnWindowAttachListener(const ViewTreeObserver_OnWindowAttachListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::ViewTreeObserver_OnWindowAttachListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnWindowAttached() = 0;
		virtual void OnWindowDetached() = 0;
	};
};

struct ViewTreeObserver_OnWindowFocusChangeListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnWindowFocusChanged(const ::jboolean& arg0) const;
	explicit ViewTreeObserver_OnWindowFocusChangeListener(jobject o) : java::lang::Object(o) {}
	ViewTreeObserver_OnWindowFocusChangeListener(const ViewTreeObserver_OnWindowFocusChangeListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::ViewTreeObserver_OnWindowFocusChangeListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnWindowFocusChanged(const ::jboolean& arg0) = 0;
	};
};

struct WindowId : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint HashCode() const;
	::jboolean IsFocused() const;
	::jvoid RegisterFocusObserver(const ::android::view::WindowId_FocusObserver& arg0) const;
	::java::lang::String ToString() const;
	::jvoid UnregisterFocusObserver(const ::android::view::WindowId_FocusObserver& arg0) const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit WindowId(jobject o) : ::java::lang::Object(o) {}
	WindowId(const WindowId& o)  : ::java::lang::Object(o) {}

};

struct WindowId_FocusObserver : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnFocusGained(const ::android::view::WindowId& arg0) const;
	::jvoid OnFocusLost(const ::android::view::WindowId& arg0) const;
	static jobject __Constructor();
	WindowId_FocusObserver() : ::java::lang::Object(__Constructor()) {}
	explicit WindowId_FocusObserver(jobject o) : ::java::lang::Object(o) {}
	WindowId_FocusObserver(const WindowId_FocusObserver& o)  : ::java::lang::Object(o) {}

};

struct WindowInsetsController : java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fAPPEARANCE_LIGHT_NAVIGATION_BARS();
	static ::jint& fAPPEARANCE_LIGHT_STATUS_BARS();
	static ::jint& fBEHAVIOR_DEFAULT();
	static ::jint& fBEHAVIOR_SHOW_BARS_BY_SWIPE();
	static ::jint& fBEHAVIOR_SHOW_BARS_BY_TOUCH();
	static ::jint& fBEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE();
	::jvoid AddOnControllableInsetsChangedListener(const ::android::view::WindowInsetsController_OnControllableInsetsChangedListener& arg0) const;
	::jvoid ControlWindowInsetsAnimation(const ::jint& arg0, const ::jlong& arg1, const ::android::view::animation::Interpolator& arg2, const ::android::os::CancellationSignal& arg3, const ::android::view::WindowInsetsAnimationControlListener& arg4) const;
	::jint GetSystemBarsAppearance() const;
	::jint GetSystemBarsBehavior() const;
	::jvoid Hide(const ::jint& arg0) const;
	::jvoid RemoveOnControllableInsetsChangedListener(const ::android::view::WindowInsetsController_OnControllableInsetsChangedListener& arg0) const;
	::jvoid SetSystemBarsAppearance(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid SetSystemBarsBehavior(const ::jint& arg0) const;
	::jvoid Show(const ::jint& arg0) const;
	explicit WindowInsetsController(jobject o) : java::lang::Object(o) {}
	WindowInsetsController(const WindowInsetsController& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::WindowInsetsController();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void AddOnControllableInsetsChangedListener(const ::android::view::WindowInsetsController_OnControllableInsetsChangedListener& arg0) = 0;
		virtual void ControlWindowInsetsAnimation(const ::jint& arg0, const ::jlong& arg1, const ::android::view::animation::Interpolator& arg2, const ::android::os::CancellationSignal& arg3, const ::android::view::WindowInsetsAnimationControlListener& arg4) = 0;
		virtual ::jint GetSystemBarsAppearance() = 0;
		virtual ::jint GetSystemBarsBehavior() = 0;
		virtual void Hide(const ::jint& arg0) = 0;
		virtual void RemoveOnControllableInsetsChangedListener(const ::android::view::WindowInsetsController_OnControllableInsetsChangedListener& arg0) = 0;
		virtual void SetSystemBarsAppearance(const ::jint& arg0, const ::jint& arg1) = 0;
		virtual void SetSystemBarsBehavior(const ::jint& arg0) = 0;
		virtual void Show(const ::jint& arg0) = 0;
	};
};

struct WindowInsetsController_OnControllableInsetsChangedListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnControllableInsetsChanged(const ::android::view::WindowInsetsController& arg0, const ::jint& arg1) const;
	explicit WindowInsetsController_OnControllableInsetsChangedListener(jobject o) : java::lang::Object(o) {}
	WindowInsetsController_OnControllableInsetsChangedListener(const WindowInsetsController_OnControllableInsetsChangedListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::WindowInsetsController_OnControllableInsetsChangedListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnControllableInsetsChanged(const ::android::view::WindowInsetsController& arg0, const ::jint& arg1) = 0;
	};
};

struct WindowInsetsAnimationControlListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnCancelled(const ::android::view::WindowInsetsAnimationController& arg0) const;
	::jvoid OnFinished(const ::android::view::WindowInsetsAnimationController& arg0) const;
	::jvoid OnReady(const ::android::view::WindowInsetsAnimationController& arg0, const ::jint& arg1) const;
	explicit WindowInsetsAnimationControlListener(jobject o) : java::lang::Object(o) {}
	WindowInsetsAnimationControlListener(const WindowInsetsAnimationControlListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::WindowInsetsAnimationControlListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnCancelled(const ::android::view::WindowInsetsAnimationController& arg0) = 0;
		virtual void OnFinished(const ::android::view::WindowInsetsAnimationController& arg0) = 0;
		virtual void OnReady(const ::android::view::WindowInsetsAnimationController& arg0, const ::jint& arg1) = 0;
	};
};

struct WindowInsetsAnimationController : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid Finish(const ::jboolean& arg0) const;
	::jfloat GetCurrentAlpha() const;
	::jfloat GetCurrentFraction() const;
	::android::graphics::Insets GetCurrentInsets() const;
	::android::graphics::Insets GetHiddenStateInsets() const;
	::android::graphics::Insets GetShownStateInsets() const;
	::jint GetTypes() const;
	::jboolean IsCancelled() const;
	::jboolean IsFinished() const;
	::jboolean IsReady() const;
	::jvoid SetInsetsAndAlpha(const ::android::graphics::Insets& arg0, const ::jfloat& arg1, const ::jfloat& arg2) const;
	explicit WindowInsetsAnimationController(jobject o) : java::lang::Object(o) {}
	WindowInsetsAnimationController(const WindowInsetsAnimationController& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::WindowInsetsAnimationController();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void Finish(const ::jboolean& arg0) = 0;
		virtual ::jfloat GetCurrentAlpha() = 0;
		virtual ::jfloat GetCurrentFraction() = 0;
		virtual ::android::graphics::Insets GetCurrentInsets() = 0;
		virtual ::android::graphics::Insets GetHiddenStateInsets() = 0;
		virtual ::android::graphics::Insets GetShownStateInsets() = 0;
		virtual ::jint GetTypes() = 0;
		virtual ::jboolean IsCancelled() = 0;
		virtual ::jboolean IsFinished() = 0;
		virtual ::jboolean IsReady() = 0;
		virtual void SetInsetsAndAlpha(const ::android::graphics::Insets& arg0, const ::jfloat& arg1, const ::jfloat& arg2) = 0;
	};
};

}}

namespace android { namespace view { namespace inputmethod { 
struct EditorInfo : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::text::InputType();
	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fIME_ACTION_DONE();
	static ::jint& fIME_ACTION_GO();
	static ::jint& fIME_ACTION_NEXT();
	static ::jint& fIME_ACTION_NONE();
	static ::jint& fIME_ACTION_PREVIOUS();
	static ::jint& fIME_ACTION_SEARCH();
	static ::jint& fIME_ACTION_SEND();
	static ::jint& fIME_ACTION_UNSPECIFIED();
	static ::jint& fIME_FLAG_FORCE_ASCII();
	static ::jint& fIME_FLAG_NAVIGATE_NEXT();
	static ::jint& fIME_FLAG_NAVIGATE_PREVIOUS();
	static ::jint& fIME_FLAG_NO_ACCESSORY_ACTION();
	static ::jint& fIME_FLAG_NO_ENTER_ACTION();
	static ::jint& fIME_FLAG_NO_EXTRACT_UI();
	static ::jint& fIME_FLAG_NO_FULLSCREEN();
	static ::jint& fIME_FLAG_NO_PERSONALIZED_LEARNING();
	static ::jint& fIME_MASK_ACTION();
	static ::jint& fIME_NULL();
	::jint fActionId() const;
	void fActionId(const ::jint& arg0) const;
	::java::lang::CharSequence fActionLabel() const;
	void fActionLabel(const ::java::lang::CharSequence& arg0) const;
	jni::Array< ::java::lang::String > fContentMimeTypes() const;
	void fContentMimeTypes(const jni::Array< ::java::lang::String >& arg0) const;
	::android::os::Bundle fExtras() const;
	void fExtras(const ::android::os::Bundle& arg0) const;
	::jint fFieldId() const;
	void fFieldId(const ::jint& arg0) const;
	::java::lang::String fFieldName() const;
	void fFieldName(const ::java::lang::String& arg0) const;
	::android::os::LocaleList fHintLocales() const;
	void fHintLocales(const ::android::os::LocaleList& arg0) const;
	::java::lang::CharSequence fHintText() const;
	void fHintText(const ::java::lang::CharSequence& arg0) const;
	::jint fImeOptions() const;
	void fImeOptions(const ::jint& arg0) const;
	::jint fInitialCapsMode() const;
	void fInitialCapsMode(const ::jint& arg0) const;
	::jint fInitialSelEnd() const;
	void fInitialSelEnd(const ::jint& arg0) const;
	::jint fInitialSelStart() const;
	void fInitialSelStart(const ::jint& arg0) const;
	::jint fInputType() const;
	void fInputType(const ::jint& arg0) const;
	::java::lang::CharSequence fLabel() const;
	void fLabel(const ::java::lang::CharSequence& arg0) const;
	::java::lang::String fPackageName() const;
	void fPackageName(const ::java::lang::String& arg0) const;
	::java::lang::String fPrivateImeOptions() const;
	void fPrivateImeOptions(const ::java::lang::String& arg0) const;
	::jint DescribeContents() const;
	::jvoid Dump(const ::android::util::Printer& arg0, const ::java::lang::String& arg1) const;
	::java::lang::CharSequence GetInitialSelectedText(const ::jint& arg0) const;
	::android::view::inputmethod::SurroundingText GetInitialSurroundingText(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::java::lang::CharSequence GetInitialTextAfterCursor(const ::jint& arg0, const ::jint& arg1) const;
	::java::lang::CharSequence GetInitialTextBeforeCursor(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid MakeCompatible(const ::jint& arg0) const;
	::jvoid SetInitialSurroundingSubText(const ::java::lang::CharSequence& arg0, const ::jint& arg1) const;
	::jvoid SetInitialSurroundingText(const ::java::lang::CharSequence& arg0) const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor();
	EditorInfo() : ::java::lang::Object(__Constructor()) {}
	explicit EditorInfo(jobject o) : ::java::lang::Object(o) {}
	EditorInfo(const EditorInfo& o)  : ::java::lang::Object(o) {}

};

}}}

namespace android { namespace text { 
struct InputType : java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fTYPE_CLASS_DATETIME();
	static ::jint& fTYPE_CLASS_NUMBER();
	static ::jint& fTYPE_CLASS_PHONE();
	static ::jint& fTYPE_CLASS_TEXT();
	static ::jint& fTYPE_DATETIME_VARIATION_DATE();
	static ::jint& fTYPE_DATETIME_VARIATION_NORMAL();
	static ::jint& fTYPE_DATETIME_VARIATION_TIME();
	static ::jint& fTYPE_MASK_CLASS();
	static ::jint& fTYPE_MASK_FLAGS();
	static ::jint& fTYPE_MASK_VARIATION();
	static ::jint& fTYPE_NULL();
	static ::jint& fTYPE_NUMBER_FLAG_DECIMAL();
	static ::jint& fTYPE_NUMBER_FLAG_SIGNED();
	static ::jint& fTYPE_NUMBER_VARIATION_NORMAL();
	static ::jint& fTYPE_NUMBER_VARIATION_PASSWORD();
	static ::jint& fTYPE_TEXT_FLAG_AUTO_COMPLETE();
	static ::jint& fTYPE_TEXT_FLAG_AUTO_CORRECT();
	static ::jint& fTYPE_TEXT_FLAG_CAP_CHARACTERS();
	static ::jint& fTYPE_TEXT_FLAG_CAP_SENTENCES();
	static ::jint& fTYPE_TEXT_FLAG_CAP_WORDS();
	static ::jint& fTYPE_TEXT_FLAG_IME_MULTI_LINE();
	static ::jint& fTYPE_TEXT_FLAG_MULTI_LINE();
	static ::jint& fTYPE_TEXT_FLAG_NO_SUGGESTIONS();
	static ::jint& fTYPE_TEXT_VARIATION_EMAIL_ADDRESS();
	static ::jint& fTYPE_TEXT_VARIATION_EMAIL_SUBJECT();
	static ::jint& fTYPE_TEXT_VARIATION_FILTER();
	static ::jint& fTYPE_TEXT_VARIATION_LONG_MESSAGE();
	static ::jint& fTYPE_TEXT_VARIATION_NORMAL();
	static ::jint& fTYPE_TEXT_VARIATION_PASSWORD();
	static ::jint& fTYPE_TEXT_VARIATION_PERSON_NAME();
	static ::jint& fTYPE_TEXT_VARIATION_PHONETIC();
	static ::jint& fTYPE_TEXT_VARIATION_POSTAL_ADDRESS();
	static ::jint& fTYPE_TEXT_VARIATION_SHORT_MESSAGE();
	static ::jint& fTYPE_TEXT_VARIATION_URI();
	static ::jint& fTYPE_TEXT_VARIATION_VISIBLE_PASSWORD();
	static ::jint& fTYPE_TEXT_VARIATION_WEB_EDIT_TEXT();
	static ::jint& fTYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS();
	static ::jint& fTYPE_TEXT_VARIATION_WEB_PASSWORD();
	explicit InputType(jobject o) : java::lang::Object(o) {}
	InputType(const InputType& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::text::InputType();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
	};
};

}}

namespace android { namespace view { namespace inputmethod { 
struct SurroundingText : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::jint GetOffset() const;
	::jint GetSelectionEnd() const;
	::jint GetSelectionStart() const;
	::java::lang::CharSequence GetText() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3);
	SurroundingText(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3)) {}
	explicit SurroundingText(jobject o) : ::java::lang::Object(o) {}
	SurroundingText(const SurroundingText& o)  : ::java::lang::Object(o) {}

};

struct InputConnection : java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fCURSOR_UPDATE_IMMEDIATE();
	static ::jint& fCURSOR_UPDATE_MONITOR();
	static ::jint& fGET_EXTRACTED_TEXT_MONITOR();
	static ::jint& fGET_TEXT_WITH_STYLES();
	static ::jint& fINPUT_CONTENT_GRANT_READ_URI_PERMISSION();
	::jboolean BeginBatchEdit() const;
	::jboolean ClearMetaKeyStates(const ::jint& arg0) const;
	::jvoid CloseConnection() const;
	::jboolean CommitCompletion(const ::android::view::inputmethod::CompletionInfo& arg0) const;
	::jboolean CommitContent(const ::android::view::inputmethod::InputContentInfo& arg0, const ::jint& arg1, const ::android::os::Bundle& arg2) const;
	::jboolean CommitCorrection(const ::android::view::inputmethod::CorrectionInfo& arg0) const;
	::jboolean CommitText(const ::java::lang::CharSequence& arg0, const ::jint& arg1) const;
	::jboolean DeleteSurroundingText(const ::jint& arg0, const ::jint& arg1) const;
	::jboolean DeleteSurroundingTextInCodePoints(const ::jint& arg0, const ::jint& arg1) const;
	::jboolean EndBatchEdit() const;
	::jboolean FinishComposingText() const;
	::jint GetCursorCapsMode(const ::jint& arg0) const;
	::android::view::inputmethod::ExtractedText GetExtractedText(const ::android::view::inputmethod::ExtractedTextRequest& arg0, const ::jint& arg1) const;
	::android::os::Handler GetHandler() const;
	::java::lang::CharSequence GetSelectedText(const ::jint& arg0) const;
	::android::view::inputmethod::SurroundingText GetSurroundingText(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::java::lang::CharSequence GetTextAfterCursor(const ::jint& arg0, const ::jint& arg1) const;
	::java::lang::CharSequence GetTextBeforeCursor(const ::jint& arg0, const ::jint& arg1) const;
	::jboolean PerformContextMenuAction(const ::jint& arg0) const;
	::jboolean PerformEditorAction(const ::jint& arg0) const;
	::jboolean PerformPrivateCommand(const ::java::lang::String& arg0, const ::android::os::Bundle& arg1) const;
	::jboolean PerformSpellCheck() const;
	::jboolean ReportFullscreenMode(const ::jboolean& arg0) const;
	::jboolean RequestCursorUpdates(const ::jint& arg0) const;
	::jboolean SendKeyEvent(const ::android::view::KeyEvent& arg0) const;
	::jboolean SetComposingRegion(const ::jint& arg0, const ::jint& arg1) const;
	::jboolean SetComposingText(const ::java::lang::CharSequence& arg0, const ::jint& arg1) const;
	::jboolean SetImeConsumesInput(const ::jboolean& arg0) const;
	::jboolean SetSelection(const ::jint& arg0, const ::jint& arg1) const;
	explicit InputConnection(jobject o) : java::lang::Object(o) {}
	InputConnection(const InputConnection& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::inputmethod::InputConnection();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean BeginBatchEdit() = 0;
		virtual ::jboolean ClearMetaKeyStates(const ::jint& arg0) = 0;
		virtual void CloseConnection() = 0;
		virtual ::jboolean CommitCompletion(const ::android::view::inputmethod::CompletionInfo& arg0) = 0;
		virtual ::jboolean CommitContent(const ::android::view::inputmethod::InputContentInfo& arg0, const ::jint& arg1, const ::android::os::Bundle& arg2) = 0;
		virtual ::jboolean CommitCorrection(const ::android::view::inputmethod::CorrectionInfo& arg0) = 0;
		virtual ::jboolean CommitText(const ::java::lang::CharSequence& arg0, const ::jint& arg1) = 0;
		virtual ::jboolean DeleteSurroundingText(const ::jint& arg0, const ::jint& arg1) = 0;
		virtual ::jboolean DeleteSurroundingTextInCodePoints(const ::jint& arg0, const ::jint& arg1) = 0;
		virtual ::jboolean EndBatchEdit() = 0;
		virtual ::jboolean FinishComposingText() = 0;
		virtual ::jint GetCursorCapsMode(const ::jint& arg0) = 0;
		virtual ::android::view::inputmethod::ExtractedText GetExtractedText(const ::android::view::inputmethod::ExtractedTextRequest& arg0, const ::jint& arg1) = 0;
		virtual ::android::os::Handler GetHandler() = 0;
		virtual ::java::lang::CharSequence GetSelectedText(const ::jint& arg0) = 0;
		virtual ::android::view::inputmethod::SurroundingText GetSurroundingText(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2) = 0;
		virtual ::java::lang::CharSequence GetTextAfterCursor(const ::jint& arg0, const ::jint& arg1) = 0;
		virtual ::java::lang::CharSequence GetTextBeforeCursor(const ::jint& arg0, const ::jint& arg1) = 0;
		virtual ::jboolean PerformContextMenuAction(const ::jint& arg0) = 0;
		virtual ::jboolean PerformEditorAction(const ::jint& arg0) = 0;
		virtual ::jboolean PerformPrivateCommand(const ::java::lang::String& arg0, const ::android::os::Bundle& arg1) = 0;
		virtual ::jboolean PerformSpellCheck() = 0;
		virtual ::jboolean ReportFullscreenMode(const ::jboolean& arg0) = 0;
		virtual ::jboolean RequestCursorUpdates(const ::jint& arg0) = 0;
		virtual ::jboolean SendKeyEvent(const ::android::view::KeyEvent& arg0) = 0;
		virtual ::jboolean SetComposingRegion(const ::jint& arg0, const ::jint& arg1) = 0;
		virtual ::jboolean SetComposingText(const ::java::lang::CharSequence& arg0, const ::jint& arg1) = 0;
		virtual ::jboolean SetImeConsumesInput(const ::jboolean& arg0) = 0;
		virtual ::jboolean SetSelection(const ::jint& arg0, const ::jint& arg1) = 0;
	};
};

struct CompletionInfo : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::jlong GetId() const;
	::java::lang::CharSequence GetLabel() const;
	::jint GetPosition() const;
	::java::lang::CharSequence GetText() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor(const ::jlong& arg0, const ::jint& arg1, const ::java::lang::CharSequence& arg2);
	CompletionInfo(const ::jlong& arg0, const ::jint& arg1, const ::java::lang::CharSequence& arg2) : ::java::lang::Object(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::jlong& arg0, const ::jint& arg1, const ::java::lang::CharSequence& arg2, const ::java::lang::CharSequence& arg3);
	CompletionInfo(const ::jlong& arg0, const ::jint& arg1, const ::java::lang::CharSequence& arg2, const ::java::lang::CharSequence& arg3) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3)) {}
	explicit CompletionInfo(jobject o) : ::java::lang::Object(o) {}
	CompletionInfo(const CompletionInfo& o)  : ::java::lang::Object(o) {}

};

struct InputContentInfo : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::android::net::Uri GetContentUri() const;
	::android::content::ClipDescription GetDescription() const;
	::android::net::Uri GetLinkUri() const;
	::jvoid ReleasePermission() const;
	::jvoid RequestPermission() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor(const ::android::net::Uri& arg0, const ::android::content::ClipDescription& arg1);
	InputContentInfo(const ::android::net::Uri& arg0, const ::android::content::ClipDescription& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::net::Uri& arg0, const ::android::content::ClipDescription& arg1, const ::android::net::Uri& arg2);
	InputContentInfo(const ::android::net::Uri& arg0, const ::android::content::ClipDescription& arg1, const ::android::net::Uri& arg2) : ::java::lang::Object(__Constructor(arg0, arg1, arg2)) {}
	explicit InputContentInfo(jobject o) : ::java::lang::Object(o) {}
	InputContentInfo(const InputContentInfo& o)  : ::java::lang::Object(o) {}

};

struct CorrectionInfo : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::java::lang::CharSequence GetNewText() const;
	::jint GetOffset() const;
	::java::lang::CharSequence GetOldText() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor(const ::jint& arg0, const ::java::lang::CharSequence& arg1, const ::java::lang::CharSequence& arg2);
	CorrectionInfo(const ::jint& arg0, const ::java::lang::CharSequence& arg1, const ::java::lang::CharSequence& arg2) : ::java::lang::Object(__Constructor(arg0, arg1, arg2)) {}
	explicit CorrectionInfo(jobject o) : ::java::lang::Object(o) {}
	CorrectionInfo(const CorrectionInfo& o)  : ::java::lang::Object(o) {}

};

struct ExtractedTextRequest : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint fFlags() const;
	void fFlags(const ::jint& arg0) const;
	::jint fHintMaxChars() const;
	void fHintMaxChars(const ::jint& arg0) const;
	::jint fHintMaxLines() const;
	void fHintMaxLines(const ::jint& arg0) const;
	::jint fToken() const;
	void fToken(const ::jint& arg0) const;
	::jint DescribeContents() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor();
	ExtractedTextRequest() : ::java::lang::Object(__Constructor()) {}
	explicit ExtractedTextRequest(jobject o) : ::java::lang::Object(o) {}
	ExtractedTextRequest(const ExtractedTextRequest& o)  : ::java::lang::Object(o) {}

};

struct ExtractedText : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fFLAG_SELECTING();
	static ::jint& fFLAG_SINGLE_LINE();
	::jint fFlags() const;
	void fFlags(const ::jint& arg0) const;
	::java::lang::CharSequence fHint() const;
	void fHint(const ::java::lang::CharSequence& arg0) const;
	::jint fPartialEndOffset() const;
	void fPartialEndOffset(const ::jint& arg0) const;
	::jint fPartialStartOffset() const;
	void fPartialStartOffset(const ::jint& arg0) const;
	::jint fSelectionEnd() const;
	void fSelectionEnd(const ::jint& arg0) const;
	::jint fSelectionStart() const;
	void fSelectionStart(const ::jint& arg0) const;
	::jint fStartOffset() const;
	void fStartOffset(const ::jint& arg0) const;
	::java::lang::CharSequence fText() const;
	void fText(const ::java::lang::CharSequence& arg0) const;
	::jint DescribeContents() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor();
	ExtractedText() : ::java::lang::Object(__Constructor()) {}
	explicit ExtractedText(jobject o) : ::java::lang::Object(o) {}
	ExtractedText(const ExtractedText& o)  : ::java::lang::Object(o) {}

};

}}}

namespace android { namespace view { 
struct ContentInfo : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fFLAG_CONVERT_TO_PLAIN_TEXT();
	static ::jint& fSOURCE_APP();
	static ::jint& fSOURCE_AUTOFILL();
	static ::jint& fSOURCE_CLIPBOARD();
	static ::jint& fSOURCE_DRAG_AND_DROP();
	static ::jint& fSOURCE_INPUT_METHOD();
	static ::jint& fSOURCE_PROCESS_TEXT();
	::jint DescribeContents() const;
	::android::content::ClipData GetClip() const;
	::android::os::Bundle GetExtras() const;
	::jint GetFlags() const;
	::android::net::Uri GetLinkUri() const;
	::jint GetSource() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit ContentInfo(jobject o) : ::java::lang::Object(o) {}
	ContentInfo(const ContentInfo& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace util { 
struct LongSparseArray : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::Cloneable();
	::jvoid Append(const ::jlong& arg0, const ::java::lang::Object& arg1) const;
	::jvoid Clear() const;
	::android::util::LongSparseArray Clone() const;
	::jvoid Delete(const ::jlong& arg0) const;
	::java::lang::Object Get(const ::jlong& arg0) const;
	::java::lang::Object Get(const ::jlong& arg0, const ::java::lang::Object& arg1) const;
	::jint IndexOfKey(const ::jlong& arg0) const;
	::jint IndexOfValue(const ::java::lang::Object& arg0) const;
	::jlong KeyAt(const ::jint& arg0) const;
	::jvoid Put(const ::jlong& arg0, const ::java::lang::Object& arg1) const;
	::jvoid Remove(const ::jlong& arg0) const;
	::jvoid RemoveAt(const ::jint& arg0) const;
	::jvoid SetValueAt(const ::jint& arg0, const ::java::lang::Object& arg1) const;
	::jint Size() const;
	::java::lang::String ToString() const;
	::java::lang::Object ValueAt(const ::jint& arg0) const;
	static jobject __Constructor();
	LongSparseArray() : ::java::lang::Object(__Constructor()) {}
	static jobject __Constructor(const ::jint& arg0);
	LongSparseArray(const ::jint& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit LongSparseArray(jobject o) : ::java::lang::Object(o) {}
	LongSparseArray(const LongSparseArray& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace view { 
struct View_OnApplyWindowInsetsListener : java::lang::Object
{
	static jni::Class __CLASS;

	::android::view::WindowInsets OnApplyWindowInsets(const ::android::view::View& arg0, const ::android::view::WindowInsets& arg1) const;
	explicit View_OnApplyWindowInsetsListener(jobject o) : java::lang::Object(o) {}
	View_OnApplyWindowInsetsListener(const View_OnApplyWindowInsetsListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::View_OnApplyWindowInsetsListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::android::view::WindowInsets OnApplyWindowInsets(const ::android::view::View& arg0, const ::android::view::WindowInsets& arg1) = 0;
	};
};

struct View_OnCapturedPointerListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean OnCapturedPointer(const ::android::view::View& arg0, const ::android::view::MotionEvent& arg1) const;
	explicit View_OnCapturedPointerListener(jobject o) : java::lang::Object(o) {}
	View_OnCapturedPointerListener(const View_OnCapturedPointerListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::View_OnCapturedPointerListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean OnCapturedPointer(const ::android::view::View& arg0, const ::android::view::MotionEvent& arg1) = 0;
	};
};

struct View_OnClickListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnClick(const ::android::view::View& arg0) const;
	explicit View_OnClickListener(jobject o) : java::lang::Object(o) {}
	View_OnClickListener(const View_OnClickListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::View_OnClickListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnClick(const ::android::view::View& arg0) = 0;
	};
};

struct View_OnContextClickListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean OnContextClick(const ::android::view::View& arg0) const;
	explicit View_OnContextClickListener(jobject o) : java::lang::Object(o) {}
	View_OnContextClickListener(const View_OnContextClickListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::View_OnContextClickListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean OnContextClick(const ::android::view::View& arg0) = 0;
	};
};

struct View_OnCreateContextMenuListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnCreateContextMenu(const ::android::view::ContextMenu& arg0, const ::android::view::View& arg1, const ::android::view::ContextMenu_ContextMenuInfo& arg2) const;
	explicit View_OnCreateContextMenuListener(jobject o) : java::lang::Object(o) {}
	View_OnCreateContextMenuListener(const View_OnCreateContextMenuListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::View_OnCreateContextMenuListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnCreateContextMenu(const ::android::view::ContextMenu& arg0, const ::android::view::View& arg1, const ::android::view::ContextMenu_ContextMenuInfo& arg2) = 0;
	};
};

struct View_OnDragListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean OnDrag(const ::android::view::View& arg0, const ::android::view::DragEvent& arg1) const;
	explicit View_OnDragListener(jobject o) : java::lang::Object(o) {}
	View_OnDragListener(const View_OnDragListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::View_OnDragListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean OnDrag(const ::android::view::View& arg0, const ::android::view::DragEvent& arg1) = 0;
	};
};

struct View_OnGenericMotionListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean OnGenericMotion(const ::android::view::View& arg0, const ::android::view::MotionEvent& arg1) const;
	explicit View_OnGenericMotionListener(jobject o) : java::lang::Object(o) {}
	View_OnGenericMotionListener(const View_OnGenericMotionListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::View_OnGenericMotionListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean OnGenericMotion(const ::android::view::View& arg0, const ::android::view::MotionEvent& arg1) = 0;
	};
};

struct View_OnHoverListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean OnHover(const ::android::view::View& arg0, const ::android::view::MotionEvent& arg1) const;
	explicit View_OnHoverListener(jobject o) : java::lang::Object(o) {}
	View_OnHoverListener(const View_OnHoverListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::View_OnHoverListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean OnHover(const ::android::view::View& arg0, const ::android::view::MotionEvent& arg1) = 0;
	};
};

struct View_OnKeyListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean OnKey(const ::android::view::View& arg0, const ::jint& arg1, const ::android::view::KeyEvent& arg2) const;
	explicit View_OnKeyListener(jobject o) : java::lang::Object(o) {}
	View_OnKeyListener(const View_OnKeyListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::View_OnKeyListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean OnKey(const ::android::view::View& arg0, const ::jint& arg1, const ::android::view::KeyEvent& arg2) = 0;
	};
};

struct View_OnLongClickListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean OnLongClick(const ::android::view::View& arg0) const;
	explicit View_OnLongClickListener(jobject o) : java::lang::Object(o) {}
	View_OnLongClickListener(const View_OnLongClickListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::View_OnLongClickListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean OnLongClick(const ::android::view::View& arg0) = 0;
	};
};

struct OnReceiveContentListener : java::lang::Object
{
	static jni::Class __CLASS;

	::android::view::ContentInfo OnReceiveContent(const ::android::view::View& arg0, const ::android::view::ContentInfo& arg1) const;
	explicit OnReceiveContentListener(jobject o) : java::lang::Object(o) {}
	OnReceiveContentListener(const OnReceiveContentListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::OnReceiveContentListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::android::view::ContentInfo OnReceiveContent(const ::android::view::View& arg0, const ::android::view::ContentInfo& arg1) = 0;
	};
};

struct View_OnScrollChangeListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnScrollChange(const ::android::view::View& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4) const;
	explicit View_OnScrollChangeListener(jobject o) : java::lang::Object(o) {}
	View_OnScrollChangeListener(const View_OnScrollChangeListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::View_OnScrollChangeListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnScrollChange(const ::android::view::View& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4) = 0;
	};
};

struct View_OnSystemUiVisibilityChangeListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnSystemUiVisibilityChange(const ::jint& arg0) const;
	explicit View_OnSystemUiVisibilityChangeListener(jobject o) : java::lang::Object(o) {}
	View_OnSystemUiVisibilityChangeListener(const View_OnSystemUiVisibilityChangeListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::View_OnSystemUiVisibilityChangeListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnSystemUiVisibilityChange(const ::jint& arg0) = 0;
	};
};

struct View_OnTouchListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean OnTouch(const ::android::view::View& arg0, const ::android::view::MotionEvent& arg1) const;
	explicit View_OnTouchListener(jobject o) : java::lang::Object(o) {}
	View_OnTouchListener(const View_OnTouchListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::View_OnTouchListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean OnTouch(const ::android::view::View& arg0, const ::android::view::MotionEvent& arg1) = 0;
	};
};

struct ScrollCaptureCallback : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnScrollCaptureEnd(const ::java::lang::Runnable& arg0) const;
	::jvoid OnScrollCaptureImageRequest(const ::android::view::ScrollCaptureSession& arg0, const ::android::os::CancellationSignal& arg1, const ::android::graphics::Rect& arg2, const ::java::util::function::Consumer& arg3) const;
	::jvoid OnScrollCaptureSearch(const ::android::os::CancellationSignal& arg0, const ::java::util::function::Consumer& arg1) const;
	::jvoid OnScrollCaptureStart(const ::android::view::ScrollCaptureSession& arg0, const ::android::os::CancellationSignal& arg1, const ::java::lang::Runnable& arg2) const;
	explicit ScrollCaptureCallback(jobject o) : java::lang::Object(o) {}
	ScrollCaptureCallback(const ScrollCaptureCallback& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::ScrollCaptureCallback();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnScrollCaptureEnd(const ::java::lang::Runnable& arg0) = 0;
		virtual void OnScrollCaptureImageRequest(const ::android::view::ScrollCaptureSession& arg0, const ::android::os::CancellationSignal& arg1, const ::android::graphics::Rect& arg2, const ::java::util::function::Consumer& arg3) = 0;
		virtual void OnScrollCaptureSearch(const ::android::os::CancellationSignal& arg0, const ::java::util::function::Consumer& arg1) = 0;
		virtual void OnScrollCaptureStart(const ::android::view::ScrollCaptureSession& arg0, const ::android::os::CancellationSignal& arg1, const ::java::lang::Runnable& arg2) = 0;
	};
};

struct ScrollCaptureSession : ::java::lang::Object
{
	static jni::Class __CLASS;

	::android::graphics::Point GetPositionInWindow() const;
	::android::graphics::Rect GetScrollBounds() const;
	::android::view::Surface GetSurface() const;
	static jobject __Constructor(const ::android::view::Surface& arg0, const ::android::graphics::Rect& arg1, const ::android::graphics::Point& arg2);
	ScrollCaptureSession(const ::android::view::Surface& arg0, const ::android::graphics::Rect& arg1, const ::android::graphics::Point& arg2) : ::java::lang::Object(__Constructor(arg0, arg1, arg2)) {}
	explicit ScrollCaptureSession(jobject o) : ::java::lang::Object(o) {}
	ScrollCaptureSession(const ScrollCaptureSession& o)  : ::java::lang::Object(o) {}

};

struct Surface : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::jint& fCHANGE_FRAME_RATE_ALWAYS();
	static ::jint& fCHANGE_FRAME_RATE_ONLY_IF_SEAMLESS();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fFRAME_RATE_COMPATIBILITY_DEFAULT();
	static ::jint& fFRAME_RATE_COMPATIBILITY_FIXED_SOURCE();
	static ::jint& fROTATION_0();
	static ::jint& fROTATION_180();
	static ::jint& fROTATION_270();
	static ::jint& fROTATION_90();
	::jint DescribeContents() const;
	::jvoid Finalize() const;
	::jboolean IsValid() const;
	::android::graphics::Canvas LockCanvas(const ::android::graphics::Rect& arg0) const;
	::android::graphics::Canvas LockHardwareCanvas() const;
	::jvoid ReadFromParcel(const ::android::os::Parcel& arg0) const;
	::jvoid Release() const;
	::jvoid SetFrameRate(const ::jfloat& arg0, const ::jint& arg1) const;
	::jvoid SetFrameRate(const ::jfloat& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::java::lang::String ToString() const;
	::jvoid UnlockCanvas(const ::android::graphics::Canvas& arg0) const;
	::jvoid UnlockCanvasAndPost(const ::android::graphics::Canvas& arg0) const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor(const ::android::graphics::SurfaceTexture& arg0);
	Surface(const ::android::graphics::SurfaceTexture& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::view::SurfaceControl& arg0);
	Surface(const ::android::view::SurfaceControl& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit Surface(jobject o) : ::java::lang::Object(o) {}
	Surface(const Surface& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace graphics { 
struct SurfaceTexture : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid AttachToGLContext(const ::jint& arg0) const;
	::jvoid DetachFromGLContext() const;
	::jvoid Finalize() const;
	::jlong GetTimestamp() const;
	::jvoid GetTransformMatrix(const jni::Array< ::jfloat >& arg0) const;
	::jboolean IsReleased() const;
	::jvoid Release() const;
	::jvoid ReleaseTexImage() const;
	::jvoid SetDefaultBufferSize(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid SetOnFrameAvailableListener(const ::android::graphics::SurfaceTexture_OnFrameAvailableListener& arg0) const;
	::jvoid SetOnFrameAvailableListener(const ::android::graphics::SurfaceTexture_OnFrameAvailableListener& arg0, const ::android::os::Handler& arg1) const;
	::jvoid UpdateTexImage() const;
	static jobject __Constructor(const ::jint& arg0);
	SurfaceTexture(const ::jint& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::jint& arg0, const ::jboolean& arg1);
	SurfaceTexture(const ::jint& arg0, const ::jboolean& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::jboolean& arg0);
	SurfaceTexture(const ::jboolean& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit SurfaceTexture(jobject o) : ::java::lang::Object(o) {}
	SurfaceTexture(const SurfaceTexture& o)  : ::java::lang::Object(o) {}

};

struct SurfaceTexture_OnFrameAvailableListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnFrameAvailable(const ::android::graphics::SurfaceTexture& arg0) const;
	explicit SurfaceTexture_OnFrameAvailableListener(jobject o) : java::lang::Object(o) {}
	SurfaceTexture_OnFrameAvailableListener(const SurfaceTexture_OnFrameAvailableListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::graphics::SurfaceTexture_OnFrameAvailableListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnFrameAvailable(const ::android::graphics::SurfaceTexture& arg0) = 0;
	};
};

}}

namespace android { namespace view { namespace translation { 
struct ViewTranslationCallback : java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean OnClearTranslation(const ::android::view::View& arg0) const;
	::jboolean OnHideTranslation(const ::android::view::View& arg0) const;
	::jboolean OnShowTranslation(const ::android::view::View& arg0) const;
	explicit ViewTranslationCallback(jobject o) : java::lang::Object(o) {}
	ViewTranslationCallback(const ViewTranslationCallback& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::translation::ViewTranslationCallback();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean OnClearTranslation(const ::android::view::View& arg0) = 0;
		virtual ::jboolean OnHideTranslation(const ::android::view::View& arg0) = 0;
		virtual ::jboolean OnShowTranslation(const ::android::view::View& arg0) = 0;
	};
};

}}}

namespace android { namespace view { 
struct View_DragShadowBuilder : ::java::lang::Object
{
	static jni::Class __CLASS;

	::android::view::View GetView() const;
	::jvoid OnDrawShadow(const ::android::graphics::Canvas& arg0) const;
	::jvoid OnProvideShadowMetrics(const ::android::graphics::Point& arg0, const ::android::graphics::Point& arg1) const;
	static jobject __Constructor();
	View_DragShadowBuilder() : ::java::lang::Object(__Constructor()) {}
	static jobject __Constructor(const ::android::view::View& arg0);
	View_DragShadowBuilder(const ::android::view::View& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit View_DragShadowBuilder(jobject o) : ::java::lang::Object(o) {}
	View_DragShadowBuilder(const View_DragShadowBuilder& o)  : ::java::lang::Object(o) {}

};

struct Window_Callback : java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean DispatchGenericMotionEvent(const ::android::view::MotionEvent& arg0) const;
	::jboolean DispatchKeyEvent(const ::android::view::KeyEvent& arg0) const;
	::jboolean DispatchKeyShortcutEvent(const ::android::view::KeyEvent& arg0) const;
	::jboolean DispatchPopulateAccessibilityEvent(const ::android::view::accessibility::AccessibilityEvent& arg0) const;
	::jboolean DispatchTouchEvent(const ::android::view::MotionEvent& arg0) const;
	::jboolean DispatchTrackballEvent(const ::android::view::MotionEvent& arg0) const;
	::jvoid OnActionModeFinished(const ::android::view::ActionMode& arg0) const;
	::jvoid OnActionModeStarted(const ::android::view::ActionMode& arg0) const;
	::jvoid OnAttachedToWindow() const;
	::jvoid OnContentChanged() const;
	::jboolean OnCreatePanelMenu(const ::jint& arg0, const ::android::view::Menu& arg1) const;
	::android::view::View OnCreatePanelView(const ::jint& arg0) const;
	::jvoid OnDetachedFromWindow() const;
	::jboolean OnMenuItemSelected(const ::jint& arg0, const ::android::view::MenuItem& arg1) const;
	::jboolean OnMenuOpened(const ::jint& arg0, const ::android::view::Menu& arg1) const;
	::jvoid OnPanelClosed(const ::jint& arg0, const ::android::view::Menu& arg1) const;
	::jvoid OnPointerCaptureChanged(const ::jboolean& arg0) const;
	::jboolean OnPreparePanel(const ::jint& arg0, const ::android::view::View& arg1, const ::android::view::Menu& arg2) const;
	::jvoid OnProvideKeyboardShortcuts(const ::java::util::List& arg0, const ::android::view::Menu& arg1, const ::jint& arg2) const;
	::jboolean OnSearchRequested() const;
	::jboolean OnSearchRequested(const ::android::view::SearchEvent& arg0) const;
	::jvoid OnWindowAttributesChanged(const ::android::view::WindowManager_LayoutParams& arg0) const;
	::jvoid OnWindowFocusChanged(const ::jboolean& arg0) const;
	::android::view::ActionMode OnWindowStartingActionMode(const ::android::view::ActionMode_Callback& arg0) const;
	::android::view::ActionMode OnWindowStartingActionMode(const ::android::view::ActionMode_Callback& arg0, const ::jint& arg1) const;
	explicit Window_Callback(jobject o) : java::lang::Object(o) {}
	Window_Callback(const Window_Callback& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::Window_Callback();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean DispatchGenericMotionEvent(const ::android::view::MotionEvent& arg0) = 0;
		virtual ::jboolean DispatchKeyEvent(const ::android::view::KeyEvent& arg0) = 0;
		virtual ::jboolean DispatchKeyShortcutEvent(const ::android::view::KeyEvent& arg0) = 0;
		virtual ::jboolean DispatchPopulateAccessibilityEvent(const ::android::view::accessibility::AccessibilityEvent& arg0) = 0;
		virtual ::jboolean DispatchTouchEvent(const ::android::view::MotionEvent& arg0) = 0;
		virtual ::jboolean DispatchTrackballEvent(const ::android::view::MotionEvent& arg0) = 0;
		virtual void OnActionModeFinished(const ::android::view::ActionMode& arg0) = 0;
		virtual void OnActionModeStarted(const ::android::view::ActionMode& arg0) = 0;
		virtual void OnAttachedToWindow() = 0;
		virtual void OnContentChanged() = 0;
		virtual ::jboolean OnCreatePanelMenu(const ::jint& arg0, const ::android::view::Menu& arg1) = 0;
		virtual ::android::view::View OnCreatePanelView(const ::jint& arg0) = 0;
		virtual void OnDetachedFromWindow() = 0;
		virtual ::jboolean OnMenuItemSelected(const ::jint& arg0, const ::android::view::MenuItem& arg1) = 0;
		virtual ::jboolean OnMenuOpened(const ::jint& arg0, const ::android::view::Menu& arg1) = 0;
		virtual void OnPanelClosed(const ::jint& arg0, const ::android::view::Menu& arg1) = 0;
		virtual void OnPointerCaptureChanged(const ::jboolean& arg0) = 0;
		virtual ::jboolean OnPreparePanel(const ::jint& arg0, const ::android::view::View& arg1, const ::android::view::Menu& arg2) = 0;
		virtual void OnProvideKeyboardShortcuts(const ::java::util::List& arg0, const ::android::view::Menu& arg1, const ::jint& arg2) = 0;
		virtual ::jboolean OnSearchRequested() = 0;
		virtual ::jboolean OnSearchRequested(const ::android::view::SearchEvent& arg0) = 0;
		virtual void OnWindowAttributesChanged(const ::android::view::WindowManager_LayoutParams& arg0) = 0;
		virtual void OnWindowFocusChanged(const ::jboolean& arg0) = 0;
		virtual ::android::view::ActionMode OnWindowStartingActionMode(const ::android::view::ActionMode_Callback& arg0) = 0;
		virtual ::android::view::ActionMode OnWindowStartingActionMode(const ::android::view::ActionMode_Callback& arg0, const ::jint& arg1) = 0;
	};
};

struct SearchEvent : ::java::lang::Object
{
	static jni::Class __CLASS;

	::android::view::InputDevice GetInputDevice() const;
	static jobject __Constructor(const ::android::view::InputDevice& arg0);
	SearchEvent(const ::android::view::InputDevice& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit SearchEvent(jobject o) : ::java::lang::Object(o) {}
	SearchEvent(const SearchEvent& o)  : ::java::lang::Object(o) {}

};

struct WindowManager_LayoutParams : ::android::view::ViewGroup_LayoutParams
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::jint& fALPHA_CHANGED();
	static ::jint& fANIMATION_CHANGED();
	static ::jfloat& fBRIGHTNESS_OVERRIDE_FULL();
	static ::jfloat& fBRIGHTNESS_OVERRIDE_NONE();
	static ::jfloat& fBRIGHTNESS_OVERRIDE_OFF();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fDIM_AMOUNT_CHANGED();
	static ::jint& fFIRST_APPLICATION_WINDOW();
	static ::jint& fFIRST_SUB_WINDOW();
	static ::jint& fFIRST_SYSTEM_WINDOW();
	static ::jint& fFLAGS_CHANGED();
	static ::jint& fFLAG_ALLOW_LOCK_WHILE_SCREEN_ON();
	static ::jint& fFLAG_ALT_FOCUSABLE_IM();
	static ::jint& fFLAG_BLUR_BEHIND();
	static ::jint& fFLAG_DIM_BEHIND();
	static ::jint& fFLAG_DISMISS_KEYGUARD();
	static ::jint& fFLAG_DITHER();
	static ::jint& fFLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS();
	static ::jint& fFLAG_FORCE_NOT_FULLSCREEN();
	static ::jint& fFLAG_FULLSCREEN();
	static ::jint& fFLAG_HARDWARE_ACCELERATED();
	static ::jint& fFLAG_IGNORE_CHEEK_PRESSES();
	static ::jint& fFLAG_KEEP_SCREEN_ON();
	static ::jint& fFLAG_LAYOUT_ATTACHED_IN_DECOR();
	static ::jint& fFLAG_LAYOUT_INSET_DECOR();
	static ::jint& fFLAG_LAYOUT_IN_OVERSCAN();
	static ::jint& fFLAG_LAYOUT_IN_SCREEN();
	static ::jint& fFLAG_LAYOUT_NO_LIMITS();
	static ::jint& fFLAG_LOCAL_FOCUS_MODE();
	static ::jint& fFLAG_NOT_FOCUSABLE();
	static ::jint& fFLAG_NOT_TOUCHABLE();
	static ::jint& fFLAG_NOT_TOUCH_MODAL();
	static ::jint& fFLAG_SCALED();
	static ::jint& fFLAG_SECURE();
	static ::jint& fFLAG_SHOW_WALLPAPER();
	static ::jint& fFLAG_SHOW_WHEN_LOCKED();
	static ::jint& fFLAG_SPLIT_TOUCH();
	static ::jint& fFLAG_TOUCHABLE_WHEN_WAKING();
	static ::jint& fFLAG_TRANSLUCENT_NAVIGATION();
	static ::jint& fFLAG_TRANSLUCENT_STATUS();
	static ::jint& fFLAG_TURN_SCREEN_ON();
	static ::jint& fFLAG_WATCH_OUTSIDE_TOUCH();
	static ::jint& fFORMAT_CHANGED();
	static ::jint& fLAST_APPLICATION_WINDOW();
	static ::jint& fLAST_SUB_WINDOW();
	static ::jint& fLAST_SYSTEM_WINDOW();
	static ::jint& fLAYOUT_CHANGED();
	static ::jint& fLAYOUT_IN_DISPLAY_CUTOUT_MODE_ALWAYS();
	static ::jint& fLAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT();
	static ::jint& fLAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER();
	static ::jint& fLAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES();
	static ::jint& fMEMORY_TYPE_CHANGED();
	static ::jint& fMEMORY_TYPE_GPU();
	static ::jint& fMEMORY_TYPE_HARDWARE();
	static ::jint& fMEMORY_TYPE_NORMAL();
	static ::jint& fMEMORY_TYPE_PUSH_BUFFERS();
	static ::jint& fROTATION_ANIMATION_CHANGED();
	static ::jint& fROTATION_ANIMATION_CROSSFADE();
	static ::jint& fROTATION_ANIMATION_JUMPCUT();
	static ::jint& fROTATION_ANIMATION_ROTATE();
	static ::jint& fROTATION_ANIMATION_SEAMLESS();
	static ::jint& fSCREEN_BRIGHTNESS_CHANGED();
	static ::jint& fSCREEN_ORIENTATION_CHANGED();
	static ::jint& fSOFT_INPUT_ADJUST_NOTHING();
	static ::jint& fSOFT_INPUT_ADJUST_PAN();
	static ::jint& fSOFT_INPUT_ADJUST_RESIZE();
	static ::jint& fSOFT_INPUT_ADJUST_UNSPECIFIED();
	static ::jint& fSOFT_INPUT_IS_FORWARD_NAVIGATION();
	static ::jint& fSOFT_INPUT_MASK_ADJUST();
	static ::jint& fSOFT_INPUT_MASK_STATE();
	static ::jint& fSOFT_INPUT_MODE_CHANGED();
	static ::jint& fSOFT_INPUT_STATE_ALWAYS_HIDDEN();
	static ::jint& fSOFT_INPUT_STATE_ALWAYS_VISIBLE();
	static ::jint& fSOFT_INPUT_STATE_HIDDEN();
	static ::jint& fSOFT_INPUT_STATE_UNCHANGED();
	static ::jint& fSOFT_INPUT_STATE_UNSPECIFIED();
	static ::jint& fSOFT_INPUT_STATE_VISIBLE();
	static ::jint& fTITLE_CHANGED();
	static ::jint& fTYPE_ACCESSIBILITY_OVERLAY();
	static ::jint& fTYPE_APPLICATION();
	static ::jint& fTYPE_APPLICATION_ATTACHED_DIALOG();
	static ::jint& fTYPE_APPLICATION_MEDIA();
	static ::jint& fTYPE_APPLICATION_OVERLAY();
	static ::jint& fTYPE_APPLICATION_PANEL();
	static ::jint& fTYPE_APPLICATION_STARTING();
	static ::jint& fTYPE_APPLICATION_SUB_PANEL();
	static ::jint& fTYPE_BASE_APPLICATION();
	static ::jint& fTYPE_CHANGED();
	static ::jint& fTYPE_DRAWN_APPLICATION();
	static ::jint& fTYPE_INPUT_METHOD();
	static ::jint& fTYPE_INPUT_METHOD_DIALOG();
	static ::jint& fTYPE_KEYGUARD_DIALOG();
	static ::jint& fTYPE_PHONE();
	static ::jint& fTYPE_PRIORITY_PHONE();
	static ::jint& fTYPE_PRIVATE_PRESENTATION();
	static ::jint& fTYPE_SEARCH_BAR();
	static ::jint& fTYPE_STATUS_BAR();
	static ::jint& fTYPE_SYSTEM_ALERT();
	static ::jint& fTYPE_SYSTEM_DIALOG();
	static ::jint& fTYPE_SYSTEM_ERROR();
	static ::jint& fTYPE_SYSTEM_OVERLAY();
	static ::jint& fTYPE_TOAST();
	static ::jint& fTYPE_WALLPAPER();
	::jfloat fAlpha() const;
	void fAlpha(const ::jfloat& arg0) const;
	::jfloat fButtonBrightness() const;
	void fButtonBrightness(const ::jfloat& arg0) const;
	::jfloat fDimAmount() const;
	void fDimAmount(const ::jfloat& arg0) const;
	::jint fFlags() const;
	void fFlags(const ::jint& arg0) const;
	::jint fFormat() const;
	void fFormat(const ::jint& arg0) const;
	::jint fGravity() const;
	void fGravity(const ::jint& arg0) const;
	::jfloat fHorizontalMargin() const;
	void fHorizontalMargin(const ::jfloat& arg0) const;
	::jfloat fHorizontalWeight() const;
	void fHorizontalWeight(const ::jfloat& arg0) const;
	::jint fLayoutInDisplayCutoutMode() const;
	void fLayoutInDisplayCutoutMode(const ::jint& arg0) const;
	::jint fMemoryType() const;
	void fMemoryType(const ::jint& arg0) const;
	::java::lang::String fPackageName() const;
	void fPackageName(const ::java::lang::String& arg0) const;
	::jboolean fPreferMinimalPostProcessing() const;
	void fPreferMinimalPostProcessing(const ::jboolean& arg0) const;
	::jint fPreferredDisplayModeId() const;
	void fPreferredDisplayModeId(const ::jint& arg0) const;
	::jfloat fPreferredRefreshRate() const;
	void fPreferredRefreshRate(const ::jfloat& arg0) const;
	::jint fRotationAnimation() const;
	void fRotationAnimation(const ::jint& arg0) const;
	::jfloat fScreenBrightness() const;
	void fScreenBrightness(const ::jfloat& arg0) const;
	::jint fScreenOrientation() const;
	void fScreenOrientation(const ::jint& arg0) const;
	::jint fSoftInputMode() const;
	void fSoftInputMode(const ::jint& arg0) const;
	::jint fSystemUiVisibility() const;
	void fSystemUiVisibility(const ::jint& arg0) const;
	::android::os::IBinder fToken() const;
	void fToken(const ::android::os::IBinder& arg0) const;
	::jint fType() const;
	void fType(const ::jint& arg0) const;
	::jfloat fVerticalMargin() const;
	void fVerticalMargin(const ::jfloat& arg0) const;
	::jfloat fVerticalWeight() const;
	void fVerticalWeight(const ::jfloat& arg0) const;
	::jint fWindowAnimations() const;
	void fWindowAnimations(const ::jint& arg0) const;
	::jint fX() const;
	void fX(const ::jint& arg0) const;
	::jint fY() const;
	void fY(const ::jint& arg0) const;
	::jint CopyFrom(const ::android::view::WindowManager_LayoutParams& arg0) const;
	::java::lang::String Debug(const ::java::lang::String& arg0) const;
	::jint DescribeContents() const;
	::jint GetBlurBehindRadius() const;
	::jint GetColorMode() const;
	::jint GetFitInsetsSides() const;
	::jint GetFitInsetsTypes() const;
	::java::lang::CharSequence GetTitle() const;
	::jboolean IsFitInsetsIgnoringVisibility() const;
	static ::jboolean MayUseInputMethod(const ::jint& arg0);
	::jvoid SetBlurBehindRadius(const ::jint& arg0) const;
	::jvoid SetColorMode(const ::jint& arg0) const;
	::jvoid SetFitInsetsIgnoringVisibility(const ::jboolean& arg0) const;
	::jvoid SetFitInsetsSides(const ::jint& arg0) const;
	::jvoid SetFitInsetsTypes(const ::jint& arg0) const;
	::jvoid SetTitle(const ::java::lang::CharSequence& arg0) const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor();
	WindowManager_LayoutParams() : ::android::view::ViewGroup_LayoutParams(__Constructor()) {}
	static jobject __Constructor(const ::jint& arg0);
	WindowManager_LayoutParams(const ::jint& arg0) : ::android::view::ViewGroup_LayoutParams(__Constructor(arg0)) {}
	static jobject __Constructor(const ::jint& arg0, const ::jint& arg1);
	WindowManager_LayoutParams(const ::jint& arg0, const ::jint& arg1) : ::android::view::ViewGroup_LayoutParams(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2);
	WindowManager_LayoutParams(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2) : ::android::view::ViewGroup_LayoutParams(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4);
	WindowManager_LayoutParams(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4) : ::android::view::ViewGroup_LayoutParams(__Constructor(arg0, arg1, arg2, arg3, arg4)) {}
	static jobject __Constructor(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5, const ::jint& arg6);
	WindowManager_LayoutParams(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5, const ::jint& arg6) : ::android::view::ViewGroup_LayoutParams(__Constructor(arg0, arg1, arg2, arg3, arg4, arg5, arg6)) {}
	static jobject __Constructor(const ::android::os::Parcel& arg0);
	WindowManager_LayoutParams(const ::android::os::Parcel& arg0) : ::android::view::ViewGroup_LayoutParams(__Constructor(arg0)) {}
	explicit WindowManager_LayoutParams(jobject o) : ::android::view::ViewGroup_LayoutParams(o) {}
	WindowManager_LayoutParams(const WindowManager_LayoutParams& o)  : ::android::view::ViewGroup_LayoutParams(o) {}

};

}}

namespace android { namespace app { 
struct PendingIntent : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fFLAG_CANCEL_CURRENT();
	static ::jint& fFLAG_IMMUTABLE();
	static ::jint& fFLAG_MUTABLE();
	static ::jint& fFLAG_NO_CREATE();
	static ::jint& fFLAG_ONE_SHOT();
	static ::jint& fFLAG_UPDATE_CURRENT();
	::jvoid Cancel() const;
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	static ::android::app::PendingIntent GetActivities(const ::android::content::Context& arg0, const ::jint& arg1, const jni::Array< ::android::content::Intent >& arg2, const ::jint& arg3);
	static ::android::app::PendingIntent GetActivities(const ::android::content::Context& arg0, const ::jint& arg1, const jni::Array< ::android::content::Intent >& arg2, const ::jint& arg3, const ::android::os::Bundle& arg4);
	static ::android::app::PendingIntent GetActivity(const ::android::content::Context& arg0, const ::jint& arg1, const ::android::content::Intent& arg2, const ::jint& arg3);
	static ::android::app::PendingIntent GetActivity(const ::android::content::Context& arg0, const ::jint& arg1, const ::android::content::Intent& arg2, const ::jint& arg3, const ::android::os::Bundle& arg4);
	static ::android::app::PendingIntent GetBroadcast(const ::android::content::Context& arg0, const ::jint& arg1, const ::android::content::Intent& arg2, const ::jint& arg3);
	::java::lang::String GetCreatorPackage() const;
	::jint GetCreatorUid() const;
	::android::os::UserHandle GetCreatorUserHandle() const;
	static ::android::app::PendingIntent GetForegroundService(const ::android::content::Context& arg0, const ::jint& arg1, const ::android::content::Intent& arg2, const ::jint& arg3);
	::android::content::IntentSender GetIntentSender() const;
	static ::android::app::PendingIntent GetService(const ::android::content::Context& arg0, const ::jint& arg1, const ::android::content::Intent& arg2, const ::jint& arg3);
	::java::lang::String GetTargetPackage() const;
	::jint HashCode() const;
	::jboolean IsActivity() const;
	::jboolean IsBroadcast() const;
	::jboolean IsForegroundService() const;
	::jboolean IsImmutable() const;
	::jboolean IsService() const;
	static ::android::app::PendingIntent ReadPendingIntentOrNullFromParcel(const ::android::os::Parcel& arg0);
	::jvoid Send() const;
	::jvoid Send(const ::jint& arg0) const;
	::jvoid Send(const ::jint& arg0, const ::android::app::PendingIntent_OnFinished& arg1, const ::android::os::Handler& arg2) const;
	::jvoid Send(const ::android::content::Context& arg0, const ::jint& arg1, const ::android::content::Intent& arg2) const;
	::jvoid Send(const ::android::content::Context& arg0, const ::jint& arg1, const ::android::content::Intent& arg2, const ::android::app::PendingIntent_OnFinished& arg3, const ::android::os::Handler& arg4) const;
	::jvoid Send(const ::android::content::Context& arg0, const ::jint& arg1, const ::android::content::Intent& arg2, const ::android::app::PendingIntent_OnFinished& arg3, const ::android::os::Handler& arg4, const ::java::lang::String& arg5) const;
	::jvoid Send(const ::android::content::Context& arg0, const ::jint& arg1, const ::android::content::Intent& arg2, const ::android::app::PendingIntent_OnFinished& arg3, const ::android::os::Handler& arg4, const ::java::lang::String& arg5, const ::android::os::Bundle& arg6) const;
	::java::lang::String ToString() const;
	static ::jvoid WritePendingIntentOrNullToParcel(const ::android::app::PendingIntent& arg0, const ::android::os::Parcel& arg1);
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit PendingIntent(jobject o) : ::java::lang::Object(o) {}
	PendingIntent(const PendingIntent& o)  : ::java::lang::Object(o) {}

};

struct PendingIntent_OnFinished : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnSendFinished(const ::android::app::PendingIntent& arg0, const ::android::content::Intent& arg1, const ::jint& arg2, const ::java::lang::String& arg3, const ::android::os::Bundle& arg4) const;
	explicit PendingIntent_OnFinished(jobject o) : java::lang::Object(o) {}
	PendingIntent_OnFinished(const PendingIntent_OnFinished& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::app::PendingIntent_OnFinished();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnSendFinished(const ::android::app::PendingIntent& arg0, const ::android::content::Intent& arg1, const ::jint& arg2, const ::java::lang::String& arg3, const ::android::os::Bundle& arg4) = 0;
	};
};

struct PictureInPictureParams : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint HashCode() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit PictureInPictureParams(jobject o) : ::java::lang::Object(o) {}
	PictureInPictureParams(const PictureInPictureParams& o)  : ::java::lang::Object(o) {}

};

struct ActionBar : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fDISPLAY_HOME_AS_UP();
	static ::jint& fDISPLAY_SHOW_CUSTOM();
	static ::jint& fDISPLAY_SHOW_HOME();
	static ::jint& fDISPLAY_SHOW_TITLE();
	static ::jint& fDISPLAY_USE_LOGO();
	static ::jint& fNAVIGATION_MODE_LIST();
	static ::jint& fNAVIGATION_MODE_STANDARD();
	static ::jint& fNAVIGATION_MODE_TABS();
	::jvoid AddOnMenuVisibilityListener(const ::android::app::ActionBar_OnMenuVisibilityListener& arg0) const;
	::jvoid AddTab(const ::android::app::ActionBar_Tab& arg0) const;
	::jvoid AddTab(const ::android::app::ActionBar_Tab& arg0, const ::jint& arg1) const;
	::jvoid AddTab(const ::android::app::ActionBar_Tab& arg0, const ::jint& arg1, const ::jboolean& arg2) const;
	::jvoid AddTab(const ::android::app::ActionBar_Tab& arg0, const ::jboolean& arg1) const;
	::android::view::View GetCustomView() const;
	::jint GetDisplayOptions() const;
	::jfloat GetElevation() const;
	::jint GetHeight() const;
	::jint GetHideOffset() const;
	::jint GetNavigationItemCount() const;
	::jint GetNavigationMode() const;
	::jint GetSelectedNavigationIndex() const;
	::android::app::ActionBar_Tab GetSelectedTab() const;
	::java::lang::CharSequence GetSubtitle() const;
	::android::app::ActionBar_Tab GetTabAt(const ::jint& arg0) const;
	::jint GetTabCount() const;
	::android::content::Context GetThemedContext() const;
	::java::lang::CharSequence GetTitle() const;
	::jvoid Hide() const;
	::jboolean IsHideOnContentScrollEnabled() const;
	::jboolean IsShowing() const;
	::android::app::ActionBar_Tab NewTab() const;
	::jvoid RemoveAllTabs() const;
	::jvoid RemoveOnMenuVisibilityListener(const ::android::app::ActionBar_OnMenuVisibilityListener& arg0) const;
	::jvoid RemoveTab(const ::android::app::ActionBar_Tab& arg0) const;
	::jvoid RemoveTabAt(const ::jint& arg0) const;
	::jvoid SelectTab(const ::android::app::ActionBar_Tab& arg0) const;
	::jvoid SetBackgroundDrawable(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid SetCustomView(const ::jint& arg0) const;
	::jvoid SetCustomView(const ::android::view::View& arg0) const;
	::jvoid SetCustomView(const ::android::view::View& arg0, const ::android::app::ActionBar_LayoutParams& arg1) const;
	::jvoid SetDisplayHomeAsUpEnabled(const ::jboolean& arg0) const;
	::jvoid SetDisplayOptions(const ::jint& arg0) const;
	::jvoid SetDisplayOptions(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid SetDisplayShowCustomEnabled(const ::jboolean& arg0) const;
	::jvoid SetDisplayShowHomeEnabled(const ::jboolean& arg0) const;
	::jvoid SetDisplayShowTitleEnabled(const ::jboolean& arg0) const;
	::jvoid SetDisplayUseLogoEnabled(const ::jboolean& arg0) const;
	::jvoid SetElevation(const ::jfloat& arg0) const;
	::jvoid SetHideOffset(const ::jint& arg0) const;
	::jvoid SetHideOnContentScrollEnabled(const ::jboolean& arg0) const;
	::jvoid SetHomeActionContentDescription(const ::jint& arg0) const;
	::jvoid SetHomeActionContentDescription(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetHomeAsUpIndicator(const ::jint& arg0) const;
	::jvoid SetHomeAsUpIndicator(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid SetHomeButtonEnabled(const ::jboolean& arg0) const;
	::jvoid SetIcon(const ::jint& arg0) const;
	::jvoid SetIcon(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid SetListNavigationCallbacks(const ::android::widget::SpinnerAdapter& arg0, const ::android::app::ActionBar_OnNavigationListener& arg1) const;
	::jvoid SetLogo(const ::jint& arg0) const;
	::jvoid SetLogo(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid SetNavigationMode(const ::jint& arg0) const;
	::jvoid SetSelectedNavigationItem(const ::jint& arg0) const;
	::jvoid SetSplitBackgroundDrawable(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid SetStackedBackgroundDrawable(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid SetSubtitle(const ::jint& arg0) const;
	::jvoid SetSubtitle(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetTitle(const ::jint& arg0) const;
	::jvoid SetTitle(const ::java::lang::CharSequence& arg0) const;
	::jvoid Show() const;
	static jobject __Constructor();
	ActionBar() : ::java::lang::Object(__Constructor()) {}
	explicit ActionBar(jobject o) : ::java::lang::Object(o) {}
	ActionBar(const ActionBar& o)  : ::java::lang::Object(o) {}

};

struct ActionBar_OnMenuVisibilityListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnMenuVisibilityChanged(const ::jboolean& arg0) const;
	explicit ActionBar_OnMenuVisibilityListener(jobject o) : java::lang::Object(o) {}
	ActionBar_OnMenuVisibilityListener(const ActionBar_OnMenuVisibilityListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::app::ActionBar_OnMenuVisibilityListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnMenuVisibilityChanged(const ::jboolean& arg0) = 0;
	};
};

struct ActionBar_Tab : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fINVALID_POSITION();
	::java::lang::CharSequence GetContentDescription() const;
	::android::view::View GetCustomView() const;
	::android::graphics::drawable::Drawable GetIcon() const;
	::jint GetPosition() const;
	::java::lang::Object GetTag() const;
	::java::lang::CharSequence GetText() const;
	::jvoid Select() const;
	::android::app::ActionBar_Tab SetContentDescription(const ::jint& arg0) const;
	::android::app::ActionBar_Tab SetContentDescription(const ::java::lang::CharSequence& arg0) const;
	::android::app::ActionBar_Tab SetCustomView(const ::jint& arg0) const;
	::android::app::ActionBar_Tab SetCustomView(const ::android::view::View& arg0) const;
	::android::app::ActionBar_Tab SetIcon(const ::jint& arg0) const;
	::android::app::ActionBar_Tab SetIcon(const ::android::graphics::drawable::Drawable& arg0) const;
	::android::app::ActionBar_Tab SetTabListener(const ::android::app::ActionBar_TabListener& arg0) const;
	::android::app::ActionBar_Tab SetTag(const ::java::lang::Object& arg0) const;
	::android::app::ActionBar_Tab SetText(const ::jint& arg0) const;
	::android::app::ActionBar_Tab SetText(const ::java::lang::CharSequence& arg0) const;
	static jobject __Constructor();
	ActionBar_Tab() : ::java::lang::Object(__Constructor()) {}
	explicit ActionBar_Tab(jobject o) : ::java::lang::Object(o) {}
	ActionBar_Tab(const ActionBar_Tab& o)  : ::java::lang::Object(o) {}

};

struct ActionBar_TabListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnTabReselected(const ::android::app::ActionBar_Tab& arg0, const ::android::app::FragmentTransaction& arg1) const;
	::jvoid OnTabSelected(const ::android::app::ActionBar_Tab& arg0, const ::android::app::FragmentTransaction& arg1) const;
	::jvoid OnTabUnselected(const ::android::app::ActionBar_Tab& arg0, const ::android::app::FragmentTransaction& arg1) const;
	explicit ActionBar_TabListener(jobject o) : java::lang::Object(o) {}
	ActionBar_TabListener(const ActionBar_TabListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::app::ActionBar_TabListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnTabReselected(const ::android::app::ActionBar_Tab& arg0, const ::android::app::FragmentTransaction& arg1) = 0;
		virtual void OnTabSelected(const ::android::app::ActionBar_Tab& arg0, const ::android::app::FragmentTransaction& arg1) = 0;
		virtual void OnTabUnselected(const ::android::app::ActionBar_Tab& arg0, const ::android::app::FragmentTransaction& arg1) = 0;
	};
};

struct FragmentTransaction : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fTRANSIT_ENTER_MASK();
	static ::jint& fTRANSIT_EXIT_MASK();
	static ::jint& fTRANSIT_FRAGMENT_CLOSE();
	static ::jint& fTRANSIT_FRAGMENT_FADE();
	static ::jint& fTRANSIT_FRAGMENT_OPEN();
	static ::jint& fTRANSIT_NONE();
	static ::jint& fTRANSIT_UNSET();
	::android::app::FragmentTransaction Add(const ::jint& arg0, const ::android::app::Fragment& arg1) const;
	::android::app::FragmentTransaction Add(const ::jint& arg0, const ::android::app::Fragment& arg1, const ::java::lang::String& arg2) const;
	::android::app::FragmentTransaction Add(const ::android::app::Fragment& arg0, const ::java::lang::String& arg1) const;
	::android::app::FragmentTransaction AddSharedElement(const ::android::view::View& arg0, const ::java::lang::String& arg1) const;
	::android::app::FragmentTransaction AddToBackStack(const ::java::lang::String& arg0) const;
	::android::app::FragmentTransaction Attach(const ::android::app::Fragment& arg0) const;
	::jint Commit() const;
	::jint CommitAllowingStateLoss() const;
	::jvoid CommitNow() const;
	::jvoid CommitNowAllowingStateLoss() const;
	::android::app::FragmentTransaction Detach(const ::android::app::Fragment& arg0) const;
	::android::app::FragmentTransaction DisallowAddToBackStack() const;
	::android::app::FragmentTransaction Hide(const ::android::app::Fragment& arg0) const;
	::jboolean IsAddToBackStackAllowed() const;
	::jboolean IsEmpty() const;
	::android::app::FragmentTransaction Remove(const ::android::app::Fragment& arg0) const;
	::android::app::FragmentTransaction Replace(const ::jint& arg0, const ::android::app::Fragment& arg1) const;
	::android::app::FragmentTransaction Replace(const ::jint& arg0, const ::android::app::Fragment& arg1, const ::java::lang::String& arg2) const;
	::android::app::FragmentTransaction RunOnCommit(const ::java::lang::Runnable& arg0) const;
	::android::app::FragmentTransaction SetBreadCrumbShortTitle(const ::jint& arg0) const;
	::android::app::FragmentTransaction SetBreadCrumbShortTitle(const ::java::lang::CharSequence& arg0) const;
	::android::app::FragmentTransaction SetBreadCrumbTitle(const ::jint& arg0) const;
	::android::app::FragmentTransaction SetBreadCrumbTitle(const ::java::lang::CharSequence& arg0) const;
	::android::app::FragmentTransaction SetCustomAnimations(const ::jint& arg0, const ::jint& arg1) const;
	::android::app::FragmentTransaction SetCustomAnimations(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::android::app::FragmentTransaction SetPrimaryNavigationFragment(const ::android::app::Fragment& arg0) const;
	::android::app::FragmentTransaction SetReorderingAllowed(const ::jboolean& arg0) const;
	::android::app::FragmentTransaction SetTransition(const ::jint& arg0) const;
	::android::app::FragmentTransaction SetTransitionStyle(const ::jint& arg0) const;
	::android::app::FragmentTransaction Show(const ::android::app::Fragment& arg0) const;
	static jobject __Constructor();
	FragmentTransaction() : ::java::lang::Object(__Constructor()) {}
	explicit FragmentTransaction(jobject o) : ::java::lang::Object(o) {}
	FragmentTransaction(const FragmentTransaction& o)  : ::java::lang::Object(o) {}

};

struct Fragment : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::content::ComponentCallbacks2();
	operator ::android::view::View_OnCreateContextMenuListener();
	::jvoid Dump(const ::java::lang::String& arg0, const ::java::io::FileDescriptor& arg1, const ::java::io::PrintWriter& arg2, const jni::Array< ::java::lang::String >& arg3) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::android::app::Activity GetActivity() const;
	::jboolean GetAllowEnterTransitionOverlap() const;
	::jboolean GetAllowReturnTransitionOverlap() const;
	::android::os::Bundle GetArguments() const;
	::android::app::FragmentManager GetChildFragmentManager() const;
	::android::content::Context GetContext() const;
	::android::transition::Transition GetEnterTransition() const;
	::android::transition::Transition GetExitTransition() const;
	::android::app::FragmentManager GetFragmentManager() const;
	::java::lang::Object GetHost() const;
	::jint GetId() const;
	::android::view::LayoutInflater GetLayoutInflater() const;
	::android::app::LoaderManager GetLoaderManager() const;
	::android::app::Fragment GetParentFragment() const;
	::android::transition::Transition GetReenterTransition() const;
	::android::content::res::Resources GetResources() const;
	::jboolean GetRetainInstance() const;
	::android::transition::Transition GetReturnTransition() const;
	::android::transition::Transition GetSharedElementEnterTransition() const;
	::android::transition::Transition GetSharedElementReturnTransition() const;
	::java::lang::String GetString(const ::jint& arg0) const;
	::java::lang::String GetString(const ::jint& arg0, const jni::Array< ::java::lang::Object >& arg1) const;
	::java::lang::String GetTag() const;
	::android::app::Fragment GetTargetFragment() const;
	::jint GetTargetRequestCode() const;
	::java::lang::CharSequence GetText(const ::jint& arg0) const;
	::jboolean GetUserVisibleHint() const;
	::android::view::View GetView() const;
	::jint HashCode() const;
	static ::android::app::Fragment Instantiate(const ::android::content::Context& arg0, const ::java::lang::String& arg1);
	static ::android::app::Fragment Instantiate(const ::android::content::Context& arg0, const ::java::lang::String& arg1, const ::android::os::Bundle& arg2);
	::jboolean IsAdded() const;
	::jboolean IsDetached() const;
	::jboolean IsHidden() const;
	::jboolean IsInLayout() const;
	::jboolean IsRemoving() const;
	::jboolean IsResumed() const;
	::jboolean IsStateSaved() const;
	::jboolean IsVisible() const;
	::jvoid OnActivityCreated(const ::android::os::Bundle& arg0) const;
	::jvoid OnActivityResult(const ::jint& arg0, const ::jint& arg1, const ::android::content::Intent& arg2) const;
	::jvoid OnAttach(const ::android::app::Activity& arg0) const;
	::jvoid OnAttach(const ::android::content::Context& arg0) const;
	::jvoid OnAttachFragment(const ::android::app::Fragment& arg0) const;
	::jvoid OnConfigurationChanged(const ::android::content::res::Configuration& arg0) const;
	::jboolean OnContextItemSelected(const ::android::view::MenuItem& arg0) const;
	::jvoid OnCreate(const ::android::os::Bundle& arg0) const;
	::android::animation::Animator OnCreateAnimator(const ::jint& arg0, const ::jboolean& arg1, const ::jint& arg2) const;
	::jvoid OnCreateContextMenu(const ::android::view::ContextMenu& arg0, const ::android::view::View& arg1, const ::android::view::ContextMenu_ContextMenuInfo& arg2) const;
	::jvoid OnCreateOptionsMenu(const ::android::view::Menu& arg0, const ::android::view::MenuInflater& arg1) const;
	::android::view::View OnCreateView(const ::android::view::LayoutInflater& arg0, const ::android::view::ViewGroup& arg1, const ::android::os::Bundle& arg2) const;
	::jvoid OnDestroy() const;
	::jvoid OnDestroyOptionsMenu() const;
	::jvoid OnDestroyView() const;
	::jvoid OnDetach() const;
	::android::view::LayoutInflater OnGetLayoutInflater(const ::android::os::Bundle& arg0) const;
	::jvoid OnHiddenChanged(const ::jboolean& arg0) const;
	::jvoid OnInflate(const ::android::app::Activity& arg0, const ::android::util::AttributeSet& arg1, const ::android::os::Bundle& arg2) const;
	::jvoid OnInflate(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::android::os::Bundle& arg2) const;
	::jvoid OnInflate(const ::android::util::AttributeSet& arg0, const ::android::os::Bundle& arg1) const;
	::jvoid OnLowMemory() const;
	::jvoid OnMultiWindowModeChanged(const ::jboolean& arg0) const;
	::jvoid OnMultiWindowModeChanged(const ::jboolean& arg0, const ::android::content::res::Configuration& arg1) const;
	::jboolean OnOptionsItemSelected(const ::android::view::MenuItem& arg0) const;
	::jvoid OnOptionsMenuClosed(const ::android::view::Menu& arg0) const;
	::jvoid OnPause() const;
	::jvoid OnPictureInPictureModeChanged(const ::jboolean& arg0) const;
	::jvoid OnPictureInPictureModeChanged(const ::jboolean& arg0, const ::android::content::res::Configuration& arg1) const;
	::jvoid OnPrepareOptionsMenu(const ::android::view::Menu& arg0) const;
	::jvoid OnRequestPermissionsResult(const ::jint& arg0, const jni::Array< ::java::lang::String >& arg1, const jni::Array< ::jint >& arg2) const;
	::jvoid OnResume() const;
	::jvoid OnSaveInstanceState(const ::android::os::Bundle& arg0) const;
	::jvoid OnStart() const;
	::jvoid OnStop() const;
	::jvoid OnTrimMemory(const ::jint& arg0) const;
	::jvoid OnViewCreated(const ::android::view::View& arg0, const ::android::os::Bundle& arg1) const;
	::jvoid OnViewStateRestored(const ::android::os::Bundle& arg0) const;
	::jvoid PostponeEnterTransition() const;
	::jvoid RegisterForContextMenu(const ::android::view::View& arg0) const;
	::jvoid RequestPermissions(const jni::Array< ::java::lang::String >& arg0, const ::jint& arg1) const;
	::jvoid SetAllowEnterTransitionOverlap(const ::jboolean& arg0) const;
	::jvoid SetAllowReturnTransitionOverlap(const ::jboolean& arg0) const;
	::jvoid SetArguments(const ::android::os::Bundle& arg0) const;
	::jvoid SetEnterSharedElementCallback(const ::android::app::SharedElementCallback& arg0) const;
	::jvoid SetEnterTransition(const ::android::transition::Transition& arg0) const;
	::jvoid SetExitSharedElementCallback(const ::android::app::SharedElementCallback& arg0) const;
	::jvoid SetExitTransition(const ::android::transition::Transition& arg0) const;
	::jvoid SetHasOptionsMenu(const ::jboolean& arg0) const;
	::jvoid SetInitialSavedState(const ::android::app::Fragment_SavedState& arg0) const;
	::jvoid SetMenuVisibility(const ::jboolean& arg0) const;
	::jvoid SetReenterTransition(const ::android::transition::Transition& arg0) const;
	::jvoid SetRetainInstance(const ::jboolean& arg0) const;
	::jvoid SetReturnTransition(const ::android::transition::Transition& arg0) const;
	::jvoid SetSharedElementEnterTransition(const ::android::transition::Transition& arg0) const;
	::jvoid SetSharedElementReturnTransition(const ::android::transition::Transition& arg0) const;
	::jvoid SetTargetFragment(const ::android::app::Fragment& arg0, const ::jint& arg1) const;
	::jvoid SetUserVisibleHint(const ::jboolean& arg0) const;
	::jboolean ShouldShowRequestPermissionRationale(const ::java::lang::String& arg0) const;
	::jvoid StartActivity(const ::android::content::Intent& arg0) const;
	::jvoid StartActivity(const ::android::content::Intent& arg0, const ::android::os::Bundle& arg1) const;
	::jvoid StartActivityForResult(const ::android::content::Intent& arg0, const ::jint& arg1) const;
	::jvoid StartActivityForResult(const ::android::content::Intent& arg0, const ::jint& arg1, const ::android::os::Bundle& arg2) const;
	::jvoid StartIntentSenderForResult(const ::android::content::IntentSender& arg0, const ::jint& arg1, const ::android::content::Intent& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5, const ::android::os::Bundle& arg6) const;
	::jvoid StartPostponedEnterTransition() const;
	::java::lang::String ToString() const;
	::jvoid UnregisterForContextMenu(const ::android::view::View& arg0) const;
	static jobject __Constructor();
	Fragment() : ::java::lang::Object(__Constructor()) {}
	explicit Fragment(jobject o) : ::java::lang::Object(o) {}
	Fragment(const Fragment& o)  : ::java::lang::Object(o) {}

};

struct FragmentManager : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fPOP_BACK_STACK_INCLUSIVE();
	::jvoid AddOnBackStackChangedListener(const ::android::app::FragmentManager_OnBackStackChangedListener& arg0) const;
	::android::app::FragmentTransaction BeginTransaction() const;
	::jvoid Dump(const ::java::lang::String& arg0, const ::java::io::FileDescriptor& arg1, const ::java::io::PrintWriter& arg2, const jni::Array< ::java::lang::String >& arg3) const;
	static ::jvoid EnableDebugLogging(const ::jboolean& arg0);
	::jboolean ExecutePendingTransactions() const;
	::android::app::Fragment FindFragmentById(const ::jint& arg0) const;
	::android::app::Fragment FindFragmentByTag(const ::java::lang::String& arg0) const;
	::android::app::FragmentManager_BackStackEntry GetBackStackEntryAt(const ::jint& arg0) const;
	::jint GetBackStackEntryCount() const;
	::android::app::Fragment GetFragment(const ::android::os::Bundle& arg0, const ::java::lang::String& arg1) const;
	::java::util::List GetFragments() const;
	::android::app::Fragment GetPrimaryNavigationFragment() const;
	::jvoid InvalidateOptionsMenu() const;
	::jboolean IsDestroyed() const;
	::jboolean IsStateSaved() const;
	::jvoid PopBackStack() const;
	::jvoid PopBackStack(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid PopBackStack(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::jboolean PopBackStackImmediate() const;
	::jboolean PopBackStackImmediate(const ::jint& arg0, const ::jint& arg1) const;
	::jboolean PopBackStackImmediate(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::jvoid PutFragment(const ::android::os::Bundle& arg0, const ::java::lang::String& arg1, const ::android::app::Fragment& arg2) const;
	::jvoid RegisterFragmentLifecycleCallbacks(const ::android::app::FragmentManager_FragmentLifecycleCallbacks& arg0, const ::jboolean& arg1) const;
	::jvoid RemoveOnBackStackChangedListener(const ::android::app::FragmentManager_OnBackStackChangedListener& arg0) const;
	::android::app::Fragment_SavedState SaveFragmentInstanceState(const ::android::app::Fragment& arg0) const;
	::jvoid UnregisterFragmentLifecycleCallbacks(const ::android::app::FragmentManager_FragmentLifecycleCallbacks& arg0) const;
	static jobject __Constructor();
	FragmentManager() : ::java::lang::Object(__Constructor()) {}
	explicit FragmentManager(jobject o) : ::java::lang::Object(o) {}
	FragmentManager(const FragmentManager& o)  : ::java::lang::Object(o) {}

};

struct FragmentManager_OnBackStackChangedListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnBackStackChanged() const;
	explicit FragmentManager_OnBackStackChangedListener(jobject o) : java::lang::Object(o) {}
	FragmentManager_OnBackStackChangedListener(const FragmentManager_OnBackStackChangedListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::app::FragmentManager_OnBackStackChangedListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnBackStackChanged() = 0;
	};
};

struct FragmentManager_BackStackEntry : java::lang::Object
{
	static jni::Class __CLASS;

	::java::lang::CharSequence GetBreadCrumbShortTitle() const;
	::jint GetBreadCrumbShortTitleRes() const;
	::java::lang::CharSequence GetBreadCrumbTitle() const;
	::jint GetBreadCrumbTitleRes() const;
	::jint GetId() const;
	::java::lang::String GetName() const;
	explicit FragmentManager_BackStackEntry(jobject o) : java::lang::Object(o) {}
	FragmentManager_BackStackEntry(const FragmentManager_BackStackEntry& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::app::FragmentManager_BackStackEntry();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::lang::CharSequence GetBreadCrumbShortTitle() = 0;
		virtual ::jint GetBreadCrumbShortTitleRes() = 0;
		virtual ::java::lang::CharSequence GetBreadCrumbTitle() = 0;
		virtual ::jint GetBreadCrumbTitleRes() = 0;
		virtual ::jint GetId() = 0;
		virtual ::java::lang::String GetName() = 0;
	};
};

struct FragmentManager_FragmentLifecycleCallbacks : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnFragmentActivityCreated(const ::android::app::FragmentManager& arg0, const ::android::app::Fragment& arg1, const ::android::os::Bundle& arg2) const;
	::jvoid OnFragmentAttached(const ::android::app::FragmentManager& arg0, const ::android::app::Fragment& arg1, const ::android::content::Context& arg2) const;
	::jvoid OnFragmentCreated(const ::android::app::FragmentManager& arg0, const ::android::app::Fragment& arg1, const ::android::os::Bundle& arg2) const;
	::jvoid OnFragmentDestroyed(const ::android::app::FragmentManager& arg0, const ::android::app::Fragment& arg1) const;
	::jvoid OnFragmentDetached(const ::android::app::FragmentManager& arg0, const ::android::app::Fragment& arg1) const;
	::jvoid OnFragmentPaused(const ::android::app::FragmentManager& arg0, const ::android::app::Fragment& arg1) const;
	::jvoid OnFragmentPreAttached(const ::android::app::FragmentManager& arg0, const ::android::app::Fragment& arg1, const ::android::content::Context& arg2) const;
	::jvoid OnFragmentPreCreated(const ::android::app::FragmentManager& arg0, const ::android::app::Fragment& arg1, const ::android::os::Bundle& arg2) const;
	::jvoid OnFragmentResumed(const ::android::app::FragmentManager& arg0, const ::android::app::Fragment& arg1) const;
	::jvoid OnFragmentSaveInstanceState(const ::android::app::FragmentManager& arg0, const ::android::app::Fragment& arg1, const ::android::os::Bundle& arg2) const;
	::jvoid OnFragmentStarted(const ::android::app::FragmentManager& arg0, const ::android::app::Fragment& arg1) const;
	::jvoid OnFragmentStopped(const ::android::app::FragmentManager& arg0, const ::android::app::Fragment& arg1) const;
	::jvoid OnFragmentViewCreated(const ::android::app::FragmentManager& arg0, const ::android::app::Fragment& arg1, const ::android::view::View& arg2, const ::android::os::Bundle& arg3) const;
	::jvoid OnFragmentViewDestroyed(const ::android::app::FragmentManager& arg0, const ::android::app::Fragment& arg1) const;
	static jobject __Constructor();
	FragmentManager_FragmentLifecycleCallbacks() : ::java::lang::Object(__Constructor()) {}
	explicit FragmentManager_FragmentLifecycleCallbacks(jobject o) : ::java::lang::Object(o) {}
	FragmentManager_FragmentLifecycleCallbacks(const FragmentManager_FragmentLifecycleCallbacks& o)  : ::java::lang::Object(o) {}

};

struct Fragment_SavedState : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_ClassLoaderCreator& fCREATOR();
	::jint DescribeContents() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit Fragment_SavedState(jobject o) : ::java::lang::Object(o) {}
	Fragment_SavedState(const Fragment_SavedState& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace os { 
struct Parcelable_ClassLoaderCreator : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable_Creator();
	::java::lang::Object CreateFromParcel(const ::android::os::Parcel& arg0, const ::java::lang::ClassLoader& arg1) const;
	explicit Parcelable_ClassLoaderCreator(jobject o) : java::lang::Object(o) {}
	Parcelable_ClassLoaderCreator(const Parcelable_ClassLoaderCreator& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::os::Parcelable_ClassLoaderCreator();
		operator ::android::os::Parcelable_Creator();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::lang::Object CreateFromParcel(const ::android::os::Parcel& arg0, const ::java::lang::ClassLoader& arg1) = 0;
	};
};

}}

namespace android { namespace transition { 
struct Transition : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::Cloneable();
	static ::jint& fMATCH_ID();
	static ::jint& fMATCH_INSTANCE();
	static ::jint& fMATCH_ITEM_ID();
	static ::jint& fMATCH_NAME();
	::android::transition::Transition AddListener(const ::android::transition::Transition_TransitionListener& arg0) const;
	::android::transition::Transition AddTarget(const ::jint& arg0) const;
	::android::transition::Transition AddTarget(const ::android::view::View& arg0) const;
	::android::transition::Transition AddTarget(const ::java::lang::Class& arg0) const;
	::android::transition::Transition AddTarget(const ::java::lang::String& arg0) const;
	::jboolean CanRemoveViews() const;
	::jvoid CaptureEndValues(const ::android::transition::TransitionValues& arg0) const;
	::jvoid CaptureStartValues(const ::android::transition::TransitionValues& arg0) const;
	::android::transition::Transition Clone() const;
	::android::animation::Animator CreateAnimator(const ::android::view::ViewGroup& arg0, const ::android::transition::TransitionValues& arg1, const ::android::transition::TransitionValues& arg2) const;
	::android::transition::Transition ExcludeChildren(const ::jint& arg0, const ::jboolean& arg1) const;
	::android::transition::Transition ExcludeChildren(const ::android::view::View& arg0, const ::jboolean& arg1) const;
	::android::transition::Transition ExcludeChildren(const ::java::lang::Class& arg0, const ::jboolean& arg1) const;
	::android::transition::Transition ExcludeTarget(const ::jint& arg0, const ::jboolean& arg1) const;
	::android::transition::Transition ExcludeTarget(const ::android::view::View& arg0, const ::jboolean& arg1) const;
	::android::transition::Transition ExcludeTarget(const ::java::lang::Class& arg0, const ::jboolean& arg1) const;
	::android::transition::Transition ExcludeTarget(const ::java::lang::String& arg0, const ::jboolean& arg1) const;
	::jlong GetDuration() const;
	::android::graphics::Rect GetEpicenter() const;
	::android::transition::Transition_EpicenterCallback GetEpicenterCallback() const;
	::android::animation::TimeInterpolator GetInterpolator() const;
	::java::lang::String GetName() const;
	::android::transition::PathMotion GetPathMotion() const;
	::android::transition::TransitionPropagation GetPropagation() const;
	::jlong GetStartDelay() const;
	::java::util::List GetTargetIds() const;
	::java::util::List GetTargetNames() const;
	::java::util::List GetTargetTypes() const;
	::java::util::List GetTargets() const;
	jni::Array< ::java::lang::String > GetTransitionProperties() const;
	::android::transition::TransitionValues GetTransitionValues(const ::android::view::View& arg0, const ::jboolean& arg1) const;
	::jboolean IsTransitionRequired(const ::android::transition::TransitionValues& arg0, const ::android::transition::TransitionValues& arg1) const;
	::android::transition::Transition RemoveListener(const ::android::transition::Transition_TransitionListener& arg0) const;
	::android::transition::Transition RemoveTarget(const ::jint& arg0) const;
	::android::transition::Transition RemoveTarget(const ::android::view::View& arg0) const;
	::android::transition::Transition RemoveTarget(const ::java::lang::Class& arg0) const;
	::android::transition::Transition RemoveTarget(const ::java::lang::String& arg0) const;
	::android::transition::Transition SetDuration(const ::jlong& arg0) const;
	::jvoid SetEpicenterCallback(const ::android::transition::Transition_EpicenterCallback& arg0) const;
	::android::transition::Transition SetInterpolator(const ::android::animation::TimeInterpolator& arg0) const;
	::jvoid SetMatchOrder(const jni::Array< ::jint >& arg0) const;
	::jvoid SetPathMotion(const ::android::transition::PathMotion& arg0) const;
	::jvoid SetPropagation(const ::android::transition::TransitionPropagation& arg0) const;
	::android::transition::Transition SetStartDelay(const ::jlong& arg0) const;
	::java::lang::String ToString() const;
	static jobject __Constructor();
	Transition() : ::java::lang::Object(__Constructor()) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1);
	Transition(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit Transition(jobject o) : ::java::lang::Object(o) {}
	Transition(const Transition& o)  : ::java::lang::Object(o) {}

};

struct Transition_TransitionListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnTransitionCancel(const ::android::transition::Transition& arg0) const;
	::jvoid OnTransitionEnd(const ::android::transition::Transition& arg0) const;
	::jvoid OnTransitionPause(const ::android::transition::Transition& arg0) const;
	::jvoid OnTransitionResume(const ::android::transition::Transition& arg0) const;
	::jvoid OnTransitionStart(const ::android::transition::Transition& arg0) const;
	explicit Transition_TransitionListener(jobject o) : java::lang::Object(o) {}
	Transition_TransitionListener(const Transition_TransitionListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::transition::Transition_TransitionListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnTransitionCancel(const ::android::transition::Transition& arg0) = 0;
		virtual void OnTransitionEnd(const ::android::transition::Transition& arg0) = 0;
		virtual void OnTransitionPause(const ::android::transition::Transition& arg0) = 0;
		virtual void OnTransitionResume(const ::android::transition::Transition& arg0) = 0;
		virtual void OnTransitionStart(const ::android::transition::Transition& arg0) = 0;
	};
};

struct TransitionValues : ::java::lang::Object
{
	static jni::Class __CLASS;

	::java::util::Map fValues() const;
	::android::view::View fView() const;
	void fView(const ::android::view::View& arg0) const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint HashCode() const;
	::java::lang::String ToString() const;
	static jobject __Constructor();
	TransitionValues() : ::java::lang::Object(__Constructor()) {}
	static jobject __Constructor(const ::android::view::View& arg0);
	TransitionValues(const ::android::view::View& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit TransitionValues(jobject o) : ::java::lang::Object(o) {}
	TransitionValues(const TransitionValues& o)  : ::java::lang::Object(o) {}

};

struct Transition_EpicenterCallback : ::java::lang::Object
{
	static jni::Class __CLASS;

	::android::graphics::Rect OnGetEpicenter(const ::android::transition::Transition& arg0) const;
	static jobject __Constructor();
	Transition_EpicenterCallback() : ::java::lang::Object(__Constructor()) {}
	explicit Transition_EpicenterCallback(jobject o) : ::java::lang::Object(o) {}
	Transition_EpicenterCallback(const Transition_EpicenterCallback& o)  : ::java::lang::Object(o) {}

};

struct PathMotion : ::java::lang::Object
{
	static jni::Class __CLASS;

	::android::graphics::Path GetPath(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jfloat& arg3) const;
	static jobject __Constructor();
	PathMotion() : ::java::lang::Object(__Constructor()) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1);
	PathMotion(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit PathMotion(jobject o) : ::java::lang::Object(o) {}
	PathMotion(const PathMotion& o)  : ::java::lang::Object(o) {}

};

struct TransitionPropagation : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid CaptureValues(const ::android::transition::TransitionValues& arg0) const;
	jni::Array< ::java::lang::String > GetPropagationProperties() const;
	::jlong GetStartDelay(const ::android::view::ViewGroup& arg0, const ::android::transition::Transition& arg1, const ::android::transition::TransitionValues& arg2, const ::android::transition::TransitionValues& arg3) const;
	static jobject __Constructor();
	TransitionPropagation() : ::java::lang::Object(__Constructor()) {}
	explicit TransitionPropagation(jobject o) : ::java::lang::Object(o) {}
	TransitionPropagation(const TransitionPropagation& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace view { 
struct LayoutInflater : ::java::lang::Object
{
	static jni::Class __CLASS;

	::android::view::LayoutInflater CloneInContext(const ::android::content::Context& arg0) const;
	::android::view::View CreateView(const ::android::content::Context& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2, const ::android::util::AttributeSet& arg3) const;
	::android::view::View CreateView(const ::java::lang::String& arg0, const ::java::lang::String& arg1, const ::android::util::AttributeSet& arg2) const;
	static ::android::view::LayoutInflater From(const ::android::content::Context& arg0);
	::android::content::Context GetContext() const;
	::android::view::LayoutInflater_Factory GetFactory() const;
	::android::view::LayoutInflater_Factory2 GetFactory2() const;
	::android::view::LayoutInflater_Filter GetFilter() const;
	::android::view::View Inflate(const ::jint& arg0, const ::android::view::ViewGroup& arg1) const;
	::android::view::View Inflate(const ::jint& arg0, const ::android::view::ViewGroup& arg1, const ::jboolean& arg2) const;
	::android::view::View Inflate(const ::org::xmlpull::v1::XmlPullParser& arg0, const ::android::view::ViewGroup& arg1) const;
	::android::view::View Inflate(const ::org::xmlpull::v1::XmlPullParser& arg0, const ::android::view::ViewGroup& arg1, const ::jboolean& arg2) const;
	::android::view::View OnCreateView(const ::android::content::Context& arg0, const ::android::view::View& arg1, const ::java::lang::String& arg2, const ::android::util::AttributeSet& arg3) const;
	::android::view::View OnCreateView(const ::android::view::View& arg0, const ::java::lang::String& arg1, const ::android::util::AttributeSet& arg2) const;
	::android::view::View OnCreateView(const ::java::lang::String& arg0, const ::android::util::AttributeSet& arg1) const;
	::jvoid SetFactory(const ::android::view::LayoutInflater_Factory& arg0) const;
	::jvoid SetFactory2(const ::android::view::LayoutInflater_Factory2& arg0) const;
	::jvoid SetFilter(const ::android::view::LayoutInflater_Filter& arg0) const;
	static jobject __Constructor(const ::android::content::Context& arg0);
	LayoutInflater(const ::android::content::Context& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::view::LayoutInflater& arg0, const ::android::content::Context& arg1);
	LayoutInflater(const ::android::view::LayoutInflater& arg0, const ::android::content::Context& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit LayoutInflater(jobject o) : ::java::lang::Object(o) {}
	LayoutInflater(const LayoutInflater& o)  : ::java::lang::Object(o) {}

};

struct LayoutInflater_Filter : java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean OnLoadClass(const ::java::lang::Class& arg0) const;
	explicit LayoutInflater_Filter(jobject o) : java::lang::Object(o) {}
	LayoutInflater_Filter(const LayoutInflater_Filter& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::LayoutInflater_Filter();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean OnLoadClass(const ::java::lang::Class& arg0) = 0;
	};
};

}}

namespace android { namespace app { 
struct LoaderManager : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid DestroyLoader(const ::jint& arg0) const;
	::jvoid Dump(const ::java::lang::String& arg0, const ::java::io::FileDescriptor& arg1, const ::java::io::PrintWriter& arg2, const jni::Array< ::java::lang::String >& arg3) const;
	static ::jvoid EnableDebugLogging(const ::jboolean& arg0);
	::android::content::Loader GetLoader(const ::jint& arg0) const;
	::android::content::Loader InitLoader(const ::jint& arg0, const ::android::os::Bundle& arg1, const ::android::app::LoaderManager_LoaderCallbacks& arg2) const;
	::android::content::Loader RestartLoader(const ::jint& arg0, const ::android::os::Bundle& arg1, const ::android::app::LoaderManager_LoaderCallbacks& arg2) const;
	static jobject __Constructor();
	LoaderManager() : ::java::lang::Object(__Constructor()) {}
	explicit LoaderManager(jobject o) : ::java::lang::Object(o) {}
	LoaderManager(const LoaderManager& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace content { 
struct Loader : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid Abandon() const;
	::jboolean CancelLoad() const;
	::jvoid CommitContentChanged() const;
	::java::lang::String DataToString(const ::java::lang::Object& arg0) const;
	::jvoid DeliverCancellation() const;
	::jvoid DeliverResult(const ::java::lang::Object& arg0) const;
	::jvoid Dump(const ::java::lang::String& arg0, const ::java::io::FileDescriptor& arg1, const ::java::io::PrintWriter& arg2, const jni::Array< ::java::lang::String >& arg3) const;
	::jvoid ForceLoad() const;
	::android::content::Context GetContext() const;
	::jint GetId() const;
	::jboolean IsAbandoned() const;
	::jboolean IsReset() const;
	::jboolean IsStarted() const;
	::jvoid OnAbandon() const;
	::jboolean OnCancelLoad() const;
	::jvoid OnContentChanged() const;
	::jvoid OnForceLoad() const;
	::jvoid OnReset() const;
	::jvoid OnStartLoading() const;
	::jvoid OnStopLoading() const;
	::jvoid RegisterListener(const ::jint& arg0, const ::android::content::Loader_OnLoadCompleteListener& arg1) const;
	::jvoid RegisterOnLoadCanceledListener(const ::android::content::Loader_OnLoadCanceledListener& arg0) const;
	::jvoid Reset() const;
	::jvoid RollbackContentChanged() const;
	::jvoid StartLoading() const;
	::jvoid StopLoading() const;
	::jboolean TakeContentChanged() const;
	::java::lang::String ToString() const;
	::jvoid UnregisterListener(const ::android::content::Loader_OnLoadCompleteListener& arg0) const;
	::jvoid UnregisterOnLoadCanceledListener(const ::android::content::Loader_OnLoadCanceledListener& arg0) const;
	static jobject __Constructor(const ::android::content::Context& arg0);
	Loader(const ::android::content::Context& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit Loader(jobject o) : ::java::lang::Object(o) {}
	Loader(const Loader& o)  : ::java::lang::Object(o) {}

};

struct Loader_OnLoadCompleteListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnLoadComplete(const ::android::content::Loader& arg0, const ::java::lang::Object& arg1) const;
	explicit Loader_OnLoadCompleteListener(jobject o) : java::lang::Object(o) {}
	Loader_OnLoadCompleteListener(const Loader_OnLoadCompleteListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::content::Loader_OnLoadCompleteListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnLoadComplete(const ::android::content::Loader& arg0, const ::java::lang::Object& arg1) = 0;
	};
};

struct Loader_OnLoadCanceledListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnLoadCanceled(const ::android::content::Loader& arg0) const;
	explicit Loader_OnLoadCanceledListener(jobject o) : java::lang::Object(o) {}
	Loader_OnLoadCanceledListener(const Loader_OnLoadCanceledListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::content::Loader_OnLoadCanceledListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnLoadCanceled(const ::android::content::Loader& arg0) = 0;
	};
};

}}

namespace android { namespace app { 
struct LoaderManager_LoaderCallbacks : java::lang::Object
{
	static jni::Class __CLASS;

	::android::content::Loader OnCreateLoader(const ::jint& arg0, const ::android::os::Bundle& arg1) const;
	::jvoid OnLoadFinished(const ::android::content::Loader& arg0, const ::java::lang::Object& arg1) const;
	::jvoid OnLoaderReset(const ::android::content::Loader& arg0) const;
	explicit LoaderManager_LoaderCallbacks(jobject o) : java::lang::Object(o) {}
	LoaderManager_LoaderCallbacks(const LoaderManager_LoaderCallbacks& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::app::LoaderManager_LoaderCallbacks();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::android::content::Loader OnCreateLoader(const ::jint& arg0, const ::android::os::Bundle& arg1) = 0;
		virtual void OnLoadFinished(const ::android::content::Loader& arg0, const ::java::lang::Object& arg1) = 0;
		virtual void OnLoaderReset(const ::android::content::Loader& arg0) = 0;
	};
};

struct SharedElementCallback : ::java::lang::Object
{
	static jni::Class __CLASS;

	::android::os::Parcelable OnCaptureSharedElementSnapshot(const ::android::view::View& arg0, const ::android::graphics::Matrix& arg1, const ::android::graphics::RectF& arg2) const;
	::android::view::View OnCreateSnapshotView(const ::android::content::Context& arg0, const ::android::os::Parcelable& arg1) const;
	::jvoid OnMapSharedElements(const ::java::util::List& arg0, const ::java::util::Map& arg1) const;
	::jvoid OnRejectSharedElements(const ::java::util::List& arg0) const;
	::jvoid OnSharedElementEnd(const ::java::util::List& arg0, const ::java::util::List& arg1, const ::java::util::List& arg2) const;
	::jvoid OnSharedElementStart(const ::java::util::List& arg0, const ::java::util::List& arg1, const ::java::util::List& arg2) const;
	::jvoid OnSharedElementsArrived(const ::java::util::List& arg0, const ::java::util::List& arg1, const ::android::app::SharedElementCallback_OnSharedElementsReadyListener& arg2) const;
	static jobject __Constructor();
	SharedElementCallback() : ::java::lang::Object(__Constructor()) {}
	explicit SharedElementCallback(jobject o) : ::java::lang::Object(o) {}
	SharedElementCallback(const SharedElementCallback& o)  : ::java::lang::Object(o) {}

};

struct SharedElementCallback_OnSharedElementsReadyListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnSharedElementsReady() const;
	explicit SharedElementCallback_OnSharedElementsReadyListener(jobject o) : java::lang::Object(o) {}
	SharedElementCallback_OnSharedElementsReadyListener(const SharedElementCallback_OnSharedElementsReadyListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::app::SharedElementCallback_OnSharedElementsReadyListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnSharedElementsReady() = 0;
	};
};

}}

namespace android { namespace view { 
struct ViewGroup_MarginLayoutParams : ::android::view::ViewGroup_LayoutParams
{
	static jni::Class __CLASS;

	::jint fBottomMargin() const;
	void fBottomMargin(const ::jint& arg0) const;
	::jint fLeftMargin() const;
	void fLeftMargin(const ::jint& arg0) const;
	::jint fRightMargin() const;
	void fRightMargin(const ::jint& arg0) const;
	::jint fTopMargin() const;
	void fTopMargin(const ::jint& arg0) const;
	::jint GetLayoutDirection() const;
	::jint GetMarginEnd() const;
	::jint GetMarginStart() const;
	::jboolean IsMarginRelative() const;
	::jvoid ResolveLayoutDirection(const ::jint& arg0) const;
	::jvoid SetLayoutDirection(const ::jint& arg0) const;
	::jvoid SetMarginEnd(const ::jint& arg0) const;
	::jvoid SetMarginStart(const ::jint& arg0) const;
	::jvoid SetMargins(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	static jobject __Constructor(const ::jint& arg0, const ::jint& arg1);
	ViewGroup_MarginLayoutParams(const ::jint& arg0, const ::jint& arg1) : ::android::view::ViewGroup_LayoutParams(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1);
	ViewGroup_MarginLayoutParams(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1) : ::android::view::ViewGroup_LayoutParams(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::view::ViewGroup_LayoutParams& arg0);
	ViewGroup_MarginLayoutParams(const ::android::view::ViewGroup_LayoutParams& arg0) : ::android::view::ViewGroup_LayoutParams(__Constructor(arg0)) {}
	explicit ViewGroup_MarginLayoutParams(jobject o) : ::android::view::ViewGroup_LayoutParams(o) {}
	ViewGroup_MarginLayoutParams(const ViewGroup_MarginLayoutParams& o)  : ::android::view::ViewGroup_LayoutParams(o) {}

};

}}

namespace android { namespace app { 
struct ActionBar_LayoutParams : ::android::view::ViewGroup_MarginLayoutParams
{
	static jni::Class __CLASS;

	::jint fGravity() const;
	void fGravity(const ::jint& arg0) const;
	static jobject __Constructor(const ::jint& arg0);
	ActionBar_LayoutParams(const ::jint& arg0) : ::android::view::ViewGroup_MarginLayoutParams(__Constructor(arg0)) {}
	static jobject __Constructor(const ::jint& arg0, const ::jint& arg1);
	ActionBar_LayoutParams(const ::jint& arg0, const ::jint& arg1) : ::android::view::ViewGroup_MarginLayoutParams(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2);
	ActionBar_LayoutParams(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2) : ::android::view::ViewGroup_MarginLayoutParams(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1);
	ActionBar_LayoutParams(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1) : ::android::view::ViewGroup_MarginLayoutParams(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::view::ViewGroup_LayoutParams& arg0);
	ActionBar_LayoutParams(const ::android::view::ViewGroup_LayoutParams& arg0) : ::android::view::ViewGroup_MarginLayoutParams(__Constructor(arg0)) {}
	explicit ActionBar_LayoutParams(jobject o) : ::android::view::ViewGroup_MarginLayoutParams(o) {}
	ActionBar_LayoutParams(const ActionBar_LayoutParams& o)  : ::android::view::ViewGroup_MarginLayoutParams(o) {}

};

}}

namespace android { namespace widget { 
struct SpinnerAdapter : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::widget::Adapter();
	::android::view::View GetDropDownView(const ::jint& arg0, const ::android::view::View& arg1, const ::android::view::ViewGroup& arg2) const;
	explicit SpinnerAdapter(jobject o) : java::lang::Object(o) {}
	SpinnerAdapter(const SpinnerAdapter& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::widget::SpinnerAdapter();
		operator ::android::widget::Adapter();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::android::view::View GetDropDownView(const ::jint& arg0, const ::android::view::View& arg1, const ::android::view::ViewGroup& arg2) = 0;
	};
};

struct Adapter : java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fIGNORE_ITEM_VIEW_TYPE();
	static ::jint& fNO_SELECTION();
	jni::Array< ::java::lang::CharSequence > GetAutofillOptions() const;
	::jint GetCount() const;
	::java::lang::Object GetItem(const ::jint& arg0) const;
	::jlong GetItemId(const ::jint& arg0) const;
	::jint GetItemViewType(const ::jint& arg0) const;
	::android::view::View GetView(const ::jint& arg0, const ::android::view::View& arg1, const ::android::view::ViewGroup& arg2) const;
	::jint GetViewTypeCount() const;
	::jboolean HasStableIds() const;
	::jboolean IsEmpty() const;
	::jvoid RegisterDataSetObserver(const ::android::database::DataSetObserver& arg0) const;
	::jvoid UnregisterDataSetObserver(const ::android::database::DataSetObserver& arg0) const;
	explicit Adapter(jobject o) : java::lang::Object(o) {}
	Adapter(const Adapter& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::widget::Adapter();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual jni::Array< ::java::lang::CharSequence > GetAutofillOptions() = 0;
		virtual ::jint GetCount() = 0;
		virtual ::java::lang::Object GetItem(const ::jint& arg0) = 0;
		virtual ::jlong GetItemId(const ::jint& arg0) = 0;
		virtual ::jint GetItemViewType(const ::jint& arg0) = 0;
		virtual ::android::view::View GetView(const ::jint& arg0, const ::android::view::View& arg1, const ::android::view::ViewGroup& arg2) = 0;
		virtual ::jint GetViewTypeCount() = 0;
		virtual ::jboolean HasStableIds() = 0;
		virtual ::jboolean IsEmpty() = 0;
		virtual void RegisterDataSetObserver(const ::android::database::DataSetObserver& arg0) = 0;
		virtual void UnregisterDataSetObserver(const ::android::database::DataSetObserver& arg0) = 0;
	};
};

}}

namespace android { namespace app { 
struct ActionBar_OnNavigationListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean OnNavigationItemSelected(const ::jint& arg0, const ::jlong& arg1) const;
	explicit ActionBar_OnNavigationListener(jobject o) : java::lang::Object(o) {}
	ActionBar_OnNavigationListener(const ActionBar_OnNavigationListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::app::ActionBar_OnNavigationListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean OnNavigationItemSelected(const ::jint& arg0, const ::jlong& arg1) = 0;
	};
};

struct Application : ::android::content::ContextWrapper
{
	static jni::Class __CLASS;

	operator ::android::content::ComponentCallbacks2();
	static ::java::lang::String GetProcessName();
	::jvoid OnConfigurationChanged(const ::android::content::res::Configuration& arg0) const;
	::jvoid OnCreate() const;
	::jvoid OnLowMemory() const;
	::jvoid OnTerminate() const;
	::jvoid OnTrimMemory(const ::jint& arg0) const;
	::jvoid RegisterActivityLifecycleCallbacks(const ::android::app::Application_ActivityLifecycleCallbacks& arg0) const;
	::jvoid RegisterComponentCallbacks(const ::android::content::ComponentCallbacks& arg0) const;
	::jvoid RegisterOnProvideAssistDataListener(const ::android::app::Application_OnProvideAssistDataListener& arg0) const;
	::jvoid UnregisterActivityLifecycleCallbacks(const ::android::app::Application_ActivityLifecycleCallbacks& arg0) const;
	::jvoid UnregisterComponentCallbacks(const ::android::content::ComponentCallbacks& arg0) const;
	::jvoid UnregisterOnProvideAssistDataListener(const ::android::app::Application_OnProvideAssistDataListener& arg0) const;
	static jobject __Constructor();
	Application() : ::android::content::ContextWrapper(__Constructor()) {}
	explicit Application(jobject o) : ::android::content::ContextWrapper(o) {}
	Application(const Application& o)  : ::android::content::ContextWrapper(o) {}

};

struct Application_ActivityLifecycleCallbacks : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnActivityCreated(const ::android::app::Activity& arg0, const ::android::os::Bundle& arg1) const;
	::jvoid OnActivityDestroyed(const ::android::app::Activity& arg0) const;
	::jvoid OnActivityPaused(const ::android::app::Activity& arg0) const;
	::jvoid OnActivityPostCreated(const ::android::app::Activity& arg0, const ::android::os::Bundle& arg1) const;
	::jvoid OnActivityPostDestroyed(const ::android::app::Activity& arg0) const;
	::jvoid OnActivityPostPaused(const ::android::app::Activity& arg0) const;
	::jvoid OnActivityPostResumed(const ::android::app::Activity& arg0) const;
	::jvoid OnActivityPostSaveInstanceState(const ::android::app::Activity& arg0, const ::android::os::Bundle& arg1) const;
	::jvoid OnActivityPostStarted(const ::android::app::Activity& arg0) const;
	::jvoid OnActivityPostStopped(const ::android::app::Activity& arg0) const;
	::jvoid OnActivityPreCreated(const ::android::app::Activity& arg0, const ::android::os::Bundle& arg1) const;
	::jvoid OnActivityPreDestroyed(const ::android::app::Activity& arg0) const;
	::jvoid OnActivityPrePaused(const ::android::app::Activity& arg0) const;
	::jvoid OnActivityPreResumed(const ::android::app::Activity& arg0) const;
	::jvoid OnActivityPreSaveInstanceState(const ::android::app::Activity& arg0, const ::android::os::Bundle& arg1) const;
	::jvoid OnActivityPreStarted(const ::android::app::Activity& arg0) const;
	::jvoid OnActivityPreStopped(const ::android::app::Activity& arg0) const;
	::jvoid OnActivityResumed(const ::android::app::Activity& arg0) const;
	::jvoid OnActivitySaveInstanceState(const ::android::app::Activity& arg0, const ::android::os::Bundle& arg1) const;
	::jvoid OnActivityStarted(const ::android::app::Activity& arg0) const;
	::jvoid OnActivityStopped(const ::android::app::Activity& arg0) const;
	explicit Application_ActivityLifecycleCallbacks(jobject o) : java::lang::Object(o) {}
	Application_ActivityLifecycleCallbacks(const Application_ActivityLifecycleCallbacks& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::app::Application_ActivityLifecycleCallbacks();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnActivityCreated(const ::android::app::Activity& arg0, const ::android::os::Bundle& arg1) = 0;
		virtual void OnActivityDestroyed(const ::android::app::Activity& arg0) = 0;
		virtual void OnActivityPaused(const ::android::app::Activity& arg0) = 0;
		virtual void OnActivityPostCreated(const ::android::app::Activity& arg0, const ::android::os::Bundle& arg1) = 0;
		virtual void OnActivityPostDestroyed(const ::android::app::Activity& arg0) = 0;
		virtual void OnActivityPostPaused(const ::android::app::Activity& arg0) = 0;
		virtual void OnActivityPostResumed(const ::android::app::Activity& arg0) = 0;
		virtual void OnActivityPostSaveInstanceState(const ::android::app::Activity& arg0, const ::android::os::Bundle& arg1) = 0;
		virtual void OnActivityPostStarted(const ::android::app::Activity& arg0) = 0;
		virtual void OnActivityPostStopped(const ::android::app::Activity& arg0) = 0;
		virtual void OnActivityPreCreated(const ::android::app::Activity& arg0, const ::android::os::Bundle& arg1) = 0;
		virtual void OnActivityPreDestroyed(const ::android::app::Activity& arg0) = 0;
		virtual void OnActivityPrePaused(const ::android::app::Activity& arg0) = 0;
		virtual void OnActivityPreResumed(const ::android::app::Activity& arg0) = 0;
		virtual void OnActivityPreSaveInstanceState(const ::android::app::Activity& arg0, const ::android::os::Bundle& arg1) = 0;
		virtual void OnActivityPreStarted(const ::android::app::Activity& arg0) = 0;
		virtual void OnActivityPreStopped(const ::android::app::Activity& arg0) = 0;
		virtual void OnActivityResumed(const ::android::app::Activity& arg0) = 0;
		virtual void OnActivitySaveInstanceState(const ::android::app::Activity& arg0, const ::android::os::Bundle& arg1) = 0;
		virtual void OnActivityStarted(const ::android::app::Activity& arg0) = 0;
		virtual void OnActivityStopped(const ::android::app::Activity& arg0) = 0;
	};
};

struct Application_OnProvideAssistDataListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnProvideAssistData(const ::android::app::Activity& arg0, const ::android::os::Bundle& arg1) const;
	explicit Application_OnProvideAssistDataListener(jobject o) : java::lang::Object(o) {}
	Application_OnProvideAssistDataListener(const Application_OnProvideAssistDataListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::app::Application_OnProvideAssistDataListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnProvideAssistData(const ::android::app::Activity& arg0, const ::android::os::Bundle& arg1) = 0;
	};
};

}}

namespace android { namespace transition { 
struct Scene : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid Enter() const;
	::jvoid Exit() const;
	static ::android::transition::Scene GetCurrentScene(const ::android::view::ViewGroup& arg0);
	static ::android::transition::Scene GetSceneForLayout(const ::android::view::ViewGroup& arg0, const ::jint& arg1, const ::android::content::Context& arg2);
	::android::view::ViewGroup GetSceneRoot() const;
	::jvoid SetEnterAction(const ::java::lang::Runnable& arg0) const;
	::jvoid SetExitAction(const ::java::lang::Runnable& arg0) const;
	static jobject __Constructor(const ::android::view::ViewGroup& arg0);
	Scene(const ::android::view::ViewGroup& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::view::ViewGroup& arg0, const ::android::view::View& arg1);
	Scene(const ::android::view::ViewGroup& arg0, const ::android::view::View& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::view::ViewGroup& arg0, const ::android::view::ViewGroup& arg1);
	Scene(const ::android::view::ViewGroup& arg0, const ::android::view::ViewGroup& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit Scene(jobject o) : ::java::lang::Object(o) {}
	Scene(const Scene& o)  : ::java::lang::Object(o) {}

};

struct TransitionManager : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jvoid BeginDelayedTransition(const ::android::view::ViewGroup& arg0);
	static ::jvoid BeginDelayedTransition(const ::android::view::ViewGroup& arg0, const ::android::transition::Transition& arg1);
	static ::jvoid EndTransitions(const ::android::view::ViewGroup& arg0);
	static ::jvoid Go(const ::android::transition::Scene& arg0);
	static ::jvoid Go(const ::android::transition::Scene& arg0, const ::android::transition::Transition& arg1);
	::jvoid SetTransition(const ::android::transition::Scene& arg0, const ::android::transition::Scene& arg1, const ::android::transition::Transition& arg2) const;
	::jvoid SetTransition(const ::android::transition::Scene& arg0, const ::android::transition::Transition& arg1) const;
	::jvoid TransitionTo(const ::android::transition::Scene& arg0) const;
	static jobject __Constructor();
	TransitionManager() : ::java::lang::Object(__Constructor()) {}
	explicit TransitionManager(jobject o) : ::java::lang::Object(o) {}
	TransitionManager(const TransitionManager& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace media { namespace session { 
struct MediaController : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid AdjustVolume(const ::jint& arg0, const ::jint& arg1) const;
	::jboolean DispatchMediaButtonEvent(const ::android::view::KeyEvent& arg0) const;
	::android::os::Bundle GetExtras() const;
	::jlong GetFlags() const;
	::android::media::MediaMetadata GetMetadata() const;
	::java::lang::String GetPackageName() const;
	::android::media::session::MediaController_PlaybackInfo GetPlaybackInfo() const;
	::android::media::session::PlaybackState GetPlaybackState() const;
	::java::util::List GetQueue() const;
	::java::lang::CharSequence GetQueueTitle() const;
	::jint GetRatingType() const;
	::android::app::PendingIntent GetSessionActivity() const;
	::android::os::Bundle GetSessionInfo() const;
	::android::media::session::MediaSession_Token GetSessionToken() const;
	::java::lang::String GetTag() const;
	::android::media::session::MediaController_TransportControls GetTransportControls() const;
	::jvoid RegisterCallback(const ::android::media::session::MediaController_Callback& arg0) const;
	::jvoid RegisterCallback(const ::android::media::session::MediaController_Callback& arg0, const ::android::os::Handler& arg1) const;
	::jvoid SendCommand(const ::java::lang::String& arg0, const ::android::os::Bundle& arg1, const ::android::os::ResultReceiver& arg2) const;
	::jvoid SetVolumeTo(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid UnregisterCallback(const ::android::media::session::MediaController_Callback& arg0) const;
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::media::session::MediaSession_Token& arg1);
	MediaController(const ::android::content::Context& arg0, const ::android::media::session::MediaSession_Token& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit MediaController(jobject o) : ::java::lang::Object(o) {}
	MediaController(const MediaController& o)  : ::java::lang::Object(o) {}

};

}}}

namespace android { namespace media { 
struct MediaMetadata : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::java::lang::String& fMETADATA_KEY_ALBUM();
	static ::java::lang::String& fMETADATA_KEY_ALBUM_ART();
	static ::java::lang::String& fMETADATA_KEY_ALBUM_ARTIST();
	static ::java::lang::String& fMETADATA_KEY_ALBUM_ART_URI();
	static ::java::lang::String& fMETADATA_KEY_ART();
	static ::java::lang::String& fMETADATA_KEY_ARTIST();
	static ::java::lang::String& fMETADATA_KEY_ART_URI();
	static ::java::lang::String& fMETADATA_KEY_AUTHOR();
	static ::java::lang::String& fMETADATA_KEY_BT_FOLDER_TYPE();
	static ::java::lang::String& fMETADATA_KEY_COMPILATION();
	static ::java::lang::String& fMETADATA_KEY_COMPOSER();
	static ::java::lang::String& fMETADATA_KEY_DATE();
	static ::java::lang::String& fMETADATA_KEY_DISC_NUMBER();
	static ::java::lang::String& fMETADATA_KEY_DISPLAY_DESCRIPTION();
	static ::java::lang::String& fMETADATA_KEY_DISPLAY_ICON();
	static ::java::lang::String& fMETADATA_KEY_DISPLAY_ICON_URI();
	static ::java::lang::String& fMETADATA_KEY_DISPLAY_SUBTITLE();
	static ::java::lang::String& fMETADATA_KEY_DISPLAY_TITLE();
	static ::java::lang::String& fMETADATA_KEY_DURATION();
	static ::java::lang::String& fMETADATA_KEY_GENRE();
	static ::java::lang::String& fMETADATA_KEY_MEDIA_ID();
	static ::java::lang::String& fMETADATA_KEY_MEDIA_URI();
	static ::java::lang::String& fMETADATA_KEY_NUM_TRACKS();
	static ::java::lang::String& fMETADATA_KEY_RATING();
	static ::java::lang::String& fMETADATA_KEY_TITLE();
	static ::java::lang::String& fMETADATA_KEY_TRACK_NUMBER();
	static ::java::lang::String& fMETADATA_KEY_USER_RATING();
	static ::java::lang::String& fMETADATA_KEY_WRITER();
	static ::java::lang::String& fMETADATA_KEY_YEAR();
	::jboolean ContainsKey(const ::java::lang::String& arg0) const;
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::android::graphics::Bitmap GetBitmap(const ::java::lang::String& arg0) const;
	::jint GetBitmapDimensionLimit() const;
	::android::media::MediaDescription GetDescription() const;
	::jlong GetLong(const ::java::lang::String& arg0) const;
	::android::media::Rating GetRating(const ::java::lang::String& arg0) const;
	::java::lang::String GetString(const ::java::lang::String& arg0) const;
	::java::lang::CharSequence GetText(const ::java::lang::String& arg0) const;
	::jint HashCode() const;
	::java::util::Set KeySet() const;
	::jint Size() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit MediaMetadata(jobject o) : ::java::lang::Object(o) {}
	MediaMetadata(const MediaMetadata& o)  : ::java::lang::Object(o) {}

};

struct MediaDescription : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::jlong& fBT_FOLDER_TYPE_ALBUMS();
	static ::jlong& fBT_FOLDER_TYPE_ARTISTS();
	static ::jlong& fBT_FOLDER_TYPE_GENRES();
	static ::jlong& fBT_FOLDER_TYPE_MIXED();
	static ::jlong& fBT_FOLDER_TYPE_PLAYLISTS();
	static ::jlong& fBT_FOLDER_TYPE_TITLES();
	static ::jlong& fBT_FOLDER_TYPE_YEARS();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::java::lang::String& fEXTRA_BT_FOLDER_TYPE();
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::lang::CharSequence GetDescription() const;
	::android::os::Bundle GetExtras() const;
	::android::graphics::Bitmap GetIconBitmap() const;
	::android::net::Uri GetIconUri() const;
	::java::lang::String GetMediaId() const;
	::android::net::Uri GetMediaUri() const;
	::java::lang::CharSequence GetSubtitle() const;
	::java::lang::CharSequence GetTitle() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit MediaDescription(jobject o) : ::java::lang::Object(o) {}
	MediaDescription(const MediaDescription& o)  : ::java::lang::Object(o) {}

};

struct Rating : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fRATING_3_STARS();
	static ::jint& fRATING_4_STARS();
	static ::jint& fRATING_5_STARS();
	static ::jint& fRATING_HEART();
	static ::jint& fRATING_NONE();
	static ::jint& fRATING_PERCENTAGE();
	static ::jint& fRATING_THUMB_UP_DOWN();
	::jint DescribeContents() const;
	::jfloat GetPercentRating() const;
	::jint GetRatingStyle() const;
	::jfloat GetStarRating() const;
	::jboolean HasHeart() const;
	::jboolean IsRated() const;
	::jboolean IsThumbUp() const;
	static ::android::media::Rating NewHeartRating(const ::jboolean& arg0);
	static ::android::media::Rating NewPercentageRating(const ::jfloat& arg0);
	static ::android::media::Rating NewStarRating(const ::jint& arg0, const ::jfloat& arg1);
	static ::android::media::Rating NewThumbRating(const ::jboolean& arg0);
	static ::android::media::Rating NewUnratedRating(const ::jint& arg0);
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit Rating(jobject o) : ::java::lang::Object(o) {}
	Rating(const Rating& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace media { namespace session { 
struct MediaController_PlaybackInfo : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fPLAYBACK_TYPE_LOCAL();
	static ::jint& fPLAYBACK_TYPE_REMOTE();
	::jint DescribeContents() const;
	::android::media::AudioAttributes GetAudioAttributes() const;
	::jint GetCurrentVolume() const;
	::jint GetMaxVolume() const;
	::jint GetPlaybackType() const;
	::jint GetVolumeControl() const;
	::java::lang::String GetVolumeControlId() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit MediaController_PlaybackInfo(jobject o) : ::java::lang::Object(o) {}
	MediaController_PlaybackInfo(const MediaController_PlaybackInfo& o)  : ::java::lang::Object(o) {}

};

struct PlaybackState : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::jlong& fACTION_FAST_FORWARD();
	static ::jlong& fACTION_PAUSE();
	static ::jlong& fACTION_PLAY();
	static ::jlong& fACTION_PLAY_FROM_MEDIA_ID();
	static ::jlong& fACTION_PLAY_FROM_SEARCH();
	static ::jlong& fACTION_PLAY_FROM_URI();
	static ::jlong& fACTION_PLAY_PAUSE();
	static ::jlong& fACTION_PREPARE();
	static ::jlong& fACTION_PREPARE_FROM_MEDIA_ID();
	static ::jlong& fACTION_PREPARE_FROM_SEARCH();
	static ::jlong& fACTION_PREPARE_FROM_URI();
	static ::jlong& fACTION_REWIND();
	static ::jlong& fACTION_SEEK_TO();
	static ::jlong& fACTION_SET_PLAYBACK_SPEED();
	static ::jlong& fACTION_SET_RATING();
	static ::jlong& fACTION_SKIP_TO_NEXT();
	static ::jlong& fACTION_SKIP_TO_PREVIOUS();
	static ::jlong& fACTION_SKIP_TO_QUEUE_ITEM();
	static ::jlong& fACTION_STOP();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jlong& fPLAYBACK_POSITION_UNKNOWN();
	static ::jint& fSTATE_BUFFERING();
	static ::jint& fSTATE_CONNECTING();
	static ::jint& fSTATE_ERROR();
	static ::jint& fSTATE_FAST_FORWARDING();
	static ::jint& fSTATE_NONE();
	static ::jint& fSTATE_PAUSED();
	static ::jint& fSTATE_PLAYING();
	static ::jint& fSTATE_REWINDING();
	static ::jint& fSTATE_SKIPPING_TO_NEXT();
	static ::jint& fSTATE_SKIPPING_TO_PREVIOUS();
	static ::jint& fSTATE_SKIPPING_TO_QUEUE_ITEM();
	static ::jint& fSTATE_STOPPED();
	::jint DescribeContents() const;
	::jlong GetActions() const;
	::jlong GetActiveQueueItemId() const;
	::jlong GetBufferedPosition() const;
	::java::util::List GetCustomActions() const;
	::java::lang::CharSequence GetErrorMessage() const;
	::android::os::Bundle GetExtras() const;
	::jlong GetLastPositionUpdateTime() const;
	::jfloat GetPlaybackSpeed() const;
	::jlong GetPosition() const;
	::jint GetState() const;
	::jboolean IsActive() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit PlaybackState(jobject o) : ::java::lang::Object(o) {}
	PlaybackState(const PlaybackState& o)  : ::java::lang::Object(o) {}

};

struct MediaSession_Token : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint HashCode() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit MediaSession_Token(jobject o) : ::java::lang::Object(o) {}
	MediaSession_Token(const MediaSession_Token& o)  : ::java::lang::Object(o) {}

};

struct MediaController_TransportControls : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid FastForward() const;
	::jvoid Pause() const;
	::jvoid Play() const;
	::jvoid PlayFromMediaId(const ::java::lang::String& arg0, const ::android::os::Bundle& arg1) const;
	::jvoid PlayFromSearch(const ::java::lang::String& arg0, const ::android::os::Bundle& arg1) const;
	::jvoid PlayFromUri(const ::android::net::Uri& arg0, const ::android::os::Bundle& arg1) const;
	::jvoid Prepare() const;
	::jvoid PrepareFromMediaId(const ::java::lang::String& arg0, const ::android::os::Bundle& arg1) const;
	::jvoid PrepareFromSearch(const ::java::lang::String& arg0, const ::android::os::Bundle& arg1) const;
	::jvoid PrepareFromUri(const ::android::net::Uri& arg0, const ::android::os::Bundle& arg1) const;
	::jvoid Rewind() const;
	::jvoid SeekTo(const ::jlong& arg0) const;
	::jvoid SendCustomAction(const ::android::media::session::PlaybackState_CustomAction& arg0, const ::android::os::Bundle& arg1) const;
	::jvoid SendCustomAction(const ::java::lang::String& arg0, const ::android::os::Bundle& arg1) const;
	::jvoid SetPlaybackSpeed(const ::jfloat& arg0) const;
	::jvoid SetRating(const ::android::media::Rating& arg0) const;
	::jvoid SkipToNext() const;
	::jvoid SkipToPrevious() const;
	::jvoid SkipToQueueItem(const ::jlong& arg0) const;
	::jvoid Stop() const;
	explicit MediaController_TransportControls(jobject o) : ::java::lang::Object(o) {}
	MediaController_TransportControls(const MediaController_TransportControls& o)  : ::java::lang::Object(o) {}

};

struct PlaybackState_CustomAction : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::java::lang::String GetAction() const;
	::android::os::Bundle GetExtras() const;
	::jint GetIcon() const;
	::java::lang::CharSequence GetName() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit PlaybackState_CustomAction(jobject o) : ::java::lang::Object(o) {}
	PlaybackState_CustomAction(const PlaybackState_CustomAction& o)  : ::java::lang::Object(o) {}

};

struct MediaController_Callback : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnAudioInfoChanged(const ::android::media::session::MediaController_PlaybackInfo& arg0) const;
	::jvoid OnExtrasChanged(const ::android::os::Bundle& arg0) const;
	::jvoid OnMetadataChanged(const ::android::media::MediaMetadata& arg0) const;
	::jvoid OnPlaybackStateChanged(const ::android::media::session::PlaybackState& arg0) const;
	::jvoid OnQueueChanged(const ::java::util::List& arg0) const;
	::jvoid OnQueueTitleChanged(const ::java::lang::CharSequence& arg0) const;
	::jvoid OnSessionDestroyed() const;
	::jvoid OnSessionEvent(const ::java::lang::String& arg0, const ::android::os::Bundle& arg1) const;
	static jobject __Constructor();
	MediaController_Callback() : ::java::lang::Object(__Constructor()) {}
	explicit MediaController_Callback(jobject o) : ::java::lang::Object(o) {}
	MediaController_Callback(const MediaController_Callback& o)  : ::java::lang::Object(o) {}

};

}}}

namespace android { namespace os { 
struct ResultReceiver : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::jvoid OnReceiveResult(const ::jint& arg0, const ::android::os::Bundle& arg1) const;
	::jvoid Send(const ::jint& arg0, const ::android::os::Bundle& arg1) const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor(const ::android::os::Handler& arg0);
	ResultReceiver(const ::android::os::Handler& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit ResultReceiver(jobject o) : ::java::lang::Object(o) {}
	ResultReceiver(const ResultReceiver& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace window { 
struct SplashScreen : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid ClearOnExitAnimationListener() const;
	::jvoid SetOnExitAnimationListener(const ::android::window::SplashScreen_OnExitAnimationListener& arg0) const;
	::jvoid SetSplashScreenTheme(const ::jint& arg0) const;
	explicit SplashScreen(jobject o) : java::lang::Object(o) {}
	SplashScreen(const SplashScreen& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::window::SplashScreen();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void ClearOnExitAnimationListener() = 0;
		virtual void SetOnExitAnimationListener(const ::android::window::SplashScreen_OnExitAnimationListener& arg0) = 0;
		virtual void SetSplashScreenTheme(const ::jint& arg0) = 0;
	};
};

struct SplashScreen_OnExitAnimationListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnSplashScreenExit(const ::android::window::SplashScreenView& arg0) const;
	explicit SplashScreen_OnExitAnimationListener(jobject o) : java::lang::Object(o) {}
	SplashScreen_OnExitAnimationListener(const SplashScreen_OnExitAnimationListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::window::SplashScreen_OnExitAnimationListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnSplashScreenExit(const ::android::window::SplashScreenView& arg0) = 0;
	};
};

}}

namespace android { namespace widget { 
struct FrameLayout : ::android::view::ViewGroup
{
	static jni::Class __CLASS;

	::jboolean CheckLayoutParams(const ::android::view::ViewGroup_LayoutParams& arg0) const;
	::android::widget::FrameLayout_LayoutParams GenerateDefaultLayoutParams() const;
	::android::widget::FrameLayout_LayoutParams GenerateLayoutParams(const ::android::util::AttributeSet& arg0) const;
	::android::view::ViewGroup_LayoutParams GenerateLayoutParams(const ::android::view::ViewGroup_LayoutParams& arg0) const;
	::java::lang::CharSequence GetAccessibilityClassName() const;
	::jboolean GetConsiderGoneChildrenWhenMeasuring() const;
	::jboolean GetMeasureAllChildren() const;
	::jvoid OnLayout(const ::jboolean& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4) const;
	::jvoid OnMeasure(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid SetForegroundGravity(const ::jint& arg0) const;
	::jvoid SetMeasureAllChildren(const ::jboolean& arg0) const;
	::jboolean ShouldDelayChildPressedState() const;
	static jobject __Constructor(const ::android::content::Context& arg0);
	FrameLayout(const ::android::content::Context& arg0) : ::android::view::ViewGroup(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1);
	FrameLayout(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1) : ::android::view::ViewGroup(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2);
	FrameLayout(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2) : ::android::view::ViewGroup(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3);
	FrameLayout(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3) : ::android::view::ViewGroup(__Constructor(arg0, arg1, arg2, arg3)) {}
	explicit FrameLayout(jobject o) : ::android::view::ViewGroup(o) {}
	FrameLayout(const FrameLayout& o)  : ::android::view::ViewGroup(o) {}

};

}}

namespace android { namespace window { 
struct SplashScreenView : ::android::widget::FrameLayout
{
	static jni::Class __CLASS;

	::java::time::Duration GetIconAnimationDuration() const;
	::java::time::Instant GetIconAnimationStart() const;
	::android::view::View GetIconView() const;
	::jvoid OnDetachedFromWindow() const;
	::jvoid Remove() const;
	::jvoid SetAlpha(const ::jfloat& arg0) const;
	explicit SplashScreenView(jobject o) : ::android::widget::FrameLayout(o) {}
	SplashScreenView(const SplashScreenView& o)  : ::android::widget::FrameLayout(o) {}

};

}}

namespace android { namespace widget { 
struct FrameLayout_LayoutParams : ::android::view::ViewGroup_MarginLayoutParams
{
	static jni::Class __CLASS;

	static ::jint& fUNSPECIFIED_GRAVITY();
	::jint fGravity() const;
	void fGravity(const ::jint& arg0) const;
	static jobject __Constructor(const ::jint& arg0, const ::jint& arg1);
	FrameLayout_LayoutParams(const ::jint& arg0, const ::jint& arg1) : ::android::view::ViewGroup_MarginLayoutParams(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2);
	FrameLayout_LayoutParams(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2) : ::android::view::ViewGroup_MarginLayoutParams(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1);
	FrameLayout_LayoutParams(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1) : ::android::view::ViewGroup_MarginLayoutParams(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::view::ViewGroup_LayoutParams& arg0);
	FrameLayout_LayoutParams(const ::android::view::ViewGroup_LayoutParams& arg0) : ::android::view::ViewGroup_MarginLayoutParams(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::view::ViewGroup_MarginLayoutParams& arg0);
	FrameLayout_LayoutParams(const ::android::view::ViewGroup_MarginLayoutParams& arg0) : ::android::view::ViewGroup_MarginLayoutParams(__Constructor(arg0)) {}
	explicit FrameLayout_LayoutParams(jobject o) : ::android::view::ViewGroup_MarginLayoutParams(o) {}
	FrameLayout_LayoutParams(const FrameLayout_LayoutParams& o)  : ::android::view::ViewGroup_MarginLayoutParams(o) {}

};

}}

namespace android { namespace app { 
struct VoiceInteractor : ::java::lang::Object
{
	static jni::Class __CLASS;

	::android::app::VoiceInteractor_Request GetActiveRequest(const ::java::lang::String& arg0) const;
	jni::Array< ::android::app::VoiceInteractor_Request > GetActiveRequests() const;
	::jboolean IsDestroyed() const;
	::jvoid NotifyDirectActionsChanged() const;
	::jboolean RegisterOnDestroyedCallback(const ::java::util::concurrent::Executor& arg0, const ::java::lang::Runnable& arg1) const;
	::jboolean SubmitRequest(const ::android::app::VoiceInteractor_Request& arg0) const;
	::jboolean SubmitRequest(const ::android::app::VoiceInteractor_Request& arg0, const ::java::lang::String& arg1) const;
	jni::Array< ::jboolean > SupportsCommands(const jni::Array< ::java::lang::String >& arg0) const;
	::jboolean UnregisterOnDestroyedCallback(const ::java::lang::Runnable& arg0) const;
	explicit VoiceInteractor(jobject o) : ::java::lang::Object(o) {}
	VoiceInteractor(const VoiceInteractor& o)  : ::java::lang::Object(o) {}

};

struct VoiceInteractor_Request : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid Cancel() const;
	::android::app::Activity GetActivity() const;
	::android::content::Context GetContext() const;
	::java::lang::String GetName() const;
	::jvoid OnAttached(const ::android::app::Activity& arg0) const;
	::jvoid OnCancel() const;
	::jvoid OnDetached() const;
	::java::lang::String ToString() const;
	explicit VoiceInteractor_Request(jobject o) : ::java::lang::Object(o) {}
	VoiceInteractor_Request(const VoiceInteractor_Request& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace view { 
struct Window : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fDECOR_CAPTION_SHADE_AUTO();
	static ::jint& fDECOR_CAPTION_SHADE_DARK();
	static ::jint& fDECOR_CAPTION_SHADE_LIGHT();
	static ::jint& fDEFAULT_FEATURES();
	static ::jint& fFEATURE_ACTION_BAR();
	static ::jint& fFEATURE_ACTION_BAR_OVERLAY();
	static ::jint& fFEATURE_ACTION_MODE_OVERLAY();
	static ::jint& fFEATURE_ACTIVITY_TRANSITIONS();
	static ::jint& fFEATURE_CONTENT_TRANSITIONS();
	static ::jint& fFEATURE_CONTEXT_MENU();
	static ::jint& fFEATURE_CUSTOM_TITLE();
	static ::jint& fFEATURE_INDETERMINATE_PROGRESS();
	static ::jint& fFEATURE_LEFT_ICON();
	static ::jint& fFEATURE_NO_TITLE();
	static ::jint& fFEATURE_OPTIONS_PANEL();
	static ::jint& fFEATURE_PROGRESS();
	static ::jint& fFEATURE_RIGHT_ICON();
	static ::jint& fFEATURE_SWIPE_TO_DISMISS();
	static ::jint& fID_ANDROID_CONTENT();
	static ::java::lang::String& fNAVIGATION_BAR_BACKGROUND_TRANSITION_NAME();
	static ::jint& fPROGRESS_END();
	static ::jint& fPROGRESS_INDETERMINATE_OFF();
	static ::jint& fPROGRESS_INDETERMINATE_ON();
	static ::jint& fPROGRESS_SECONDARY_END();
	static ::jint& fPROGRESS_SECONDARY_START();
	static ::jint& fPROGRESS_START();
	static ::jint& fPROGRESS_VISIBILITY_OFF();
	static ::jint& fPROGRESS_VISIBILITY_ON();
	static ::java::lang::String& fSTATUS_BAR_BACKGROUND_TRANSITION_NAME();
	::jvoid AddContentView(const ::android::view::View& arg0, const ::android::view::ViewGroup_LayoutParams& arg1) const;
	::jvoid AddFlags(const ::jint& arg0) const;
	::jvoid AddOnFrameMetricsAvailableListener(const ::android::view::Window_OnFrameMetricsAvailableListener& arg0, const ::android::os::Handler& arg1) const;
	::jvoid ClearFlags(const ::jint& arg0) const;
	::jvoid CloseAllPanels() const;
	::jvoid ClosePanel(const ::jint& arg0) const;
	::android::view::View FindViewById(const ::jint& arg0) const;
	::jboolean GetAllowEnterTransitionOverlap() const;
	::jboolean GetAllowReturnTransitionOverlap() const;
	::android::view::WindowManager_LayoutParams GetAttributes() const;
	::android::view::Window_Callback GetCallback() const;
	::jint GetColorMode() const;
	::android::view::Window GetContainer() const;
	::android::transition::Scene GetContentScene() const;
	::android::content::Context GetContext() const;
	::android::view::View GetCurrentFocus() const;
	::android::view::View GetDecorView() const;
	static ::jint GetDefaultFeatures(const ::android::content::Context& arg0);
	::android::transition::Transition GetEnterTransition() const;
	::android::transition::Transition GetExitTransition() const;
	::jint GetFeatures() const;
	::jint GetForcedWindowFlags() const;
	::android::view::WindowInsetsController GetInsetsController() const;
	::android::view::LayoutInflater GetLayoutInflater() const;
	::jint GetLocalFeatures() const;
	::android::media::session::MediaController GetMediaController() const;
	::jint GetNavigationBarColor() const;
	::jint GetNavigationBarDividerColor() const;
	::android::transition::Transition GetReenterTransition() const;
	::android::transition::Transition GetReturnTransition() const;
	::android::view::AttachedSurfaceControl GetRootSurfaceControl() const;
	::android::transition::Transition GetSharedElementEnterTransition() const;
	::android::transition::Transition GetSharedElementExitTransition() const;
	::android::transition::Transition GetSharedElementReenterTransition() const;
	::android::transition::Transition GetSharedElementReturnTransition() const;
	::jboolean GetSharedElementsUseOverlay() const;
	::jint GetStatusBarColor() const;
	::java::util::List GetSystemGestureExclusionRects() const;
	::jlong GetTransitionBackgroundFadeDuration() const;
	::android::transition::TransitionManager GetTransitionManager() const;
	::jint GetVolumeControlStream() const;
	::android::view::WindowManager GetWindowManager() const;
	::android::content::res::TypedArray GetWindowStyle() const;
	::jboolean HasChildren() const;
	::jboolean HasFeature(const ::jint& arg0) const;
	::jboolean HasSoftInputMode() const;
	::jvoid InjectInputEvent(const ::android::view::InputEvent& arg0) const;
	::jvoid InvalidatePanelMenu(const ::jint& arg0) const;
	::jboolean IsActive() const;
	::jboolean IsFloating() const;
	::jboolean IsNavigationBarContrastEnforced() const;
	::jboolean IsShortcutKey(const ::jint& arg0, const ::android::view::KeyEvent& arg1) const;
	::jboolean IsStatusBarContrastEnforced() const;
	::jboolean IsWideColorGamut() const;
	::jvoid MakeActive() const;
	::jvoid OnActive() const;
	::jvoid OnConfigurationChanged(const ::android::content::res::Configuration& arg0) const;
	::jvoid OpenPanel(const ::jint& arg0, const ::android::view::KeyEvent& arg1) const;
	::android::view::View PeekDecorView() const;
	::jboolean PerformContextMenuIdentifierAction(const ::jint& arg0, const ::jint& arg1) const;
	::jboolean PerformPanelIdentifierAction(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jboolean PerformPanelShortcut(const ::jint& arg0, const ::jint& arg1, const ::android::view::KeyEvent& arg2, const ::jint& arg3) const;
	::jvoid RegisterScrollCaptureCallback(const ::android::view::ScrollCaptureCallback& arg0) const;
	::jvoid RemoveOnFrameMetricsAvailableListener(const ::android::view::Window_OnFrameMetricsAvailableListener& arg0) const;
	::jboolean RequestFeature(const ::jint& arg0) const;
	::android::view::View RequireViewById(const ::jint& arg0) const;
	::jvoid RestoreHierarchyState(const ::android::os::Bundle& arg0) const;
	::android::os::Bundle SaveHierarchyState() const;
	::jvoid SetAllowEnterTransitionOverlap(const ::jboolean& arg0) const;
	::jvoid SetAllowReturnTransitionOverlap(const ::jboolean& arg0) const;
	::jvoid SetAttributes(const ::android::view::WindowManager_LayoutParams& arg0) const;
	::jvoid SetBackgroundBlurRadius(const ::jint& arg0) const;
	::jvoid SetBackgroundDrawable(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid SetBackgroundDrawableResource(const ::jint& arg0) const;
	::jvoid SetCallback(const ::android::view::Window_Callback& arg0) const;
	::jvoid SetChildDrawable(const ::jint& arg0, const ::android::graphics::drawable::Drawable& arg1) const;
	::jvoid SetChildInt(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid SetClipToOutline(const ::jboolean& arg0) const;
	::jvoid SetColorMode(const ::jint& arg0) const;
	::jvoid SetContainer(const ::android::view::Window& arg0) const;
	::jvoid SetContentView(const ::jint& arg0) const;
	::jvoid SetContentView(const ::android::view::View& arg0) const;
	::jvoid SetContentView(const ::android::view::View& arg0, const ::android::view::ViewGroup_LayoutParams& arg1) const;
	::jvoid SetDecorCaptionShade(const ::jint& arg0) const;
	::jvoid SetDecorFitsSystemWindows(const ::jboolean& arg0) const;
	::jvoid SetDefaultWindowFormat(const ::jint& arg0) const;
	::jvoid SetDimAmount(const ::jfloat& arg0) const;
	::jvoid SetElevation(const ::jfloat& arg0) const;
	::jvoid SetEnterTransition(const ::android::transition::Transition& arg0) const;
	::jvoid SetExitTransition(const ::android::transition::Transition& arg0) const;
	::jvoid SetFeatureDrawable(const ::jint& arg0, const ::android::graphics::drawable::Drawable& arg1) const;
	::jvoid SetFeatureDrawableAlpha(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid SetFeatureDrawableResource(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid SetFeatureDrawableUri(const ::jint& arg0, const ::android::net::Uri& arg1) const;
	::jvoid SetFeatureInt(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid SetFlags(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid SetFormat(const ::jint& arg0) const;
	::jvoid SetGravity(const ::jint& arg0) const;
	::jvoid SetHideOverlayWindows(const ::jboolean& arg0) const;
	::jvoid SetIcon(const ::jint& arg0) const;
	::jvoid SetLayout(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid SetLocalFocus(const ::jboolean& arg0, const ::jboolean& arg1) const;
	::jvoid SetLogo(const ::jint& arg0) const;
	::jvoid SetMediaController(const ::android::media::session::MediaController& arg0) const;
	::jvoid SetNavigationBarColor(const ::jint& arg0) const;
	::jvoid SetNavigationBarContrastEnforced(const ::jboolean& arg0) const;
	::jvoid SetNavigationBarDividerColor(const ::jint& arg0) const;
	::jvoid SetPreferMinimalPostProcessing(const ::jboolean& arg0) const;
	::jvoid SetReenterTransition(const ::android::transition::Transition& arg0) const;
	::jvoid SetResizingCaptionDrawable(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid SetRestrictedCaptionAreaListener(const ::android::view::Window_OnRestrictedCaptionAreaChangedListener& arg0) const;
	::jvoid SetReturnTransition(const ::android::transition::Transition& arg0) const;
	::jvoid SetSharedElementEnterTransition(const ::android::transition::Transition& arg0) const;
	::jvoid SetSharedElementExitTransition(const ::android::transition::Transition& arg0) const;
	::jvoid SetSharedElementReenterTransition(const ::android::transition::Transition& arg0) const;
	::jvoid SetSharedElementReturnTransition(const ::android::transition::Transition& arg0) const;
	::jvoid SetSharedElementsUseOverlay(const ::jboolean& arg0) const;
	::jvoid SetSoftInputMode(const ::jint& arg0) const;
	::jvoid SetStatusBarColor(const ::jint& arg0) const;
	::jvoid SetStatusBarContrastEnforced(const ::jboolean& arg0) const;
	::jvoid SetSustainedPerformanceMode(const ::jboolean& arg0) const;
	::jvoid SetSystemGestureExclusionRects(const ::java::util::List& arg0) const;
	::jvoid SetTitle(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetTitleColor(const ::jint& arg0) const;
	::jvoid SetTransitionBackgroundFadeDuration(const ::jlong& arg0) const;
	::jvoid SetTransitionManager(const ::android::transition::TransitionManager& arg0) const;
	::jvoid SetType(const ::jint& arg0) const;
	::jvoid SetUiOptions(const ::jint& arg0) const;
	::jvoid SetUiOptions(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid SetVolumeControlStream(const ::jint& arg0) const;
	::jvoid SetWindowAnimations(const ::jint& arg0) const;
	::jvoid SetWindowManager(const ::android::view::WindowManager& arg0, const ::android::os::IBinder& arg1, const ::java::lang::String& arg2) const;
	::jvoid SetWindowManager(const ::android::view::WindowManager& arg0, const ::android::os::IBinder& arg1, const ::java::lang::String& arg2, const ::jboolean& arg3) const;
	::jboolean SuperDispatchGenericMotionEvent(const ::android::view::MotionEvent& arg0) const;
	::jboolean SuperDispatchKeyEvent(const ::android::view::KeyEvent& arg0) const;
	::jboolean SuperDispatchKeyShortcutEvent(const ::android::view::KeyEvent& arg0) const;
	::jboolean SuperDispatchTouchEvent(const ::android::view::MotionEvent& arg0) const;
	::jboolean SuperDispatchTrackballEvent(const ::android::view::MotionEvent& arg0) const;
	::jvoid TakeInputQueue(const ::android::view::InputQueue_Callback& arg0) const;
	::jvoid TakeKeyEvents(const ::jboolean& arg0) const;
	::jvoid TakeSurface(const ::android::view::SurfaceHolder_Callback2& arg0) const;
	::jvoid TogglePanel(const ::jint& arg0, const ::android::view::KeyEvent& arg1) const;
	::jvoid UnregisterScrollCaptureCallback(const ::android::view::ScrollCaptureCallback& arg0) const;
	static jobject __Constructor(const ::android::content::Context& arg0);
	Window(const ::android::content::Context& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit Window(jobject o) : ::java::lang::Object(o) {}
	Window(const Window& o)  : ::java::lang::Object(o) {}

};

struct Window_OnFrameMetricsAvailableListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnFrameMetricsAvailable(const ::android::view::Window& arg0, const ::android::view::FrameMetrics& arg1, const ::jint& arg2) const;
	explicit Window_OnFrameMetricsAvailableListener(jobject o) : java::lang::Object(o) {}
	Window_OnFrameMetricsAvailableListener(const Window_OnFrameMetricsAvailableListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::Window_OnFrameMetricsAvailableListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnFrameMetricsAvailable(const ::android::view::Window& arg0, const ::android::view::FrameMetrics& arg1, const ::jint& arg2) = 0;
	};
};

struct FrameMetrics : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fANIMATION_DURATION();
	static ::jint& fCOMMAND_ISSUE_DURATION();
	static ::jint& fDEADLINE();
	static ::jint& fDRAW_DURATION();
	static ::jint& fFIRST_DRAW_FRAME();
	static ::jint& fGPU_DURATION();
	static ::jint& fINPUT_HANDLING_DURATION();
	static ::jint& fINTENDED_VSYNC_TIMESTAMP();
	static ::jint& fLAYOUT_MEASURE_DURATION();
	static ::jint& fSWAP_BUFFERS_DURATION();
	static ::jint& fSYNC_DURATION();
	static ::jint& fTOTAL_DURATION();
	static ::jint& fUNKNOWN_DELAY_DURATION();
	static ::jint& fVSYNC_TIMESTAMP();
	::jlong GetMetric(const ::jint& arg0) const;
	explicit FrameMetrics(jobject o) : ::java::lang::Object(o) {}
	FrameMetrics(const FrameMetrics& o)  : ::java::lang::Object(o) {}

};

struct WindowManager : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::view::ViewManager();
	::jvoid AddCrossWindowBlurEnabledListener(const ::java::util::concurrent::Executor& arg0, const ::java::util::function::Consumer& arg1) const;
	::jvoid AddCrossWindowBlurEnabledListener(const ::java::util::function::Consumer& arg0) const;
	::android::view::WindowMetrics GetCurrentWindowMetrics() const;
	::android::view::Display GetDefaultDisplay() const;
	::android::view::WindowMetrics GetMaximumWindowMetrics() const;
	::jboolean IsCrossWindowBlurEnabled() const;
	::jvoid RemoveCrossWindowBlurEnabledListener(const ::java::util::function::Consumer& arg0) const;
	::jvoid RemoveViewImmediate(const ::android::view::View& arg0) const;
	explicit WindowManager(jobject o) : java::lang::Object(o) {}
	WindowManager(const WindowManager& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::WindowManager();
		operator ::android::view::ViewManager();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void AddCrossWindowBlurEnabledListener(const ::java::util::concurrent::Executor& arg0, const ::java::util::function::Consumer& arg1) = 0;
		virtual void AddCrossWindowBlurEnabledListener(const ::java::util::function::Consumer& arg0) = 0;
		virtual ::android::view::WindowMetrics GetCurrentWindowMetrics() = 0;
		virtual ::android::view::Display GetDefaultDisplay() = 0;
		virtual ::android::view::WindowMetrics GetMaximumWindowMetrics() = 0;
		virtual ::jboolean IsCrossWindowBlurEnabled() = 0;
		virtual void RemoveCrossWindowBlurEnabledListener(const ::java::util::function::Consumer& arg0) = 0;
		virtual void RemoveViewImmediate(const ::android::view::View& arg0) = 0;
	};
};

struct WindowMetrics : ::java::lang::Object
{
	static jni::Class __CLASS;

	::android::graphics::Rect GetBounds() const;
	::android::view::WindowInsets GetWindowInsets() const;
	static jobject __Constructor(const ::android::graphics::Rect& arg0, const ::android::view::WindowInsets& arg1);
	WindowMetrics(const ::android::graphics::Rect& arg0, const ::android::view::WindowInsets& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit WindowMetrics(jobject o) : ::java::lang::Object(o) {}
	WindowMetrics(const WindowMetrics& o)  : ::java::lang::Object(o) {}

};

struct Window_OnRestrictedCaptionAreaChangedListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnRestrictedCaptionAreaChanged(const ::android::graphics::Rect& arg0) const;
	explicit Window_OnRestrictedCaptionAreaChangedListener(jobject o) : java::lang::Object(o) {}
	Window_OnRestrictedCaptionAreaChangedListener(const Window_OnRestrictedCaptionAreaChangedListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::Window_OnRestrictedCaptionAreaChangedListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnRestrictedCaptionAreaChanged(const ::android::graphics::Rect& arg0) = 0;
	};
};

struct InputQueue_Callback : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnInputQueueCreated(const ::android::view::InputQueue& arg0) const;
	::jvoid OnInputQueueDestroyed(const ::android::view::InputQueue& arg0) const;
	explicit InputQueue_Callback(jobject o) : java::lang::Object(o) {}
	InputQueue_Callback(const InputQueue_Callback& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::InputQueue_Callback();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnInputQueueCreated(const ::android::view::InputQueue& arg0) = 0;
		virtual void OnInputQueueDestroyed(const ::android::view::InputQueue& arg0) = 0;
	};
};

struct InputQueue : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid Finalize() const;
	explicit InputQueue(jobject o) : ::java::lang::Object(o) {}
	InputQueue(const InputQueue& o)  : ::java::lang::Object(o) {}

};

struct SurfaceHolder_Callback2 : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::view::SurfaceHolder_Callback();
	::jvoid SurfaceRedrawNeeded(const ::android::view::SurfaceHolder& arg0) const;
	::jvoid SurfaceRedrawNeededAsync(const ::android::view::SurfaceHolder& arg0, const ::java::lang::Runnable& arg1) const;
	explicit SurfaceHolder_Callback2(jobject o) : java::lang::Object(o) {}
	SurfaceHolder_Callback2(const SurfaceHolder_Callback2& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::SurfaceHolder_Callback2();
		operator ::android::view::SurfaceHolder_Callback();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void SurfaceRedrawNeeded(const ::android::view::SurfaceHolder& arg0) = 0;
		virtual void SurfaceRedrawNeededAsync(const ::android::view::SurfaceHolder& arg0, const ::java::lang::Runnable& arg1) = 0;
	};
};

struct SurfaceHolder_Callback : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid SurfaceChanged(const ::android::view::SurfaceHolder& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid SurfaceCreated(const ::android::view::SurfaceHolder& arg0) const;
	::jvoid SurfaceDestroyed(const ::android::view::SurfaceHolder& arg0) const;
	explicit SurfaceHolder_Callback(jobject o) : java::lang::Object(o) {}
	SurfaceHolder_Callback(const SurfaceHolder_Callback& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::SurfaceHolder_Callback();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void SurfaceChanged(const ::android::view::SurfaceHolder& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) = 0;
		virtual void SurfaceCreated(const ::android::view::SurfaceHolder& arg0) = 0;
		virtual void SurfaceDestroyed(const ::android::view::SurfaceHolder& arg0) = 0;
	};
};

struct SurfaceHolder : java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fSURFACE_TYPE_GPU();
	static ::jint& fSURFACE_TYPE_HARDWARE();
	static ::jint& fSURFACE_TYPE_NORMAL();
	static ::jint& fSURFACE_TYPE_PUSH_BUFFERS();
	::jvoid AddCallback(const ::android::view::SurfaceHolder_Callback& arg0) const;
	::android::view::Surface GetSurface() const;
	::android::graphics::Rect GetSurfaceFrame() const;
	::jboolean IsCreating() const;
	::android::graphics::Canvas LockCanvas() const;
	::android::graphics::Canvas LockCanvas(const ::android::graphics::Rect& arg0) const;
	::android::graphics::Canvas LockHardwareCanvas() const;
	::jvoid RemoveCallback(const ::android::view::SurfaceHolder_Callback& arg0) const;
	::jvoid SetFixedSize(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid SetFormat(const ::jint& arg0) const;
	::jvoid SetKeepScreenOn(const ::jboolean& arg0) const;
	::jvoid SetSizeFromLayout() const;
	::jvoid SetType(const ::jint& arg0) const;
	::jvoid UnlockCanvasAndPost(const ::android::graphics::Canvas& arg0) const;
	explicit SurfaceHolder(jobject o) : java::lang::Object(o) {}
	SurfaceHolder(const SurfaceHolder& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::SurfaceHolder();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void AddCallback(const ::android::view::SurfaceHolder_Callback& arg0) = 0;
		virtual ::android::view::Surface GetSurface() = 0;
		virtual ::android::graphics::Rect GetSurfaceFrame() = 0;
		virtual ::jboolean IsCreating() = 0;
		virtual ::android::graphics::Canvas LockCanvas() = 0;
		virtual ::android::graphics::Canvas LockCanvas(const ::android::graphics::Rect& arg0) = 0;
		virtual ::android::graphics::Canvas LockHardwareCanvas() = 0;
		virtual void RemoveCallback(const ::android::view::SurfaceHolder_Callback& arg0) = 0;
		virtual void SetFixedSize(const ::jint& arg0, const ::jint& arg1) = 0;
		virtual void SetFormat(const ::jint& arg0) = 0;
		virtual void SetKeepScreenOn(const ::jboolean& arg0) = 0;
		virtual void SetSizeFromLayout() = 0;
		virtual void SetType(const ::jint& arg0) = 0;
		virtual void UnlockCanvasAndPost(const ::android::graphics::Canvas& arg0) = 0;
	};
};

}}

namespace android { namespace app { 
struct Dialog : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::content::DialogInterface();
	operator ::android::view::Window_Callback();
	operator ::android::view::KeyEvent_Callback();
	operator ::android::view::View_OnCreateContextMenuListener();
	::jvoid AddContentView(const ::android::view::View& arg0, const ::android::view::ViewGroup_LayoutParams& arg1) const;
	::jvoid Cancel() const;
	::jvoid CloseOptionsMenu() const;
	::jvoid Create() const;
	::jvoid Dismiss() const;
	::jboolean DispatchGenericMotionEvent(const ::android::view::MotionEvent& arg0) const;
	::jboolean DispatchKeyEvent(const ::android::view::KeyEvent& arg0) const;
	::jboolean DispatchKeyShortcutEvent(const ::android::view::KeyEvent& arg0) const;
	::jboolean DispatchPopulateAccessibilityEvent(const ::android::view::accessibility::AccessibilityEvent& arg0) const;
	::jboolean DispatchTouchEvent(const ::android::view::MotionEvent& arg0) const;
	::jboolean DispatchTrackballEvent(const ::android::view::MotionEvent& arg0) const;
	::android::view::View FindViewById(const ::jint& arg0) const;
	::android::app::ActionBar GetActionBar() const;
	::android::content::Context GetContext() const;
	::android::view::View GetCurrentFocus() const;
	::android::view::LayoutInflater GetLayoutInflater() const;
	::android::app::Activity GetOwnerActivity() const;
	::android::view::SearchEvent GetSearchEvent() const;
	::jint GetVolumeControlStream() const;
	::android::view::Window GetWindow() const;
	::jvoid Hide() const;
	::jvoid InvalidateOptionsMenu() const;
	::jboolean IsShowing() const;
	::jvoid OnActionModeFinished(const ::android::view::ActionMode& arg0) const;
	::jvoid OnActionModeStarted(const ::android::view::ActionMode& arg0) const;
	::jvoid OnAttachedToWindow() const;
	::jvoid OnBackPressed() const;
	::jvoid OnContentChanged() const;
	::jboolean OnContextItemSelected(const ::android::view::MenuItem& arg0) const;
	::jvoid OnContextMenuClosed(const ::android::view::Menu& arg0) const;
	::jvoid OnCreate(const ::android::os::Bundle& arg0) const;
	::jvoid OnCreateContextMenu(const ::android::view::ContextMenu& arg0, const ::android::view::View& arg1, const ::android::view::ContextMenu_ContextMenuInfo& arg2) const;
	::jboolean OnCreateOptionsMenu(const ::android::view::Menu& arg0) const;
	::jboolean OnCreatePanelMenu(const ::jint& arg0, const ::android::view::Menu& arg1) const;
	::android::view::View OnCreatePanelView(const ::jint& arg0) const;
	::jvoid OnDetachedFromWindow() const;
	::jboolean OnGenericMotionEvent(const ::android::view::MotionEvent& arg0) const;
	::jboolean OnKeyDown(const ::jint& arg0, const ::android::view::KeyEvent& arg1) const;
	::jboolean OnKeyLongPress(const ::jint& arg0, const ::android::view::KeyEvent& arg1) const;
	::jboolean OnKeyMultiple(const ::jint& arg0, const ::jint& arg1, const ::android::view::KeyEvent& arg2) const;
	::jboolean OnKeyShortcut(const ::jint& arg0, const ::android::view::KeyEvent& arg1) const;
	::jboolean OnKeyUp(const ::jint& arg0, const ::android::view::KeyEvent& arg1) const;
	::jboolean OnMenuItemSelected(const ::jint& arg0, const ::android::view::MenuItem& arg1) const;
	::jboolean OnMenuOpened(const ::jint& arg0, const ::android::view::Menu& arg1) const;
	::jboolean OnOptionsItemSelected(const ::android::view::MenuItem& arg0) const;
	::jvoid OnOptionsMenuClosed(const ::android::view::Menu& arg0) const;
	::jvoid OnPanelClosed(const ::jint& arg0, const ::android::view::Menu& arg1) const;
	::jboolean OnPrepareOptionsMenu(const ::android::view::Menu& arg0) const;
	::jboolean OnPreparePanel(const ::jint& arg0, const ::android::view::View& arg1, const ::android::view::Menu& arg2) const;
	::jvoid OnRestoreInstanceState(const ::android::os::Bundle& arg0) const;
	::android::os::Bundle OnSaveInstanceState() const;
	::jboolean OnSearchRequested() const;
	::jboolean OnSearchRequested(const ::android::view::SearchEvent& arg0) const;
	::jvoid OnStart() const;
	::jvoid OnStop() const;
	::jboolean OnTouchEvent(const ::android::view::MotionEvent& arg0) const;
	::jboolean OnTrackballEvent(const ::android::view::MotionEvent& arg0) const;
	::jvoid OnWindowAttributesChanged(const ::android::view::WindowManager_LayoutParams& arg0) const;
	::jvoid OnWindowFocusChanged(const ::jboolean& arg0) const;
	::android::view::ActionMode OnWindowStartingActionMode(const ::android::view::ActionMode_Callback& arg0) const;
	::android::view::ActionMode OnWindowStartingActionMode(const ::android::view::ActionMode_Callback& arg0, const ::jint& arg1) const;
	::jvoid OpenContextMenu(const ::android::view::View& arg0) const;
	::jvoid OpenOptionsMenu() const;
	::jvoid RegisterForContextMenu(const ::android::view::View& arg0) const;
	::jboolean RequestWindowFeature(const ::jint& arg0) const;
	::android::view::View RequireViewById(const ::jint& arg0) const;
	::jvoid SetCancelMessage(const ::android::os::Message& arg0) const;
	::jvoid SetCancelable(const ::jboolean& arg0) const;
	::jvoid SetCanceledOnTouchOutside(const ::jboolean& arg0) const;
	::jvoid SetContentView(const ::jint& arg0) const;
	::jvoid SetContentView(const ::android::view::View& arg0) const;
	::jvoid SetContentView(const ::android::view::View& arg0, const ::android::view::ViewGroup_LayoutParams& arg1) const;
	::jvoid SetDismissMessage(const ::android::os::Message& arg0) const;
	::jvoid SetFeatureDrawable(const ::jint& arg0, const ::android::graphics::drawable::Drawable& arg1) const;
	::jvoid SetFeatureDrawableAlpha(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid SetFeatureDrawableResource(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid SetFeatureDrawableUri(const ::jint& arg0, const ::android::net::Uri& arg1) const;
	::jvoid SetOnCancelListener(const ::android::content::DialogInterface_OnCancelListener& arg0) const;
	::jvoid SetOnDismissListener(const ::android::content::DialogInterface_OnDismissListener& arg0) const;
	::jvoid SetOnKeyListener(const ::android::content::DialogInterface_OnKeyListener& arg0) const;
	::jvoid SetOnShowListener(const ::android::content::DialogInterface_OnShowListener& arg0) const;
	::jvoid SetOwnerActivity(const ::android::app::Activity& arg0) const;
	::jvoid SetTitle(const ::jint& arg0) const;
	::jvoid SetTitle(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetVolumeControlStream(const ::jint& arg0) const;
	::jvoid Show() const;
	::jvoid TakeKeyEvents(const ::jboolean& arg0) const;
	::jvoid UnregisterForContextMenu(const ::android::view::View& arg0) const;
	static jobject __Constructor(const ::android::content::Context& arg0);
	Dialog(const ::android::content::Context& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::jint& arg1);
	Dialog(const ::android::content::Context& arg0, const ::jint& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::jboolean& arg1, const ::android::content::DialogInterface_OnCancelListener& arg2);
	Dialog(const ::android::content::Context& arg0, const ::jboolean& arg1, const ::android::content::DialogInterface_OnCancelListener& arg2) : ::java::lang::Object(__Constructor(arg0, arg1, arg2)) {}
	explicit Dialog(jobject o) : ::java::lang::Object(o) {}
	Dialog(const Dialog& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace content { 
struct DialogInterface : java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fBUTTON1();
	static ::jint& fBUTTON2();
	static ::jint& fBUTTON3();
	static ::jint& fBUTTON_NEGATIVE();
	static ::jint& fBUTTON_NEUTRAL();
	static ::jint& fBUTTON_POSITIVE();
	::jvoid Cancel() const;
	::jvoid Dismiss() const;
	explicit DialogInterface(jobject o) : java::lang::Object(o) {}
	DialogInterface(const DialogInterface& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::content::DialogInterface();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void Cancel() = 0;
		virtual void Dismiss() = 0;
	};
};

struct DialogInterface_OnCancelListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnCancel(const ::android::content::DialogInterface& arg0) const;
	explicit DialogInterface_OnCancelListener(jobject o) : java::lang::Object(o) {}
	DialogInterface_OnCancelListener(const DialogInterface_OnCancelListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::content::DialogInterface_OnCancelListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnCancel(const ::android::content::DialogInterface& arg0) = 0;
	};
};

struct DialogInterface_OnDismissListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnDismiss(const ::android::content::DialogInterface& arg0) const;
	explicit DialogInterface_OnDismissListener(jobject o) : java::lang::Object(o) {}
	DialogInterface_OnDismissListener(const DialogInterface_OnDismissListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::content::DialogInterface_OnDismissListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnDismiss(const ::android::content::DialogInterface& arg0) = 0;
	};
};

struct DialogInterface_OnKeyListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean OnKey(const ::android::content::DialogInterface& arg0, const ::jint& arg1, const ::android::view::KeyEvent& arg2) const;
	explicit DialogInterface_OnKeyListener(jobject o) : java::lang::Object(o) {}
	DialogInterface_OnKeyListener(const DialogInterface_OnKeyListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::content::DialogInterface_OnKeyListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean OnKey(const ::android::content::DialogInterface& arg0, const ::jint& arg1, const ::android::view::KeyEvent& arg2) = 0;
	};
};

struct DialogInterface_OnShowListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnShow(const ::android::content::DialogInterface& arg0) const;
	explicit DialogInterface_OnShowListener(jobject o) : java::lang::Object(o) {}
	DialogInterface_OnShowListener(const DialogInterface_OnShowListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::content::DialogInterface_OnShowListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnShow(const ::android::content::DialogInterface& arg0) = 0;
	};
};

}}

namespace android { namespace app { 
struct TaskStackBuilder : ::java::lang::Object
{
	static jni::Class __CLASS;

	::android::app::TaskStackBuilder AddNextIntent(const ::android::content::Intent& arg0) const;
	::android::app::TaskStackBuilder AddNextIntentWithParentStack(const ::android::content::Intent& arg0) const;
	::android::app::TaskStackBuilder AddParentStack(const ::android::app::Activity& arg0) const;
	::android::app::TaskStackBuilder AddParentStack(const ::android::content::ComponentName& arg0) const;
	::android::app::TaskStackBuilder AddParentStack(const ::java::lang::Class& arg0) const;
	static ::android::app::TaskStackBuilder Create(const ::android::content::Context& arg0);
	::android::content::Intent EditIntentAt(const ::jint& arg0) const;
	::jint GetIntentCount() const;
	jni::Array< ::android::content::Intent > GetIntents() const;
	::android::app::PendingIntent GetPendingIntent(const ::jint& arg0, const ::jint& arg1) const;
	::android::app::PendingIntent GetPendingIntent(const ::jint& arg0, const ::jint& arg1, const ::android::os::Bundle& arg2) const;
	::jvoid StartActivities() const;
	::jvoid StartActivities(const ::android::os::Bundle& arg0) const;
	explicit TaskStackBuilder(jobject o) : ::java::lang::Object(o) {}
	TaskStackBuilder(const TaskStackBuilder& o)  : ::java::lang::Object(o) {}

};

struct PictureInPictureUiState : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint HashCode() const;
	::jboolean IsStashed() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit PictureInPictureUiState(jobject o) : ::java::lang::Object(o) {}
	PictureInPictureUiState(const PictureInPictureUiState& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace app { namespace assist { 
struct AssistContent : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::android::content::ClipData GetClipData() const;
	::android::os::Bundle GetExtras() const;
	::android::content::Intent GetIntent() const;
	::java::lang::String GetStructuredData() const;
	::android::net::Uri GetWebUri() const;
	::jboolean IsAppProvidedIntent() const;
	::jboolean IsAppProvidedWebUri() const;
	::jvoid SetClipData(const ::android::content::ClipData& arg0) const;
	::jvoid SetIntent(const ::android::content::Intent& arg0) const;
	::jvoid SetStructuredData(const ::java::lang::String& arg0) const;
	::jvoid SetWebUri(const ::android::net::Uri& arg0) const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor();
	AssistContent() : ::java::lang::Object(__Constructor()) {}
	explicit AssistContent(jobject o) : ::java::lang::Object(o) {}
	AssistContent(const AssistContent& o)  : ::java::lang::Object(o) {}

};

}}}

namespace android { namespace view { 
struct DragAndDropPermissions : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::jvoid Release() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit DragAndDropPermissions(jobject o) : ::java::lang::Object(o) {}
	DragAndDropPermissions(const DragAndDropPermissions& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace widget { 
struct Toolbar : ::android::view::ViewGroup
{
	static jni::Class __CLASS;

	::jboolean CheckLayoutParams(const ::android::view::ViewGroup_LayoutParams& arg0) const;
	::jvoid CollapseActionView() const;
	::jvoid DismissPopupMenus() const;
	::android::widget::Toolbar_LayoutParams GenerateDefaultLayoutParams() const;
	::android::widget::Toolbar_LayoutParams GenerateLayoutParams(const ::android::util::AttributeSet& arg0) const;
	::android::widget::Toolbar_LayoutParams GenerateLayoutParams(const ::android::view::ViewGroup_LayoutParams& arg0) const;
	::java::lang::CharSequence GetCollapseContentDescription() const;
	::android::graphics::drawable::Drawable GetCollapseIcon() const;
	::jint GetContentInsetEnd() const;
	::jint GetContentInsetEndWithActions() const;
	::jint GetContentInsetLeft() const;
	::jint GetContentInsetRight() const;
	::jint GetContentInsetStart() const;
	::jint GetContentInsetStartWithNavigation() const;
	::jint GetCurrentContentInsetEnd() const;
	::jint GetCurrentContentInsetLeft() const;
	::jint GetCurrentContentInsetRight() const;
	::jint GetCurrentContentInsetStart() const;
	::android::graphics::drawable::Drawable GetLogo() const;
	::java::lang::CharSequence GetLogoDescription() const;
	::android::view::Menu GetMenu() const;
	::java::lang::CharSequence GetNavigationContentDescription() const;
	::android::graphics::drawable::Drawable GetNavigationIcon() const;
	::android::graphics::drawable::Drawable GetOverflowIcon() const;
	::jint GetPopupTheme() const;
	::java::lang::CharSequence GetSubtitle() const;
	::java::lang::CharSequence GetTitle() const;
	::jint GetTitleMarginBottom() const;
	::jint GetTitleMarginEnd() const;
	::jint GetTitleMarginStart() const;
	::jint GetTitleMarginTop() const;
	::jboolean HasExpandedActionView() const;
	::jboolean HideOverflowMenu() const;
	::jvoid InflateMenu(const ::jint& arg0) const;
	::jboolean IsOverflowMenuShowing() const;
	::jvoid OnAttachedToWindow() const;
	::jvoid OnDetachedFromWindow() const;
	::jvoid OnLayout(const ::jboolean& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4) const;
	::jvoid OnMeasure(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid OnRestoreInstanceState(const ::android::os::Parcelable& arg0) const;
	::jvoid OnRtlPropertiesChanged(const ::jint& arg0) const;
	::android::os::Parcelable OnSaveInstanceState() const;
	::jboolean OnTouchEvent(const ::android::view::MotionEvent& arg0) const;
	::jvoid SetCollapseContentDescription(const ::jint& arg0) const;
	::jvoid SetCollapseContentDescription(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetCollapseIcon(const ::jint& arg0) const;
	::jvoid SetCollapseIcon(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid SetContentInsetEndWithActions(const ::jint& arg0) const;
	::jvoid SetContentInsetStartWithNavigation(const ::jint& arg0) const;
	::jvoid SetContentInsetsAbsolute(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid SetContentInsetsRelative(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid SetLogo(const ::jint& arg0) const;
	::jvoid SetLogo(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid SetLogoDescription(const ::jint& arg0) const;
	::jvoid SetLogoDescription(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetNavigationContentDescription(const ::jint& arg0) const;
	::jvoid SetNavigationContentDescription(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetNavigationIcon(const ::jint& arg0) const;
	::jvoid SetNavigationIcon(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid SetNavigationOnClickListener(const ::android::view::View_OnClickListener& arg0) const;
	::jvoid SetOnMenuItemClickListener(const ::android::widget::Toolbar_OnMenuItemClickListener& arg0) const;
	::jvoid SetOverflowIcon(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid SetPopupTheme(const ::jint& arg0) const;
	::jvoid SetSubtitle(const ::jint& arg0) const;
	::jvoid SetSubtitle(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetSubtitleTextAppearance(const ::android::content::Context& arg0, const ::jint& arg1) const;
	::jvoid SetSubtitleTextColor(const ::jint& arg0) const;
	::jvoid SetTitle(const ::jint& arg0) const;
	::jvoid SetTitle(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetTitleMargin(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid SetTitleMarginBottom(const ::jint& arg0) const;
	::jvoid SetTitleMarginEnd(const ::jint& arg0) const;
	::jvoid SetTitleMarginStart(const ::jint& arg0) const;
	::jvoid SetTitleMarginTop(const ::jint& arg0) const;
	::jvoid SetTitleTextAppearance(const ::android::content::Context& arg0, const ::jint& arg1) const;
	::jvoid SetTitleTextColor(const ::jint& arg0) const;
	::jboolean ShowOverflowMenu() const;
	static jobject __Constructor(const ::android::content::Context& arg0);
	Toolbar(const ::android::content::Context& arg0) : ::android::view::ViewGroup(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1);
	Toolbar(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1) : ::android::view::ViewGroup(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2);
	Toolbar(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2) : ::android::view::ViewGroup(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3);
	Toolbar(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3) : ::android::view::ViewGroup(__Constructor(arg0, arg1, arg2, arg3)) {}
	explicit Toolbar(jobject o) : ::android::view::ViewGroup(o) {}
	Toolbar(const Toolbar& o)  : ::android::view::ViewGroup(o) {}

};

struct Toolbar_LayoutParams : ::android::app::ActionBar_LayoutParams
{
	static jni::Class __CLASS;

	static jobject __Constructor(const ::jint& arg0);
	Toolbar_LayoutParams(const ::jint& arg0) : ::android::app::ActionBar_LayoutParams(__Constructor(arg0)) {}
	static jobject __Constructor(const ::jint& arg0, const ::jint& arg1);
	Toolbar_LayoutParams(const ::jint& arg0, const ::jint& arg1) : ::android::app::ActionBar_LayoutParams(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2);
	Toolbar_LayoutParams(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2) : ::android::app::ActionBar_LayoutParams(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::android::app::ActionBar_LayoutParams& arg0);
	Toolbar_LayoutParams(const ::android::app::ActionBar_LayoutParams& arg0) : ::android::app::ActionBar_LayoutParams(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1);
	Toolbar_LayoutParams(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1) : ::android::app::ActionBar_LayoutParams(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::view::ViewGroup_LayoutParams& arg0);
	Toolbar_LayoutParams(const ::android::view::ViewGroup_LayoutParams& arg0) : ::android::app::ActionBar_LayoutParams(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::view::ViewGroup_MarginLayoutParams& arg0);
	Toolbar_LayoutParams(const ::android::view::ViewGroup_MarginLayoutParams& arg0) : ::android::app::ActionBar_LayoutParams(__Constructor(arg0)) {}
	explicit Toolbar_LayoutParams(jobject o) : ::android::app::ActionBar_LayoutParams(o) {}
	Toolbar_LayoutParams(const Toolbar_LayoutParams& o)  : ::android::app::ActionBar_LayoutParams(o) {}

};

struct Toolbar_OnMenuItemClickListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean OnMenuItemClick(const ::android::view::MenuItem& arg0) const;
	explicit Toolbar_OnMenuItemClickListener(jobject o) : java::lang::Object(o) {}
	Toolbar_OnMenuItemClickListener(const Toolbar_OnMenuItemClickListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::widget::Toolbar_OnMenuItemClickListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean OnMenuItemClick(const ::android::view::MenuItem& arg0) = 0;
	};
};

}}

namespace android { namespace app { 
struct ActivityManager_TaskDescription : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::android::graphics::Bitmap GetIcon() const;
	::java::lang::String GetLabel() const;
	::jint GetPrimaryColor() const;
	::jvoid ReadFromParcel(const ::android::os::Parcel& arg0) const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor();
	ActivityManager_TaskDescription() : ::java::lang::Object(__Constructor()) {}
	static jobject __Constructor(const ::java::lang::String& arg0);
	ActivityManager_TaskDescription(const ::java::lang::String& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::jint& arg1);
	ActivityManager_TaskDescription(const ::java::lang::String& arg0, const ::jint& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::jint& arg1, const ::jint& arg2);
	ActivityManager_TaskDescription(const ::java::lang::String& arg0, const ::jint& arg1, const ::jint& arg2) : ::java::lang::Object(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::android::graphics::Bitmap& arg1);
	ActivityManager_TaskDescription(const ::java::lang::String& arg0, const ::android::graphics::Bitmap& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::android::graphics::Bitmap& arg1, const ::jint& arg2);
	ActivityManager_TaskDescription(const ::java::lang::String& arg0, const ::android::graphics::Bitmap& arg1, const ::jint& arg2) : ::java::lang::Object(__Constructor(arg0, arg1, arg2)) {}
	explicit ActivityManager_TaskDescription(jobject o) : ::java::lang::Object(o) {}
	ActivityManager_TaskDescription(const ActivityManager_TaskDescription& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace view { 
struct Gravity : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fAXIS_CLIP();
	static ::jint& fAXIS_PULL_AFTER();
	static ::jint& fAXIS_PULL_BEFORE();
	static ::jint& fAXIS_SPECIFIED();
	static ::jint& fAXIS_X_SHIFT();
	static ::jint& fAXIS_Y_SHIFT();
	static ::jint& fBOTTOM();
	static ::jint& fCENTER();
	static ::jint& fCENTER_HORIZONTAL();
	static ::jint& fCENTER_VERTICAL();
	static ::jint& fCLIP_HORIZONTAL();
	static ::jint& fCLIP_VERTICAL();
	static ::jint& fDISPLAY_CLIP_HORIZONTAL();
	static ::jint& fDISPLAY_CLIP_VERTICAL();
	static ::jint& fEND();
	static ::jint& fFILL();
	static ::jint& fFILL_HORIZONTAL();
	static ::jint& fFILL_VERTICAL();
	static ::jint& fHORIZONTAL_GRAVITY_MASK();
	static ::jint& fLEFT();
	static ::jint& fNO_GRAVITY();
	static ::jint& fRELATIVE_HORIZONTAL_GRAVITY_MASK();
	static ::jint& fRELATIVE_LAYOUT_DIRECTION();
	static ::jint& fRIGHT();
	static ::jint& fSTART();
	static ::jint& fTOP();
	static ::jint& fVERTICAL_GRAVITY_MASK();
	static ::jvoid Apply(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::android::graphics::Rect& arg3, const ::jint& arg4, const ::jint& arg5, const ::android::graphics::Rect& arg6);
	static ::jvoid Apply(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::android::graphics::Rect& arg3, const ::jint& arg4, const ::jint& arg5, const ::android::graphics::Rect& arg6, const ::jint& arg7);
	static ::jvoid Apply(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::android::graphics::Rect& arg3, const ::android::graphics::Rect& arg4);
	static ::jvoid Apply(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::android::graphics::Rect& arg3, const ::android::graphics::Rect& arg4, const ::jint& arg5);
	static ::jvoid ApplyDisplay(const ::jint& arg0, const ::android::graphics::Rect& arg1, const ::android::graphics::Rect& arg2);
	static ::jvoid ApplyDisplay(const ::jint& arg0, const ::android::graphics::Rect& arg1, const ::android::graphics::Rect& arg2, const ::jint& arg3);
	static ::jint GetAbsoluteGravity(const ::jint& arg0, const ::jint& arg1);
	static ::jboolean IsHorizontal(const ::jint& arg0);
	static ::jboolean IsVertical(const ::jint& arg0);
	static jobject __Constructor();
	Gravity() : ::java::lang::Object(__Constructor()) {}
	explicit Gravity(jobject o) : ::java::lang::Object(o) {}
	Gravity(const Gravity& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace widget { 
struct LinearLayout : ::android::view::ViewGroup
{
	static jni::Class __CLASS;

	static ::jint& fHORIZONTAL();
	static ::jint& fSHOW_DIVIDER_BEGINNING();
	static ::jint& fSHOW_DIVIDER_END();
	static ::jint& fSHOW_DIVIDER_MIDDLE();
	static ::jint& fSHOW_DIVIDER_NONE();
	static ::jint& fVERTICAL();
	::jboolean CheckLayoutParams(const ::android::view::ViewGroup_LayoutParams& arg0) const;
	::android::widget::LinearLayout_LayoutParams GenerateDefaultLayoutParams() const;
	::android::widget::LinearLayout_LayoutParams GenerateLayoutParams(const ::android::util::AttributeSet& arg0) const;
	::android::widget::LinearLayout_LayoutParams GenerateLayoutParams(const ::android::view::ViewGroup_LayoutParams& arg0) const;
	::java::lang::CharSequence GetAccessibilityClassName() const;
	::jint GetBaseline() const;
	::jint GetBaselineAlignedChildIndex() const;
	::android::graphics::drawable::Drawable GetDividerDrawable() const;
	::jint GetDividerPadding() const;
	::jint GetGravity() const;
	::jint GetOrientation() const;
	::jint GetShowDividers() const;
	::jfloat GetWeightSum() const;
	::jboolean IsBaselineAligned() const;
	::jboolean IsMeasureWithLargestChildEnabled() const;
	::jvoid OnDraw(const ::android::graphics::Canvas& arg0) const;
	::jvoid OnLayout(const ::jboolean& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4) const;
	::jvoid OnMeasure(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid OnRtlPropertiesChanged(const ::jint& arg0) const;
	::jvoid SetBaselineAligned(const ::jboolean& arg0) const;
	::jvoid SetBaselineAlignedChildIndex(const ::jint& arg0) const;
	::jvoid SetDividerDrawable(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid SetDividerPadding(const ::jint& arg0) const;
	::jvoid SetGravity(const ::jint& arg0) const;
	::jvoid SetHorizontalGravity(const ::jint& arg0) const;
	::jvoid SetMeasureWithLargestChildEnabled(const ::jboolean& arg0) const;
	::jvoid SetOrientation(const ::jint& arg0) const;
	::jvoid SetShowDividers(const ::jint& arg0) const;
	::jvoid SetVerticalGravity(const ::jint& arg0) const;
	::jvoid SetWeightSum(const ::jfloat& arg0) const;
	::jboolean ShouldDelayChildPressedState() const;
	static jobject __Constructor(const ::android::content::Context& arg0);
	LinearLayout(const ::android::content::Context& arg0) : ::android::view::ViewGroup(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1);
	LinearLayout(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1) : ::android::view::ViewGroup(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2);
	LinearLayout(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2) : ::android::view::ViewGroup(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3);
	LinearLayout(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3) : ::android::view::ViewGroup(__Constructor(arg0, arg1, arg2, arg3)) {}
	explicit LinearLayout(jobject o) : ::android::view::ViewGroup(o) {}
	LinearLayout(const LinearLayout& o)  : ::android::view::ViewGroup(o) {}

};

struct LinearLayout_LayoutParams : ::android::view::ViewGroup_MarginLayoutParams
{
	static jni::Class __CLASS;

	::jint fGravity() const;
	void fGravity(const ::jint& arg0) const;
	::jfloat fWeight() const;
	void fWeight(const ::jfloat& arg0) const;
	::java::lang::String Debug(const ::java::lang::String& arg0) const;
	static jobject __Constructor(const ::jint& arg0, const ::jint& arg1);
	LinearLayout_LayoutParams(const ::jint& arg0, const ::jint& arg1) : ::android::view::ViewGroup_MarginLayoutParams(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::jint& arg0, const ::jint& arg1, const ::jfloat& arg2);
	LinearLayout_LayoutParams(const ::jint& arg0, const ::jint& arg1, const ::jfloat& arg2) : ::android::view::ViewGroup_MarginLayoutParams(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1);
	LinearLayout_LayoutParams(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1) : ::android::view::ViewGroup_MarginLayoutParams(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::view::ViewGroup_LayoutParams& arg0);
	LinearLayout_LayoutParams(const ::android::view::ViewGroup_LayoutParams& arg0) : ::android::view::ViewGroup_MarginLayoutParams(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::view::ViewGroup_MarginLayoutParams& arg0);
	LinearLayout_LayoutParams(const ::android::view::ViewGroup_MarginLayoutParams& arg0) : ::android::view::ViewGroup_MarginLayoutParams(__Constructor(arg0)) {}
	explicit LinearLayout_LayoutParams(jobject o) : ::android::view::ViewGroup_MarginLayoutParams(o) {}
	LinearLayout_LayoutParams(const LinearLayout_LayoutParams& o)  : ::android::view::ViewGroup_MarginLayoutParams(o) {}

};

struct RelativeLayout : ::android::view::ViewGroup
{
	static jni::Class __CLASS;

	static ::jint& fABOVE();
	static ::jint& fALIGN_BASELINE();
	static ::jint& fALIGN_BOTTOM();
	static ::jint& fALIGN_END();
	static ::jint& fALIGN_LEFT();
	static ::jint& fALIGN_PARENT_BOTTOM();
	static ::jint& fALIGN_PARENT_END();
	static ::jint& fALIGN_PARENT_LEFT();
	static ::jint& fALIGN_PARENT_RIGHT();
	static ::jint& fALIGN_PARENT_START();
	static ::jint& fALIGN_PARENT_TOP();
	static ::jint& fALIGN_RIGHT();
	static ::jint& fALIGN_START();
	static ::jint& fALIGN_TOP();
	static ::jint& fBELOW();
	static ::jint& fCENTER_HORIZONTAL();
	static ::jint& fCENTER_IN_PARENT();
	static ::jint& fCENTER_VERTICAL();
	static ::jint& fEND_OF();
	static ::jint& fLEFT_OF();
	static ::jint& fRIGHT_OF();
	static ::jint& fSTART_OF();
	static ::jint& fTRUE();
	::jboolean CheckLayoutParams(const ::android::view::ViewGroup_LayoutParams& arg0) const;
	::android::view::ViewGroup_LayoutParams GenerateDefaultLayoutParams() const;
	::android::widget::RelativeLayout_LayoutParams GenerateLayoutParams(const ::android::util::AttributeSet& arg0) const;
	::android::view::ViewGroup_LayoutParams GenerateLayoutParams(const ::android::view::ViewGroup_LayoutParams& arg0) const;
	::java::lang::CharSequence GetAccessibilityClassName() const;
	::jint GetBaseline() const;
	::jint GetGravity() const;
	::jint GetIgnoreGravity() const;
	::jvoid OnLayout(const ::jboolean& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4) const;
	::jvoid OnMeasure(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid RequestLayout() const;
	::jvoid SetGravity(const ::jint& arg0) const;
	::jvoid SetHorizontalGravity(const ::jint& arg0) const;
	::jvoid SetIgnoreGravity(const ::jint& arg0) const;
	::jvoid SetVerticalGravity(const ::jint& arg0) const;
	::jboolean ShouldDelayChildPressedState() const;
	static jobject __Constructor(const ::android::content::Context& arg0);
	RelativeLayout(const ::android::content::Context& arg0) : ::android::view::ViewGroup(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1);
	RelativeLayout(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1) : ::android::view::ViewGroup(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2);
	RelativeLayout(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2) : ::android::view::ViewGroup(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3);
	RelativeLayout(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3) : ::android::view::ViewGroup(__Constructor(arg0, arg1, arg2, arg3)) {}
	explicit RelativeLayout(jobject o) : ::android::view::ViewGroup(o) {}
	RelativeLayout(const RelativeLayout& o)  : ::android::view::ViewGroup(o) {}

};

struct RelativeLayout_LayoutParams : ::android::view::ViewGroup_MarginLayoutParams
{
	static jni::Class __CLASS;

	::jboolean fAlignWithParent() const;
	void fAlignWithParent(const ::jboolean& arg0) const;
	::jvoid AddRule(const ::jint& arg0) const;
	::jvoid AddRule(const ::jint& arg0, const ::jint& arg1) const;
	::java::lang::String Debug(const ::java::lang::String& arg0) const;
	::jint GetRule(const ::jint& arg0) const;
	jni::Array< ::jint > GetRules() const;
	::jvoid RemoveRule(const ::jint& arg0) const;
	::jvoid ResolveLayoutDirection(const ::jint& arg0) const;
	static jobject __Constructor(const ::jint& arg0, const ::jint& arg1);
	RelativeLayout_LayoutParams(const ::jint& arg0, const ::jint& arg1) : ::android::view::ViewGroup_MarginLayoutParams(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1);
	RelativeLayout_LayoutParams(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1) : ::android::view::ViewGroup_MarginLayoutParams(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::view::ViewGroup_LayoutParams& arg0);
	RelativeLayout_LayoutParams(const ::android::view::ViewGroup_LayoutParams& arg0) : ::android::view::ViewGroup_MarginLayoutParams(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::view::ViewGroup_MarginLayoutParams& arg0);
	RelativeLayout_LayoutParams(const ::android::view::ViewGroup_MarginLayoutParams& arg0) : ::android::view::ViewGroup_MarginLayoutParams(__Constructor(arg0)) {}
	explicit RelativeLayout_LayoutParams(jobject o) : ::android::view::ViewGroup_MarginLayoutParams(o) {}
	RelativeLayout_LayoutParams(const RelativeLayout_LayoutParams& o)  : ::android::view::ViewGroup_MarginLayoutParams(o) {}

};

struct ImageView : ::android::view::View
{
	static jni::Class __CLASS;

	::jvoid AnimateTransform(const ::android::graphics::Matrix& arg0) const;
	::jvoid ClearColorFilter() const;
	::jvoid DrawableHotspotChanged(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jvoid DrawableStateChanged() const;
	::java::lang::CharSequence GetAccessibilityClassName() const;
	::jboolean GetAdjustViewBounds() const;
	::jint GetBaseline() const;
	::jboolean GetBaselineAlignBottom() const;
	::android::graphics::ColorFilter GetColorFilter() const;
	::jboolean GetCropToPadding() const;
	::android::graphics::drawable::Drawable GetDrawable() const;
	::jint GetImageAlpha() const;
	::android::graphics::Matrix GetImageMatrix() const;
	::android::graphics::BlendMode GetImageTintBlendMode() const;
	::android::content::res::ColorStateList GetImageTintList() const;
	::android::graphics::PorterDuff_Mode GetImageTintMode() const;
	::jint GetMaxHeight() const;
	::jint GetMaxWidth() const;
	::android::widget::ImageView_ScaleType GetScaleType() const;
	::jboolean HasOverlappingRendering() const;
	::jvoid InvalidateDrawable(const ::android::graphics::drawable::Drawable& arg0) const;
	::jboolean IsOpaque() const;
	::jvoid JumpDrawablesToCurrentState() const;
	::jvoid OnAttachedToWindow() const;
	jni::Array< ::jint > OnCreateDrawableState(const ::jint& arg0) const;
	::jvoid OnDetachedFromWindow() const;
	::jvoid OnDraw(const ::android::graphics::Canvas& arg0) const;
	::jvoid OnMeasure(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid OnRtlPropertiesChanged(const ::jint& arg0) const;
	::jvoid OnVisibilityAggregated(const ::jboolean& arg0) const;
	::jvoid SetAdjustViewBounds(const ::jboolean& arg0) const;
	::jvoid SetAlpha(const ::jint& arg0) const;
	::jvoid SetBaseline(const ::jint& arg0) const;
	::jvoid SetBaselineAlignBottom(const ::jboolean& arg0) const;
	::jvoid SetColorFilter(const ::jint& arg0) const;
	::jvoid SetColorFilter(const ::jint& arg0, const ::android::graphics::PorterDuff_Mode& arg1) const;
	::jvoid SetColorFilter(const ::android::graphics::ColorFilter& arg0) const;
	::jvoid SetCropToPadding(const ::jboolean& arg0) const;
	::jboolean SetFrame(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid SetImageAlpha(const ::jint& arg0) const;
	::jvoid SetImageBitmap(const ::android::graphics::Bitmap& arg0) const;
	::jvoid SetImageDrawable(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid SetImageIcon(const ::android::graphics::drawable::Icon& arg0) const;
	::jvoid SetImageLevel(const ::jint& arg0) const;
	::jvoid SetImageMatrix(const ::android::graphics::Matrix& arg0) const;
	::jvoid SetImageResource(const ::jint& arg0) const;
	::jvoid SetImageState(const jni::Array< ::jint >& arg0, const ::jboolean& arg1) const;
	::jvoid SetImageTintBlendMode(const ::android::graphics::BlendMode& arg0) const;
	::jvoid SetImageTintList(const ::android::content::res::ColorStateList& arg0) const;
	::jvoid SetImageTintMode(const ::android::graphics::PorterDuff_Mode& arg0) const;
	::jvoid SetImageURI(const ::android::net::Uri& arg0) const;
	::jvoid SetMaxHeight(const ::jint& arg0) const;
	::jvoid SetMaxWidth(const ::jint& arg0) const;
	::jvoid SetScaleType(const ::android::widget::ImageView_ScaleType& arg0) const;
	::jvoid SetSelected(const ::jboolean& arg0) const;
	::jvoid SetVisibility(const ::jint& arg0) const;
	::jboolean VerifyDrawable(const ::android::graphics::drawable::Drawable& arg0) const;
	static jobject __Constructor(const ::android::content::Context& arg0);
	ImageView(const ::android::content::Context& arg0) : ::android::view::View(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1);
	ImageView(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1) : ::android::view::View(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2);
	ImageView(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2) : ::android::view::View(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3);
	ImageView(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3) : ::android::view::View(__Constructor(arg0, arg1, arg2, arg3)) {}
	explicit ImageView(jobject o) : ::android::view::View(o) {}
	ImageView(const ImageView& o)  : ::android::view::View(o) {}

};

struct ImageView_ScaleType : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::android::widget::ImageView_ScaleType& fCENTER();
	static ::android::widget::ImageView_ScaleType& fCENTER_CROP();
	static ::android::widget::ImageView_ScaleType& fCENTER_INSIDE();
	static ::android::widget::ImageView_ScaleType& fFIT_CENTER();
	static ::android::widget::ImageView_ScaleType& fFIT_END();
	static ::android::widget::ImageView_ScaleType& fFIT_START();
	static ::android::widget::ImageView_ScaleType& fFIT_XY();
	static ::android::widget::ImageView_ScaleType& fMATRIX();
	static ::android::widget::ImageView_ScaleType ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::android::widget::ImageView_ScaleType > Values();
	explicit ImageView_ScaleType(jobject o) : ::java::lang::Enum(o) {}
	ImageView_ScaleType(const ImageView_ScaleType& o)  : ::java::lang::Enum(o) {}

};

struct TextView : ::android::view::View
{
	static jni::Class __CLASS;

	operator ::android::view::ViewTreeObserver_OnPreDrawListener();
	static ::jint& fAUTO_SIZE_TEXT_TYPE_NONE();
	static ::jint& fAUTO_SIZE_TEXT_TYPE_UNIFORM();
	::jvoid AddExtraDataToAccessibilityNodeInfo(const ::android::view::accessibility::AccessibilityNodeInfo& arg0, const ::java::lang::String& arg1, const ::android::os::Bundle& arg2) const;
	::jvoid AddTextChangedListener(const ::android::text::TextWatcher& arg0) const;
	::jvoid Append(const ::java::lang::CharSequence& arg0) const;
	::jvoid Append(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jvoid Autofill(const ::android::view::autofill::AutofillValue& arg0) const;
	::jvoid BeginBatchEdit() const;
	::jboolean BringPointIntoView(const ::jint& arg0) const;
	::jvoid CancelLongPress() const;
	::jvoid ClearComposingText() const;
	::jint ComputeHorizontalScrollRange() const;
	::jvoid ComputeScroll() const;
	::jint ComputeVerticalScrollExtent() const;
	::jint ComputeVerticalScrollRange() const;
	::jvoid Debug(const ::jint& arg0) const;
	::jboolean DidTouchFocusSelect() const;
	::jvoid DrawableHotspotChanged(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jvoid DrawableStateChanged() const;
	::jvoid EndBatchEdit() const;
	::jboolean ExtractText(const ::android::view::inputmethod::ExtractedTextRequest& arg0, const ::android::view::inputmethod::ExtractedText& arg1) const;
	::jvoid FindViewsWithText(const ::java::util::ArrayList& arg0, const ::java::lang::CharSequence& arg1, const ::jint& arg2) const;
	::java::lang::CharSequence GetAccessibilityClassName() const;
	::jint GetAutoLinkMask() const;
	::jint GetAutoSizeMaxTextSize() const;
	::jint GetAutoSizeMinTextSize() const;
	::jint GetAutoSizeStepGranularity() const;
	jni::Array< ::jint > GetAutoSizeTextAvailableSizes() const;
	::jint GetAutoSizeTextType() const;
	::jint GetAutofillType() const;
	::android::view::autofill::AutofillValue GetAutofillValue() const;
	::jint GetBaseline() const;
	::jint GetBottomPaddingOffset() const;
	::jint GetBreakStrategy() const;
	::jint GetCompoundDrawablePadding() const;
	::android::graphics::BlendMode GetCompoundDrawableTintBlendMode() const;
	::android::content::res::ColorStateList GetCompoundDrawableTintList() const;
	::android::graphics::PorterDuff_Mode GetCompoundDrawableTintMode() const;
	jni::Array< ::android::graphics::drawable::Drawable > GetCompoundDrawables() const;
	jni::Array< ::android::graphics::drawable::Drawable > GetCompoundDrawablesRelative() const;
	::jint GetCompoundPaddingBottom() const;
	::jint GetCompoundPaddingEnd() const;
	::jint GetCompoundPaddingLeft() const;
	::jint GetCompoundPaddingRight() const;
	::jint GetCompoundPaddingStart() const;
	::jint GetCompoundPaddingTop() const;
	::jint GetCurrentHintTextColor() const;
	::jint GetCurrentTextColor() const;
	::android::view::ActionMode_Callback GetCustomInsertionActionModeCallback() const;
	::android::view::ActionMode_Callback GetCustomSelectionActionModeCallback() const;
	::jboolean GetDefaultEditable() const;
	::android::text::method::MovementMethod GetDefaultMovementMethod() const;
	::android::text::Editable GetEditableText() const;
	::android::text::TextUtils_TruncateAt GetEllipsize() const;
	::java::lang::CharSequence GetError() const;
	::jint GetExtendedPaddingBottom() const;
	::jint GetExtendedPaddingTop() const;
	jni::Array< ::android::text::InputFilter > GetFilters() const;
	::jint GetFirstBaselineToTopHeight() const;
	::jvoid GetFocusedRect(const ::android::graphics::Rect& arg0) const;
	::java::lang::String GetFontFeatureSettings() const;
	::java::lang::String GetFontVariationSettings() const;
	::jboolean GetFreezesText() const;
	::jint GetGravity() const;
	::jint GetHighlightColor() const;
	::java::lang::CharSequence GetHint() const;
	::android::content::res::ColorStateList GetHintTextColors() const;
	::jint GetHyphenationFrequency() const;
	::jint GetImeActionId() const;
	::java::lang::CharSequence GetImeActionLabel() const;
	::android::os::LocaleList GetImeHintLocales() const;
	::jint GetImeOptions() const;
	::jboolean GetIncludeFontPadding() const;
	::android::os::Bundle GetInputExtras(const ::jboolean& arg0) const;
	::jint GetInputType() const;
	::jint GetJustificationMode() const;
	::android::text::method::KeyListener GetKeyListener() const;
	::jint GetLastBaselineToBottomHeight() const;
	::android::text::Layout GetLayout() const;
	::jfloat GetLeftFadingEdgeStrength() const;
	::jint GetLeftPaddingOffset() const;
	::jfloat GetLetterSpacing() const;
	::jint GetLineBounds(const ::jint& arg0, const ::android::graphics::Rect& arg1) const;
	::jint GetLineCount() const;
	::jint GetLineHeight() const;
	::jfloat GetLineSpacingExtra() const;
	::jfloat GetLineSpacingMultiplier() const;
	::android::content::res::ColorStateList GetLinkTextColors() const;
	::jboolean GetLinksClickable() const;
	::jint GetMarqueeRepeatLimit() const;
	::jint GetMaxEms() const;
	::jint GetMaxHeight() const;
	::jint GetMaxLines() const;
	::jint GetMaxWidth() const;
	::jint GetMinEms() const;
	::jint GetMinHeight() const;
	::jint GetMinLines() const;
	::jint GetMinWidth() const;
	::android::text::method::MovementMethod GetMovementMethod() const;
	::jint GetOffsetForPosition(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::android::text::TextPaint GetPaint() const;
	::jint GetPaintFlags() const;
	::java::lang::String GetPrivateImeOptions() const;
	::jfloat GetRightFadingEdgeStrength() const;
	::jint GetRightPaddingOffset() const;
	::jint GetSelectionEnd() const;
	::jint GetSelectionStart() const;
	::jint GetShadowColor() const;
	::jfloat GetShadowDx() const;
	::jfloat GetShadowDy() const;
	::jfloat GetShadowRadius() const;
	::jboolean GetShowSoftInputOnFocus() const;
	::java::lang::CharSequence GetText() const;
	::android::view::textclassifier::TextClassifier GetTextClassifier() const;
	::android::content::res::ColorStateList GetTextColors() const;
	::android::graphics::drawable::Drawable GetTextCursorDrawable() const;
	::android::text::TextDirectionHeuristic GetTextDirectionHeuristic() const;
	::java::util::Locale GetTextLocale() const;
	::android::os::LocaleList GetTextLocales() const;
	::android::text::PrecomputedText_Params GetTextMetricsParams() const;
	::jfloat GetTextScaleX() const;
	::android::graphics::drawable::Drawable GetTextSelectHandle() const;
	::android::graphics::drawable::Drawable GetTextSelectHandleLeft() const;
	::android::graphics::drawable::Drawable GetTextSelectHandleRight() const;
	::jfloat GetTextSize() const;
	::jint GetTextSizeUnit() const;
	::jint GetTopPaddingOffset() const;
	::jint GetTotalPaddingBottom() const;
	::jint GetTotalPaddingEnd() const;
	::jint GetTotalPaddingLeft() const;
	::jint GetTotalPaddingRight() const;
	::jint GetTotalPaddingStart() const;
	::jint GetTotalPaddingTop() const;
	::android::text::method::TransformationMethod GetTransformationMethod() const;
	::android::graphics::Typeface GetTypeface() const;
	jni::Array< ::android::text::style::URLSpan > GetUrls() const;
	::jboolean HasOverlappingRendering() const;
	::jboolean HasSelection() const;
	::jvoid InvalidateDrawable(const ::android::graphics::drawable::Drawable& arg0) const;
	::jboolean IsAllCaps() const;
	::jboolean IsCursorVisible() const;
	::jboolean IsElegantTextHeight() const;
	::jboolean IsFallbackLineSpacing() const;
	::jboolean IsHorizontallyScrollable() const;
	::jboolean IsInputMethodTarget() const;
	::jboolean IsPaddingOffsetRequired() const;
	::jboolean IsSingleLine() const;
	::jboolean IsSuggestionsEnabled() const;
	::jboolean IsTextSelectable() const;
	::jvoid JumpDrawablesToCurrentState() const;
	::jint Length() const;
	::jboolean MoveCursorToVisibleOffset() const;
	::jvoid OnAttachedToWindow() const;
	::jvoid OnBeginBatchEdit() const;
	::jboolean OnCheckIsTextEditor() const;
	::jvoid OnCommitCompletion(const ::android::view::inputmethod::CompletionInfo& arg0) const;
	::jvoid OnCommitCorrection(const ::android::view::inputmethod::CorrectionInfo& arg0) const;
	::jvoid OnConfigurationChanged(const ::android::content::res::Configuration& arg0) const;
	::jvoid OnCreateContextMenu(const ::android::view::ContextMenu& arg0) const;
	jni::Array< ::jint > OnCreateDrawableState(const ::jint& arg0) const;
	::android::view::inputmethod::InputConnection OnCreateInputConnection(const ::android::view::inputmethod::EditorInfo& arg0) const;
	::jvoid OnCreateViewTranslationRequest(const jni::Array< ::jint >& arg0, const ::java::util::function::Consumer& arg1) const;
	::jboolean OnDragEvent(const ::android::view::DragEvent& arg0) const;
	::jvoid OnDraw(const ::android::graphics::Canvas& arg0) const;
	::jvoid OnEditorAction(const ::jint& arg0) const;
	::jvoid OnEndBatchEdit() const;
	::jvoid OnFocusChanged(const ::jboolean& arg0, const ::jint& arg1, const ::android::graphics::Rect& arg2) const;
	::jboolean OnGenericMotionEvent(const ::android::view::MotionEvent& arg0) const;
	::jboolean OnKeyDown(const ::jint& arg0, const ::android::view::KeyEvent& arg1) const;
	::jboolean OnKeyMultiple(const ::jint& arg0, const ::jint& arg1, const ::android::view::KeyEvent& arg2) const;
	::jboolean OnKeyPreIme(const ::jint& arg0, const ::android::view::KeyEvent& arg1) const;
	::jboolean OnKeyShortcut(const ::jint& arg0, const ::android::view::KeyEvent& arg1) const;
	::jboolean OnKeyUp(const ::jint& arg0, const ::android::view::KeyEvent& arg1) const;
	::jvoid OnLayout(const ::jboolean& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4) const;
	::jvoid OnMeasure(const ::jint& arg0, const ::jint& arg1) const;
	::jboolean OnPreDraw() const;
	::jboolean OnPrivateIMECommand(const ::java::lang::String& arg0, const ::android::os::Bundle& arg1) const;
	::android::view::ContentInfo OnReceiveContent(const ::android::view::ContentInfo& arg0) const;
	::android::view::PointerIcon OnResolvePointerIcon(const ::android::view::MotionEvent& arg0, const ::jint& arg1) const;
	::jvoid OnRestoreInstanceState(const ::android::os::Parcelable& arg0) const;
	::jvoid OnRtlPropertiesChanged(const ::jint& arg0) const;
	::android::os::Parcelable OnSaveInstanceState() const;
	::jvoid OnScreenStateChanged(const ::jint& arg0) const;
	::jvoid OnScrollChanged(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid OnSelectionChanged(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid OnTextChanged(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jboolean OnTextContextMenuItem(const ::jint& arg0) const;
	::jboolean OnTouchEvent(const ::android::view::MotionEvent& arg0) const;
	::jboolean OnTrackballEvent(const ::android::view::MotionEvent& arg0) const;
	::jvoid OnViewTranslationResponse(const ::android::view::translation::ViewTranslationResponse& arg0) const;
	::jvoid OnVisibilityChanged(const ::android::view::View& arg0, const ::jint& arg1) const;
	::jvoid OnWindowFocusChanged(const ::jboolean& arg0) const;
	::jboolean PerformLongClick() const;
	::jvoid RemoveTextChangedListener(const ::android::text::TextWatcher& arg0) const;
	::jvoid SendAccessibilityEventUnchecked(const ::android::view::accessibility::AccessibilityEvent& arg0) const;
	::jvoid SetAllCaps(const ::jboolean& arg0) const;
	::jvoid SetAutoLinkMask(const ::jint& arg0) const;
	::jvoid SetAutoSizeTextTypeUniformWithConfiguration(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid SetAutoSizeTextTypeUniformWithPresetSizes(const jni::Array< ::jint >& arg0, const ::jint& arg1) const;
	::jvoid SetAutoSizeTextTypeWithDefaults(const ::jint& arg0) const;
	::jvoid SetBreakStrategy(const ::jint& arg0) const;
	::jvoid SetCompoundDrawablePadding(const ::jint& arg0) const;
	::jvoid SetCompoundDrawableTintBlendMode(const ::android::graphics::BlendMode& arg0) const;
	::jvoid SetCompoundDrawableTintList(const ::android::content::res::ColorStateList& arg0) const;
	::jvoid SetCompoundDrawableTintMode(const ::android::graphics::PorterDuff_Mode& arg0) const;
	::jvoid SetCompoundDrawables(const ::android::graphics::drawable::Drawable& arg0, const ::android::graphics::drawable::Drawable& arg1, const ::android::graphics::drawable::Drawable& arg2, const ::android::graphics::drawable::Drawable& arg3) const;
	::jvoid SetCompoundDrawablesRelative(const ::android::graphics::drawable::Drawable& arg0, const ::android::graphics::drawable::Drawable& arg1, const ::android::graphics::drawable::Drawable& arg2, const ::android::graphics::drawable::Drawable& arg3) const;
	::jvoid SetCompoundDrawablesRelativeWithIntrinsicBounds(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid SetCompoundDrawablesRelativeWithIntrinsicBounds(const ::android::graphics::drawable::Drawable& arg0, const ::android::graphics::drawable::Drawable& arg1, const ::android::graphics::drawable::Drawable& arg2, const ::android::graphics::drawable::Drawable& arg3) const;
	::jvoid SetCompoundDrawablesWithIntrinsicBounds(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid SetCompoundDrawablesWithIntrinsicBounds(const ::android::graphics::drawable::Drawable& arg0, const ::android::graphics::drawable::Drawable& arg1, const ::android::graphics::drawable::Drawable& arg2, const ::android::graphics::drawable::Drawable& arg3) const;
	::jvoid SetCursorVisible(const ::jboolean& arg0) const;
	::jvoid SetCustomInsertionActionModeCallback(const ::android::view::ActionMode_Callback& arg0) const;
	::jvoid SetCustomSelectionActionModeCallback(const ::android::view::ActionMode_Callback& arg0) const;
	::jvoid SetEditableFactory(const ::android::text::Editable_Factory& arg0) const;
	::jvoid SetElegantTextHeight(const ::jboolean& arg0) const;
	::jvoid SetEllipsize(const ::android::text::TextUtils_TruncateAt& arg0) const;
	::jvoid SetEms(const ::jint& arg0) const;
	::jvoid SetEnabled(const ::jboolean& arg0) const;
	::jvoid SetError(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetError(const ::java::lang::CharSequence& arg0, const ::android::graphics::drawable::Drawable& arg1) const;
	::jvoid SetExtractedText(const ::android::view::inputmethod::ExtractedText& arg0) const;
	::jvoid SetFallbackLineSpacing(const ::jboolean& arg0) const;
	::jvoid SetFilters(const jni::Array< ::android::text::InputFilter >& arg0) const;
	::jvoid SetFirstBaselineToTopHeight(const ::jint& arg0) const;
	::jvoid SetFontFeatureSettings(const ::java::lang::String& arg0) const;
	::jboolean SetFontVariationSettings(const ::java::lang::String& arg0) const;
	::jboolean SetFrame(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid SetFreezesText(const ::jboolean& arg0) const;
	::jvoid SetGravity(const ::jint& arg0) const;
	::jvoid SetHeight(const ::jint& arg0) const;
	::jvoid SetHighlightColor(const ::jint& arg0) const;
	::jvoid SetHint(const ::jint& arg0) const;
	::jvoid SetHint(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetHintTextColor(const ::jint& arg0) const;
	::jvoid SetHintTextColor(const ::android::content::res::ColorStateList& arg0) const;
	::jvoid SetHorizontallyScrolling(const ::jboolean& arg0) const;
	::jvoid SetHyphenationFrequency(const ::jint& arg0) const;
	::jvoid SetImeActionLabel(const ::java::lang::CharSequence& arg0, const ::jint& arg1) const;
	::jvoid SetImeHintLocales(const ::android::os::LocaleList& arg0) const;
	::jvoid SetImeOptions(const ::jint& arg0) const;
	::jvoid SetIncludeFontPadding(const ::jboolean& arg0) const;
	::jvoid SetInputExtras(const ::jint& arg0) const;
	::jvoid SetInputType(const ::jint& arg0) const;
	::jvoid SetJustificationMode(const ::jint& arg0) const;
	::jvoid SetKeyListener(const ::android::text::method::KeyListener& arg0) const;
	::jvoid SetLastBaselineToBottomHeight(const ::jint& arg0) const;
	::jvoid SetLetterSpacing(const ::jfloat& arg0) const;
	::jvoid SetLineHeight(const ::jint& arg0) const;
	::jvoid SetLineSpacing(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jvoid SetLines(const ::jint& arg0) const;
	::jvoid SetLinkTextColor(const ::jint& arg0) const;
	::jvoid SetLinkTextColor(const ::android::content::res::ColorStateList& arg0) const;
	::jvoid SetLinksClickable(const ::jboolean& arg0) const;
	::jvoid SetMarqueeRepeatLimit(const ::jint& arg0) const;
	::jvoid SetMaxEms(const ::jint& arg0) const;
	::jvoid SetMaxHeight(const ::jint& arg0) const;
	::jvoid SetMaxLines(const ::jint& arg0) const;
	::jvoid SetMaxWidth(const ::jint& arg0) const;
	::jvoid SetMinEms(const ::jint& arg0) const;
	::jvoid SetMinHeight(const ::jint& arg0) const;
	::jvoid SetMinLines(const ::jint& arg0) const;
	::jvoid SetMinWidth(const ::jint& arg0) const;
	::jvoid SetMovementMethod(const ::android::text::method::MovementMethod& arg0) const;
	::jvoid SetOnEditorActionListener(const ::android::widget::TextView_OnEditorActionListener& arg0) const;
	::jvoid SetPadding(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid SetPaddingRelative(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid SetPaintFlags(const ::jint& arg0) const;
	::jvoid SetPrivateImeOptions(const ::java::lang::String& arg0) const;
	::jvoid SetRawInputType(const ::jint& arg0) const;
	::jvoid SetScroller(const ::android::widget::Scroller& arg0) const;
	::jvoid SetSelectAllOnFocus(const ::jboolean& arg0) const;
	::jvoid SetSelected(const ::jboolean& arg0) const;
	::jvoid SetShadowLayer(const ::jfloat& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jint& arg3) const;
	::jvoid SetShowSoftInputOnFocus(const ::jboolean& arg0) const;
	::jvoid SetSingleLine() const;
	::jvoid SetSingleLine(const ::jboolean& arg0) const;
	::jvoid SetSpannableFactory(const ::android::text::Spannable_Factory& arg0) const;
	::jvoid SetText(const ::jint& arg0) const;
	::jvoid SetText(const ::jint& arg0, const ::android::widget::TextView_BufferType& arg1) const;
	::jvoid SetText(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetText(const ::java::lang::CharSequence& arg0, const ::android::widget::TextView_BufferType& arg1) const;
	::jvoid SetText(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jvoid SetTextAppearance(const ::jint& arg0) const;
	::jvoid SetTextAppearance(const ::android::content::Context& arg0, const ::jint& arg1) const;
	::jvoid SetTextClassifier(const ::android::view::textclassifier::TextClassifier& arg0) const;
	::jvoid SetTextColor(const ::jint& arg0) const;
	::jvoid SetTextColor(const ::android::content::res::ColorStateList& arg0) const;
	::jvoid SetTextCursorDrawable(const ::jint& arg0) const;
	::jvoid SetTextCursorDrawable(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid SetTextIsSelectable(const ::jboolean& arg0) const;
	::jvoid SetTextKeepState(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetTextKeepState(const ::java::lang::CharSequence& arg0, const ::android::widget::TextView_BufferType& arg1) const;
	::jvoid SetTextLocale(const ::java::util::Locale& arg0) const;
	::jvoid SetTextLocales(const ::android::os::LocaleList& arg0) const;
	::jvoid SetTextMetricsParams(const ::android::text::PrecomputedText_Params& arg0) const;
	::jvoid SetTextScaleX(const ::jfloat& arg0) const;
	::jvoid SetTextSelectHandle(const ::jint& arg0) const;
	::jvoid SetTextSelectHandle(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid SetTextSelectHandleLeft(const ::jint& arg0) const;
	::jvoid SetTextSelectHandleLeft(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid SetTextSelectHandleRight(const ::jint& arg0) const;
	::jvoid SetTextSelectHandleRight(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid SetTextSize(const ::jfloat& arg0) const;
	::jvoid SetTextSize(const ::jint& arg0, const ::jfloat& arg1) const;
	::jvoid SetTransformationMethod(const ::android::text::method::TransformationMethod& arg0) const;
	::jvoid SetTypeface(const ::android::graphics::Typeface& arg0) const;
	::jvoid SetTypeface(const ::android::graphics::Typeface& arg0, const ::jint& arg1) const;
	::jvoid SetWidth(const ::jint& arg0) const;
	::jboolean ShowContextMenu() const;
	::jboolean ShowContextMenu(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jboolean VerifyDrawable(const ::android::graphics::drawable::Drawable& arg0) const;
	static jobject __Constructor(const ::android::content::Context& arg0);
	TextView(const ::android::content::Context& arg0) : ::android::view::View(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1);
	TextView(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1) : ::android::view::View(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2);
	TextView(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2) : ::android::view::View(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3);
	TextView(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3) : ::android::view::View(__Constructor(arg0, arg1, arg2, arg3)) {}
	explicit TextView(jobject o) : ::android::view::View(o) {}
	TextView(const TextView& o)  : ::android::view::View(o) {}

};

}}

namespace android { namespace text { 
struct TextWatcher : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::text::NoCopySpan();
	::jvoid AfterTextChanged(const ::android::text::Editable& arg0) const;
	::jvoid BeforeTextChanged(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid OnTextChanged(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	explicit TextWatcher(jobject o) : java::lang::Object(o) {}
	TextWatcher(const TextWatcher& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::text::TextWatcher();
		operator ::android::text::NoCopySpan();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void AfterTextChanged(const ::android::text::Editable& arg0) = 0;
		virtual void BeforeTextChanged(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) = 0;
		virtual void OnTextChanged(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) = 0;
	};
};

struct NoCopySpan : java::lang::Object
{
	static jni::Class __CLASS;

	explicit NoCopySpan(jobject o) : java::lang::Object(o) {}
	NoCopySpan(const NoCopySpan& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::text::NoCopySpan();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
	};
};

struct Editable : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::CharSequence();
	operator ::android::text::GetChars();
	operator ::android::text::Spannable();
	operator ::java::lang::Appendable();
	::android::text::Editable Append(const ::jchar& arg0) const;
	::android::text::Editable Append(const ::java::lang::CharSequence& arg0) const;
	::android::text::Editable Append(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jvoid Clear() const;
	::jvoid ClearSpans() const;
	::android::text::Editable Delete(const ::jint& arg0, const ::jint& arg1) const;
	jni::Array< ::android::text::InputFilter > GetFilters() const;
	::android::text::Editable Insert(const ::jint& arg0, const ::java::lang::CharSequence& arg1) const;
	::android::text::Editable Insert(const ::jint& arg0, const ::java::lang::CharSequence& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::android::text::Editable Replace(const ::jint& arg0, const ::jint& arg1, const ::java::lang::CharSequence& arg2) const;
	::android::text::Editable Replace(const ::jint& arg0, const ::jint& arg1, const ::java::lang::CharSequence& arg2, const ::jint& arg3, const ::jint& arg4) const;
	::jvoid SetFilters(const jni::Array< ::android::text::InputFilter >& arg0) const;
	explicit Editable(jobject o) : java::lang::Object(o) {}
	Editable(const Editable& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::text::Editable();
		operator ::java::lang::CharSequence();
		operator ::android::text::GetChars();
		operator ::android::text::Spannable();
		operator ::java::lang::Appendable();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::android::text::Editable Append(const ::jchar& arg0) = 0;
		virtual ::android::text::Editable Append(const ::java::lang::CharSequence& arg0) = 0;
		virtual ::android::text::Editable Append(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2) = 0;
		virtual void Clear() = 0;
		virtual void ClearSpans() = 0;
		virtual ::android::text::Editable Delete(const ::jint& arg0, const ::jint& arg1) = 0;
		virtual jni::Array< ::android::text::InputFilter > GetFilters() = 0;
		virtual ::android::text::Editable Insert(const ::jint& arg0, const ::java::lang::CharSequence& arg1) = 0;
		virtual ::android::text::Editable Insert(const ::jint& arg0, const ::java::lang::CharSequence& arg1, const ::jint& arg2, const ::jint& arg3) = 0;
		virtual ::android::text::Editable Replace(const ::jint& arg0, const ::jint& arg1, const ::java::lang::CharSequence& arg2) = 0;
		virtual ::android::text::Editable Replace(const ::jint& arg0, const ::jint& arg1, const ::java::lang::CharSequence& arg2, const ::jint& arg3, const ::jint& arg4) = 0;
		virtual void SetFilters(const jni::Array< ::android::text::InputFilter >& arg0) = 0;
	};
};

struct GetChars : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::lang::CharSequence();
	::jvoid xGetChars(const ::jint& arg0, const ::jint& arg1, const jni::Array< ::jchar >& arg2, const ::jint& arg3) const;
	explicit GetChars(jobject o) : java::lang::Object(o) {}
	GetChars(const GetChars& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::text::GetChars();
		operator ::java::lang::CharSequence();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void xGetChars(const ::jint& arg0, const ::jint& arg1, const jni::Array< ::jchar >& arg2, const ::jint& arg3) = 0;
	};
};

struct InputFilter : java::lang::Object
{
	static jni::Class __CLASS;

	::java::lang::CharSequence Filter(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2, const ::android::text::Spanned& arg3, const ::jint& arg4, const ::jint& arg5) const;
	explicit InputFilter(jobject o) : java::lang::Object(o) {}
	InputFilter(const InputFilter& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::text::InputFilter();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::lang::CharSequence Filter(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2, const ::android::text::Spanned& arg3, const ::jint& arg4, const ::jint& arg5) = 0;
	};
};

}}

namespace android { namespace text { namespace method { 
struct MovementMethod : java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean CanSelectArbitrarily() const;
	::jvoid Initialize(const ::android::widget::TextView& arg0, const ::android::text::Spannable& arg1) const;
	::jboolean OnGenericMotionEvent(const ::android::widget::TextView& arg0, const ::android::text::Spannable& arg1, const ::android::view::MotionEvent& arg2) const;
	::jboolean OnKeyDown(const ::android::widget::TextView& arg0, const ::android::text::Spannable& arg1, const ::jint& arg2, const ::android::view::KeyEvent& arg3) const;
	::jboolean OnKeyOther(const ::android::widget::TextView& arg0, const ::android::text::Spannable& arg1, const ::android::view::KeyEvent& arg2) const;
	::jboolean OnKeyUp(const ::android::widget::TextView& arg0, const ::android::text::Spannable& arg1, const ::jint& arg2, const ::android::view::KeyEvent& arg3) const;
	::jvoid OnTakeFocus(const ::android::widget::TextView& arg0, const ::android::text::Spannable& arg1, const ::jint& arg2) const;
	::jboolean OnTouchEvent(const ::android::widget::TextView& arg0, const ::android::text::Spannable& arg1, const ::android::view::MotionEvent& arg2) const;
	::jboolean OnTrackballEvent(const ::android::widget::TextView& arg0, const ::android::text::Spannable& arg1, const ::android::view::MotionEvent& arg2) const;
	explicit MovementMethod(jobject o) : java::lang::Object(o) {}
	MovementMethod(const MovementMethod& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::text::method::MovementMethod();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean CanSelectArbitrarily() = 0;
		virtual void Initialize(const ::android::widget::TextView& arg0, const ::android::text::Spannable& arg1) = 0;
		virtual ::jboolean OnGenericMotionEvent(const ::android::widget::TextView& arg0, const ::android::text::Spannable& arg1, const ::android::view::MotionEvent& arg2) = 0;
		virtual ::jboolean OnKeyDown(const ::android::widget::TextView& arg0, const ::android::text::Spannable& arg1, const ::jint& arg2, const ::android::view::KeyEvent& arg3) = 0;
		virtual ::jboolean OnKeyOther(const ::android::widget::TextView& arg0, const ::android::text::Spannable& arg1, const ::android::view::KeyEvent& arg2) = 0;
		virtual ::jboolean OnKeyUp(const ::android::widget::TextView& arg0, const ::android::text::Spannable& arg1, const ::jint& arg2, const ::android::view::KeyEvent& arg3) = 0;
		virtual void OnTakeFocus(const ::android::widget::TextView& arg0, const ::android::text::Spannable& arg1, const ::jint& arg2) = 0;
		virtual ::jboolean OnTouchEvent(const ::android::widget::TextView& arg0, const ::android::text::Spannable& arg1, const ::android::view::MotionEvent& arg2) = 0;
		virtual ::jboolean OnTrackballEvent(const ::android::widget::TextView& arg0, const ::android::text::Spannable& arg1, const ::android::view::MotionEvent& arg2) = 0;
	};
};

}}}

namespace android { namespace text { 
struct TextUtils_TruncateAt : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::android::text::TextUtils_TruncateAt& fEND();
	static ::android::text::TextUtils_TruncateAt& fMARQUEE();
	static ::android::text::TextUtils_TruncateAt& fMIDDLE();
	static ::android::text::TextUtils_TruncateAt& fSTART();
	static ::android::text::TextUtils_TruncateAt ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::android::text::TextUtils_TruncateAt > Values();
	explicit TextUtils_TruncateAt(jobject o) : ::java::lang::Enum(o) {}
	TextUtils_TruncateAt(const TextUtils_TruncateAt& o)  : ::java::lang::Enum(o) {}

};

}}

namespace android { namespace text { namespace method { 
struct KeyListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid ClearMetaKeyState(const ::android::view::View& arg0, const ::android::text::Editable& arg1, const ::jint& arg2) const;
	::jint GetInputType() const;
	::jboolean OnKeyDown(const ::android::view::View& arg0, const ::android::text::Editable& arg1, const ::jint& arg2, const ::android::view::KeyEvent& arg3) const;
	::jboolean OnKeyOther(const ::android::view::View& arg0, const ::android::text::Editable& arg1, const ::android::view::KeyEvent& arg2) const;
	::jboolean OnKeyUp(const ::android::view::View& arg0, const ::android::text::Editable& arg1, const ::jint& arg2, const ::android::view::KeyEvent& arg3) const;
	explicit KeyListener(jobject o) : java::lang::Object(o) {}
	KeyListener(const KeyListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::text::method::KeyListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void ClearMetaKeyState(const ::android::view::View& arg0, const ::android::text::Editable& arg1, const ::jint& arg2) = 0;
		virtual ::jint GetInputType() = 0;
		virtual ::jboolean OnKeyDown(const ::android::view::View& arg0, const ::android::text::Editable& arg1, const ::jint& arg2, const ::android::view::KeyEvent& arg3) = 0;
		virtual ::jboolean OnKeyOther(const ::android::view::View& arg0, const ::android::text::Editable& arg1, const ::android::view::KeyEvent& arg2) = 0;
		virtual ::jboolean OnKeyUp(const ::android::view::View& arg0, const ::android::text::Editable& arg1, const ::jint& arg2, const ::android::view::KeyEvent& arg3) = 0;
	};
};

}}}

namespace android { namespace text { 
struct Layout : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fBREAK_STRATEGY_BALANCED();
	static ::jint& fBREAK_STRATEGY_HIGH_QUALITY();
	static ::jint& fBREAK_STRATEGY_SIMPLE();
	static ::jfloat& fDEFAULT_LINESPACING_ADDITION();
	static ::jfloat& fDEFAULT_LINESPACING_MULTIPLIER();
	static ::jint& fDIR_LEFT_TO_RIGHT();
	static ::jint& fDIR_RIGHT_TO_LEFT();
	static ::jint& fHYPHENATION_FREQUENCY_FULL();
	static ::jint& fHYPHENATION_FREQUENCY_NONE();
	static ::jint& fHYPHENATION_FREQUENCY_NORMAL();
	static ::jint& fJUSTIFICATION_MODE_INTER_WORD();
	static ::jint& fJUSTIFICATION_MODE_NONE();
	::jvoid Draw(const ::android::graphics::Canvas& arg0) const;
	::jvoid Draw(const ::android::graphics::Canvas& arg0, const ::android::graphics::Path& arg1, const ::android::graphics::Paint& arg2, const ::jint& arg3) const;
	::android::text::Layout_Alignment GetAlignment() const;
	::jint GetBottomPadding() const;
	::jvoid GetCursorPath(const ::jint& arg0, const ::android::graphics::Path& arg1, const ::java::lang::CharSequence& arg2) const;
	static ::jfloat GetDesiredWidth(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2, const ::android::text::TextPaint& arg3);
	static ::jfloat GetDesiredWidth(const ::java::lang::CharSequence& arg0, const ::android::text::TextPaint& arg1);
	::jint GetEllipsisCount(const ::jint& arg0) const;
	::jint GetEllipsisStart(const ::jint& arg0) const;
	::jint GetEllipsizedWidth() const;
	::jint GetHeight() const;
	::jint GetLineAscent(const ::jint& arg0) const;
	::jint GetLineBaseline(const ::jint& arg0) const;
	::jint GetLineBottom(const ::jint& arg0) const;
	::jint GetLineBounds(const ::jint& arg0, const ::android::graphics::Rect& arg1) const;
	::jboolean GetLineContainsTab(const ::jint& arg0) const;
	::jint GetLineCount() const;
	::jint GetLineDescent(const ::jint& arg0) const;
	::android::text::Layout_Directions GetLineDirections(const ::jint& arg0) const;
	::jint GetLineEnd(const ::jint& arg0) const;
	::jint GetLineForOffset(const ::jint& arg0) const;
	::jint GetLineForVertical(const ::jint& arg0) const;
	::jfloat GetLineLeft(const ::jint& arg0) const;
	::jfloat GetLineMax(const ::jint& arg0) const;
	::jfloat GetLineRight(const ::jint& arg0) const;
	::jint GetLineStart(const ::jint& arg0) const;
	::jint GetLineTop(const ::jint& arg0) const;
	::jint GetLineVisibleEnd(const ::jint& arg0) const;
	::jfloat GetLineWidth(const ::jint& arg0) const;
	::jint GetOffsetForHorizontal(const ::jint& arg0, const ::jfloat& arg1) const;
	::jint GetOffsetToLeftOf(const ::jint& arg0) const;
	::jint GetOffsetToRightOf(const ::jint& arg0) const;
	::android::text::TextPaint GetPaint() const;
	::android::text::Layout_Alignment GetParagraphAlignment(const ::jint& arg0) const;
	::jint GetParagraphDirection(const ::jint& arg0) const;
	::jint GetParagraphLeft(const ::jint& arg0) const;
	::jint GetParagraphRight(const ::jint& arg0) const;
	::jfloat GetPrimaryHorizontal(const ::jint& arg0) const;
	::jfloat GetSecondaryHorizontal(const ::jint& arg0) const;
	::jvoid GetSelectionPath(const ::jint& arg0, const ::jint& arg1, const ::android::graphics::Path& arg2) const;
	::jfloat GetSpacingAdd() const;
	::jfloat GetSpacingMultiplier() const;
	::java::lang::CharSequence GetText() const;
	::jint GetTopPadding() const;
	::jint GetWidth() const;
	::jvoid IncreaseWidthTo(const ::jint& arg0) const;
	::jboolean IsRtlCharAt(const ::jint& arg0) const;
	::jboolean IsSpanned() const;
	static jobject __Constructor(const ::java::lang::CharSequence& arg0, const ::android::text::TextPaint& arg1, const ::jint& arg2, const ::android::text::Layout_Alignment& arg3, const ::jfloat& arg4, const ::jfloat& arg5);
	Layout(const ::java::lang::CharSequence& arg0, const ::android::text::TextPaint& arg1, const ::jint& arg2, const ::android::text::Layout_Alignment& arg3, const ::jfloat& arg4, const ::jfloat& arg5) : ::java::lang::Object(__Constructor(arg0, arg1, arg2, arg3, arg4, arg5)) {}
	explicit Layout(jobject o) : ::java::lang::Object(o) {}
	Layout(const Layout& o)  : ::java::lang::Object(o) {}

};

struct Layout_Alignment : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::android::text::Layout_Alignment& fALIGN_CENTER();
	static ::android::text::Layout_Alignment& fALIGN_NORMAL();
	static ::android::text::Layout_Alignment& fALIGN_OPPOSITE();
	static ::android::text::Layout_Alignment ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::android::text::Layout_Alignment > Values();
	explicit Layout_Alignment(jobject o) : ::java::lang::Enum(o) {}
	Layout_Alignment(const Layout_Alignment& o)  : ::java::lang::Enum(o) {}

};

struct TextPaint : ::android::graphics::Paint
{
	static jni::Class __CLASS;

	::jint fBaselineShift() const;
	void fBaselineShift(const ::jint& arg0) const;
	::jint fBgColor() const;
	void fBgColor(const ::jint& arg0) const;
	::jfloat fDensity() const;
	void fDensity(const ::jfloat& arg0) const;
	jni::Array< ::jint > fDrawableState() const;
	void fDrawableState(const jni::Array< ::jint >& arg0) const;
	::jint fLinkColor() const;
	void fLinkColor(const ::jint& arg0) const;
	::jint fUnderlineColor() const;
	void fUnderlineColor(const ::jint& arg0) const;
	::jfloat fUnderlineThickness() const;
	void fUnderlineThickness(const ::jfloat& arg0) const;
	::jfloat GetUnderlineThickness() const;
	::jvoid Set(const ::android::text::TextPaint& arg0) const;
	static jobject __Constructor();
	TextPaint() : ::android::graphics::Paint(__Constructor()) {}
	static jobject __Constructor(const ::jint& arg0);
	TextPaint(const ::jint& arg0) : ::android::graphics::Paint(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::graphics::Paint& arg0);
	TextPaint(const ::android::graphics::Paint& arg0) : ::android::graphics::Paint(__Constructor(arg0)) {}
	explicit TextPaint(jobject o) : ::android::graphics::Paint(o) {}
	TextPaint(const TextPaint& o)  : ::android::graphics::Paint(o) {}

};

struct Layout_Directions : ::java::lang::Object
{
	static jni::Class __CLASS;

	explicit Layout_Directions(jobject o) : ::java::lang::Object(o) {}
	Layout_Directions(const Layout_Directions& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace view { namespace textclassifier { 
struct TextClassifier : java::lang::Object
{
	static jni::Class __CLASS;

	static ::java::lang::String& fEXTRA_FROM_TEXT_CLASSIFIER();
	static ::java::lang::String& fHINT_TEXT_IS_EDITABLE();
	static ::java::lang::String& fHINT_TEXT_IS_NOT_EDITABLE();
	static ::android::view::textclassifier::TextClassifier& fNO_OP();
	static ::java::lang::String& fTYPE_ADDRESS();
	static ::java::lang::String& fTYPE_DATE();
	static ::java::lang::String& fTYPE_DATE_TIME();
	static ::java::lang::String& fTYPE_EMAIL();
	static ::java::lang::String& fTYPE_FLIGHT_NUMBER();
	static ::java::lang::String& fTYPE_OTHER();
	static ::java::lang::String& fTYPE_PHONE();
	static ::java::lang::String& fTYPE_UNKNOWN();
	static ::java::lang::String& fTYPE_URL();
	static ::java::lang::String& fWIDGET_TYPE_CLIPBOARD();
	static ::java::lang::String& fWIDGET_TYPE_CUSTOM_EDITTEXT();
	static ::java::lang::String& fWIDGET_TYPE_CUSTOM_TEXTVIEW();
	static ::java::lang::String& fWIDGET_TYPE_CUSTOM_UNSELECTABLE_TEXTVIEW();
	static ::java::lang::String& fWIDGET_TYPE_EDITTEXT();
	static ::java::lang::String& fWIDGET_TYPE_EDIT_WEBVIEW();
	static ::java::lang::String& fWIDGET_TYPE_NOTIFICATION();
	static ::java::lang::String& fWIDGET_TYPE_TEXTVIEW();
	static ::java::lang::String& fWIDGET_TYPE_UNKNOWN();
	static ::java::lang::String& fWIDGET_TYPE_UNSELECTABLE_TEXTVIEW();
	static ::java::lang::String& fWIDGET_TYPE_WEBVIEW();
	::android::view::textclassifier::TextClassification ClassifyText(const ::android::view::textclassifier::TextClassification_Request& arg0) const;
	::android::view::textclassifier::TextClassification ClassifyText(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2, const ::android::os::LocaleList& arg3) const;
	::jvoid Destroy() const;
	::android::view::textclassifier::TextLanguage DetectLanguage(const ::android::view::textclassifier::TextLanguage_Request& arg0) const;
	::android::view::textclassifier::TextLinks GenerateLinks(const ::android::view::textclassifier::TextLinks_Request& arg0) const;
	::jint GetMaxGenerateLinksTextLength() const;
	::jboolean IsDestroyed() const;
	::jvoid OnSelectionEvent(const ::android::view::textclassifier::SelectionEvent& arg0) const;
	::jvoid OnTextClassifierEvent(const ::android::view::textclassifier::TextClassifierEvent& arg0) const;
	::android::view::textclassifier::ConversationActions SuggestConversationActions(const ::android::view::textclassifier::ConversationActions_Request& arg0) const;
	::android::view::textclassifier::TextSelection SuggestSelection(const ::android::view::textclassifier::TextSelection_Request& arg0) const;
	::android::view::textclassifier::TextSelection SuggestSelection(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2, const ::android::os::LocaleList& arg3) const;
	explicit TextClassifier(jobject o) : java::lang::Object(o) {}
	TextClassifier(const TextClassifier& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::view::textclassifier::TextClassifier();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::android::view::textclassifier::TextClassification ClassifyText(const ::android::view::textclassifier::TextClassification_Request& arg0) = 0;
		virtual ::android::view::textclassifier::TextClassification ClassifyText(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2, const ::android::os::LocaleList& arg3) = 0;
		virtual void Destroy() = 0;
		virtual ::android::view::textclassifier::TextLanguage DetectLanguage(const ::android::view::textclassifier::TextLanguage_Request& arg0) = 0;
		virtual ::android::view::textclassifier::TextLinks GenerateLinks(const ::android::view::textclassifier::TextLinks_Request& arg0) = 0;
		virtual ::jint GetMaxGenerateLinksTextLength() = 0;
		virtual ::jboolean IsDestroyed() = 0;
		virtual void OnSelectionEvent(const ::android::view::textclassifier::SelectionEvent& arg0) = 0;
		virtual void OnTextClassifierEvent(const ::android::view::textclassifier::TextClassifierEvent& arg0) = 0;
		virtual ::android::view::textclassifier::ConversationActions SuggestConversationActions(const ::android::view::textclassifier::ConversationActions_Request& arg0) = 0;
		virtual ::android::view::textclassifier::TextSelection SuggestSelection(const ::android::view::textclassifier::TextSelection_Request& arg0) = 0;
		virtual ::android::view::textclassifier::TextSelection SuggestSelection(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2, const ::android::os::LocaleList& arg3) = 0;
	};
};

struct TextClassification_Request : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::java::lang::String GetCallingPackageName() const;
	::android::os::LocaleList GetDefaultLocales() const;
	::jint GetEndIndex() const;
	::android::os::Bundle GetExtras() const;
	::java::time::ZonedDateTime GetReferenceTime() const;
	::jint GetStartIndex() const;
	::java::lang::CharSequence GetText() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit TextClassification_Request(jobject o) : ::java::lang::Object(o) {}
	TextClassification_Request(const TextClassification_Request& o)  : ::java::lang::Object(o) {}

};

struct TextClassification : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::java::util::List GetActions() const;
	::jfloat GetConfidenceScore(const ::java::lang::String& arg0) const;
	::java::lang::String GetEntity(const ::jint& arg0) const;
	::jint GetEntityCount() const;
	::android::os::Bundle GetExtras() const;
	::android::graphics::drawable::Drawable GetIcon() const;
	::java::lang::String GetId() const;
	::android::content::Intent GetIntent() const;
	::java::lang::CharSequence GetLabel() const;
	::android::view::View_OnClickListener GetOnClickListener() const;
	::java::lang::String GetText() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit TextClassification(jobject o) : ::java::lang::Object(o) {}
	TextClassification(const TextClassification& o)  : ::java::lang::Object(o) {}

};

struct TextLanguage_Request : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::java::lang::String GetCallingPackageName() const;
	::android::os::Bundle GetExtras() const;
	::java::lang::CharSequence GetText() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit TextLanguage_Request(jobject o) : ::java::lang::Object(o) {}
	TextLanguage_Request(const TextLanguage_Request& o)  : ::java::lang::Object(o) {}

};

struct TextLanguage : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::jfloat GetConfidenceScore(const ::android::icu::util::ULocale& arg0) const;
	::android::os::Bundle GetExtras() const;
	::java::lang::String GetId() const;
	::android::icu::util::ULocale GetLocale(const ::jint& arg0) const;
	::jint GetLocaleHypothesisCount() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit TextLanguage(jobject o) : ::java::lang::Object(o) {}
	TextLanguage(const TextLanguage& o)  : ::java::lang::Object(o) {}

};

struct TextLinks_Request : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::java::lang::String GetCallingPackageName() const;
	::android::os::LocaleList GetDefaultLocales() const;
	::android::view::textclassifier::TextClassifier_EntityConfig GetEntityConfig() const;
	::android::os::Bundle GetExtras() const;
	::java::time::ZonedDateTime GetReferenceTime() const;
	::java::lang::CharSequence GetText() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit TextLinks_Request(jobject o) : ::java::lang::Object(o) {}
	TextLinks_Request(const TextLinks_Request& o)  : ::java::lang::Object(o) {}

};

struct TextClassifier_EntityConfig : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::android::view::textclassifier::TextClassifier_EntityConfig Create(const ::java::util::Collection& arg0, const ::java::util::Collection& arg1, const ::java::util::Collection& arg2);
	static ::android::view::textclassifier::TextClassifier_EntityConfig CreateWithExplicitEntityList(const ::java::util::Collection& arg0);
	static ::android::view::textclassifier::TextClassifier_EntityConfig CreateWithHints(const ::java::util::Collection& arg0);
	::jint DescribeContents() const;
	::java::util::Collection GetHints() const;
	::java::util::Collection ResolveEntityListModifications(const ::java::util::Collection& arg0) const;
	::jboolean ShouldIncludeTypesFromTextClassifier() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit TextClassifier_EntityConfig(jobject o) : ::java::lang::Object(o) {}
	TextClassifier_EntityConfig(const TextClassifier_EntityConfig& o)  : ::java::lang::Object(o) {}

};

struct SelectionEvent : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::jint& fACTION_ABANDON();
	static ::jint& fACTION_COPY();
	static ::jint& fACTION_CUT();
	static ::jint& fACTION_DRAG();
	static ::jint& fACTION_OTHER();
	static ::jint& fACTION_OVERTYPE();
	static ::jint& fACTION_PASTE();
	static ::jint& fACTION_RESET();
	static ::jint& fACTION_SELECT_ALL();
	static ::jint& fACTION_SHARE();
	static ::jint& fACTION_SMART_SHARE();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fEVENT_AUTO_SELECTION();
	static ::jint& fEVENT_SELECTION_MODIFIED();
	static ::jint& fEVENT_SELECTION_STARTED();
	static ::jint& fEVENT_SMART_SELECTION_MULTI();
	static ::jint& fEVENT_SMART_SELECTION_SINGLE();
	static ::jint& fINVOCATION_LINK();
	static ::jint& fINVOCATION_MANUAL();
	static ::jint& fINVOCATION_UNKNOWN();
	static ::android::view::textclassifier::SelectionEvent CreateSelectionActionEvent(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2);
	static ::android::view::textclassifier::SelectionEvent CreateSelectionActionEvent(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::android::view::textclassifier::TextClassification& arg3);
	static ::android::view::textclassifier::SelectionEvent CreateSelectionModifiedEvent(const ::jint& arg0, const ::jint& arg1);
	static ::android::view::textclassifier::SelectionEvent CreateSelectionModifiedEvent(const ::jint& arg0, const ::jint& arg1, const ::android::view::textclassifier::TextClassification& arg2);
	static ::android::view::textclassifier::SelectionEvent CreateSelectionModifiedEvent(const ::jint& arg0, const ::jint& arg1, const ::android::view::textclassifier::TextSelection& arg2);
	static ::android::view::textclassifier::SelectionEvent CreateSelectionStartedEvent(const ::jint& arg0, const ::jint& arg1);
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jlong GetDurationSincePreviousEvent() const;
	::jlong GetDurationSinceSessionStart() const;
	::jint GetEnd() const;
	::java::lang::String GetEntityType() const;
	::jint GetEventIndex() const;
	::jlong GetEventTime() const;
	::jint GetEventType() const;
	::jint GetInvocationMethod() const;
	::java::lang::String GetPackageName() const;
	::java::lang::String GetResultId() const;
	::android::view::textclassifier::TextClassificationSessionId GetSessionId() const;
	::jint GetSmartEnd() const;
	::jint GetSmartStart() const;
	::jint GetStart() const;
	::java::lang::String GetWidgetType() const;
	::java::lang::String GetWidgetVersion() const;
	::jint HashCode() const;
	static ::jboolean IsTerminal(const ::jint& arg0);
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit SelectionEvent(jobject o) : ::java::lang::Object(o) {}
	SelectionEvent(const SelectionEvent& o)  : ::java::lang::Object(o) {}

};

struct TextSelection : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::jfloat GetConfidenceScore(const ::java::lang::String& arg0) const;
	::java::lang::String GetEntity(const ::jint& arg0) const;
	::jint GetEntityCount() const;
	::android::os::Bundle GetExtras() const;
	::java::lang::String GetId() const;
	::jint GetSelectionEndIndex() const;
	::jint GetSelectionStartIndex() const;
	::android::view::textclassifier::TextClassification GetTextClassification() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit TextSelection(jobject o) : ::java::lang::Object(o) {}
	TextSelection(const TextSelection& o)  : ::java::lang::Object(o) {}

};

struct TextClassificationSessionId : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::lang::String GetValue() const;
	::jint HashCode() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit TextClassificationSessionId(jobject o) : ::java::lang::Object(o) {}
	TextClassificationSessionId(const TextClassificationSessionId& o)  : ::java::lang::Object(o) {}

};

struct TextClassifierEvent : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::jint& fCATEGORY_CONVERSATION_ACTIONS();
	static ::jint& fCATEGORY_LANGUAGE_DETECTION();
	static ::jint& fCATEGORY_LINKIFY();
	static ::jint& fCATEGORY_SELECTION();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::jint& fTYPE_ACTIONS_GENERATED();
	static ::jint& fTYPE_ACTIONS_SHOWN();
	static ::jint& fTYPE_AUTO_SELECTION();
	static ::jint& fTYPE_COPY_ACTION();
	static ::jint& fTYPE_CUT_ACTION();
	static ::jint& fTYPE_LINKS_GENERATED();
	static ::jint& fTYPE_LINK_CLICKED();
	static ::jint& fTYPE_MANUAL_REPLY();
	static ::jint& fTYPE_OTHER_ACTION();
	static ::jint& fTYPE_OVERTYPE();
	static ::jint& fTYPE_PASTE_ACTION();
	static ::jint& fTYPE_SELECTION_DESTROYED();
	static ::jint& fTYPE_SELECTION_DRAG();
	static ::jint& fTYPE_SELECTION_MODIFIED();
	static ::jint& fTYPE_SELECTION_RESET();
	static ::jint& fTYPE_SELECTION_STARTED();
	static ::jint& fTYPE_SELECT_ALL();
	static ::jint& fTYPE_SHARE_ACTION();
	static ::jint& fTYPE_SMART_ACTION();
	static ::jint& fTYPE_SMART_SELECTION_MULTI();
	static ::jint& fTYPE_SMART_SELECTION_SINGLE();
	::jint DescribeContents() const;
	jni::Array< ::jint > GetActionIndices() const;
	jni::Array< ::java::lang::String > GetEntityTypes() const;
	::jint GetEventCategory() const;
	::android::view::textclassifier::TextClassificationContext GetEventContext() const;
	::jint GetEventIndex() const;
	::jint GetEventType() const;
	::android::os::Bundle GetExtras() const;
	::android::icu::util::ULocale GetLocale() const;
	::java::lang::String GetModelName() const;
	::java::lang::String GetResultId() const;
	jni::Array< ::jfloat > GetScores() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit TextClassifierEvent(jobject o) : ::java::lang::Object(o) {}
	TextClassifierEvent(const TextClassifierEvent& o)  : ::java::lang::Object(o) {}

};

struct TextClassificationContext : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::java::lang::String GetPackageName() const;
	::java::lang::String GetWidgetType() const;
	::java::lang::String GetWidgetVersion() const;
	::java::lang::String ToString() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit TextClassificationContext(jobject o) : ::java::lang::Object(o) {}
	TextClassificationContext(const TextClassificationContext& o)  : ::java::lang::Object(o) {}

};

struct ConversationActions_Request : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	static ::java::lang::String& fHINT_FOR_IN_APP();
	static ::java::lang::String& fHINT_FOR_NOTIFICATION();
	::jint DescribeContents() const;
	::java::lang::String GetCallingPackageName() const;
	::java::util::List GetConversation() const;
	::android::os::Bundle GetExtras() const;
	::java::util::List GetHints() const;
	::jint GetMaxSuggestions() const;
	::android::view::textclassifier::TextClassifier_EntityConfig GetTypeConfig() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit ConversationActions_Request(jobject o) : ::java::lang::Object(o) {}
	ConversationActions_Request(const ConversationActions_Request& o)  : ::java::lang::Object(o) {}

};

struct ConversationActions : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::java::util::List GetConversationActions() const;
	::java::lang::String GetId() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor(const ::java::util::List& arg0, const ::java::lang::String& arg1);
	ConversationActions(const ::java::util::List& arg0, const ::java::lang::String& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit ConversationActions(jobject o) : ::java::lang::Object(o) {}
	ConversationActions(const ConversationActions& o)  : ::java::lang::Object(o) {}

};

struct TextSelection_Request : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	static ::android::os::Parcelable_Creator& fCREATOR();
	::jint DescribeContents() const;
	::java::lang::String GetCallingPackageName() const;
	::android::os::LocaleList GetDefaultLocales() const;
	::jint GetEndIndex() const;
	::android::os::Bundle GetExtras() const;
	::jint GetStartIndex() const;
	::java::lang::CharSequence GetText() const;
	::jboolean ShouldIncludeTextClassification() const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	explicit TextSelection_Request(jobject o) : ::java::lang::Object(o) {}
	TextSelection_Request(const TextSelection_Request& o)  : ::java::lang::Object(o) {}

};

}}}

namespace android { namespace text { 
struct TextDirectionHeuristic : java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean IsRtl(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jboolean IsRtl(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2) const;
	explicit TextDirectionHeuristic(jobject o) : java::lang::Object(o) {}
	TextDirectionHeuristic(const TextDirectionHeuristic& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::text::TextDirectionHeuristic();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean IsRtl(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2) = 0;
		virtual ::jboolean IsRtl(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2) = 0;
	};
};

struct PrecomputedText_Params : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint GetBreakStrategy() const;
	::jint GetHyphenationFrequency() const;
	::android::text::TextDirectionHeuristic GetTextDirection() const;
	::android::text::TextPaint GetTextPaint() const;
	::jint HashCode() const;
	::java::lang::String ToString() const;
	explicit PrecomputedText_Params(jobject o) : ::java::lang::Object(o) {}
	PrecomputedText_Params(const PrecomputedText_Params& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace text { namespace method { 
struct TransformationMethod : java::lang::Object
{
	static jni::Class __CLASS;

	::java::lang::CharSequence GetTransformation(const ::java::lang::CharSequence& arg0, const ::android::view::View& arg1) const;
	::jvoid OnFocusChanged(const ::android::view::View& arg0, const ::java::lang::CharSequence& arg1, const ::jboolean& arg2, const ::jint& arg3, const ::android::graphics::Rect& arg4) const;
	explicit TransformationMethod(jobject o) : java::lang::Object(o) {}
	TransformationMethod(const TransformationMethod& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::text::method::TransformationMethod();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::lang::CharSequence GetTransformation(const ::java::lang::CharSequence& arg0, const ::android::view::View& arg1) = 0;
		virtual void OnFocusChanged(const ::android::view::View& arg0, const ::java::lang::CharSequence& arg1, const ::jboolean& arg2, const ::jint& arg3, const ::android::graphics::Rect& arg4) = 0;
	};
};

}}}

namespace android { namespace text { namespace style { 
struct CharacterStyle : ::java::lang::Object
{
	static jni::Class __CLASS;

	::android::text::style::CharacterStyle GetUnderlying() const;
	::jvoid UpdateDrawState(const ::android::text::TextPaint& arg0) const;
	static ::android::text::style::CharacterStyle Wrap(const ::android::text::style::CharacterStyle& arg0);
	static jobject __Constructor();
	CharacterStyle() : ::java::lang::Object(__Constructor()) {}
	explicit CharacterStyle(jobject o) : ::java::lang::Object(o) {}
	CharacterStyle(const CharacterStyle& o)  : ::java::lang::Object(o) {}

};

struct ClickableSpan : ::android::text::style::CharacterStyle
{
	static jni::Class __CLASS;

	operator ::android::text::style::UpdateAppearance();
	::jvoid OnClick(const ::android::view::View& arg0) const;
	::jvoid UpdateDrawState(const ::android::text::TextPaint& arg0) const;
	static jobject __Constructor();
	ClickableSpan() : ::android::text::style::CharacterStyle(__Constructor()) {}
	explicit ClickableSpan(jobject o) : ::android::text::style::CharacterStyle(o) {}
	ClickableSpan(const ClickableSpan& o)  : ::android::text::style::CharacterStyle(o) {}

};

struct URLSpan : ::android::text::style::ClickableSpan
{
	static jni::Class __CLASS;

	operator ::android::text::ParcelableSpan();
	::jint DescribeContents() const;
	::jint GetSpanTypeId() const;
	::java::lang::String GetURL() const;
	::jvoid OnClick(const ::android::view::View& arg0) const;
	::jvoid WriteToParcel(const ::android::os::Parcel& arg0, const ::jint& arg1) const;
	static jobject __Constructor(const ::android::os::Parcel& arg0);
	URLSpan(const ::android::os::Parcel& arg0) : ::android::text::style::ClickableSpan(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::String& arg0);
	URLSpan(const ::java::lang::String& arg0) : ::android::text::style::ClickableSpan(__Constructor(arg0)) {}
	explicit URLSpan(jobject o) : ::android::text::style::ClickableSpan(o) {}
	URLSpan(const URLSpan& o)  : ::android::text::style::ClickableSpan(o) {}

};

struct UpdateAppearance : java::lang::Object
{
	static jni::Class __CLASS;

	explicit UpdateAppearance(jobject o) : java::lang::Object(o) {}
	UpdateAppearance(const UpdateAppearance& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::text::style::UpdateAppearance();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
	};
};

}}}

namespace android { namespace text { 
struct ParcelableSpan : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::os::Parcelable();
	::jint GetSpanTypeId() const;
	explicit ParcelableSpan(jobject o) : java::lang::Object(o) {}
	ParcelableSpan(const ParcelableSpan& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::text::ParcelableSpan();
		operator ::android::os::Parcelable();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jint GetSpanTypeId() = 0;
	};
};

struct Editable_Factory : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::android::text::Editable_Factory GetInstance();
	::android::text::Editable NewEditable(const ::java::lang::CharSequence& arg0) const;
	static jobject __Constructor();
	Editable_Factory() : ::java::lang::Object(__Constructor()) {}
	explicit Editable_Factory(jobject o) : ::java::lang::Object(o) {}
	Editable_Factory(const Editable_Factory& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace widget { 
struct TextView_OnEditorActionListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean OnEditorAction(const ::android::widget::TextView& arg0, const ::jint& arg1, const ::android::view::KeyEvent& arg2) const;
	explicit TextView_OnEditorActionListener(jobject o) : java::lang::Object(o) {}
	TextView_OnEditorActionListener(const TextView_OnEditorActionListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::widget::TextView_OnEditorActionListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean OnEditorAction(const ::android::widget::TextView& arg0, const ::jint& arg1, const ::android::view::KeyEvent& arg2) = 0;
	};
};

struct Scroller : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid AbortAnimation() const;
	::jboolean ComputeScrollOffset() const;
	::jvoid ExtendDuration(const ::jint& arg0) const;
	::jvoid Fling(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4, const ::jint& arg5, const ::jint& arg6, const ::jint& arg7) const;
	::jvoid ForceFinished(const ::jboolean& arg0) const;
	::jfloat GetCurrVelocity() const;
	::jint GetCurrX() const;
	::jint GetCurrY() const;
	::jint GetDuration() const;
	::jint GetFinalX() const;
	::jint GetFinalY() const;
	::jint GetStartX() const;
	::jint GetStartY() const;
	::jboolean IsFinished() const;
	::jvoid SetFinalX(const ::jint& arg0) const;
	::jvoid SetFinalY(const ::jint& arg0) const;
	::jvoid SetFriction(const ::jfloat& arg0) const;
	::jvoid StartScroll(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid StartScroll(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4) const;
	::jint TimePassed() const;
	static jobject __Constructor(const ::android::content::Context& arg0);
	Scroller(const ::android::content::Context& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::view::animation::Interpolator& arg1);
	Scroller(const ::android::content::Context& arg0, const ::android::view::animation::Interpolator& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::view::animation::Interpolator& arg1, const ::jboolean& arg2);
	Scroller(const ::android::content::Context& arg0, const ::android::view::animation::Interpolator& arg1, const ::jboolean& arg2) : ::java::lang::Object(__Constructor(arg0, arg1, arg2)) {}
	explicit Scroller(jobject o) : ::java::lang::Object(o) {}
	Scroller(const Scroller& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace text { 
struct Spannable_Factory : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::android::text::Spannable_Factory GetInstance();
	::android::text::Spannable NewSpannable(const ::java::lang::CharSequence& arg0) const;
	static jobject __Constructor();
	Spannable_Factory() : ::java::lang::Object(__Constructor()) {}
	explicit Spannable_Factory(jobject o) : ::java::lang::Object(o) {}
	Spannable_Factory(const Spannable_Factory& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace widget { 
struct TextView_BufferType : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::android::widget::TextView_BufferType& fEDITABLE();
	static ::android::widget::TextView_BufferType& fNORMAL();
	static ::android::widget::TextView_BufferType& fSPANNABLE();
	static ::android::widget::TextView_BufferType ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::android::widget::TextView_BufferType > Values();
	explicit TextView_BufferType(jobject o) : ::java::lang::Enum(o) {}
	TextView_BufferType(const TextView_BufferType& o)  : ::java::lang::Enum(o) {}

};

struct Button : ::android::widget::TextView
{
	static jni::Class __CLASS;

	::java::lang::CharSequence GetAccessibilityClassName() const;
	::android::view::PointerIcon OnResolvePointerIcon(const ::android::view::MotionEvent& arg0, const ::jint& arg1) const;
	static jobject __Constructor(const ::android::content::Context& arg0);
	Button(const ::android::content::Context& arg0) : ::android::widget::TextView(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1);
	Button(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1) : ::android::widget::TextView(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2);
	Button(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2) : ::android::widget::TextView(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3);
	Button(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3) : ::android::widget::TextView(__Constructor(arg0, arg1, arg2, arg3)) {}
	explicit Button(jobject o) : ::android::widget::TextView(o) {}
	Button(const Button& o)  : ::android::widget::TextView(o) {}

};

struct CompoundButton : ::android::widget::Button
{
	static jni::Class __CLASS;

	operator ::android::widget::Checkable();
	::jvoid Autofill(const ::android::view::autofill::AutofillValue& arg0) const;
	::jvoid DrawableHotspotChanged(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jvoid DrawableStateChanged() const;
	::java::lang::CharSequence GetAccessibilityClassName() const;
	::jint GetAutofillType() const;
	::android::view::autofill::AutofillValue GetAutofillValue() const;
	::android::graphics::drawable::Drawable GetButtonDrawable() const;
	::android::graphics::BlendMode GetButtonTintBlendMode() const;
	::android::content::res::ColorStateList GetButtonTintList() const;
	::android::graphics::PorterDuff_Mode GetButtonTintMode() const;
	::jint GetCompoundPaddingLeft() const;
	::jint GetCompoundPaddingRight() const;
	::jboolean IsChecked() const;
	::jvoid JumpDrawablesToCurrentState() const;
	jni::Array< ::jint > OnCreateDrawableState(const ::jint& arg0) const;
	::jvoid OnDraw(const ::android::graphics::Canvas& arg0) const;
	::jvoid OnRestoreInstanceState(const ::android::os::Parcelable& arg0) const;
	::android::os::Parcelable OnSaveInstanceState() const;
	::jboolean PerformClick() const;
	::jvoid SetButtonDrawable(const ::jint& arg0) const;
	::jvoid SetButtonDrawable(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid SetButtonIcon(const ::android::graphics::drawable::Icon& arg0) const;
	::jvoid SetButtonTintBlendMode(const ::android::graphics::BlendMode& arg0) const;
	::jvoid SetButtonTintList(const ::android::content::res::ColorStateList& arg0) const;
	::jvoid SetButtonTintMode(const ::android::graphics::PorterDuff_Mode& arg0) const;
	::jvoid SetChecked(const ::jboolean& arg0) const;
	::jvoid SetOnCheckedChangeListener(const ::android::widget::CompoundButton_OnCheckedChangeListener& arg0) const;
	::jvoid SetStateDescription(const ::java::lang::CharSequence& arg0) const;
	::jvoid Toggle() const;
	::jboolean VerifyDrawable(const ::android::graphics::drawable::Drawable& arg0) const;
	static jobject __Constructor(const ::android::content::Context& arg0);
	CompoundButton(const ::android::content::Context& arg0) : ::android::widget::Button(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1);
	CompoundButton(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1) : ::android::widget::Button(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2);
	CompoundButton(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2) : ::android::widget::Button(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3);
	CompoundButton(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3) : ::android::widget::Button(__Constructor(arg0, arg1, arg2, arg3)) {}
	explicit CompoundButton(jobject o) : ::android::widget::Button(o) {}
	CompoundButton(const CompoundButton& o)  : ::android::widget::Button(o) {}

};

struct Switch : ::android::widget::CompoundButton
{
	static jni::Class __CLASS;

	::jvoid Draw(const ::android::graphics::Canvas& arg0) const;
	::jvoid DrawableHotspotChanged(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jvoid DrawableStateChanged() const;
	::java::lang::CharSequence GetAccessibilityClassName() const;
	::jint GetCompoundPaddingLeft() const;
	::jint GetCompoundPaddingRight() const;
	::jboolean GetShowText() const;
	::jboolean GetSplitTrack() const;
	::jint GetSwitchMinWidth() const;
	::jint GetSwitchPadding() const;
	::java::lang::CharSequence GetTextOff() const;
	::java::lang::CharSequence GetTextOn() const;
	::android::graphics::drawable::Drawable GetThumbDrawable() const;
	::jint GetThumbTextPadding() const;
	::android::graphics::BlendMode GetThumbTintBlendMode() const;
	::android::content::res::ColorStateList GetThumbTintList() const;
	::android::graphics::PorterDuff_Mode GetThumbTintMode() const;
	::android::graphics::drawable::Drawable GetTrackDrawable() const;
	::android::graphics::BlendMode GetTrackTintBlendMode() const;
	::android::content::res::ColorStateList GetTrackTintList() const;
	::android::graphics::PorterDuff_Mode GetTrackTintMode() const;
	::jvoid JumpDrawablesToCurrentState() const;
	jni::Array< ::jint > OnCreateDrawableState(const ::jint& arg0) const;
	::jvoid OnDraw(const ::android::graphics::Canvas& arg0) const;
	::jvoid OnLayout(const ::jboolean& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4) const;
	::jvoid OnMeasure(const ::jint& arg0, const ::jint& arg1) const;
	::jboolean OnTouchEvent(const ::android::view::MotionEvent& arg0) const;
	::jvoid SetChecked(const ::jboolean& arg0) const;
	::jvoid SetShowText(const ::jboolean& arg0) const;
	::jvoid SetSplitTrack(const ::jboolean& arg0) const;
	::jvoid SetSwitchMinWidth(const ::jint& arg0) const;
	::jvoid SetSwitchPadding(const ::jint& arg0) const;
	::jvoid SetSwitchTextAppearance(const ::android::content::Context& arg0, const ::jint& arg1) const;
	::jvoid SetSwitchTypeface(const ::android::graphics::Typeface& arg0) const;
	::jvoid SetSwitchTypeface(const ::android::graphics::Typeface& arg0, const ::jint& arg1) const;
	::jvoid SetTextOff(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetTextOn(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetThumbDrawable(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid SetThumbIcon(const ::android::graphics::drawable::Icon& arg0) const;
	::jvoid SetThumbResource(const ::jint& arg0) const;
	::jvoid SetThumbTextPadding(const ::jint& arg0) const;
	::jvoid SetThumbTintBlendMode(const ::android::graphics::BlendMode& arg0) const;
	::jvoid SetThumbTintList(const ::android::content::res::ColorStateList& arg0) const;
	::jvoid SetThumbTintMode(const ::android::graphics::PorterDuff_Mode& arg0) const;
	::jvoid SetTrackDrawable(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid SetTrackIcon(const ::android::graphics::drawable::Icon& arg0) const;
	::jvoid SetTrackResource(const ::jint& arg0) const;
	::jvoid SetTrackTintBlendMode(const ::android::graphics::BlendMode& arg0) const;
	::jvoid SetTrackTintList(const ::android::content::res::ColorStateList& arg0) const;
	::jvoid SetTrackTintMode(const ::android::graphics::PorterDuff_Mode& arg0) const;
	::jvoid Toggle() const;
	::jboolean VerifyDrawable(const ::android::graphics::drawable::Drawable& arg0) const;
	static jobject __Constructor(const ::android::content::Context& arg0);
	Switch(const ::android::content::Context& arg0) : ::android::widget::CompoundButton(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1);
	Switch(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1) : ::android::widget::CompoundButton(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2);
	Switch(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2) : ::android::widget::CompoundButton(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3);
	Switch(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3) : ::android::widget::CompoundButton(__Constructor(arg0, arg1, arg2, arg3)) {}
	explicit Switch(jobject o) : ::android::widget::CompoundButton(o) {}
	Switch(const Switch& o)  : ::android::widget::CompoundButton(o) {}

};

struct Checkable : java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean IsChecked() const;
	::jvoid SetChecked(const ::jboolean& arg0) const;
	::jvoid Toggle() const;
	explicit Checkable(jobject o) : java::lang::Object(o) {}
	Checkable(const Checkable& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::widget::Checkable();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean IsChecked() = 0;
		virtual void SetChecked(const ::jboolean& arg0) = 0;
		virtual void Toggle() = 0;
	};
};

struct CompoundButton_OnCheckedChangeListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnCheckedChanged(const ::android::widget::CompoundButton& arg0, const ::jboolean& arg1) const;
	explicit CompoundButton_OnCheckedChangeListener(jobject o) : java::lang::Object(o) {}
	CompoundButton_OnCheckedChangeListener(const CompoundButton_OnCheckedChangeListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::widget::CompoundButton_OnCheckedChangeListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnCheckedChanged(const ::android::widget::CompoundButton& arg0, const ::jboolean& arg1) = 0;
	};
};

struct ProgressBar : ::android::view::View
{
	static jni::Class __CLASS;

	::jvoid DrawableHotspotChanged(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jvoid DrawableStateChanged() const;
	::java::lang::CharSequence GetAccessibilityClassName() const;
	::android::graphics::drawable::Drawable GetCurrentDrawable() const;
	::android::graphics::drawable::Drawable GetIndeterminateDrawable() const;
	::android::graphics::BlendMode GetIndeterminateTintBlendMode() const;
	::android::content::res::ColorStateList GetIndeterminateTintList() const;
	::android::graphics::PorterDuff_Mode GetIndeterminateTintMode() const;
	::android::view::animation::Interpolator GetInterpolator() const;
	::jint GetMax() const;
	::jint GetMaxHeight() const;
	::jint GetMaxWidth() const;
	::jint GetMin() const;
	::jint GetMinHeight() const;
	::jint GetMinWidth() const;
	::jint GetProgress() const;
	::android::graphics::BlendMode GetProgressBackgroundTintBlendMode() const;
	::android::content::res::ColorStateList GetProgressBackgroundTintList() const;
	::android::graphics::PorterDuff_Mode GetProgressBackgroundTintMode() const;
	::android::graphics::drawable::Drawable GetProgressDrawable() const;
	::android::graphics::BlendMode GetProgressTintBlendMode() const;
	::android::content::res::ColorStateList GetProgressTintList() const;
	::android::graphics::PorterDuff_Mode GetProgressTintMode() const;
	::jint GetSecondaryProgress() const;
	::android::graphics::BlendMode GetSecondaryProgressTintBlendMode() const;
	::android::content::res::ColorStateList GetSecondaryProgressTintList() const;
	::android::graphics::PorterDuff_Mode GetSecondaryProgressTintMode() const;
	::jvoid IncrementProgressBy(const ::jint& arg0) const;
	::jvoid IncrementSecondaryProgressBy(const ::jint& arg0) const;
	::jvoid InvalidateDrawable(const ::android::graphics::drawable::Drawable& arg0) const;
	::jboolean IsAnimating() const;
	::jboolean IsIndeterminate() const;
	::jvoid JumpDrawablesToCurrentState() const;
	::jvoid OnAttachedToWindow() const;
	::jvoid OnDetachedFromWindow() const;
	::jvoid OnDraw(const ::android::graphics::Canvas& arg0) const;
	::jvoid OnMeasure(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid OnRestoreInstanceState(const ::android::os::Parcelable& arg0) const;
	::android::os::Parcelable OnSaveInstanceState() const;
	::jvoid OnSizeChanged(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid OnVisibilityAggregated(const ::jboolean& arg0) const;
	::jvoid PostInvalidate() const;
	::jvoid SetIndeterminate(const ::jboolean& arg0) const;
	::jvoid SetIndeterminateDrawable(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid SetIndeterminateDrawableTiled(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid SetIndeterminateTintBlendMode(const ::android::graphics::BlendMode& arg0) const;
	::jvoid SetIndeterminateTintList(const ::android::content::res::ColorStateList& arg0) const;
	::jvoid SetIndeterminateTintMode(const ::android::graphics::PorterDuff_Mode& arg0) const;
	::jvoid SetInterpolator(const ::android::content::Context& arg0, const ::jint& arg1) const;
	::jvoid SetInterpolator(const ::android::view::animation::Interpolator& arg0) const;
	::jvoid SetMax(const ::jint& arg0) const;
	::jvoid SetMaxHeight(const ::jint& arg0) const;
	::jvoid SetMaxWidth(const ::jint& arg0) const;
	::jvoid SetMin(const ::jint& arg0) const;
	::jvoid SetMinHeight(const ::jint& arg0) const;
	::jvoid SetMinWidth(const ::jint& arg0) const;
	::jvoid SetProgress(const ::jint& arg0) const;
	::jvoid SetProgress(const ::jint& arg0, const ::jboolean& arg1) const;
	::jvoid SetProgressBackgroundTintBlendMode(const ::android::graphics::BlendMode& arg0) const;
	::jvoid SetProgressBackgroundTintList(const ::android::content::res::ColorStateList& arg0) const;
	::jvoid SetProgressBackgroundTintMode(const ::android::graphics::PorterDuff_Mode& arg0) const;
	::jvoid SetProgressDrawable(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid SetProgressDrawableTiled(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid SetProgressTintBlendMode(const ::android::graphics::BlendMode& arg0) const;
	::jvoid SetProgressTintList(const ::android::content::res::ColorStateList& arg0) const;
	::jvoid SetProgressTintMode(const ::android::graphics::PorterDuff_Mode& arg0) const;
	::jvoid SetSecondaryProgress(const ::jint& arg0) const;
	::jvoid SetSecondaryProgressTintBlendMode(const ::android::graphics::BlendMode& arg0) const;
	::jvoid SetSecondaryProgressTintList(const ::android::content::res::ColorStateList& arg0) const;
	::jvoid SetSecondaryProgressTintMode(const ::android::graphics::PorterDuff_Mode& arg0) const;
	::jvoid SetStateDescription(const ::java::lang::CharSequence& arg0) const;
	::jboolean VerifyDrawable(const ::android::graphics::drawable::Drawable& arg0) const;
	static jobject __Constructor(const ::android::content::Context& arg0);
	ProgressBar(const ::android::content::Context& arg0) : ::android::view::View(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1);
	ProgressBar(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1) : ::android::view::View(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2);
	ProgressBar(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2) : ::android::view::View(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3);
	ProgressBar(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3) : ::android::view::View(__Constructor(arg0, arg1, arg2, arg3)) {}
	explicit ProgressBar(jobject o) : ::android::view::View(o) {}
	ProgressBar(const ProgressBar& o)  : ::android::view::View(o) {}

};

struct AbsSeekBar : ::android::widget::ProgressBar
{
	static jni::Class __CLASS;

	::jvoid DrawableHotspotChanged(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jvoid DrawableStateChanged() const;
	::java::lang::CharSequence GetAccessibilityClassName() const;
	::jint GetKeyProgressIncrement() const;
	::jboolean GetSplitTrack() const;
	::android::graphics::drawable::Drawable GetThumb() const;
	::jint GetThumbOffset() const;
	::android::graphics::BlendMode GetThumbTintBlendMode() const;
	::android::content::res::ColorStateList GetThumbTintList() const;
	::android::graphics::PorterDuff_Mode GetThumbTintMode() const;
	::android::graphics::drawable::Drawable GetTickMark() const;
	::android::graphics::BlendMode GetTickMarkTintBlendMode() const;
	::android::content::res::ColorStateList GetTickMarkTintList() const;
	::android::graphics::PorterDuff_Mode GetTickMarkTintMode() const;
	::jvoid JumpDrawablesToCurrentState() const;
	::jvoid OnDraw(const ::android::graphics::Canvas& arg0) const;
	::jboolean OnKeyDown(const ::jint& arg0, const ::android::view::KeyEvent& arg1) const;
	::jvoid OnMeasure(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid OnRtlPropertiesChanged(const ::jint& arg0) const;
	::jvoid OnSizeChanged(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jboolean OnTouchEvent(const ::android::view::MotionEvent& arg0) const;
	::jvoid SetKeyProgressIncrement(const ::jint& arg0) const;
	::jvoid SetMax(const ::jint& arg0) const;
	::jvoid SetMin(const ::jint& arg0) const;
	::jvoid SetSplitTrack(const ::jboolean& arg0) const;
	::jvoid SetSystemGestureExclusionRects(const ::java::util::List& arg0) const;
	::jvoid SetThumb(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid SetThumbOffset(const ::jint& arg0) const;
	::jvoid SetThumbTintBlendMode(const ::android::graphics::BlendMode& arg0) const;
	::jvoid SetThumbTintList(const ::android::content::res::ColorStateList& arg0) const;
	::jvoid SetThumbTintMode(const ::android::graphics::PorterDuff_Mode& arg0) const;
	::jvoid SetTickMark(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid SetTickMarkTintBlendMode(const ::android::graphics::BlendMode& arg0) const;
	::jvoid SetTickMarkTintList(const ::android::content::res::ColorStateList& arg0) const;
	::jvoid SetTickMarkTintMode(const ::android::graphics::PorterDuff_Mode& arg0) const;
	::jboolean VerifyDrawable(const ::android::graphics::drawable::Drawable& arg0) const;
	static jobject __Constructor(const ::android::content::Context& arg0);
	AbsSeekBar(const ::android::content::Context& arg0) : ::android::widget::ProgressBar(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1);
	AbsSeekBar(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1) : ::android::widget::ProgressBar(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2);
	AbsSeekBar(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2) : ::android::widget::ProgressBar(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3);
	AbsSeekBar(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3) : ::android::widget::ProgressBar(__Constructor(arg0, arg1, arg2, arg3)) {}
	explicit AbsSeekBar(jobject o) : ::android::widget::ProgressBar(o) {}
	AbsSeekBar(const AbsSeekBar& o)  : ::android::widget::ProgressBar(o) {}

};

struct SeekBar : ::android::widget::AbsSeekBar
{
	static jni::Class __CLASS;

	::java::lang::CharSequence GetAccessibilityClassName() const;
	::jvoid SetOnSeekBarChangeListener(const ::android::widget::SeekBar_OnSeekBarChangeListener& arg0) const;
	static jobject __Constructor(const ::android::content::Context& arg0);
	SeekBar(const ::android::content::Context& arg0) : ::android::widget::AbsSeekBar(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1);
	SeekBar(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1) : ::android::widget::AbsSeekBar(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2);
	SeekBar(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2) : ::android::widget::AbsSeekBar(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3);
	SeekBar(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3) : ::android::widget::AbsSeekBar(__Constructor(arg0, arg1, arg2, arg3)) {}
	explicit SeekBar(jobject o) : ::android::widget::AbsSeekBar(o) {}
	SeekBar(const SeekBar& o)  : ::android::widget::AbsSeekBar(o) {}

};

struct SeekBar_OnSeekBarChangeListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnProgressChanged(const ::android::widget::SeekBar& arg0, const ::jint& arg1, const ::jboolean& arg2) const;
	::jvoid OnStartTrackingTouch(const ::android::widget::SeekBar& arg0) const;
	::jvoid OnStopTrackingTouch(const ::android::widget::SeekBar& arg0) const;
	explicit SeekBar_OnSeekBarChangeListener(jobject o) : java::lang::Object(o) {}
	SeekBar_OnSeekBarChangeListener(const SeekBar_OnSeekBarChangeListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::widget::SeekBar_OnSeekBarChangeListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnProgressChanged(const ::android::widget::SeekBar& arg0, const ::jint& arg1, const ::jboolean& arg2) = 0;
		virtual void OnStartTrackingTouch(const ::android::widget::SeekBar& arg0) = 0;
		virtual void OnStopTrackingTouch(const ::android::widget::SeekBar& arg0) = 0;
	};
};

struct CheckBox : ::android::widget::CompoundButton
{
	static jni::Class __CLASS;

	::java::lang::CharSequence GetAccessibilityClassName() const;
	static jobject __Constructor(const ::android::content::Context& arg0);
	CheckBox(const ::android::content::Context& arg0) : ::android::widget::CompoundButton(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1);
	CheckBox(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1) : ::android::widget::CompoundButton(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2);
	CheckBox(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2) : ::android::widget::CompoundButton(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3);
	CheckBox(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3) : ::android::widget::CompoundButton(__Constructor(arg0, arg1, arg2, arg3)) {}
	explicit CheckBox(jobject o) : ::android::widget::CompoundButton(o) {}
	CheckBox(const CheckBox& o)  : ::android::widget::CompoundButton(o) {}

};

struct Toast : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fLENGTH_LONG();
	static ::jint& fLENGTH_SHORT();
	::jvoid AddCallback(const ::android::widget::Toast_Callback& arg0) const;
	::jvoid Cancel() const;
	::jint GetDuration() const;
	::jint GetGravity() const;
	::jfloat GetHorizontalMargin() const;
	::jfloat GetVerticalMargin() const;
	::android::view::View GetView() const;
	::jint GetXOffset() const;
	::jint GetYOffset() const;
	static ::android::widget::Toast MakeText(const ::android::content::Context& arg0, const ::jint& arg1, const ::jint& arg2);
	static ::android::widget::Toast MakeText(const ::android::content::Context& arg0, const ::java::lang::CharSequence& arg1, const ::jint& arg2);
	::jvoid RemoveCallback(const ::android::widget::Toast_Callback& arg0) const;
	::jvoid SetDuration(const ::jint& arg0) const;
	::jvoid SetGravity(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jvoid SetMargin(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jvoid SetText(const ::jint& arg0) const;
	::jvoid SetText(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetView(const ::android::view::View& arg0) const;
	::jvoid Show() const;
	static jobject __Constructor(const ::android::content::Context& arg0);
	Toast(const ::android::content::Context& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit Toast(jobject o) : ::java::lang::Object(o) {}
	Toast(const Toast& o)  : ::java::lang::Object(o) {}

};

struct Toast_Callback : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnToastHidden() const;
	::jvoid OnToastShown() const;
	static jobject __Constructor();
	Toast_Callback() : ::java::lang::Object(__Constructor()) {}
	explicit Toast_Callback(jobject o) : ::java::lang::Object(o) {}
	Toast_Callback(const Toast_Callback& o)  : ::java::lang::Object(o) {}

};

struct EditText : ::android::widget::TextView
{
	static jni::Class __CLASS;

	::jvoid ExtendSelection(const ::jint& arg0) const;
	::java::lang::CharSequence GetAccessibilityClassName() const;
	::jboolean GetDefaultEditable() const;
	::android::text::method::MovementMethod GetDefaultMovementMethod() const;
	::jboolean GetFreezesText() const;
	::android::text::Editable GetText() const;
	::jvoid SelectAll() const;
	::jvoid SetEllipsize(const ::android::text::TextUtils_TruncateAt& arg0) const;
	::jvoid SetSelection(const ::jint& arg0) const;
	::jvoid SetSelection(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid SetText(const ::java::lang::CharSequence& arg0, const ::android::widget::TextView_BufferType& arg1) const;
	static jobject __Constructor(const ::android::content::Context& arg0);
	EditText(const ::android::content::Context& arg0) : ::android::widget::TextView(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1);
	EditText(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1) : ::android::widget::TextView(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2);
	EditText(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2) : ::android::widget::TextView(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3);
	EditText(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3) : ::android::widget::TextView(__Constructor(arg0, arg1, arg2, arg3)) {}
	explicit EditText(jobject o) : ::android::widget::TextView(o) {}
	EditText(const EditText& o)  : ::android::widget::TextView(o) {}

};

struct ScrollView : ::android::widget::FrameLayout
{
	static jni::Class __CLASS;

	::jvoid AddView(const ::android::view::View& arg0) const;
	::jvoid AddView(const ::android::view::View& arg0, const ::jint& arg1) const;
	::jvoid AddView(const ::android::view::View& arg0, const ::jint& arg1, const ::android::view::ViewGroup_LayoutParams& arg2) const;
	::jvoid AddView(const ::android::view::View& arg0, const ::android::view::ViewGroup_LayoutParams& arg1) const;
	::jboolean ArrowScroll(const ::jint& arg0) const;
	::jvoid ComputeScroll() const;
	::jint ComputeScrollDeltaToGetChildRectOnScreen(const ::android::graphics::Rect& arg0) const;
	::jint ComputeVerticalScrollOffset() const;
	::jint ComputeVerticalScrollRange() const;
	::jboolean DispatchKeyEvent(const ::android::view::KeyEvent& arg0) const;
	::jvoid Draw(const ::android::graphics::Canvas& arg0) const;
	::jboolean ExecuteKeyEvent(const ::android::view::KeyEvent& arg0) const;
	::jvoid Fling(const ::jint& arg0) const;
	::jboolean FullScroll(const ::jint& arg0) const;
	::java::lang::CharSequence GetAccessibilityClassName() const;
	::jint GetBottomEdgeEffectColor() const;
	::jfloat GetBottomFadingEdgeStrength() const;
	::jint GetMaxScrollAmount() const;
	::jint GetTopEdgeEffectColor() const;
	::jfloat GetTopFadingEdgeStrength() const;
	::jboolean IsFillViewport() const;
	::jboolean IsSmoothScrollingEnabled() const;
	::jvoid MeasureChild(const ::android::view::View& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jvoid MeasureChildWithMargins(const ::android::view::View& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4) const;
	::jvoid OnDetachedFromWindow() const;
	::jboolean OnGenericMotionEvent(const ::android::view::MotionEvent& arg0) const;
	::jboolean OnInterceptTouchEvent(const ::android::view::MotionEvent& arg0) const;
	::jvoid OnLayout(const ::jboolean& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4) const;
	::jvoid OnMeasure(const ::jint& arg0, const ::jint& arg1) const;
	::jboolean OnNestedFling(const ::android::view::View& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jboolean& arg3) const;
	::jvoid OnNestedScroll(const ::android::view::View& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4) const;
	::jvoid OnNestedScrollAccepted(const ::android::view::View& arg0, const ::android::view::View& arg1, const ::jint& arg2) const;
	::jvoid OnOverScrolled(const ::jint& arg0, const ::jint& arg1, const ::jboolean& arg2, const ::jboolean& arg3) const;
	::jboolean OnRequestFocusInDescendants(const ::jint& arg0, const ::android::graphics::Rect& arg1) const;
	::jvoid OnRestoreInstanceState(const ::android::os::Parcelable& arg0) const;
	::android::os::Parcelable OnSaveInstanceState() const;
	::jvoid OnSizeChanged(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jboolean OnStartNestedScroll(const ::android::view::View& arg0, const ::android::view::View& arg1, const ::jint& arg2) const;
	::jvoid OnStopNestedScroll(const ::android::view::View& arg0) const;
	::jboolean OnTouchEvent(const ::android::view::MotionEvent& arg0) const;
	::jboolean PageScroll(const ::jint& arg0) const;
	::jvoid RequestChildFocus(const ::android::view::View& arg0, const ::android::view::View& arg1) const;
	::jboolean RequestChildRectangleOnScreen(const ::android::view::View& arg0, const ::android::graphics::Rect& arg1, const ::jboolean& arg2) const;
	::jvoid RequestDisallowInterceptTouchEvent(const ::jboolean& arg0) const;
	::jvoid RequestLayout() const;
	::jvoid ScrollTo(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid ScrollToDescendant(const ::android::view::View& arg0) const;
	::jvoid SetBottomEdgeEffectColor(const ::jint& arg0) const;
	::jvoid SetEdgeEffectColor(const ::jint& arg0) const;
	::jvoid SetFillViewport(const ::jboolean& arg0) const;
	::jvoid SetSmoothScrollingEnabled(const ::jboolean& arg0) const;
	::jvoid SetTopEdgeEffectColor(const ::jint& arg0) const;
	::jboolean ShouldDelayChildPressedState() const;
	::jvoid SmoothScrollBy(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid SmoothScrollTo(const ::jint& arg0, const ::jint& arg1) const;
	static jobject __Constructor(const ::android::content::Context& arg0);
	ScrollView(const ::android::content::Context& arg0) : ::android::widget::FrameLayout(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1);
	ScrollView(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1) : ::android::widget::FrameLayout(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2);
	ScrollView(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2) : ::android::widget::FrameLayout(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3);
	ScrollView(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3) : ::android::widget::FrameLayout(__Constructor(arg0, arg1, arg2, arg3)) {}
	explicit ScrollView(jobject o) : ::android::widget::FrameLayout(o) {}
	ScrollView(const ScrollView& o)  : ::android::widget::FrameLayout(o) {}

};

}}

namespace android { namespace graphics { namespace drawable { 
struct GradientDrawable : ::android::graphics::drawable::Drawable
{
	static jni::Class __CLASS;

	static ::jint& fLINE();
	static ::jint& fLINEAR_GRADIENT();
	static ::jint& fOVAL();
	static ::jint& fRADIAL_GRADIENT();
	static ::jint& fRECTANGLE();
	static ::jint& fRING();
	static ::jint& fSWEEP_GRADIENT();
	::jvoid ApplyTheme(const ::android::content::res::Resources_Theme& arg0) const;
	::jboolean CanApplyTheme() const;
	::jvoid Draw(const ::android::graphics::Canvas& arg0) const;
	::jint GetAlpha() const;
	::jint GetChangingConfigurations() const;
	::android::content::res::ColorStateList GetColor() const;
	::android::graphics::ColorFilter GetColorFilter() const;
	jni::Array< ::jint > GetColors() const;
	::android::graphics::drawable::Drawable_ConstantState GetConstantState() const;
	jni::Array< ::jfloat > GetCornerRadii() const;
	::jfloat GetCornerRadius() const;
	::jfloat GetGradientCenterX() const;
	::jfloat GetGradientCenterY() const;
	::jfloat GetGradientRadius() const;
	::jint GetGradientType() const;
	::jint GetInnerRadius() const;
	::jfloat GetInnerRadiusRatio() const;
	::jint GetIntrinsicHeight() const;
	::jint GetIntrinsicWidth() const;
	::jint GetOpacity() const;
	::android::graphics::Insets GetOpticalInsets() const;
	::android::graphics::drawable::GradientDrawable_Orientation GetOrientation() const;
	::jvoid GetOutline(const ::android::graphics::Outline& arg0) const;
	::jboolean GetPadding(const ::android::graphics::Rect& arg0) const;
	::jint GetShape() const;
	::jint GetThickness() const;
	::jfloat GetThicknessRatio() const;
	::jboolean GetUseLevel() const;
	::jboolean HasFocusStateSpecified() const;
	::jvoid Inflate(const ::android::content::res::Resources& arg0, const ::org::xmlpull::v1::XmlPullParser& arg1, const ::android::util::AttributeSet& arg2, const ::android::content::res::Resources_Theme& arg3) const;
	::jboolean IsStateful() const;
	::android::graphics::drawable::Drawable Mutate() const;
	::jvoid OnBoundsChange(const ::android::graphics::Rect& arg0) const;
	::jboolean OnLevelChange(const ::jint& arg0) const;
	::jboolean OnStateChange(const jni::Array< ::jint >& arg0) const;
	::jvoid SetAlpha(const ::jint& arg0) const;
	::jvoid SetColor(const ::jint& arg0) const;
	::jvoid SetColor(const ::android::content::res::ColorStateList& arg0) const;
	::jvoid SetColorFilter(const ::android::graphics::ColorFilter& arg0) const;
	::jvoid SetColors(const jni::Array< ::jint >& arg0) const;
	::jvoid SetColors(const jni::Array< ::jint >& arg0, const jni::Array< ::jfloat >& arg1) const;
	::jvoid SetCornerRadii(const jni::Array< ::jfloat >& arg0) const;
	::jvoid SetCornerRadius(const ::jfloat& arg0) const;
	::jvoid SetDither(const ::jboolean& arg0) const;
	::jvoid SetGradientCenter(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jvoid SetGradientRadius(const ::jfloat& arg0) const;
	::jvoid SetGradientType(const ::jint& arg0) const;
	::jvoid SetInnerRadius(const ::jint& arg0) const;
	::jvoid SetInnerRadiusRatio(const ::jfloat& arg0) const;
	::jvoid SetOrientation(const ::android::graphics::drawable::GradientDrawable_Orientation& arg0) const;
	::jvoid SetPadding(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid SetShape(const ::jint& arg0) const;
	::jvoid SetSize(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid SetStroke(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid SetStroke(const ::jint& arg0, const ::jint& arg1, const ::jfloat& arg2, const ::jfloat& arg3) const;
	::jvoid SetStroke(const ::jint& arg0, const ::android::content::res::ColorStateList& arg1) const;
	::jvoid SetStroke(const ::jint& arg0, const ::android::content::res::ColorStateList& arg1, const ::jfloat& arg2, const ::jfloat& arg3) const;
	::jvoid SetThickness(const ::jint& arg0) const;
	::jvoid SetThicknessRatio(const ::jfloat& arg0) const;
	::jvoid SetTintBlendMode(const ::android::graphics::BlendMode& arg0) const;
	::jvoid SetTintList(const ::android::content::res::ColorStateList& arg0) const;
	::jvoid SetUseLevel(const ::jboolean& arg0) const;
	static jobject __Constructor();
	GradientDrawable() : ::android::graphics::drawable::Drawable(__Constructor()) {}
	static jobject __Constructor(const ::android::graphics::drawable::GradientDrawable_Orientation& arg0, const jni::Array< ::jint >& arg1);
	GradientDrawable(const ::android::graphics::drawable::GradientDrawable_Orientation& arg0, const jni::Array< ::jint >& arg1) : ::android::graphics::drawable::Drawable(__Constructor(arg0, arg1)) {}
	explicit GradientDrawable(jobject o) : ::android::graphics::drawable::Drawable(o) {}
	GradientDrawable(const GradientDrawable& o)  : ::android::graphics::drawable::Drawable(o) {}

};

struct GradientDrawable_Orientation : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::android::graphics::drawable::GradientDrawable_Orientation& fBL_TR();
	static ::android::graphics::drawable::GradientDrawable_Orientation& fBOTTOM_TOP();
	static ::android::graphics::drawable::GradientDrawable_Orientation& fBR_TL();
	static ::android::graphics::drawable::GradientDrawable_Orientation& fLEFT_RIGHT();
	static ::android::graphics::drawable::GradientDrawable_Orientation& fRIGHT_LEFT();
	static ::android::graphics::drawable::GradientDrawable_Orientation& fTL_BR();
	static ::android::graphics::drawable::GradientDrawable_Orientation& fTOP_BOTTOM();
	static ::android::graphics::drawable::GradientDrawable_Orientation& fTR_BL();
	static ::android::graphics::drawable::GradientDrawable_Orientation ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::android::graphics::drawable::GradientDrawable_Orientation > Values();
	explicit GradientDrawable_Orientation(jobject o) : ::java::lang::Enum(o) {}
	GradientDrawable_Orientation(const GradientDrawable_Orientation& o)  : ::java::lang::Enum(o) {}

};

}}}

namespace android { namespace graphics { 
struct BitmapFactory : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::android::graphics::Bitmap DecodeByteArray(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::jint& arg2);
	static ::android::graphics::Bitmap DecodeByteArray(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::jint& arg2, const ::android::graphics::BitmapFactory_Options& arg3);
	static ::android::graphics::Bitmap DecodeFile(const ::java::lang::String& arg0);
	static ::android::graphics::Bitmap DecodeFile(const ::java::lang::String& arg0, const ::android::graphics::BitmapFactory_Options& arg1);
	static ::android::graphics::Bitmap DecodeFileDescriptor(const ::java::io::FileDescriptor& arg0);
	static ::android::graphics::Bitmap DecodeFileDescriptor(const ::java::io::FileDescriptor& arg0, const ::android::graphics::Rect& arg1, const ::android::graphics::BitmapFactory_Options& arg2);
	static ::android::graphics::Bitmap DecodeResource(const ::android::content::res::Resources& arg0, const ::jint& arg1);
	static ::android::graphics::Bitmap DecodeResource(const ::android::content::res::Resources& arg0, const ::jint& arg1, const ::android::graphics::BitmapFactory_Options& arg2);
	static ::android::graphics::Bitmap DecodeResourceStream(const ::android::content::res::Resources& arg0, const ::android::util::TypedValue& arg1, const ::java::io::InputStream& arg2, const ::android::graphics::Rect& arg3, const ::android::graphics::BitmapFactory_Options& arg4);
	static ::android::graphics::Bitmap DecodeStream(const ::java::io::InputStream& arg0);
	static ::android::graphics::Bitmap DecodeStream(const ::java::io::InputStream& arg0, const ::android::graphics::Rect& arg1, const ::android::graphics::BitmapFactory_Options& arg2);
	static jobject __Constructor();
	BitmapFactory() : ::java::lang::Object(__Constructor()) {}
	explicit BitmapFactory(jobject o) : ::java::lang::Object(o) {}
	BitmapFactory(const BitmapFactory& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace util { 
struct Base64 : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fCRLF();
	static ::jint& fDEFAULT();
	static ::jint& fNO_CLOSE();
	static ::jint& fNO_PADDING();
	static ::jint& fNO_WRAP();
	static ::jint& fURL_SAFE();
	static jni::Array< ::jbyte > Decode(const ::java::lang::String& arg0, const ::jint& arg1);
	static jni::Array< ::jbyte > Decode(const jni::Array< ::jbyte >& arg0, const ::jint& arg1);
	static jni::Array< ::jbyte > Decode(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3);
	static jni::Array< ::jbyte > Encode(const jni::Array< ::jbyte >& arg0, const ::jint& arg1);
	static jni::Array< ::jbyte > Encode(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3);
	static ::java::lang::String EncodeToString(const jni::Array< ::jbyte >& arg0, const ::jint& arg1);
	static ::java::lang::String EncodeToString(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3);
	explicit Base64(jobject o) : ::java::lang::Object(o) {}
	Base64(const Base64& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace os { 
struct Environment : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::java::lang::String fDIRECTORY_ALARMS();
	static void fDIRECTORY_ALARMS(const ::java::lang::String& arg0);
	static ::java::lang::String fDIRECTORY_AUDIOBOOKS();
	static void fDIRECTORY_AUDIOBOOKS(const ::java::lang::String& arg0);
	static ::java::lang::String fDIRECTORY_DCIM();
	static void fDIRECTORY_DCIM(const ::java::lang::String& arg0);
	static ::java::lang::String fDIRECTORY_DOCUMENTS();
	static void fDIRECTORY_DOCUMENTS(const ::java::lang::String& arg0);
	static ::java::lang::String fDIRECTORY_DOWNLOADS();
	static void fDIRECTORY_DOWNLOADS(const ::java::lang::String& arg0);
	static ::java::lang::String fDIRECTORY_MOVIES();
	static void fDIRECTORY_MOVIES(const ::java::lang::String& arg0);
	static ::java::lang::String fDIRECTORY_MUSIC();
	static void fDIRECTORY_MUSIC(const ::java::lang::String& arg0);
	static ::java::lang::String fDIRECTORY_NOTIFICATIONS();
	static void fDIRECTORY_NOTIFICATIONS(const ::java::lang::String& arg0);
	static ::java::lang::String fDIRECTORY_PICTURES();
	static void fDIRECTORY_PICTURES(const ::java::lang::String& arg0);
	static ::java::lang::String fDIRECTORY_PODCASTS();
	static void fDIRECTORY_PODCASTS(const ::java::lang::String& arg0);
	static ::java::lang::String fDIRECTORY_RECORDINGS();
	static void fDIRECTORY_RECORDINGS(const ::java::lang::String& arg0);
	static ::java::lang::String fDIRECTORY_RINGTONES();
	static void fDIRECTORY_RINGTONES(const ::java::lang::String& arg0);
	static ::java::lang::String fDIRECTORY_SCREENSHOTS();
	static void fDIRECTORY_SCREENSHOTS(const ::java::lang::String& arg0);
	static ::java::lang::String& fMEDIA_BAD_REMOVAL();
	static ::java::lang::String& fMEDIA_CHECKING();
	static ::java::lang::String& fMEDIA_EJECTING();
	static ::java::lang::String& fMEDIA_MOUNTED();
	static ::java::lang::String& fMEDIA_MOUNTED_READ_ONLY();
	static ::java::lang::String& fMEDIA_NOFS();
	static ::java::lang::String& fMEDIA_REMOVED();
	static ::java::lang::String& fMEDIA_SHARED();
	static ::java::lang::String& fMEDIA_UNKNOWN();
	static ::java::lang::String& fMEDIA_UNMOUNTABLE();
	static ::java::lang::String& fMEDIA_UNMOUNTED();
	static ::java::io::File GetDataDirectory();
	static ::java::io::File GetDownloadCacheDirectory();
	static ::java::io::File GetExternalStorageDirectory();
	static ::java::io::File GetExternalStoragePublicDirectory(const ::java::lang::String& arg0);
	static ::java::lang::String GetExternalStorageState();
	static ::java::lang::String GetExternalStorageState(const ::java::io::File& arg0);
	static ::java::io::File GetRootDirectory();
	static ::java::io::File GetStorageDirectory();
	static ::java::lang::String GetStorageState(const ::java::io::File& arg0);
	static ::jboolean IsExternalStorageEmulated();
	static ::jboolean IsExternalStorageEmulated(const ::java::io::File& arg0);
	static ::jboolean IsExternalStorageLegacy();
	static ::jboolean IsExternalStorageLegacy(const ::java::io::File& arg0);
	static ::jboolean IsExternalStorageManager();
	static ::jboolean IsExternalStorageManager(const ::java::io::File& arg0);
	static ::jboolean IsExternalStorageRemovable();
	static ::jboolean IsExternalStorageRemovable(const ::java::io::File& arg0);
	static jobject __Constructor();
	Environment() : ::java::lang::Object(__Constructor()) {}
	explicit Environment(jobject o) : ::java::lang::Object(o) {}
	Environment(const Environment& o)  : ::java::lang::Object(o) {}

};

struct Build : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::java::lang::String& fBOARD();
	static ::java::lang::String& fBOOTLOADER();
	static ::java::lang::String& fBRAND();
	static ::java::lang::String& fCPU_ABI();
	static ::java::lang::String& fCPU_ABI2();
	static ::java::lang::String& fDEVICE();
	static ::java::lang::String& fDISPLAY();
	static ::java::lang::String& fFINGERPRINT();
	static ::java::lang::String& fHARDWARE();
	static ::java::lang::String& fHOST();
	static ::java::lang::String& fID();
	static ::java::lang::String& fMANUFACTURER();
	static ::java::lang::String& fMODEL();
	static ::java::lang::String& fODM_SKU();
	static ::java::lang::String& fPRODUCT();
	static ::java::lang::String& fRADIO();
	static ::java::lang::String& fSERIAL();
	static ::java::lang::String& fSKU();
	static ::java::lang::String& fSOC_MANUFACTURER();
	static ::java::lang::String& fSOC_MODEL();
	static jni::Array< ::java::lang::String >& fSUPPORTED_32_BIT_ABIS();
	static jni::Array< ::java::lang::String >& fSUPPORTED_64_BIT_ABIS();
	static jni::Array< ::java::lang::String >& fSUPPORTED_ABIS();
	static ::java::lang::String& fTAGS();
	static ::jlong& fTIME();
	static ::java::lang::String& fTYPE();
	static ::java::lang::String& fUNKNOWN();
	static ::java::lang::String& fUSER();
	static ::java::util::List GetFingerprintedPartitions();
	static ::java::lang::String GetRadioVersion();
	static ::java::lang::String GetSerial();
	static jobject __Constructor();
	Build() : ::java::lang::Object(__Constructor()) {}
	explicit Build(jobject o) : ::java::lang::Object(o) {}
	Build(const Build& o)  : ::java::lang::Object(o) {}

};

struct Build_VERSION : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::java::lang::String& fBASE_OS();
	static ::java::lang::String& fCODENAME();
	static ::java::lang::String& fINCREMENTAL();
	static ::jint& fMEDIA_PERFORMANCE_CLASS();
	static ::jint& fPREVIEW_SDK_INT();
	static ::java::lang::String& fRELEASE();
	static ::java::lang::String& fRELEASE_OR_CODENAME();
	static ::java::lang::String& fSDK();
	static ::jint& fSDK_INT();
	static ::java::lang::String& fSECURITY_PATCH();
	static jobject __Constructor();
	Build_VERSION() : ::java::lang::Object(__Constructor()) {}
	explicit Build_VERSION(jobject o) : ::java::lang::Object(o) {}
	Build_VERSION(const Build_VERSION& o)  : ::java::lang::Object(o) {}

};

}}

namespace android { namespace app { 
struct AlertDialog_Builder : ::java::lang::Object
{
	static jni::Class __CLASS;

	::android::app::AlertDialog Create() const;
	::android::content::Context GetContext() const;
	::android::app::AlertDialog_Builder SetAdapter(const ::android::widget::ListAdapter& arg0, const ::android::content::DialogInterface_OnClickListener& arg1) const;
	::android::app::AlertDialog_Builder SetCancelable(const ::jboolean& arg0) const;
	::android::app::AlertDialog_Builder SetCursor(const ::android::database::Cursor& arg0, const ::android::content::DialogInterface_OnClickListener& arg1, const ::java::lang::String& arg2) const;
	::android::app::AlertDialog_Builder SetCustomTitle(const ::android::view::View& arg0) const;
	::android::app::AlertDialog_Builder SetIcon(const ::jint& arg0) const;
	::android::app::AlertDialog_Builder SetIcon(const ::android::graphics::drawable::Drawable& arg0) const;
	::android::app::AlertDialog_Builder SetIconAttribute(const ::jint& arg0) const;
	::android::app::AlertDialog_Builder SetInverseBackgroundForced(const ::jboolean& arg0) const;
	::android::app::AlertDialog_Builder SetItems(const ::jint& arg0, const ::android::content::DialogInterface_OnClickListener& arg1) const;
	::android::app::AlertDialog_Builder SetItems(const jni::Array< ::java::lang::CharSequence >& arg0, const ::android::content::DialogInterface_OnClickListener& arg1) const;
	::android::app::AlertDialog_Builder SetMessage(const ::jint& arg0) const;
	::android::app::AlertDialog_Builder SetMessage(const ::java::lang::CharSequence& arg0) const;
	::android::app::AlertDialog_Builder SetMultiChoiceItems(const ::jint& arg0, const jni::Array< ::jboolean >& arg1, const ::android::content::DialogInterface_OnMultiChoiceClickListener& arg2) const;
	::android::app::AlertDialog_Builder SetMultiChoiceItems(const ::android::database::Cursor& arg0, const ::java::lang::String& arg1, const ::java::lang::String& arg2, const ::android::content::DialogInterface_OnMultiChoiceClickListener& arg3) const;
	::android::app::AlertDialog_Builder SetMultiChoiceItems(const jni::Array< ::java::lang::CharSequence >& arg0, const jni::Array< ::jboolean >& arg1, const ::android::content::DialogInterface_OnMultiChoiceClickListener& arg2) const;
	::android::app::AlertDialog_Builder SetNegativeButton(const ::jint& arg0, const ::android::content::DialogInterface_OnClickListener& arg1) const;
	::android::app::AlertDialog_Builder SetNegativeButton(const ::java::lang::CharSequence& arg0, const ::android::content::DialogInterface_OnClickListener& arg1) const;
	::android::app::AlertDialog_Builder SetNeutralButton(const ::jint& arg0, const ::android::content::DialogInterface_OnClickListener& arg1) const;
	::android::app::AlertDialog_Builder SetNeutralButton(const ::java::lang::CharSequence& arg0, const ::android::content::DialogInterface_OnClickListener& arg1) const;
	::android::app::AlertDialog_Builder SetOnCancelListener(const ::android::content::DialogInterface_OnCancelListener& arg0) const;
	::android::app::AlertDialog_Builder SetOnDismissListener(const ::android::content::DialogInterface_OnDismissListener& arg0) const;
	::android::app::AlertDialog_Builder SetOnItemSelectedListener(const ::android::widget::AdapterView_OnItemSelectedListener& arg0) const;
	::android::app::AlertDialog_Builder SetOnKeyListener(const ::android::content::DialogInterface_OnKeyListener& arg0) const;
	::android::app::AlertDialog_Builder SetPositiveButton(const ::jint& arg0, const ::android::content::DialogInterface_OnClickListener& arg1) const;
	::android::app::AlertDialog_Builder SetPositiveButton(const ::java::lang::CharSequence& arg0, const ::android::content::DialogInterface_OnClickListener& arg1) const;
	::android::app::AlertDialog_Builder SetSingleChoiceItems(const ::jint& arg0, const ::jint& arg1, const ::android::content::DialogInterface_OnClickListener& arg2) const;
	::android::app::AlertDialog_Builder SetSingleChoiceItems(const ::android::database::Cursor& arg0, const ::jint& arg1, const ::java::lang::String& arg2, const ::android::content::DialogInterface_OnClickListener& arg3) const;
	::android::app::AlertDialog_Builder SetSingleChoiceItems(const ::android::widget::ListAdapter& arg0, const ::jint& arg1, const ::android::content::DialogInterface_OnClickListener& arg2) const;
	::android::app::AlertDialog_Builder SetSingleChoiceItems(const jni::Array< ::java::lang::CharSequence >& arg0, const ::jint& arg1, const ::android::content::DialogInterface_OnClickListener& arg2) const;
	::android::app::AlertDialog_Builder SetTitle(const ::jint& arg0) const;
	::android::app::AlertDialog_Builder SetTitle(const ::java::lang::CharSequence& arg0) const;
	::android::app::AlertDialog_Builder SetView(const ::jint& arg0) const;
	::android::app::AlertDialog_Builder SetView(const ::android::view::View& arg0) const;
	::android::app::AlertDialog Show() const;
	static jobject __Constructor(const ::android::content::Context& arg0);
	AlertDialog_Builder(const ::android::content::Context& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::jint& arg1);
	AlertDialog_Builder(const ::android::content::Context& arg0, const ::jint& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit AlertDialog_Builder(jobject o) : ::java::lang::Object(o) {}
	AlertDialog_Builder(const AlertDialog_Builder& o)  : ::java::lang::Object(o) {}

};

struct AlertDialog : ::android::app::Dialog
{
	static jni::Class __CLASS;

	operator ::android::content::DialogInterface();
	static ::jint& fTHEME_DEVICE_DEFAULT_DARK();
	static ::jint& fTHEME_DEVICE_DEFAULT_LIGHT();
	static ::jint& fTHEME_HOLO_DARK();
	static ::jint& fTHEME_HOLO_LIGHT();
	static ::jint& fTHEME_TRADITIONAL();
	::android::widget::Button GetButton(const ::jint& arg0) const;
	::android::widget::ListView GetListView() const;
	::jvoid OnCreate(const ::android::os::Bundle& arg0) const;
	::jboolean OnKeyDown(const ::jint& arg0, const ::android::view::KeyEvent& arg1) const;
	::jboolean OnKeyUp(const ::jint& arg0, const ::android::view::KeyEvent& arg1) const;
	::jvoid SetButton(const ::jint& arg0, const ::java::lang::CharSequence& arg1, const ::android::content::DialogInterface_OnClickListener& arg2) const;
	::jvoid SetButton(const ::jint& arg0, const ::java::lang::CharSequence& arg1, const ::android::os::Message& arg2) const;
	::jvoid SetButton(const ::java::lang::CharSequence& arg0, const ::android::content::DialogInterface_OnClickListener& arg1) const;
	::jvoid SetButton(const ::java::lang::CharSequence& arg0, const ::android::os::Message& arg1) const;
	::jvoid SetButton2(const ::java::lang::CharSequence& arg0, const ::android::content::DialogInterface_OnClickListener& arg1) const;
	::jvoid SetButton2(const ::java::lang::CharSequence& arg0, const ::android::os::Message& arg1) const;
	::jvoid SetButton3(const ::java::lang::CharSequence& arg0, const ::android::content::DialogInterface_OnClickListener& arg1) const;
	::jvoid SetButton3(const ::java::lang::CharSequence& arg0, const ::android::os::Message& arg1) const;
	::jvoid SetCustomTitle(const ::android::view::View& arg0) const;
	::jvoid SetIcon(const ::jint& arg0) const;
	::jvoid SetIcon(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid SetIconAttribute(const ::jint& arg0) const;
	::jvoid SetInverseBackgroundForced(const ::jboolean& arg0) const;
	::jvoid SetMessage(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetTitle(const ::java::lang::CharSequence& arg0) const;
	::jvoid SetView(const ::android::view::View& arg0) const;
	::jvoid SetView(const ::android::view::View& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4) const;
	static jobject __Constructor(const ::android::content::Context& arg0);
	AlertDialog(const ::android::content::Context& arg0) : ::android::app::Dialog(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::jint& arg1);
	AlertDialog(const ::android::content::Context& arg0, const ::jint& arg1) : ::android::app::Dialog(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::jboolean& arg1, const ::android::content::DialogInterface_OnCancelListener& arg2);
	AlertDialog(const ::android::content::Context& arg0, const ::jboolean& arg1, const ::android::content::DialogInterface_OnCancelListener& arg2) : ::android::app::Dialog(__Constructor(arg0, arg1, arg2)) {}
	explicit AlertDialog(jobject o) : ::android::app::Dialog(o) {}
	AlertDialog(const AlertDialog& o)  : ::android::app::Dialog(o) {}

};

}}

namespace android { namespace widget { 
struct AdapterView : ::android::view::ViewGroup
{
	static jni::Class __CLASS;

	static ::jint& fINVALID_POSITION();
	static ::jlong& fINVALID_ROW_ID();
	static ::jint& fITEM_VIEW_TYPE_HEADER_OR_FOOTER();
	static ::jint& fITEM_VIEW_TYPE_IGNORE();
	::jvoid AddView(const ::android::view::View& arg0) const;
	::jvoid AddView(const ::android::view::View& arg0, const ::jint& arg1) const;
	::jvoid AddView(const ::android::view::View& arg0, const ::jint& arg1, const ::android::view::ViewGroup_LayoutParams& arg2) const;
	::jvoid AddView(const ::android::view::View& arg0, const ::android::view::ViewGroup_LayoutParams& arg1) const;
	::jboolean CanAnimate() const;
	::jvoid DispatchRestoreInstanceState(const ::android::util::SparseArray& arg0) const;
	::jvoid DispatchSaveInstanceState(const ::android::util::SparseArray& arg0) const;
	::java::lang::CharSequence GetAccessibilityClassName() const;
	::android::widget::Adapter GetAdapter() const;
	::jint GetCount() const;
	::android::view::View GetEmptyView() const;
	::jint GetFirstVisiblePosition() const;
	::java::lang::Object GetItemAtPosition(const ::jint& arg0) const;
	::jlong GetItemIdAtPosition(const ::jint& arg0) const;
	::jint GetLastVisiblePosition() const;
	::android::widget::AdapterView_OnItemClickListener GetOnItemClickListener() const;
	::android::widget::AdapterView_OnItemLongClickListener GetOnItemLongClickListener() const;
	::android::widget::AdapterView_OnItemSelectedListener GetOnItemSelectedListener() const;
	::jint GetPositionForView(const ::android::view::View& arg0) const;
	::java::lang::Object GetSelectedItem() const;
	::jlong GetSelectedItemId() const;
	::jint GetSelectedItemPosition() const;
	::android::view::View GetSelectedView() const;
	::jvoid OnDetachedFromWindow() const;
	::jvoid OnLayout(const ::jboolean& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4) const;
	::jvoid OnProvideAutofillStructure(const ::android::view::ViewStructure& arg0, const ::jint& arg1) const;
	::jboolean PerformItemClick(const ::android::view::View& arg0, const ::jint& arg1, const ::jlong& arg2) const;
	::jvoid RemoveAllViews() const;
	::jvoid RemoveView(const ::android::view::View& arg0) const;
	::jvoid RemoveViewAt(const ::jint& arg0) const;
	::jvoid SetAdapter(const ::android::widget::Adapter& arg0) const;
	::jvoid SetEmptyView(const ::android::view::View& arg0) const;
	::jvoid SetFocusable(const ::jint& arg0) const;
	::jvoid SetFocusableInTouchMode(const ::jboolean& arg0) const;
	::jvoid SetOnClickListener(const ::android::view::View_OnClickListener& arg0) const;
	::jvoid SetOnItemClickListener(const ::android::widget::AdapterView_OnItemClickListener& arg0) const;
	::jvoid SetOnItemLongClickListener(const ::android::widget::AdapterView_OnItemLongClickListener& arg0) const;
	::jvoid SetOnItemSelectedListener(const ::android::widget::AdapterView_OnItemSelectedListener& arg0) const;
	::jvoid SetSelection(const ::jint& arg0) const;
	static jobject __Constructor(const ::android::content::Context& arg0);
	AdapterView(const ::android::content::Context& arg0) : ::android::view::ViewGroup(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1);
	AdapterView(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1) : ::android::view::ViewGroup(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2);
	AdapterView(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2) : ::android::view::ViewGroup(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3);
	AdapterView(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3) : ::android::view::ViewGroup(__Constructor(arg0, arg1, arg2, arg3)) {}
	explicit AdapterView(jobject o) : ::android::view::ViewGroup(o) {}
	AdapterView(const AdapterView& o)  : ::android::view::ViewGroup(o) {}

};

struct AbsListView : ::android::widget::AdapterView
{
	static jni::Class __CLASS;

	operator ::android::text::TextWatcher();
	operator ::android::view::ViewTreeObserver_OnGlobalLayoutListener();
	operator ::android::widget::Filter_FilterListener();
	operator ::android::view::ViewTreeObserver_OnTouchModeChangeListener();
	static ::jint& fCHOICE_MODE_MULTIPLE();
	static ::jint& fCHOICE_MODE_MULTIPLE_MODAL();
	static ::jint& fCHOICE_MODE_NONE();
	static ::jint& fCHOICE_MODE_SINGLE();
	static ::jint& fTRANSCRIPT_MODE_ALWAYS_SCROLL();
	static ::jint& fTRANSCRIPT_MODE_DISABLED();
	static ::jint& fTRANSCRIPT_MODE_NORMAL();
	::jvoid AddTouchables(const ::java::util::ArrayList& arg0) const;
	::jvoid AfterTextChanged(const ::android::text::Editable& arg0) const;
	::jvoid BeforeTextChanged(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jboolean CanScrollList(const ::jint& arg0) const;
	::jboolean CheckInputConnectionProxy(const ::android::view::View& arg0) const;
	::jboolean CheckLayoutParams(const ::android::view::ViewGroup_LayoutParams& arg0) const;
	::jvoid ClearChoices() const;
	::jvoid ClearTextFilter() const;
	::jint ComputeVerticalScrollExtent() const;
	::jint ComputeVerticalScrollOffset() const;
	::jint ComputeVerticalScrollRange() const;
	::jvoid DeferNotifyDataSetChanged() const;
	::jvoid DispatchDraw(const ::android::graphics::Canvas& arg0) const;
	::jvoid DispatchDrawableHotspotChanged(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jvoid DispatchSetPressed(const ::jboolean& arg0) const;
	::jvoid Draw(const ::android::graphics::Canvas& arg0) const;
	::jvoid DrawableStateChanged() const;
	::jvoid Fling(const ::jint& arg0) const;
	::android::view::ViewGroup_LayoutParams GenerateDefaultLayoutParams() const;
	::android::widget::AbsListView_LayoutParams GenerateLayoutParams(const ::android::util::AttributeSet& arg0) const;
	::android::view::ViewGroup_LayoutParams GenerateLayoutParams(const ::android::view::ViewGroup_LayoutParams& arg0) const;
	::java::lang::CharSequence GetAccessibilityClassName() const;
	::jint GetBottomEdgeEffectColor() const;
	::jfloat GetBottomFadingEdgeStrength() const;
	::jint GetBottomPaddingOffset() const;
	::jint GetCacheColorHint() const;
	::jint GetCheckedItemCount() const;
	jni::Array< ::jlong > GetCheckedItemIds() const;
	::jint GetCheckedItemPosition() const;
	::android::util::SparseBooleanArray GetCheckedItemPositions() const;
	::jint GetChoiceMode() const;
	::android::view::ContextMenu_ContextMenuInfo GetContextMenuInfo() const;
	::jvoid GetFocusedRect(const ::android::graphics::Rect& arg0) const;
	::jint GetLeftPaddingOffset() const;
	::jint GetListPaddingBottom() const;
	::jint GetListPaddingLeft() const;
	::jint GetListPaddingRight() const;
	::jint GetListPaddingTop() const;
	::jint GetRightPaddingOffset() const;
	::android::view::View GetSelectedView() const;
	::android::graphics::drawable::Drawable GetSelector() const;
	::jint GetSolidColor() const;
	::java::lang::CharSequence GetTextFilter() const;
	::jint GetTopEdgeEffectColor() const;
	::jfloat GetTopFadingEdgeStrength() const;
	::jint GetTopPaddingOffset() const;
	::jint GetTranscriptMode() const;
	::jint GetVerticalScrollbarWidth() const;
	::jvoid HandleDataChanged() const;
	::jboolean HasTextFilter() const;
	::jvoid InvalidateViews() const;
	::jboolean IsDrawSelectorOnTop() const;
	::jboolean IsFastScrollAlwaysVisible() const;
	::jboolean IsFastScrollEnabled() const;
	::jboolean IsInFilterMode() const;
	::jboolean IsItemChecked(const ::jint& arg0) const;
	::jboolean IsPaddingOffsetRequired() const;
	::jboolean IsScrollingCacheEnabled() const;
	::jboolean IsSmoothScrollbarEnabled() const;
	::jboolean IsStackFromBottom() const;
	::jboolean IsTextFilterEnabled() const;
	::jvoid JumpDrawablesToCurrentState() const;
	::jvoid LayoutChildren() const;
	::jvoid OnAttachedToWindow() const;
	::jvoid OnCancelPendingInputEvents() const;
	::android::view::inputmethod::InputConnection OnCreateInputConnection(const ::android::view::inputmethod::EditorInfo& arg0) const;
	::jvoid OnDetachedFromWindow() const;
	::jvoid OnDisplayHint(const ::jint& arg0) const;
	::jvoid OnFilterComplete(const ::jint& arg0) const;
	::jvoid OnFocusChanged(const ::jboolean& arg0, const ::jint& arg1, const ::android::graphics::Rect& arg2) const;
	::jboolean OnGenericMotionEvent(const ::android::view::MotionEvent& arg0) const;
	::jvoid OnGlobalLayout() const;
	::jvoid OnInitializeAccessibilityNodeInfoForItem(const ::android::view::View& arg0, const ::jint& arg1, const ::android::view::accessibility::AccessibilityNodeInfo& arg2) const;
	::jboolean OnInterceptHoverEvent(const ::android::view::MotionEvent& arg0) const;
	::jboolean OnInterceptTouchEvent(const ::android::view::MotionEvent& arg0) const;
	::jboolean OnKeyDown(const ::jint& arg0, const ::android::view::KeyEvent& arg1) const;
	::jboolean OnKeyUp(const ::jint& arg0, const ::android::view::KeyEvent& arg1) const;
	::jvoid OnLayout(const ::jboolean& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4) const;
	::jvoid OnMeasure(const ::jint& arg0, const ::jint& arg1) const;
	::jboolean OnNestedFling(const ::android::view::View& arg0, const ::jfloat& arg1, const ::jfloat& arg2, const ::jboolean& arg3) const;
	::jvoid OnNestedScroll(const ::android::view::View& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4) const;
	::jvoid OnNestedScrollAccepted(const ::android::view::View& arg0, const ::android::view::View& arg1, const ::jint& arg2) const;
	::jvoid OnOverScrolled(const ::jint& arg0, const ::jint& arg1, const ::jboolean& arg2, const ::jboolean& arg3) const;
	::jboolean OnRemoteAdapterConnected() const;
	::jvoid OnRemoteAdapterDisconnected() const;
	::android::view::PointerIcon OnResolvePointerIcon(const ::android::view::MotionEvent& arg0, const ::jint& arg1) const;
	::jvoid OnRestoreInstanceState(const ::android::os::Parcelable& arg0) const;
	::jvoid OnRtlPropertiesChanged(const ::jint& arg0) const;
	::android::os::Parcelable OnSaveInstanceState() const;
	::jvoid OnSizeChanged(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jboolean OnStartNestedScroll(const ::android::view::View& arg0, const ::android::view::View& arg1, const ::jint& arg2) const;
	::jvoid OnTextChanged(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jboolean OnTouchEvent(const ::android::view::MotionEvent& arg0) const;
	::jvoid OnTouchModeChanged(const ::jboolean& arg0) const;
	::jvoid OnWindowFocusChanged(const ::jboolean& arg0) const;
	::jboolean PerformItemClick(const ::android::view::View& arg0, const ::jint& arg1, const ::jlong& arg2) const;
	::jint PointToPosition(const ::jint& arg0, const ::jint& arg1) const;
	::jlong PointToRowId(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid ReclaimViews(const ::java::util::List& arg0) const;
	::jvoid RequestDisallowInterceptTouchEvent(const ::jboolean& arg0) const;
	::jvoid RequestLayout() const;
	::jvoid ScrollListBy(const ::jint& arg0) const;
	::jvoid SetAdapter(const ::android::widget::ListAdapter& arg0) const;
	::jvoid SetBottomEdgeEffectColor(const ::jint& arg0) const;
	::jvoid SetCacheColorHint(const ::jint& arg0) const;
	::jvoid SetChoiceMode(const ::jint& arg0) const;
	::jvoid SetDrawSelectorOnTop(const ::jboolean& arg0) const;
	::jvoid SetEdgeEffectColor(const ::jint& arg0) const;
	::jvoid SetFastScrollAlwaysVisible(const ::jboolean& arg0) const;
	::jvoid SetFastScrollEnabled(const ::jboolean& arg0) const;
	::jvoid SetFastScrollStyle(const ::jint& arg0) const;
	::jvoid SetFilterText(const ::java::lang::String& arg0) const;
	::jvoid SetFriction(const ::jfloat& arg0) const;
	::jvoid SetItemChecked(const ::jint& arg0, const ::jboolean& arg1) const;
	::jvoid SetMultiChoiceModeListener(const ::android::widget::AbsListView_MultiChoiceModeListener& arg0) const;
	::jvoid SetOnScrollListener(const ::android::widget::AbsListView_OnScrollListener& arg0) const;
	::jvoid SetRecyclerListener(const ::android::widget::AbsListView_RecyclerListener& arg0) const;
	::jvoid SetRemoteViewsAdapter(const ::android::content::Intent& arg0) const;
	::jvoid SetScrollBarStyle(const ::jint& arg0) const;
	::jvoid SetScrollIndicators(const ::android::view::View& arg0, const ::android::view::View& arg1) const;
	::jvoid SetScrollingCacheEnabled(const ::jboolean& arg0) const;
	::jvoid SetSelectionFromTop(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid SetSelector(const ::jint& arg0) const;
	::jvoid SetSelector(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid SetSmoothScrollbarEnabled(const ::jboolean& arg0) const;
	::jvoid SetStackFromBottom(const ::jboolean& arg0) const;
	::jvoid SetTextFilterEnabled(const ::jboolean& arg0) const;
	::jvoid SetTopEdgeEffectColor(const ::jint& arg0) const;
	::jvoid SetTranscriptMode(const ::jint& arg0) const;
	::jvoid SetVelocityScale(const ::jfloat& arg0) const;
	::jvoid SetVerticalScrollbarPosition(const ::jint& arg0) const;
	::jboolean ShowContextMenu() const;
	::jboolean ShowContextMenu(const ::jfloat& arg0, const ::jfloat& arg1) const;
	::jboolean ShowContextMenuForChild(const ::android::view::View& arg0) const;
	::jboolean ShowContextMenuForChild(const ::android::view::View& arg0, const ::jfloat& arg1, const ::jfloat& arg2) const;
	::jvoid SmoothScrollBy(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid SmoothScrollToPosition(const ::jint& arg0) const;
	::jvoid SmoothScrollToPosition(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid SmoothScrollToPositionFromTop(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid SmoothScrollToPositionFromTop(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::jboolean VerifyDrawable(const ::android::graphics::drawable::Drawable& arg0) const;
	static jobject __Constructor(const ::android::content::Context& arg0);
	AbsListView(const ::android::content::Context& arg0) : ::android::widget::AdapterView(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1);
	AbsListView(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1) : ::android::widget::AdapterView(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2);
	AbsListView(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2) : ::android::widget::AdapterView(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3);
	AbsListView(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3) : ::android::widget::AdapterView(__Constructor(arg0, arg1, arg2, arg3)) {}
	explicit AbsListView(jobject o) : ::android::widget::AdapterView(o) {}
	AbsListView(const AbsListView& o)  : ::android::widget::AdapterView(o) {}

};

struct ListView : ::android::widget::AbsListView
{
	static jni::Class __CLASS;

	::jvoid AddFooterView(const ::android::view::View& arg0) const;
	::jvoid AddFooterView(const ::android::view::View& arg0, const ::java::lang::Object& arg1, const ::jboolean& arg2) const;
	::jvoid AddHeaderView(const ::android::view::View& arg0) const;
	::jvoid AddHeaderView(const ::android::view::View& arg0, const ::java::lang::Object& arg1, const ::jboolean& arg2) const;
	::jboolean AreFooterDividersEnabled() const;
	::jboolean AreHeaderDividersEnabled() const;
	::jboolean CanAnimate() const;
	::jvoid DispatchDraw(const ::android::graphics::Canvas& arg0) const;
	::jboolean DispatchKeyEvent(const ::android::view::KeyEvent& arg0) const;
	::jboolean DrawChild(const ::android::graphics::Canvas& arg0, const ::android::view::View& arg1, const ::jlong& arg2) const;
	::java::lang::CharSequence GetAccessibilityClassName() const;
	::android::widget::ListAdapter GetAdapter() const;
	jni::Array< ::jlong > GetCheckItemIds() const;
	::android::graphics::drawable::Drawable GetDivider() const;
	::jint GetDividerHeight() const;
	::jint GetFooterViewsCount() const;
	::jint GetHeaderViewsCount() const;
	::jboolean GetItemsCanFocus() const;
	::jint GetMaxScrollAmount() const;
	::android::graphics::drawable::Drawable GetOverscrollFooter() const;
	::android::graphics::drawable::Drawable GetOverscrollHeader() const;
	::jboolean IsOpaque() const;
	::jvoid LayoutChildren() const;
	::jvoid OnDetachedFromWindow() const;
	::jvoid OnFinishInflate() const;
	::jvoid OnFocusChanged(const ::jboolean& arg0, const ::jint& arg1, const ::android::graphics::Rect& arg2) const;
	::jvoid OnInitializeAccessibilityNodeInfoForItem(const ::android::view::View& arg0, const ::jint& arg1, const ::android::view::accessibility::AccessibilityNodeInfo& arg2) const;
	::jboolean OnKeyDown(const ::jint& arg0, const ::android::view::KeyEvent& arg1) const;
	::jboolean OnKeyMultiple(const ::jint& arg0, const ::jint& arg1, const ::android::view::KeyEvent& arg2) const;
	::jboolean OnKeyUp(const ::jint& arg0, const ::android::view::KeyEvent& arg1) const;
	::jvoid OnMeasure(const ::jint& arg0, const ::jint& arg1) const;
	::jvoid OnSizeChanged(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jboolean RemoveFooterView(const ::android::view::View& arg0) const;
	::jboolean RemoveHeaderView(const ::android::view::View& arg0) const;
	::jboolean RequestChildRectangleOnScreen(const ::android::view::View& arg0, const ::android::graphics::Rect& arg1, const ::jboolean& arg2) const;
	::jvoid SetAdapter(const ::android::widget::ListAdapter& arg0) const;
	::jvoid SetCacheColorHint(const ::jint& arg0) const;
	::jvoid SetDivider(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid SetDividerHeight(const ::jint& arg0) const;
	::jvoid SetFooterDividersEnabled(const ::jboolean& arg0) const;
	::jvoid SetHeaderDividersEnabled(const ::jboolean& arg0) const;
	::jvoid SetItemsCanFocus(const ::jboolean& arg0) const;
	::jvoid SetOverscrollFooter(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid SetOverscrollHeader(const ::android::graphics::drawable::Drawable& arg0) const;
	::jvoid SetRemoteViewsAdapter(const ::android::content::Intent& arg0) const;
	::jvoid SetSelection(const ::jint& arg0) const;
	::jvoid SetSelectionAfterHeaderView() const;
	::jvoid SmoothScrollByOffset(const ::jint& arg0) const;
	::jvoid SmoothScrollToPosition(const ::jint& arg0) const;
	static jobject __Constructor(const ::android::content::Context& arg0);
	ListView(const ::android::content::Context& arg0) : ::android::widget::AbsListView(__Constructor(arg0)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1);
	ListView(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1) : ::android::widget::AbsListView(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2);
	ListView(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2) : ::android::widget::AbsListView(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3);
	ListView(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1, const ::jint& arg2, const ::jint& arg3) : ::android::widget::AbsListView(__Constructor(arg0, arg1, arg2, arg3)) {}
	explicit ListView(jobject o) : ::android::widget::AbsListView(o) {}
	ListView(const ListView& o)  : ::android::widget::AbsListView(o) {}

};

struct AdapterView_OnItemClickListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnItemClick(const ::android::widget::AdapterView& arg0, const ::android::view::View& arg1, const ::jint& arg2, const ::jlong& arg3) const;
	explicit AdapterView_OnItemClickListener(jobject o) : java::lang::Object(o) {}
	AdapterView_OnItemClickListener(const AdapterView_OnItemClickListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::widget::AdapterView_OnItemClickListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnItemClick(const ::android::widget::AdapterView& arg0, const ::android::view::View& arg1, const ::jint& arg2, const ::jlong& arg3) = 0;
	};
};

struct AdapterView_OnItemLongClickListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jboolean OnItemLongClick(const ::android::widget::AdapterView& arg0, const ::android::view::View& arg1, const ::jint& arg2, const ::jlong& arg3) const;
	explicit AdapterView_OnItemLongClickListener(jobject o) : java::lang::Object(o) {}
	AdapterView_OnItemLongClickListener(const AdapterView_OnItemLongClickListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::widget::AdapterView_OnItemLongClickListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean OnItemLongClick(const ::android::widget::AdapterView& arg0, const ::android::view::View& arg1, const ::jint& arg2, const ::jlong& arg3) = 0;
	};
};

struct AdapterView_OnItemSelectedListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnItemSelected(const ::android::widget::AdapterView& arg0, const ::android::view::View& arg1, const ::jint& arg2, const ::jlong& arg3) const;
	::jvoid OnNothingSelected(const ::android::widget::AdapterView& arg0) const;
	explicit AdapterView_OnItemSelectedListener(jobject o) : java::lang::Object(o) {}
	AdapterView_OnItemSelectedListener(const AdapterView_OnItemSelectedListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::widget::AdapterView_OnItemSelectedListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnItemSelected(const ::android::widget::AdapterView& arg0, const ::android::view::View& arg1, const ::jint& arg2, const ::jlong& arg3) = 0;
		virtual void OnNothingSelected(const ::android::widget::AdapterView& arg0) = 0;
	};
};

struct Filter_FilterListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnFilterComplete(const ::jint& arg0) const;
	explicit Filter_FilterListener(jobject o) : java::lang::Object(o) {}
	Filter_FilterListener(const Filter_FilterListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::widget::Filter_FilterListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnFilterComplete(const ::jint& arg0) = 0;
	};
};

struct AbsListView_LayoutParams : ::android::view::ViewGroup_LayoutParams
{
	static jni::Class __CLASS;

	static jobject __Constructor(const ::jint& arg0, const ::jint& arg1);
	AbsListView_LayoutParams(const ::jint& arg0, const ::jint& arg1) : ::android::view::ViewGroup_LayoutParams(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2);
	AbsListView_LayoutParams(const ::jint& arg0, const ::jint& arg1, const ::jint& arg2) : ::android::view::ViewGroup_LayoutParams(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1);
	AbsListView_LayoutParams(const ::android::content::Context& arg0, const ::android::util::AttributeSet& arg1) : ::android::view::ViewGroup_LayoutParams(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::android::view::ViewGroup_LayoutParams& arg0);
	AbsListView_LayoutParams(const ::android::view::ViewGroup_LayoutParams& arg0) : ::android::view::ViewGroup_LayoutParams(__Constructor(arg0)) {}
	explicit AbsListView_LayoutParams(jobject o) : ::android::view::ViewGroup_LayoutParams(o) {}
	AbsListView_LayoutParams(const AbsListView_LayoutParams& o)  : ::android::view::ViewGroup_LayoutParams(o) {}

};

struct ListAdapter : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::widget::Adapter();
	::jboolean AreAllItemsEnabled() const;
	::jboolean IsEnabled(const ::jint& arg0) const;
	explicit ListAdapter(jobject o) : java::lang::Object(o) {}
	ListAdapter(const ListAdapter& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::widget::ListAdapter();
		operator ::android::widget::Adapter();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jboolean AreAllItemsEnabled() = 0;
		virtual ::jboolean IsEnabled(const ::jint& arg0) = 0;
	};
};

struct AbsListView_MultiChoiceModeListener : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::android::view::ActionMode_Callback();
	::jvoid OnItemCheckedStateChanged(const ::android::view::ActionMode& arg0, const ::jint& arg1, const ::jlong& arg2, const ::jboolean& arg3) const;
	explicit AbsListView_MultiChoiceModeListener(jobject o) : java::lang::Object(o) {}
	AbsListView_MultiChoiceModeListener(const AbsListView_MultiChoiceModeListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::widget::AbsListView_MultiChoiceModeListener();
		operator ::android::view::ActionMode_Callback();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnItemCheckedStateChanged(const ::android::view::ActionMode& arg0, const ::jint& arg1, const ::jlong& arg2, const ::jboolean& arg3) = 0;
	};
};

struct AbsListView_OnScrollListener : java::lang::Object
{
	static jni::Class __CLASS;

	static ::jint& fSCROLL_STATE_FLING();
	static ::jint& fSCROLL_STATE_IDLE();
	static ::jint& fSCROLL_STATE_TOUCH_SCROLL();
	::jvoid OnScroll(const ::android::widget::AbsListView& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) const;
	::jvoid OnScrollStateChanged(const ::android::widget::AbsListView& arg0, const ::jint& arg1) const;
	explicit AbsListView_OnScrollListener(jobject o) : java::lang::Object(o) {}
	AbsListView_OnScrollListener(const AbsListView_OnScrollListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::widget::AbsListView_OnScrollListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnScroll(const ::android::widget::AbsListView& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3) = 0;
		virtual void OnScrollStateChanged(const ::android::widget::AbsListView& arg0, const ::jint& arg1) = 0;
	};
};

struct AbsListView_RecyclerListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnMovedToScrapHeap(const ::android::view::View& arg0) const;
	explicit AbsListView_RecyclerListener(jobject o) : java::lang::Object(o) {}
	AbsListView_RecyclerListener(const AbsListView_RecyclerListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::widget::AbsListView_RecyclerListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnMovedToScrapHeap(const ::android::view::View& arg0) = 0;
	};
};

}}

namespace android { namespace content { 
struct DialogInterface_OnClickListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnClick(const ::android::content::DialogInterface& arg0, const ::jint& arg1) const;
	explicit DialogInterface_OnClickListener(jobject o) : java::lang::Object(o) {}
	DialogInterface_OnClickListener(const DialogInterface_OnClickListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::content::DialogInterface_OnClickListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnClick(const ::android::content::DialogInterface& arg0, const ::jint& arg1) = 0;
	};
};

struct DialogInterface_OnMultiChoiceClickListener : java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid OnClick(const ::android::content::DialogInterface& arg0, const ::jint& arg1, const ::jboolean& arg2) const;
	explicit DialogInterface_OnMultiChoiceClickListener(jobject o) : java::lang::Object(o) {}
	DialogInterface_OnMultiChoiceClickListener(const DialogInterface_OnMultiChoiceClickListener& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::android::content::DialogInterface_OnMultiChoiceClickListener();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual void OnClick(const ::android::content::DialogInterface& arg0, const ::jint& arg1, const ::jboolean& arg2) = 0;
	};
};

}}

namespace java { namespace lang { 
struct Character : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Serializable();
	operator ::java::lang::Comparable();
	static ::jint& fBYTES();
	static ::jbyte& fCOMBINING_SPACING_MARK();
	static ::jbyte& fCONNECTOR_PUNCTUATION();
	static ::jbyte& fCONTROL();
	static ::jbyte& fCURRENCY_SYMBOL();
	static ::jbyte& fDASH_PUNCTUATION();
	static ::jbyte& fDECIMAL_DIGIT_NUMBER();
	static ::jbyte& fDIRECTIONALITY_ARABIC_NUMBER();
	static ::jbyte& fDIRECTIONALITY_BOUNDARY_NEUTRAL();
	static ::jbyte& fDIRECTIONALITY_COMMON_NUMBER_SEPARATOR();
	static ::jbyte& fDIRECTIONALITY_EUROPEAN_NUMBER();
	static ::jbyte& fDIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR();
	static ::jbyte& fDIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR();
	static ::jbyte& fDIRECTIONALITY_FIRST_STRONG_ISOLATE();
	static ::jbyte& fDIRECTIONALITY_LEFT_TO_RIGHT();
	static ::jbyte& fDIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING();
	static ::jbyte& fDIRECTIONALITY_LEFT_TO_RIGHT_ISOLATE();
	static ::jbyte& fDIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE();
	static ::jbyte& fDIRECTIONALITY_NONSPACING_MARK();
	static ::jbyte& fDIRECTIONALITY_OTHER_NEUTRALS();
	static ::jbyte& fDIRECTIONALITY_PARAGRAPH_SEPARATOR();
	static ::jbyte& fDIRECTIONALITY_POP_DIRECTIONAL_FORMAT();
	static ::jbyte& fDIRECTIONALITY_POP_DIRECTIONAL_ISOLATE();
	static ::jbyte& fDIRECTIONALITY_RIGHT_TO_LEFT();
	static ::jbyte& fDIRECTIONALITY_RIGHT_TO_LEFT_ARABIC();
	static ::jbyte& fDIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING();
	static ::jbyte& fDIRECTIONALITY_RIGHT_TO_LEFT_ISOLATE();
	static ::jbyte& fDIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE();
	static ::jbyte& fDIRECTIONALITY_SEGMENT_SEPARATOR();
	static ::jbyte& fDIRECTIONALITY_UNDEFINED();
	static ::jbyte& fDIRECTIONALITY_WHITESPACE();
	static ::jbyte& fENCLOSING_MARK();
	static ::jbyte& fEND_PUNCTUATION();
	static ::jbyte& fFINAL_QUOTE_PUNCTUATION();
	static ::jbyte& fFORMAT();
	static ::jbyte& fINITIAL_QUOTE_PUNCTUATION();
	static ::jbyte& fLETTER_NUMBER();
	static ::jbyte& fLINE_SEPARATOR();
	static ::jbyte& fLOWERCASE_LETTER();
	static ::jbyte& fMATH_SYMBOL();
	static ::jint& fMAX_CODE_POINT();
	static ::jchar& fMAX_HIGH_SURROGATE();
	static ::jchar& fMAX_LOW_SURROGATE();
	static ::jint& fMAX_RADIX();
	static ::jchar& fMAX_SURROGATE();
	static ::jchar& fMAX_VALUE();
	static ::jint& fMIN_CODE_POINT();
	static ::jchar& fMIN_HIGH_SURROGATE();
	static ::jchar& fMIN_LOW_SURROGATE();
	static ::jint& fMIN_RADIX();
	static ::jint& fMIN_SUPPLEMENTARY_CODE_POINT();
	static ::jchar& fMIN_SURROGATE();
	static ::jchar& fMIN_VALUE();
	static ::jbyte& fMODIFIER_LETTER();
	static ::jbyte& fMODIFIER_SYMBOL();
	static ::jbyte& fNON_SPACING_MARK();
	static ::jbyte& fOTHER_LETTER();
	static ::jbyte& fOTHER_NUMBER();
	static ::jbyte& fOTHER_PUNCTUATION();
	static ::jbyte& fOTHER_SYMBOL();
	static ::jbyte& fPARAGRAPH_SEPARATOR();
	static ::jbyte& fPRIVATE_USE();
	static ::jint& fSIZE();
	static ::jbyte& fSPACE_SEPARATOR();
	static ::jbyte& fSTART_PUNCTUATION();
	static ::jbyte& fSURROGATE();
	static ::jbyte& fTITLECASE_LETTER();
	static ::java::lang::Class& fTYPE();
	static ::jbyte& fUNASSIGNED();
	static ::jbyte& fUPPERCASE_LETTER();
	static ::jint CharCount(const ::jint& arg0);
	::jchar CharValue() const;
	static ::jint CodePointAt(const ::java::lang::CharSequence& arg0, const ::jint& arg1);
	static ::jint CodePointAt(const jni::Array< ::jchar >& arg0, const ::jint& arg1);
	static ::jint CodePointAt(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2);
	static ::jint CodePointBefore(const ::java::lang::CharSequence& arg0, const ::jint& arg1);
	static ::jint CodePointBefore(const jni::Array< ::jchar >& arg0, const ::jint& arg1);
	static ::jint CodePointBefore(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2);
	static ::jint CodePointCount(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2);
	static ::jint CodePointCount(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2);
	static ::jint CodePointOf(const ::java::lang::String& arg0);
	static ::jint Compare(const ::jchar& arg0, const ::jchar& arg1);
	::jint CompareTo(const ::java::lang::Character& arg0) const;
	static ::jint Digit(const ::jchar& arg0, const ::jint& arg1);
	static ::jint Digit(const ::jint& arg0, const ::jint& arg1);
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	static ::jchar ForDigit(const ::jint& arg0, const ::jint& arg1);
	static ::jbyte GetDirectionality(const ::jchar& arg0);
	static ::jbyte GetDirectionality(const ::jint& arg0);
	static ::java::lang::String GetName(const ::jint& arg0);
	static ::jint GetNumericValue(const ::jchar& arg0);
	static ::jint GetNumericValue(const ::jint& arg0);
	static ::jint GetType(const ::jchar& arg0);
	static ::jint GetType(const ::jint& arg0);
	::jint HashCode() const;
	static ::jint HashCode(const ::jchar& arg0);
	static ::jchar HighSurrogate(const ::jint& arg0);
	static ::jboolean IsAlphabetic(const ::jint& arg0);
	static ::jboolean IsBmpCodePoint(const ::jint& arg0);
	static ::jboolean IsDefined(const ::jchar& arg0);
	static ::jboolean IsDefined(const ::jint& arg0);
	static ::jboolean IsDigit(const ::jchar& arg0);
	static ::jboolean IsDigit(const ::jint& arg0);
	static ::jboolean IsHighSurrogate(const ::jchar& arg0);
	static ::jboolean IsISOControl(const ::jchar& arg0);
	static ::jboolean IsISOControl(const ::jint& arg0);
	static ::jboolean IsIdentifierIgnorable(const ::jchar& arg0);
	static ::jboolean IsIdentifierIgnorable(const ::jint& arg0);
	static ::jboolean IsIdeographic(const ::jint& arg0);
	static ::jboolean IsJavaIdentifierPart(const ::jchar& arg0);
	static ::jboolean IsJavaIdentifierPart(const ::jint& arg0);
	static ::jboolean IsJavaIdentifierStart(const ::jchar& arg0);
	static ::jboolean IsJavaIdentifierStart(const ::jint& arg0);
	static ::jboolean IsJavaLetter(const ::jchar& arg0);
	static ::jboolean IsJavaLetterOrDigit(const ::jchar& arg0);
	static ::jboolean IsLetter(const ::jchar& arg0);
	static ::jboolean IsLetter(const ::jint& arg0);
	static ::jboolean IsLetterOrDigit(const ::jchar& arg0);
	static ::jboolean IsLetterOrDigit(const ::jint& arg0);
	static ::jboolean IsLowSurrogate(const ::jchar& arg0);
	static ::jboolean IsLowerCase(const ::jchar& arg0);
	static ::jboolean IsLowerCase(const ::jint& arg0);
	static ::jboolean IsMirrored(const ::jchar& arg0);
	static ::jboolean IsMirrored(const ::jint& arg0);
	static ::jboolean IsSpace(const ::jchar& arg0);
	static ::jboolean IsSpaceChar(const ::jchar& arg0);
	static ::jboolean IsSpaceChar(const ::jint& arg0);
	static ::jboolean IsSupplementaryCodePoint(const ::jint& arg0);
	static ::jboolean IsSurrogate(const ::jchar& arg0);
	static ::jboolean IsSurrogatePair(const ::jchar& arg0, const ::jchar& arg1);
	static ::jboolean IsTitleCase(const ::jchar& arg0);
	static ::jboolean IsTitleCase(const ::jint& arg0);
	static ::jboolean IsUnicodeIdentifierPart(const ::jchar& arg0);
	static ::jboolean IsUnicodeIdentifierPart(const ::jint& arg0);
	static ::jboolean IsUnicodeIdentifierStart(const ::jchar& arg0);
	static ::jboolean IsUnicodeIdentifierStart(const ::jint& arg0);
	static ::jboolean IsUpperCase(const ::jchar& arg0);
	static ::jboolean IsUpperCase(const ::jint& arg0);
	static ::jboolean IsValidCodePoint(const ::jint& arg0);
	static ::jboolean IsWhitespace(const ::jchar& arg0);
	static ::jboolean IsWhitespace(const ::jint& arg0);
	static ::jchar LowSurrogate(const ::jint& arg0);
	static ::jint OffsetByCodePoints(const ::java::lang::CharSequence& arg0, const ::jint& arg1, const ::jint& arg2);
	static ::jint OffsetByCodePoints(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2, const ::jint& arg3, const ::jint& arg4);
	static ::jchar ReverseBytes(const ::jchar& arg0);
	static jni::Array< ::jchar > ToChars(const ::jint& arg0);
	static ::jint ToChars(const ::jint& arg0, const jni::Array< ::jchar >& arg1, const ::jint& arg2);
	static ::jint ToCodePoint(const ::jchar& arg0, const ::jchar& arg1);
	static ::jchar ToLowerCase(const ::jchar& arg0);
	static ::jint ToLowerCase(const ::jint& arg0);
	::java::lang::String ToString() const;
	static ::java::lang::String ToString(const ::jchar& arg0);
	static ::java::lang::String ToString(const ::jint& arg0);
	static ::jchar ToTitleCase(const ::jchar& arg0);
	static ::jint ToTitleCase(const ::jint& arg0);
	static ::jchar ToUpperCase(const ::jchar& arg0);
	static ::jint ToUpperCase(const ::jint& arg0);
	static ::java::lang::Character ValueOf(const ::jchar& arg0);
	static jobject __Constructor(const ::jchar& arg0);
	Character(const ::jchar& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit Character(jobject o) : ::java::lang::Object(o) {}
	Character(const Character& o)  : ::java::lang::Object(o) {}

};

struct System : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::java::io::PrintStream& fErr();
	static ::java::io::InputStream& fIn();
	static ::java::io::PrintStream& fOut();
	static ::jvoid Arraycopy(const ::java::lang::Object& arg0, const ::jint& arg1, const ::java::lang::Object& arg2, const ::jint& arg3, const ::jint& arg4);
	static ::java::lang::String ClearProperty(const ::java::lang::String& arg0);
	static ::java::io::Console Console();
	static ::jlong CurrentTimeMillis();
	static ::jvoid Exit(const ::jint& arg0);
	static ::jvoid Gc();
	static ::java::lang::System_Logger GetLogger(const ::java::lang::String& arg0);
	static ::java::lang::System_Logger GetLogger(const ::java::lang::String& arg0, const ::java::util::ResourceBundle& arg1);
	static ::java::util::Properties GetProperties();
	static ::java::lang::String GetProperty(const ::java::lang::String& arg0);
	static ::java::lang::String GetProperty(const ::java::lang::String& arg0, const ::java::lang::String& arg1);
	static ::java::lang::SecurityManager GetSecurityManager();
	static ::java::util::Map Getenv();
	static ::java::lang::String Getenv(const ::java::lang::String& arg0);
	static ::jint IdentityHashCode(const ::java::lang::Object& arg0);
	static ::java::nio::channels::Channel InheritedChannel();
	static ::java::lang::String LineSeparator();
	static ::jvoid Load(const ::java::lang::String& arg0);
	static ::jvoid LoadLibrary(const ::java::lang::String& arg0);
	static ::java::lang::String MapLibraryName(const ::java::lang::String& arg0);
	static ::jlong NanoTime();
	static ::jvoid RunFinalization();
	static ::jvoid SetErr(const ::java::io::PrintStream& arg0);
	static ::jvoid SetIn(const ::java::io::InputStream& arg0);
	static ::jvoid SetOut(const ::java::io::PrintStream& arg0);
	static ::jvoid SetProperties(const ::java::util::Properties& arg0);
	static ::java::lang::String SetProperty(const ::java::lang::String& arg0, const ::java::lang::String& arg1);
	static ::jvoid SetSecurityManager(const ::java::lang::SecurityManager& arg0);
	explicit System(jobject o) : ::java::lang::Object(o) {}
	System(const System& o)  : ::java::lang::Object(o) {}

};

}}

namespace java { namespace io { 
struct Console : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Flushable();
	::jvoid Flush() const;
	::java::io::Console Format(const ::java::lang::String& arg0, const jni::Array< ::java::lang::Object >& arg1) const;
	::java::io::Console Printf(const ::java::lang::String& arg0, const jni::Array< ::java::lang::Object >& arg1) const;
	::java::lang::String ReadLine() const;
	::java::lang::String ReadLine(const ::java::lang::String& arg0, const jni::Array< ::java::lang::Object >& arg1) const;
	jni::Array< ::jchar > ReadPassword() const;
	jni::Array< ::jchar > ReadPassword(const ::java::lang::String& arg0, const jni::Array< ::java::lang::Object >& arg1) const;
	::java::io::Reader Reader() const;
	::java::io::PrintWriter Writer() const;
	explicit Console(jobject o) : ::java::lang::Object(o) {}
	Console(const Console& o)  : ::java::lang::Object(o) {}

};

}}

namespace java { namespace lang { 
struct System_Logger : java::lang::Object
{
	static jni::Class __CLASS;

	::java::lang::String GetName() const;
	::jboolean IsLoggable(const ::java::lang::System_Logger_Level& arg0) const;
	::jvoid Log(const ::java::lang::System_Logger_Level& arg0, const ::java::lang::Object& arg1) const;
	::jvoid Log(const ::java::lang::System_Logger_Level& arg0, const ::java::lang::String& arg1) const;
	::jvoid Log(const ::java::lang::System_Logger_Level& arg0, const ::java::lang::String& arg1, const ::java::lang::Throwable& arg2) const;
	::jvoid Log(const ::java::lang::System_Logger_Level& arg0, const ::java::lang::String& arg1, const jni::Array< ::java::lang::Object >& arg2) const;
	::jvoid Log(const ::java::lang::System_Logger_Level& arg0, const ::java::util::ResourceBundle& arg1, const ::java::lang::String& arg2, const ::java::lang::Throwable& arg3) const;
	::jvoid Log(const ::java::lang::System_Logger_Level& arg0, const ::java::util::ResourceBundle& arg1, const ::java::lang::String& arg2, const jni::Array< ::java::lang::Object >& arg3) const;
	::jvoid Log(const ::java::lang::System_Logger_Level& arg0, const ::java::util::function::Supplier& arg1) const;
	::jvoid Log(const ::java::lang::System_Logger_Level& arg0, const ::java::util::function::Supplier& arg1, const ::java::lang::Throwable& arg2) const;
	explicit System_Logger(jobject o) : java::lang::Object(o) {}
	System_Logger(const System_Logger& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::lang::System_Logger();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::lang::String GetName() = 0;
		virtual ::jboolean IsLoggable(const ::java::lang::System_Logger_Level& arg0) = 0;
		virtual void Log(const ::java::lang::System_Logger_Level& arg0, const ::java::lang::Object& arg1) = 0;
		virtual void Log(const ::java::lang::System_Logger_Level& arg0, const ::java::lang::String& arg1) = 0;
		virtual void Log(const ::java::lang::System_Logger_Level& arg0, const ::java::lang::String& arg1, const ::java::lang::Throwable& arg2) = 0;
		virtual void Log(const ::java::lang::System_Logger_Level& arg0, const ::java::lang::String& arg1, const jni::Array< ::java::lang::Object >& arg2) = 0;
		virtual void Log(const ::java::lang::System_Logger_Level& arg0, const ::java::util::ResourceBundle& arg1, const ::java::lang::String& arg2, const ::java::lang::Throwable& arg3) = 0;
		virtual void Log(const ::java::lang::System_Logger_Level& arg0, const ::java::util::ResourceBundle& arg1, const ::java::lang::String& arg2, const jni::Array< ::java::lang::Object >& arg3) = 0;
		virtual void Log(const ::java::lang::System_Logger_Level& arg0, const ::java::util::function::Supplier& arg1) = 0;
		virtual void Log(const ::java::lang::System_Logger_Level& arg0, const ::java::util::function::Supplier& arg1, const ::java::lang::Throwable& arg2) = 0;
	};
};

struct System_Logger_Level : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::java::lang::System_Logger_Level& fALL();
	static ::java::lang::System_Logger_Level& fDEBUG();
	static ::java::lang::System_Logger_Level& fERROR();
	static ::java::lang::System_Logger_Level& fINFO();
	static ::java::lang::System_Logger_Level& fOFF();
	static ::java::lang::System_Logger_Level& fTRACE();
	static ::java::lang::System_Logger_Level& fWARNING();
	::java::lang::String GetName() const;
	::jint GetSeverity() const;
	static ::java::lang::System_Logger_Level ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::java::lang::System_Logger_Level > Values();
	explicit System_Logger_Level(jobject o) : ::java::lang::Enum(o) {}
	System_Logger_Level(const System_Logger_Level& o)  : ::java::lang::Enum(o) {}

};

}}

namespace java { namespace util { 
struct ResourceBundle : ::java::lang::Object
{
	static jni::Class __CLASS;

	::java::util::ResourceBundle fParent() const;
	void fParent(const ::java::util::ResourceBundle& arg0) const;
	static ::jvoid ClearCache();
	static ::jvoid ClearCache(const ::java::lang::ClassLoader& arg0);
	::jboolean ContainsKey(const ::java::lang::String& arg0) const;
	::java::lang::String GetBaseBundleName() const;
	static ::java::util::ResourceBundle GetBundle(const ::java::lang::String& arg0);
	static ::java::util::ResourceBundle GetBundle(const ::java::lang::String& arg0, const ::java::lang::Module& arg1);
	static ::java::util::ResourceBundle GetBundle(const ::java::lang::String& arg0, const ::java::util::Locale& arg1);
	static ::java::util::ResourceBundle GetBundle(const ::java::lang::String& arg0, const ::java::util::Locale& arg1, const ::java::lang::ClassLoader& arg2);
	static ::java::util::ResourceBundle GetBundle(const ::java::lang::String& arg0, const ::java::util::Locale& arg1, const ::java::lang::ClassLoader& arg2, const ::java::util::ResourceBundle_Control& arg3);
	static ::java::util::ResourceBundle GetBundle(const ::java::lang::String& arg0, const ::java::util::Locale& arg1, const ::java::lang::Module& arg2);
	static ::java::util::ResourceBundle GetBundle(const ::java::lang::String& arg0, const ::java::util::Locale& arg1, const ::java::util::ResourceBundle_Control& arg2);
	static ::java::util::ResourceBundle GetBundle(const ::java::lang::String& arg0, const ::java::util::ResourceBundle_Control& arg1);
	::java::util::Enumeration GetKeys() const;
	::java::util::Locale GetLocale() const;
	::java::lang::Object GetObject(const ::java::lang::String& arg0) const;
	::java::lang::String GetString(const ::java::lang::String& arg0) const;
	jni::Array< ::java::lang::String > GetStringArray(const ::java::lang::String& arg0) const;
	::java::lang::Object HandleGetObject(const ::java::lang::String& arg0) const;
	::java::util::Set HandleKeySet() const;
	::java::util::Set KeySet() const;
	::jvoid SetParent(const ::java::util::ResourceBundle& arg0) const;
	static jobject __Constructor();
	ResourceBundle() : ::java::lang::Object(__Constructor()) {}
	explicit ResourceBundle(jobject o) : ::java::lang::Object(o) {}
	ResourceBundle(const ResourceBundle& o)  : ::java::lang::Object(o) {}

};

struct ResourceBundle_Control : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::java::util::List& fFORMAT_CLASS();
	static ::java::util::List& fFORMAT_DEFAULT();
	static ::java::util::List& fFORMAT_PROPERTIES();
	static ::jlong& fTTL_DONT_CACHE();
	static ::jlong& fTTL_NO_EXPIRATION_CONTROL();
	::java::util::List GetCandidateLocales(const ::java::lang::String& arg0, const ::java::util::Locale& arg1) const;
	static ::java::util::ResourceBundle_Control GetControl(const ::java::util::List& arg0);
	::java::util::Locale GetFallbackLocale(const ::java::lang::String& arg0, const ::java::util::Locale& arg1) const;
	::java::util::List GetFormats(const ::java::lang::String& arg0) const;
	static ::java::util::ResourceBundle_Control GetNoFallbackControl(const ::java::util::List& arg0);
	::jlong GetTimeToLive(const ::java::lang::String& arg0, const ::java::util::Locale& arg1) const;
	::jboolean NeedsReload(const ::java::lang::String& arg0, const ::java::util::Locale& arg1, const ::java::lang::String& arg2, const ::java::lang::ClassLoader& arg3, const ::java::util::ResourceBundle& arg4, const ::jlong& arg5) const;
	::java::util::ResourceBundle NewBundle(const ::java::lang::String& arg0, const ::java::util::Locale& arg1, const ::java::lang::String& arg2, const ::java::lang::ClassLoader& arg3, const ::jboolean& arg4) const;
	::java::lang::String ToBundleName(const ::java::lang::String& arg0, const ::java::util::Locale& arg1) const;
	::java::lang::String ToResourceName(const ::java::lang::String& arg0, const ::java::lang::String& arg1) const;
	static jobject __Constructor();
	ResourceBundle_Control() : ::java::lang::Object(__Constructor()) {}
	explicit ResourceBundle_Control(jobject o) : ::java::lang::Object(o) {}
	ResourceBundle_Control(const ResourceBundle_Control& o)  : ::java::lang::Object(o) {}

};

}}

namespace java { namespace lang { 
struct SecurityManager : ::java::lang::Object
{
	static jni::Class __CLASS;

	::jvoid CheckAccept(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::jvoid CheckAccess(const ::java::lang::Thread& arg0) const;
	::jvoid CheckAccess(const ::java::lang::ThreadGroup& arg0) const;
	::jvoid CheckConnect(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::jvoid CheckConnect(const ::java::lang::String& arg0, const ::jint& arg1, const ::java::lang::Object& arg2) const;
	::jvoid CheckCreateClassLoader() const;
	::jvoid CheckDelete(const ::java::lang::String& arg0) const;
	::jvoid CheckExec(const ::java::lang::String& arg0) const;
	::jvoid CheckExit(const ::jint& arg0) const;
	::jvoid CheckLink(const ::java::lang::String& arg0) const;
	::jvoid CheckListen(const ::jint& arg0) const;
	::jvoid CheckMulticast(const ::java::net::InetAddress& arg0) const;
	::jvoid CheckMulticast(const ::java::net::InetAddress& arg0, const ::jbyte& arg1) const;
	::jvoid CheckPackageAccess(const ::java::lang::String& arg0) const;
	::jvoid CheckPackageDefinition(const ::java::lang::String& arg0) const;
	::jvoid CheckPermission(const ::java::security::Permission& arg0) const;
	::jvoid CheckPermission(const ::java::security::Permission& arg0, const ::java::lang::Object& arg1) const;
	::jvoid CheckPrintJobAccess() const;
	::jvoid CheckPropertiesAccess() const;
	::jvoid CheckPropertyAccess(const ::java::lang::String& arg0) const;
	::jvoid CheckRead(const ::java::io::FileDescriptor& arg0) const;
	::jvoid CheckRead(const ::java::lang::String& arg0) const;
	::jvoid CheckRead(const ::java::lang::String& arg0, const ::java::lang::Object& arg1) const;
	::jvoid CheckSecurityAccess(const ::java::lang::String& arg0) const;
	::jvoid CheckSetFactory() const;
	::jvoid CheckWrite(const ::java::io::FileDescriptor& arg0) const;
	::jvoid CheckWrite(const ::java::lang::String& arg0) const;
	jni::Array< ::java::lang::Class > GetClassContext() const;
	::java::lang::Object GetSecurityContext() const;
	::java::lang::ThreadGroup GetThreadGroup() const;
	static jobject __Constructor();
	SecurityManager() : ::java::lang::Object(__Constructor()) {}
	explicit SecurityManager(jobject o) : ::java::lang::Object(o) {}
	SecurityManager(const SecurityManager& o)  : ::java::lang::Object(o) {}

};

struct RuntimeException : ::java::lang::Exception
{
	static jni::Class __CLASS;

	static jobject __Constructor();
	RuntimeException() : ::java::lang::Exception(__Constructor()) {}
	static jobject __Constructor(const ::java::lang::String& arg0);
	RuntimeException(const ::java::lang::String& arg0) : ::java::lang::Exception(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::java::lang::Throwable& arg1);
	RuntimeException(const ::java::lang::String& arg0, const ::java::lang::Throwable& arg1) : ::java::lang::Exception(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::java::lang::Throwable& arg1, const ::jboolean& arg2, const ::jboolean& arg3);
	RuntimeException(const ::java::lang::String& arg0, const ::java::lang::Throwable& arg1, const ::jboolean& arg2, const ::jboolean& arg3) : ::java::lang::Exception(__Constructor(arg0, arg1, arg2, arg3)) {}
	static jobject __Constructor(const ::java::lang::Throwable& arg0);
	RuntimeException(const ::java::lang::Throwable& arg0) : ::java::lang::Exception(__Constructor(arg0)) {}
	explicit RuntimeException(jobject o) : ::java::lang::Exception(o) {}
	RuntimeException(const RuntimeException& o)  : ::java::lang::Exception(o) {}

};

struct SecurityException : ::java::lang::RuntimeException
{
	static jni::Class __CLASS;

	static jobject __Constructor();
	SecurityException() : ::java::lang::RuntimeException(__Constructor()) {}
	static jobject __Constructor(const ::java::lang::String& arg0);
	SecurityException(const ::java::lang::String& arg0) : ::java::lang::RuntimeException(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::java::lang::Throwable& arg1);
	SecurityException(const ::java::lang::String& arg0, const ::java::lang::Throwable& arg1) : ::java::lang::RuntimeException(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::lang::Throwable& arg0);
	SecurityException(const ::java::lang::Throwable& arg0) : ::java::lang::RuntimeException(__Constructor(arg0)) {}
	explicit SecurityException(jobject o) : ::java::lang::RuntimeException(o) {}
	SecurityException(const SecurityException& o)  : ::java::lang::RuntimeException(o) {}

};

struct Error : ::java::lang::Throwable
{
	static jni::Class __CLASS;

	static jobject __Constructor();
	Error() : ::java::lang::Throwable(__Constructor()) {}
	static jobject __Constructor(const ::java::lang::String& arg0);
	Error(const ::java::lang::String& arg0) : ::java::lang::Throwable(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::java::lang::Throwable& arg1);
	Error(const ::java::lang::String& arg0, const ::java::lang::Throwable& arg1) : ::java::lang::Throwable(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::java::lang::Throwable& arg1, const ::jboolean& arg2, const ::jboolean& arg3);
	Error(const ::java::lang::String& arg0, const ::java::lang::Throwable& arg1, const ::jboolean& arg2, const ::jboolean& arg3) : ::java::lang::Throwable(__Constructor(arg0, arg1, arg2, arg3)) {}
	static jobject __Constructor(const ::java::lang::Throwable& arg0);
	Error(const ::java::lang::Throwable& arg0) : ::java::lang::Throwable(__Constructor(arg0)) {}
	explicit Error(jobject o) : ::java::lang::Throwable(o) {}
	Error(const Error& o)  : ::java::lang::Throwable(o) {}

};

struct LinkageError : ::java::lang::Error
{
	static jni::Class __CLASS;

	static jobject __Constructor();
	LinkageError() : ::java::lang::Error(__Constructor()) {}
	static jobject __Constructor(const ::java::lang::String& arg0);
	LinkageError(const ::java::lang::String& arg0) : ::java::lang::Error(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::java::lang::Throwable& arg1);
	LinkageError(const ::java::lang::String& arg0, const ::java::lang::Throwable& arg1) : ::java::lang::Error(__Constructor(arg0, arg1)) {}
	explicit LinkageError(jobject o) : ::java::lang::Error(o) {}
	LinkageError(const LinkageError& o)  : ::java::lang::Error(o) {}

};

struct IncompatibleClassChangeError : ::java::lang::LinkageError
{
	static jni::Class __CLASS;

	static jobject __Constructor();
	IncompatibleClassChangeError() : ::java::lang::LinkageError(__Constructor()) {}
	static jobject __Constructor(const ::java::lang::String& arg0);
	IncompatibleClassChangeError(const ::java::lang::String& arg0) : ::java::lang::LinkageError(__Constructor(arg0)) {}
	explicit IncompatibleClassChangeError(jobject o) : ::java::lang::LinkageError(o) {}
	IncompatibleClassChangeError(const IncompatibleClassChangeError& o)  : ::java::lang::LinkageError(o) {}

};

struct NoSuchMethodError : ::java::lang::IncompatibleClassChangeError
{
	static jni::Class __CLASS;

	static jobject __Constructor();
	NoSuchMethodError() : ::java::lang::IncompatibleClassChangeError(__Constructor()) {}
	static jobject __Constructor(const ::java::lang::String& arg0);
	NoSuchMethodError(const ::java::lang::String& arg0) : ::java::lang::IncompatibleClassChangeError(__Constructor(arg0)) {}
	explicit NoSuchMethodError(jobject o) : ::java::lang::IncompatibleClassChangeError(o) {}
	NoSuchMethodError(const NoSuchMethodError& o)  : ::java::lang::IncompatibleClassChangeError(o) {}

};

struct ClassCastException : ::java::lang::RuntimeException
{
	static jni::Class __CLASS;

	static jobject __Constructor();
	ClassCastException() : ::java::lang::RuntimeException(__Constructor()) {}
	static jobject __Constructor(const ::java::lang::String& arg0);
	ClassCastException(const ::java::lang::String& arg0) : ::java::lang::RuntimeException(__Constructor(arg0)) {}
	explicit ClassCastException(jobject o) : ::java::lang::RuntimeException(o) {}
	ClassCastException(const ClassCastException& o)  : ::java::lang::RuntimeException(o) {}

};

struct UnsatisfiedLinkError : ::java::lang::LinkageError
{
	static jni::Class __CLASS;

	static jobject __Constructor();
	UnsatisfiedLinkError() : ::java::lang::LinkageError(__Constructor()) {}
	static jobject __Constructor(const ::java::lang::String& arg0);
	UnsatisfiedLinkError(const ::java::lang::String& arg0) : ::java::lang::LinkageError(__Constructor(arg0)) {}
	explicit UnsatisfiedLinkError(jobject o) : ::java::lang::LinkageError(o) {}
	UnsatisfiedLinkError(const UnsatisfiedLinkError& o)  : ::java::lang::LinkageError(o) {}

};

}}

namespace java { namespace io { 
struct FileNotFoundException : ::java::io::IOException
{
	static jni::Class __CLASS;

	static jobject __Constructor();
	FileNotFoundException() : ::java::io::IOException(__Constructor()) {}
	static jobject __Constructor(const ::java::lang::String& arg0);
	FileNotFoundException(const ::java::lang::String& arg0) : ::java::io::IOException(__Constructor(arg0)) {}
	explicit FileNotFoundException(jobject o) : ::java::io::IOException(o) {}
	FileNotFoundException(const FileNotFoundException& o)  : ::java::io::IOException(o) {}

};

}}

namespace java { namespace net { 
struct HttpURLConnection : ::java::net::URLConnection
{
	static jni::Class __CLASS;

	static ::jint& fHTTP_ACCEPTED();
	static ::jint& fHTTP_BAD_GATEWAY();
	static ::jint& fHTTP_BAD_METHOD();
	static ::jint& fHTTP_BAD_REQUEST();
	static ::jint& fHTTP_CLIENT_TIMEOUT();
	static ::jint& fHTTP_CONFLICT();
	static ::jint& fHTTP_CREATED();
	static ::jint& fHTTP_ENTITY_TOO_LARGE();
	static ::jint& fHTTP_FORBIDDEN();
	static ::jint& fHTTP_GATEWAY_TIMEOUT();
	static ::jint& fHTTP_GONE();
	static ::jint& fHTTP_INTERNAL_ERROR();
	static ::jint& fHTTP_LENGTH_REQUIRED();
	static ::jint& fHTTP_MOVED_PERM();
	static ::jint& fHTTP_MOVED_TEMP();
	static ::jint& fHTTP_MULT_CHOICE();
	static ::jint& fHTTP_NOT_ACCEPTABLE();
	static ::jint& fHTTP_NOT_AUTHORITATIVE();
	static ::jint& fHTTP_NOT_FOUND();
	static ::jint& fHTTP_NOT_IMPLEMENTED();
	static ::jint& fHTTP_NOT_MODIFIED();
	static ::jint& fHTTP_NO_CONTENT();
	static ::jint& fHTTP_OK();
	static ::jint& fHTTP_PARTIAL();
	static ::jint& fHTTP_PAYMENT_REQUIRED();
	static ::jint& fHTTP_PRECON_FAILED();
	static ::jint& fHTTP_PROXY_AUTH();
	static ::jint& fHTTP_REQ_TOO_LONG();
	static ::jint& fHTTP_RESET();
	static ::jint& fHTTP_SEE_OTHER();
	static ::jint& fHTTP_SERVER_ERROR();
	static ::jint& fHTTP_UNAUTHORIZED();
	static ::jint& fHTTP_UNAVAILABLE();
	static ::jint& fHTTP_UNSUPPORTED_TYPE();
	static ::jint& fHTTP_USE_PROXY();
	static ::jint& fHTTP_VERSION();
	::jint fChunkLength() const;
	void fChunkLength(const ::jint& arg0) const;
	::jint fFixedContentLength() const;
	void fFixedContentLength(const ::jint& arg0) const;
	::jlong fFixedContentLengthLong() const;
	void fFixedContentLengthLong(const ::jlong& arg0) const;
	::jboolean fInstanceFollowRedirects() const;
	void fInstanceFollowRedirects(const ::jboolean& arg0) const;
	::java::lang::String fMethod() const;
	void fMethod(const ::java::lang::String& arg0) const;
	::jint fResponseCode() const;
	void fResponseCode(const ::jint& arg0) const;
	::java::lang::String fResponseMessage() const;
	void fResponseMessage(const ::java::lang::String& arg0) const;
	::jvoid Disconnect() const;
	::java::io::InputStream GetErrorStream() const;
	static ::jboolean GetFollowRedirects();
	::java::lang::String GetHeaderField(const ::jint& arg0) const;
	::jlong GetHeaderFieldDate(const ::java::lang::String& arg0, const ::jlong& arg1) const;
	::java::lang::String GetHeaderFieldKey(const ::jint& arg0) const;
	::jboolean GetInstanceFollowRedirects() const;
	::java::security::Permission GetPermission() const;
	::java::lang::String GetRequestMethod() const;
	::jint GetResponseCode() const;
	::java::lang::String GetResponseMessage() const;
	::jvoid SetAuthenticator(const ::java::net::Authenticator& arg0) const;
	::jvoid SetChunkedStreamingMode(const ::jint& arg0) const;
	::jvoid SetFixedLengthStreamingMode(const ::jint& arg0) const;
	::jvoid SetFixedLengthStreamingMode(const ::jlong& arg0) const;
	static ::jvoid SetFollowRedirects(const ::jboolean& arg0);
	::jvoid SetInstanceFollowRedirects(const ::jboolean& arg0) const;
	::jvoid SetRequestMethod(const ::java::lang::String& arg0) const;
	::jboolean UsingProxy() const;
	static jobject __Constructor(const ::java::net::URL& arg0);
	HttpURLConnection(const ::java::net::URL& arg0) : ::java::net::URLConnection(__Constructor(arg0)) {}
	explicit HttpURLConnection(jobject o) : ::java::net::URLConnection(o) {}
	HttpURLConnection(const HttpURLConnection& o)  : ::java::net::URLConnection(o) {}

};

struct Authenticator : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::java::net::Authenticator GetDefault();
	::java::net::PasswordAuthentication GetPasswordAuthentication() const;
	::java::lang::String GetRequestingHost() const;
	::jint GetRequestingPort() const;
	::java::lang::String GetRequestingPrompt() const;
	::java::lang::String GetRequestingProtocol() const;
	::java::lang::String GetRequestingScheme() const;
	::java::net::InetAddress GetRequestingSite() const;
	::java::net::URL GetRequestingURL() const;
	::java::net::Authenticator_RequestorType GetRequestorType() const;
	static ::java::net::PasswordAuthentication RequestPasswordAuthentication(const ::java::lang::String& arg0, const ::java::net::InetAddress& arg1, const ::jint& arg2, const ::java::lang::String& arg3, const ::java::lang::String& arg4, const ::java::lang::String& arg5);
	static ::java::net::PasswordAuthentication RequestPasswordAuthentication(const ::java::lang::String& arg0, const ::java::net::InetAddress& arg1, const ::jint& arg2, const ::java::lang::String& arg3, const ::java::lang::String& arg4, const ::java::lang::String& arg5, const ::java::net::URL& arg6, const ::java::net::Authenticator_RequestorType& arg7);
	static ::java::net::PasswordAuthentication RequestPasswordAuthentication(const ::java::net::Authenticator& arg0, const ::java::lang::String& arg1, const ::java::net::InetAddress& arg2, const ::jint& arg3, const ::java::lang::String& arg4, const ::java::lang::String& arg5, const ::java::lang::String& arg6, const ::java::net::URL& arg7, const ::java::net::Authenticator_RequestorType& arg8);
	static ::java::net::PasswordAuthentication RequestPasswordAuthentication(const ::java::net::InetAddress& arg0, const ::jint& arg1, const ::java::lang::String& arg2, const ::java::lang::String& arg3, const ::java::lang::String& arg4);
	::java::net::PasswordAuthentication RequestPasswordAuthenticationInstance(const ::java::lang::String& arg0, const ::java::net::InetAddress& arg1, const ::jint& arg2, const ::java::lang::String& arg3, const ::java::lang::String& arg4, const ::java::lang::String& arg5, const ::java::net::URL& arg6, const ::java::net::Authenticator_RequestorType& arg7) const;
	static ::jvoid SetDefault(const ::java::net::Authenticator& arg0);
	static jobject __Constructor();
	Authenticator() : ::java::lang::Object(__Constructor()) {}
	explicit Authenticator(jobject o) : ::java::lang::Object(o) {}
	Authenticator(const Authenticator& o)  : ::java::lang::Object(o) {}

};

struct PasswordAuthentication : ::java::lang::Object
{
	static jni::Class __CLASS;

	jni::Array< ::jchar > GetPassword() const;
	::java::lang::String GetUserName() const;
	static jobject __Constructor(const ::java::lang::String& arg0, const jni::Array< ::jchar >& arg1);
	PasswordAuthentication(const ::java::lang::String& arg0, const jni::Array< ::jchar >& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit PasswordAuthentication(jobject o) : ::java::lang::Object(o) {}
	PasswordAuthentication(const PasswordAuthentication& o)  : ::java::lang::Object(o) {}

};

struct Authenticator_RequestorType : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::java::net::Authenticator_RequestorType& fPROXY();
	static ::java::net::Authenticator_RequestorType& fSERVER();
	static ::java::net::Authenticator_RequestorType ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::java::net::Authenticator_RequestorType > Values();
	explicit Authenticator_RequestorType(jobject o) : ::java::lang::Enum(o) {}
	Authenticator_RequestorType(const Authenticator_RequestorType& o)  : ::java::lang::Enum(o) {}

};

}}

namespace java { namespace nio { namespace channels { 
struct Channels : ::java::lang::Object
{
	static jni::Class __CLASS;

	static ::java::nio::channels::ReadableByteChannel NewChannel(const ::java::io::InputStream& arg0);
	static ::java::nio::channels::WritableByteChannel NewChannel(const ::java::io::OutputStream& arg0);
	static ::java::io::InputStream NewInputStream(const ::java::nio::channels::AsynchronousByteChannel& arg0);
	static ::java::io::InputStream NewInputStream(const ::java::nio::channels::ReadableByteChannel& arg0);
	static ::java::io::OutputStream NewOutputStream(const ::java::nio::channels::AsynchronousByteChannel& arg0);
	static ::java::io::OutputStream NewOutputStream(const ::java::nio::channels::WritableByteChannel& arg0);
	static ::java::io::Reader NewReader(const ::java::nio::channels::ReadableByteChannel& arg0, const ::java::lang::String& arg1);
	static ::java::io::Reader NewReader(const ::java::nio::channels::ReadableByteChannel& arg0, const ::java::nio::charset::Charset& arg1);
	static ::java::io::Reader NewReader(const ::java::nio::channels::ReadableByteChannel& arg0, const ::java::nio::charset::CharsetDecoder& arg1, const ::jint& arg2);
	static ::java::io::Writer NewWriter(const ::java::nio::channels::WritableByteChannel& arg0, const ::java::lang::String& arg1);
	static ::java::io::Writer NewWriter(const ::java::nio::channels::WritableByteChannel& arg0, const ::java::nio::charset::Charset& arg1);
	static ::java::io::Writer NewWriter(const ::java::nio::channels::WritableByteChannel& arg0, const ::java::nio::charset::CharsetEncoder& arg1, const ::jint& arg2);
	explicit Channels(jobject o) : ::java::lang::Object(o) {}
	Channels(const Channels& o)  : ::java::lang::Object(o) {}

};

struct AsynchronousByteChannel : java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::nio::channels::AsynchronousChannel();
	::java::util::concurrent::Future Read(const ::java::nio::ByteBuffer& arg0) const;
	::jvoid Read(const ::java::nio::ByteBuffer& arg0, const ::java::lang::Object& arg1, const ::java::nio::channels::CompletionHandler& arg2) const;
	::java::util::concurrent::Future Write(const ::java::nio::ByteBuffer& arg0) const;
	::jvoid Write(const ::java::nio::ByteBuffer& arg0, const ::java::lang::Object& arg1, const ::java::nio::channels::CompletionHandler& arg2) const;
	explicit AsynchronousByteChannel(jobject o) : java::lang::Object(o) {}
	AsynchronousByteChannel(const AsynchronousByteChannel& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::nio::channels::AsynchronousByteChannel();
		operator ::java::nio::channels::AsynchronousChannel();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::java::util::concurrent::Future Read(const ::java::nio::ByteBuffer& arg0) = 0;
		virtual void Read(const ::java::nio::ByteBuffer& arg0, const ::java::lang::Object& arg1, const ::java::nio::channels::CompletionHandler& arg2) = 0;
		virtual ::java::util::concurrent::Future Write(const ::java::nio::ByteBuffer& arg0) = 0;
		virtual void Write(const ::java::nio::ByteBuffer& arg0, const ::java::lang::Object& arg1, const ::java::nio::channels::CompletionHandler& arg2) = 0;
	};
};

}}}

namespace java { namespace util { 
struct Scanner : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::util::Iterator();
	operator ::java::io::Closeable();
	::jvoid Close() const;
	::java::util::regex::Pattern Delimiter() const;
	::java::util::stream::Stream FindAll(const ::java::lang::String& arg0) const;
	::java::util::stream::Stream FindAll(const ::java::util::regex::Pattern& arg0) const;
	::java::lang::String FindInLine(const ::java::lang::String& arg0) const;
	::java::lang::String FindInLine(const ::java::util::regex::Pattern& arg0) const;
	::java::lang::String FindWithinHorizon(const ::java::lang::String& arg0, const ::jint& arg1) const;
	::java::lang::String FindWithinHorizon(const ::java::util::regex::Pattern& arg0, const ::jint& arg1) const;
	::jboolean HasNext() const;
	::jboolean HasNext(const ::java::lang::String& arg0) const;
	::jboolean HasNext(const ::java::util::regex::Pattern& arg0) const;
	::jboolean HasNextBigDecimal() const;
	::jboolean HasNextBigInteger() const;
	::jboolean HasNextBigInteger(const ::jint& arg0) const;
	::jboolean HasNextBoolean() const;
	::jboolean HasNextByte() const;
	::jboolean HasNextByte(const ::jint& arg0) const;
	::jboolean HasNextDouble() const;
	::jboolean HasNextFloat() const;
	::jboolean HasNextInt() const;
	::jboolean HasNextInt(const ::jint& arg0) const;
	::jboolean HasNextLine() const;
	::jboolean HasNextLong() const;
	::jboolean HasNextLong(const ::jint& arg0) const;
	::jboolean HasNextShort() const;
	::jboolean HasNextShort(const ::jint& arg0) const;
	::java::io::IOException IoException() const;
	::java::util::Locale Locale() const;
	::java::util::regex::MatchResult Match() const;
	::java::lang::String Next() const;
	::java::lang::String Next(const ::java::lang::String& arg0) const;
	::java::lang::String Next(const ::java::util::regex::Pattern& arg0) const;
	::java::math::BigDecimal NextBigDecimal() const;
	::java::math::BigInteger NextBigInteger() const;
	::java::math::BigInteger NextBigInteger(const ::jint& arg0) const;
	::jboolean NextBoolean() const;
	::jbyte NextByte() const;
	::jbyte NextByte(const ::jint& arg0) const;
	::jdouble NextDouble() const;
	::jfloat NextFloat() const;
	::jint NextInt() const;
	::jint NextInt(const ::jint& arg0) const;
	::java::lang::String NextLine() const;
	::jlong NextLong() const;
	::jlong NextLong(const ::jint& arg0) const;
	::jshort NextShort() const;
	::jshort NextShort(const ::jint& arg0) const;
	::jint Radix() const;
	::jvoid Remove() const;
	::java::util::Scanner Reset() const;
	::java::util::Scanner Skip(const ::java::lang::String& arg0) const;
	::java::util::Scanner Skip(const ::java::util::regex::Pattern& arg0) const;
	::java::lang::String ToString() const;
	::java::util::stream::Stream Tokens() const;
	::java::util::Scanner UseDelimiter(const ::java::lang::String& arg0) const;
	::java::util::Scanner UseDelimiter(const ::java::util::regex::Pattern& arg0) const;
	::java::util::Scanner UseLocale(const ::java::util::Locale& arg0) const;
	::java::util::Scanner UseRadix(const ::jint& arg0) const;
	static jobject __Constructor(const ::java::io::File& arg0);
	Scanner(const ::java::io::File& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::io::File& arg0, const ::java::lang::String& arg1);
	Scanner(const ::java::io::File& arg0, const ::java::lang::String& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::io::File& arg0, const ::java::nio::charset::Charset& arg1);
	Scanner(const ::java::io::File& arg0, const ::java::nio::charset::Charset& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::io::InputStream& arg0);
	Scanner(const ::java::io::InputStream& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::io::InputStream& arg0, const ::java::lang::String& arg1);
	Scanner(const ::java::io::InputStream& arg0, const ::java::lang::String& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::io::InputStream& arg0, const ::java::nio::charset::Charset& arg1);
	Scanner(const ::java::io::InputStream& arg0, const ::java::nio::charset::Charset& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::lang::Readable& arg0);
	Scanner(const ::java::lang::Readable& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::String& arg0);
	Scanner(const ::java::lang::String& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::nio::channels::ReadableByteChannel& arg0);
	Scanner(const ::java::nio::channels::ReadableByteChannel& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::nio::channels::ReadableByteChannel& arg0, const ::java::lang::String& arg1);
	Scanner(const ::java::nio::channels::ReadableByteChannel& arg0, const ::java::lang::String& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::nio::channels::ReadableByteChannel& arg0, const ::java::nio::charset::Charset& arg1);
	Scanner(const ::java::nio::channels::ReadableByteChannel& arg0, const ::java::nio::charset::Charset& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::nio::file::Path& arg0);
	Scanner(const ::java::nio::file::Path& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::nio::file::Path& arg0, const ::java::lang::String& arg1);
	Scanner(const ::java::nio::file::Path& arg0, const ::java::lang::String& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::nio::file::Path& arg0, const ::java::nio::charset::Charset& arg1);
	Scanner(const ::java::nio::file::Path& arg0, const ::java::nio::charset::Charset& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	explicit Scanner(jobject o) : ::java::lang::Object(o) {}
	Scanner(const Scanner& o)  : ::java::lang::Object(o) {}

};

}}

namespace java { namespace util { namespace regex { 
struct Pattern : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Serializable();
	static ::jint& fCANON_EQ();
	static ::jint& fCASE_INSENSITIVE();
	static ::jint& fCOMMENTS();
	static ::jint& fDOTALL();
	static ::jint& fLITERAL();
	static ::jint& fMULTILINE();
	static ::jint& fUNICODE_CASE();
	static ::jint& fUNICODE_CHARACTER_CLASS();
	static ::jint& fUNIX_LINES();
	::java::util::function::Predicate AsMatchPredicate() const;
	::java::util::function::Predicate AsPredicate() const;
	static ::java::util::regex::Pattern Compile(const ::java::lang::String& arg0);
	static ::java::util::regex::Pattern Compile(const ::java::lang::String& arg0, const ::jint& arg1);
	::jint Flags() const;
	::java::util::regex::Matcher Matcher(const ::java::lang::CharSequence& arg0) const;
	static ::jboolean Matches(const ::java::lang::String& arg0, const ::java::lang::CharSequence& arg1);
	::java::lang::String xPattern() const;
	static ::java::lang::String Quote(const ::java::lang::String& arg0);
	jni::Array< ::java::lang::String > Split(const ::java::lang::CharSequence& arg0) const;
	jni::Array< ::java::lang::String > Split(const ::java::lang::CharSequence& arg0, const ::jint& arg1) const;
	::java::util::stream::Stream SplitAsStream(const ::java::lang::CharSequence& arg0) const;
	::java::lang::String ToString() const;
	explicit Pattern(jobject o) : ::java::lang::Object(o) {}
	Pattern(const Pattern& o)  : ::java::lang::Object(o) {}

};

struct Matcher : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::util::regex::MatchResult();
	::java::util::regex::Matcher AppendReplacement(const ::java::lang::StringBuffer& arg0, const ::java::lang::String& arg1) const;
	::java::util::regex::Matcher AppendReplacement(const ::java::lang::StringBuilder& arg0, const ::java::lang::String& arg1) const;
	::java::lang::StringBuffer AppendTail(const ::java::lang::StringBuffer& arg0) const;
	::java::lang::StringBuilder AppendTail(const ::java::lang::StringBuilder& arg0) const;
	::jint End() const;
	::jint End(const ::jint& arg0) const;
	::jint End(const ::java::lang::String& arg0) const;
	::jboolean Find() const;
	::jboolean Find(const ::jint& arg0) const;
	::java::lang::String Group() const;
	::java::lang::String Group(const ::jint& arg0) const;
	::java::lang::String Group(const ::java::lang::String& arg0) const;
	::jint GroupCount() const;
	::jboolean HasAnchoringBounds() const;
	::jboolean HasTransparentBounds() const;
	::jboolean HitEnd() const;
	::jboolean LookingAt() const;
	::jboolean Matches() const;
	::java::util::regex::Pattern Pattern() const;
	static ::java::lang::String QuoteReplacement(const ::java::lang::String& arg0);
	::java::util::regex::Matcher Region(const ::jint& arg0, const ::jint& arg1) const;
	::jint RegionEnd() const;
	::jint RegionStart() const;
	::java::lang::String ReplaceAll(const ::java::lang::String& arg0) const;
	::java::lang::String ReplaceAll(const ::java::util::function::Function& arg0) const;
	::java::lang::String ReplaceFirst(const ::java::lang::String& arg0) const;
	::java::lang::String ReplaceFirst(const ::java::util::function::Function& arg0) const;
	::jboolean RequireEnd() const;
	::java::util::regex::Matcher Reset() const;
	::java::util::regex::Matcher Reset(const ::java::lang::CharSequence& arg0) const;
	::java::util::stream::Stream Results() const;
	::jint Start() const;
	::jint Start(const ::jint& arg0) const;
	::jint Start(const ::java::lang::String& arg0) const;
	::java::util::regex::MatchResult ToMatchResult() const;
	::java::lang::String ToString() const;
	::java::util::regex::Matcher UseAnchoringBounds(const ::jboolean& arg0) const;
	::java::util::regex::Matcher UsePattern(const ::java::util::regex::Pattern& arg0) const;
	::java::util::regex::Matcher UseTransparentBounds(const ::jboolean& arg0) const;
	explicit Matcher(jobject o) : ::java::lang::Object(o) {}
	Matcher(const Matcher& o)  : ::java::lang::Object(o) {}

};

struct MatchResult : java::lang::Object
{
	static jni::Class __CLASS;

	::jint End() const;
	::jint End(const ::jint& arg0) const;
	::java::lang::String Group() const;
	::java::lang::String Group(const ::jint& arg0) const;
	::jint GroupCount() const;
	::jint Start() const;
	::jint Start(const ::jint& arg0) const;
	explicit MatchResult(jobject o) : java::lang::Object(o) {}
	MatchResult(const MatchResult& o)  : java::lang::Object(o) {}

	struct __Proxy : public virtual jni::ProxyInvoker
	{
		operator ::java::util::regex::MatchResult();
	protected:
		bool __TryInvoke(jclass, jmethodID, jobjectArray, bool*, jobject*);
		virtual ::jint End() = 0;
		virtual ::jint End(const ::jint& arg0) = 0;
		virtual ::java::lang::String Group() = 0;
		virtual ::java::lang::String Group(const ::jint& arg0) = 0;
		virtual ::jint GroupCount() = 0;
		virtual ::jint Start() = 0;
		virtual ::jint Start(const ::jint& arg0) = 0;
	};
};

}}}

namespace java { namespace math { 
struct BigDecimal : ::java::lang::Number
{
	static jni::Class __CLASS;

	operator ::java::lang::Comparable();
	static ::java::math::BigDecimal& fONE();
	static ::jint& fROUND_CEILING();
	static ::jint& fROUND_DOWN();
	static ::jint& fROUND_FLOOR();
	static ::jint& fROUND_HALF_DOWN();
	static ::jint& fROUND_HALF_EVEN();
	static ::jint& fROUND_HALF_UP();
	static ::jint& fROUND_UNNECESSARY();
	static ::jint& fROUND_UP();
	static ::java::math::BigDecimal& fTEN();
	static ::java::math::BigDecimal& fZERO();
	::java::math::BigDecimal Abs() const;
	::java::math::BigDecimal Abs(const ::java::math::MathContext& arg0) const;
	::java::math::BigDecimal Add(const ::java::math::BigDecimal& arg0) const;
	::java::math::BigDecimal Add(const ::java::math::BigDecimal& arg0, const ::java::math::MathContext& arg1) const;
	::jbyte ByteValueExact() const;
	::jint CompareTo(const ::java::math::BigDecimal& arg0) const;
	::java::math::BigDecimal Divide(const ::java::math::BigDecimal& arg0) const;
	::java::math::BigDecimal Divide(const ::java::math::BigDecimal& arg0, const ::jint& arg1) const;
	::java::math::BigDecimal Divide(const ::java::math::BigDecimal& arg0, const ::jint& arg1, const ::jint& arg2) const;
	::java::math::BigDecimal Divide(const ::java::math::BigDecimal& arg0, const ::jint& arg1, const ::java::math::RoundingMode& arg2) const;
	::java::math::BigDecimal Divide(const ::java::math::BigDecimal& arg0, const ::java::math::MathContext& arg1) const;
	::java::math::BigDecimal Divide(const ::java::math::BigDecimal& arg0, const ::java::math::RoundingMode& arg1) const;
	jni::Array< ::java::math::BigDecimal > DivideAndRemainder(const ::java::math::BigDecimal& arg0) const;
	jni::Array< ::java::math::BigDecimal > DivideAndRemainder(const ::java::math::BigDecimal& arg0, const ::java::math::MathContext& arg1) const;
	::java::math::BigDecimal DivideToIntegralValue(const ::java::math::BigDecimal& arg0) const;
	::java::math::BigDecimal DivideToIntegralValue(const ::java::math::BigDecimal& arg0, const ::java::math::MathContext& arg1) const;
	::jdouble DoubleValue() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jfloat FloatValue() const;
	::jint HashCode() const;
	::jint IntValue() const;
	::jint IntValueExact() const;
	::jlong LongValue() const;
	::jlong LongValueExact() const;
	::java::math::BigDecimal Max(const ::java::math::BigDecimal& arg0) const;
	::java::math::BigDecimal Min(const ::java::math::BigDecimal& arg0) const;
	::java::math::BigDecimal MovePointLeft(const ::jint& arg0) const;
	::java::math::BigDecimal MovePointRight(const ::jint& arg0) const;
	::java::math::BigDecimal Multiply(const ::java::math::BigDecimal& arg0) const;
	::java::math::BigDecimal Multiply(const ::java::math::BigDecimal& arg0, const ::java::math::MathContext& arg1) const;
	::java::math::BigDecimal Negate() const;
	::java::math::BigDecimal Negate(const ::java::math::MathContext& arg0) const;
	::java::math::BigDecimal Plus() const;
	::java::math::BigDecimal Plus(const ::java::math::MathContext& arg0) const;
	::java::math::BigDecimal Pow(const ::jint& arg0) const;
	::java::math::BigDecimal Pow(const ::jint& arg0, const ::java::math::MathContext& arg1) const;
	::jint Precision() const;
	::java::math::BigDecimal Remainder(const ::java::math::BigDecimal& arg0) const;
	::java::math::BigDecimal Remainder(const ::java::math::BigDecimal& arg0, const ::java::math::MathContext& arg1) const;
	::java::math::BigDecimal Round(const ::java::math::MathContext& arg0) const;
	::jint Scale() const;
	::java::math::BigDecimal ScaleByPowerOfTen(const ::jint& arg0) const;
	::java::math::BigDecimal SetScale(const ::jint& arg0) const;
	::java::math::BigDecimal SetScale(const ::jint& arg0, const ::jint& arg1) const;
	::java::math::BigDecimal SetScale(const ::jint& arg0, const ::java::math::RoundingMode& arg1) const;
	::jshort ShortValueExact() const;
	::jint Signum() const;
	::java::math::BigDecimal Sqrt(const ::java::math::MathContext& arg0) const;
	::java::math::BigDecimal StripTrailingZeros() const;
	::java::math::BigDecimal Subtract(const ::java::math::BigDecimal& arg0) const;
	::java::math::BigDecimal Subtract(const ::java::math::BigDecimal& arg0, const ::java::math::MathContext& arg1) const;
	::java::math::BigInteger ToBigInteger() const;
	::java::math::BigInteger ToBigIntegerExact() const;
	::java::lang::String ToEngineeringString() const;
	::java::lang::String ToPlainString() const;
	::java::lang::String ToString() const;
	::java::math::BigDecimal Ulp() const;
	::java::math::BigInteger UnscaledValue() const;
	static ::java::math::BigDecimal ValueOf(const ::jdouble& arg0);
	static ::java::math::BigDecimal ValueOf(const ::jlong& arg0);
	static ::java::math::BigDecimal ValueOf(const ::jlong& arg0, const ::jint& arg1);
	static jobject __Constructor(const ::jdouble& arg0);
	BigDecimal(const ::jdouble& arg0) : ::java::lang::Number(__Constructor(arg0)) {}
	static jobject __Constructor(const ::jdouble& arg0, const ::java::math::MathContext& arg1);
	BigDecimal(const ::jdouble& arg0, const ::java::math::MathContext& arg1) : ::java::lang::Number(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::jint& arg0);
	BigDecimal(const ::jint& arg0) : ::java::lang::Number(__Constructor(arg0)) {}
	static jobject __Constructor(const ::jint& arg0, const ::java::math::MathContext& arg1);
	BigDecimal(const ::jint& arg0, const ::java::math::MathContext& arg1) : ::java::lang::Number(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::jlong& arg0);
	BigDecimal(const ::jlong& arg0) : ::java::lang::Number(__Constructor(arg0)) {}
	static jobject __Constructor(const ::jlong& arg0, const ::java::math::MathContext& arg1);
	BigDecimal(const ::jlong& arg0, const ::java::math::MathContext& arg1) : ::java::lang::Number(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::lang::String& arg0);
	BigDecimal(const ::java::lang::String& arg0) : ::java::lang::Number(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::java::math::MathContext& arg1);
	BigDecimal(const ::java::lang::String& arg0, const ::java::math::MathContext& arg1) : ::java::lang::Number(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::math::BigInteger& arg0);
	BigDecimal(const ::java::math::BigInteger& arg0) : ::java::lang::Number(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::math::BigInteger& arg0, const ::jint& arg1);
	BigDecimal(const ::java::math::BigInteger& arg0, const ::jint& arg1) : ::java::lang::Number(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::math::BigInteger& arg0, const ::jint& arg1, const ::java::math::MathContext& arg2);
	BigDecimal(const ::java::math::BigInteger& arg0, const ::jint& arg1, const ::java::math::MathContext& arg2) : ::java::lang::Number(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::java::math::BigInteger& arg0, const ::java::math::MathContext& arg1);
	BigDecimal(const ::java::math::BigInteger& arg0, const ::java::math::MathContext& arg1) : ::java::lang::Number(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const jni::Array< ::jchar >& arg0);
	BigDecimal(const jni::Array< ::jchar >& arg0) : ::java::lang::Number(__Constructor(arg0)) {}
	static jobject __Constructor(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2);
	BigDecimal(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2) : ::java::lang::Number(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2, const ::java::math::MathContext& arg3);
	BigDecimal(const jni::Array< ::jchar >& arg0, const ::jint& arg1, const ::jint& arg2, const ::java::math::MathContext& arg3) : ::java::lang::Number(__Constructor(arg0, arg1, arg2, arg3)) {}
	static jobject __Constructor(const jni::Array< ::jchar >& arg0, const ::java::math::MathContext& arg1);
	BigDecimal(const jni::Array< ::jchar >& arg0, const ::java::math::MathContext& arg1) : ::java::lang::Number(__Constructor(arg0, arg1)) {}
	explicit BigDecimal(jobject o) : ::java::lang::Number(o) {}
	BigDecimal(const BigDecimal& o)  : ::java::lang::Number(o) {}

};

struct MathContext : ::java::lang::Object
{
	static jni::Class __CLASS;

	operator ::java::io::Serializable();
	static ::java::math::MathContext& fDECIMAL128();
	static ::java::math::MathContext& fDECIMAL32();
	static ::java::math::MathContext& fDECIMAL64();
	static ::java::math::MathContext& fUNLIMITED();
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint GetPrecision() const;
	::java::math::RoundingMode GetRoundingMode() const;
	::jint HashCode() const;
	::java::lang::String ToString() const;
	static jobject __Constructor(const ::jint& arg0);
	MathContext(const ::jint& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	static jobject __Constructor(const ::jint& arg0, const ::java::math::RoundingMode& arg1);
	MathContext(const ::jint& arg0, const ::java::math::RoundingMode& arg1) : ::java::lang::Object(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::lang::String& arg0);
	MathContext(const ::java::lang::String& arg0) : ::java::lang::Object(__Constructor(arg0)) {}
	explicit MathContext(jobject o) : ::java::lang::Object(o) {}
	MathContext(const MathContext& o)  : ::java::lang::Object(o) {}

};

struct RoundingMode : ::java::lang::Enum
{
	static jni::Class __CLASS;

	static ::java::math::RoundingMode& fCEILING();
	static ::java::math::RoundingMode& fDOWN();
	static ::java::math::RoundingMode& fFLOOR();
	static ::java::math::RoundingMode& fHALF_DOWN();
	static ::java::math::RoundingMode& fHALF_EVEN();
	static ::java::math::RoundingMode& fHALF_UP();
	static ::java::math::RoundingMode& fUNNECESSARY();
	static ::java::math::RoundingMode& fUP();
	static ::java::math::RoundingMode ValueOf(const ::jint& arg0);
	static ::java::math::RoundingMode ValueOf(const ::java::lang::String& arg0);
	static jni::Array< ::java::math::RoundingMode > Values();
	explicit RoundingMode(jobject o) : ::java::lang::Enum(o) {}
	RoundingMode(const RoundingMode& o)  : ::java::lang::Enum(o) {}

};

struct BigInteger : ::java::lang::Number
{
	static jni::Class __CLASS;

	operator ::java::lang::Comparable();
	static ::java::math::BigInteger& fONE();
	static ::java::math::BigInteger& fTEN();
	static ::java::math::BigInteger& fTWO();
	static ::java::math::BigInteger& fZERO();
	::java::math::BigInteger Abs() const;
	::java::math::BigInteger Add(const ::java::math::BigInteger& arg0) const;
	::java::math::BigInteger And(const ::java::math::BigInteger& arg0) const;
	::java::math::BigInteger AndNot(const ::java::math::BigInteger& arg0) const;
	::jint BitCount() const;
	::jint BitLength() const;
	::jbyte ByteValueExact() const;
	::java::math::BigInteger ClearBit(const ::jint& arg0) const;
	::jint CompareTo(const ::java::math::BigInteger& arg0) const;
	::java::math::BigInteger Divide(const ::java::math::BigInteger& arg0) const;
	jni::Array< ::java::math::BigInteger > DivideAndRemainder(const ::java::math::BigInteger& arg0) const;
	::jdouble DoubleValue() const;
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::java::math::BigInteger FlipBit(const ::jint& arg0) const;
	::jfloat FloatValue() const;
	::java::math::BigInteger Gcd(const ::java::math::BigInteger& arg0) const;
	::jint GetLowestSetBit() const;
	::jint HashCode() const;
	::jint IntValue() const;
	::jint IntValueExact() const;
	::jboolean IsProbablePrime(const ::jint& arg0) const;
	::jlong LongValue() const;
	::jlong LongValueExact() const;
	::java::math::BigInteger Max(const ::java::math::BigInteger& arg0) const;
	::java::math::BigInteger Min(const ::java::math::BigInteger& arg0) const;
	::java::math::BigInteger Mod(const ::java::math::BigInteger& arg0) const;
	::java::math::BigInteger ModInverse(const ::java::math::BigInteger& arg0) const;
	::java::math::BigInteger ModPow(const ::java::math::BigInteger& arg0, const ::java::math::BigInteger& arg1) const;
	::java::math::BigInteger Multiply(const ::java::math::BigInteger& arg0) const;
	::java::math::BigInteger Negate() const;
	::java::math::BigInteger NextProbablePrime() const;
	::java::math::BigInteger Not() const;
	::java::math::BigInteger Or(const ::java::math::BigInteger& arg0) const;
	::java::math::BigInteger Pow(const ::jint& arg0) const;
	static ::java::math::BigInteger ProbablePrime(const ::jint& arg0, const ::java::util::Random& arg1);
	::java::math::BigInteger Remainder(const ::java::math::BigInteger& arg0) const;
	::java::math::BigInteger SetBit(const ::jint& arg0) const;
	::java::math::BigInteger ShiftLeft(const ::jint& arg0) const;
	::java::math::BigInteger ShiftRight(const ::jint& arg0) const;
	::jshort ShortValueExact() const;
	::jint Signum() const;
	::java::math::BigInteger Sqrt() const;
	jni::Array< ::java::math::BigInteger > SqrtAndRemainder() const;
	::java::math::BigInteger Subtract(const ::java::math::BigInteger& arg0) const;
	::jboolean TestBit(const ::jint& arg0) const;
	jni::Array< ::jbyte > ToByteArray() const;
	::java::lang::String ToString() const;
	::java::lang::String ToString(const ::jint& arg0) const;
	static ::java::math::BigInteger ValueOf(const ::jlong& arg0);
	::java::math::BigInteger Xor(const ::java::math::BigInteger& arg0) const;
	static jobject __Constructor(const ::jint& arg0, const ::jint& arg1, const ::java::util::Random& arg2);
	BigInteger(const ::jint& arg0, const ::jint& arg1, const ::java::util::Random& arg2) : ::java::lang::Number(__Constructor(arg0, arg1, arg2)) {}
	static jobject __Constructor(const ::jint& arg0, const ::java::util::Random& arg1);
	BigInteger(const ::jint& arg0, const ::java::util::Random& arg1) : ::java::lang::Number(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::jint& arg0, const jni::Array< ::jbyte >& arg1);
	BigInteger(const ::jint& arg0, const jni::Array< ::jbyte >& arg1) : ::java::lang::Number(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::jint& arg0, const jni::Array< ::jbyte >& arg1, const ::jint& arg2, const ::jint& arg3);
	BigInteger(const ::jint& arg0, const jni::Array< ::jbyte >& arg1, const ::jint& arg2, const ::jint& arg3) : ::java::lang::Number(__Constructor(arg0, arg1, arg2, arg3)) {}
	static jobject __Constructor(const ::java::lang::String& arg0);
	BigInteger(const ::java::lang::String& arg0) : ::java::lang::Number(__Constructor(arg0)) {}
	static jobject __Constructor(const ::java::lang::String& arg0, const ::jint& arg1);
	BigInteger(const ::java::lang::String& arg0, const ::jint& arg1) : ::java::lang::Number(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const jni::Array< ::jbyte >& arg0);
	BigInteger(const jni::Array< ::jbyte >& arg0) : ::java::lang::Number(__Constructor(arg0)) {}
	static jobject __Constructor(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::jint& arg2);
	BigInteger(const jni::Array< ::jbyte >& arg0, const ::jint& arg1, const ::jint& arg2) : ::java::lang::Number(__Constructor(arg0, arg1, arg2)) {}
	explicit BigInteger(jobject o) : ::java::lang::Number(o) {}
	BigInteger(const BigInteger& o)  : ::java::lang::Number(o) {}

};

}}

namespace java { namespace util { 
struct AbstractSet : ::java::util::AbstractCollection
{
	static jni::Class __CLASS;

	operator ::java::util::Set();
	::jboolean Equals(const ::java::lang::Object& arg0) const;
	::jint HashCode() const;
	::jboolean RemoveAll(const ::java::util::Collection& arg0) const;
	static jobject __Constructor();
	AbstractSet() : ::java::util::AbstractCollection(__Constructor()) {}
	explicit AbstractSet(jobject o) : ::java::util::AbstractCollection(o) {}
	AbstractSet(const AbstractSet& o)  : ::java::util::AbstractCollection(o) {}

};

struct HashSet : ::java::util::AbstractSet
{
	static jni::Class __CLASS;

	operator ::java::util::Set();
	operator ::java::lang::Cloneable();
	operator ::java::io::Serializable();
	::jboolean Add(const ::java::lang::Object& arg0) const;
	::jvoid Clear() const;
	::java::lang::Object Clone() const;
	::jboolean Contains(const ::java::lang::Object& arg0) const;
	::jboolean IsEmpty() const;
	::java::util::Iterator Iterator() const;
	::jboolean Remove(const ::java::lang::Object& arg0) const;
	::jint Size() const;
	::java::util::Spliterator Spliterator() const;
	static jobject __Constructor();
	HashSet() : ::java::util::AbstractSet(__Constructor()) {}
	static jobject __Constructor(const ::jint& arg0);
	HashSet(const ::jint& arg0) : ::java::util::AbstractSet(__Constructor(arg0)) {}
	static jobject __Constructor(const ::jint& arg0, const ::jfloat& arg1);
	HashSet(const ::jint& arg0, const ::jfloat& arg1) : ::java::util::AbstractSet(__Constructor(arg0, arg1)) {}
	static jobject __Constructor(const ::java::util::Collection& arg0);
	HashSet(const ::java::util::Collection& arg0) : ::java::util::AbstractSet(__Constructor(arg0)) {}
	explicit HashSet(jobject o) : ::java::util::AbstractSet(o) {}
	HashSet(const HashSet& o)  : ::java::util::AbstractSet(o) {}

};

struct NoSuchElementException : ::java::lang::RuntimeException
{
	static jni::Class __CLASS;

	static jobject __Constructor();
	NoSuchElementException() : ::java::lang::RuntimeException(__Constructor()) {}
	static jobject __Constructor(const ::java::lang::String& arg0);
	NoSuchElementException(const ::java::lang::String& arg0) : ::java::lang::RuntimeException(__Constructor(arg0)) {}
	explicit NoSuchElementException(jobject o) : ::java::lang::RuntimeException(o) {}
	NoSuchElementException(const NoSuchElementException& o)  : ::java::lang::RuntimeException(o) {}

};

}}

